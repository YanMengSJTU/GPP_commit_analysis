diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0d18323e..6f514455 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,14 @@
+## Version 3.9.0 (July 1, 2015)
+
+- Added **VAST 3.0** standard support for video ads.
+- Improved **video player UX**.
+- Added **RecyclerView** support for native ads. See the [integration guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-with-Recycler-View).
+- Improved **deep link** handling.
+- Bug Fixes:
+  - MRAID video interstitials now play automatically when displayed on Jellybean MR1 and newer.
+  - MRAID relative assets are correctly rendered.
+  - MoPubLog no longer duplicates some messages.
+
 ## Version 3.8.0 (June 1, 2015)
 
 - Updated Chartboost support to 5.3.0. This introduces a new shared class called ChartboostShared. If you are using Chartboost Custom Native Networks you will need to include this class in your build along with ChartboostInterstitial.
diff --git a/README.md b/README.md
index e8517fe9..fe5be9b5 100644
--- a/README.md
+++ b/README.md
@@ -9,9 +9,9 @@ Sign up for an account at [http://app.mopub.com/](http://app.mopub.com/).
 You can find integration documentation on our [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started) and
 additional help documentation on our [developer help site](http://dev.twitter.com/mopub). 
 
-To file an issue with our team visit the [MoPub Forum](https://twittercommunity.com/c/fabric/mopub). 
+To file an issue with our team visit the [MoPub Forum](https://twittercommunity.com/c/fabric/mopub) or email [support@mopub.com](mailto:support@mopub.com).
 
-**Note: We will be deprecating the use of GitHub issues in the near future and migrating all issues to the forum to provide a faster response time.**
+**Please Note: We no longer accept GitHub Issues**
 
 ## Download
 
@@ -34,13 +34,21 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-- Updated Chartboost support to 5.3.0. This introduces a new shared class called ChartboostShared. If you are using Chartboost Custom Native Networks you will need to include this class in your build along with ChartboostInterstitial.
+- Added **VAST 3.0** standard support for video ads.
+- Improved **video player UX**.
+- Added **RecyclerView** support for native ads. See the [integration guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-with-Recycler-View).
+- Improved **deep link** handling.
+- Bug Fixes:
+  - MRAID video interstitials now play automatically when displayed on Jellybean MR1 and newer.
+  - MRAID relative assets are correctly rendered.
+  - MoPubLog no longer duplicates some messages.
 
 ## Requirements
 
 - Android 2.3.1 (API Version 9) and up
 - android-support-v4.jar, r22 (**Updated in 3.7.0**)
 - android-support-annotations.jar, r22 (**Updated in 3.7.0**)
+- android-support-v7-recyclerview.jar, r22 (**Updated in 3.9.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
 - **Recommended** Google Play Services 7.0.0
 
diff --git a/build.gradle b/build.gradle
index 4d45b8be..177eb6d1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,17 +1,19 @@
-// Top-level build file where you can add configuration options common to all sub-projects/modules.
-
-apply plugin: 'com.github.ben-manes.versions'
-
-buildscript {
-    repositories {
-        jcenter()
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.0-beta2'
-        classpath 'com.github.ben-manes:gradle-versions-plugin:0.10.1'
-    }
-}
-
-task wrapper(type: Wrapper) {
-    gradleVersion = '2.3.0'
-}
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+apply plugin: 'com.github.ben-manes.versions'
+
+buildscript {
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.3.0-beta4'
+        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
+        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
+    }
+}
+
+task wrapper(type: Wrapper) {
+    gradleVersion = '2.4.0'
+}
diff --git a/gradle.properties b/gradle.properties
index 91757ae7..bfe2a4cc 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-VERSION_NAME=3.8.0
+VERSION_NAME=3.9.0
 GROUP=com.robbypond
 
 POM_DESCRIPTION=A fork of the Mopub Android Sdk
@@ -10,4 +10,7 @@ POM_LICENCE_NAME=The Apache Software License, Version 2.0
 POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
 POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=robbypond
-POM_DEVELOPER_NAME=Robby Pond
\ No newline at end of file
+POM_DEVELOPER_NAME=Robby Pond
+
+org.gradle.jvmargs=-Xmx8192m -XX:MaxPermSize=2048m
+org.gradle.daemon=false
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 0c23ce4c..944023d6 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="25"
-      android:versionName="3.8.0">
-    <uses-sdk android:minSdkVersion="9" 
+      android:versionCode="26"
+      android:versionName="3.9.0">
+    <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="22"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index c9bb0ed9..9b11ea1c 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -13,8 +13,8 @@ android {
     buildToolsVersion '22.0.1'
 
     defaultConfig {
-        versionCode 25
-        versionName "3.8.0"
+        versionCode 26
+        versionName "3.9.0"
         minSdkVersion 9
         targetSdkVersion 22
     }
@@ -22,26 +22,26 @@ android {
     buildTypes {
       release {
         minifyEnabled true
-        proguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg']
+        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
       }
       debug {
-        minifyEnabled true
-        proguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg']
+        minifyEnabled false
+        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
       }
     }
 
     sourceSets {
         main {
             manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src/main']
-            resources.srcDirs = ['src/main']
+            java.srcDirs = ['src/main/java']
+            resources.srcDirs = ['src/main/java']
             aidl.srcDirs = ['src/main']
             renderscript.srcDirs = ['src/main']
             res.srcDirs = ['res']
             assets.srcDirs = ['assets']
         }
 
-        androidTest.setRoot('src/test')
+        test.setRoot('src/test')
     }
 
     // Note: You will also need a local.properties file to set the location of the SDK in the same 
@@ -53,5 +53,6 @@ android {
 dependencies {
     compile 'com.android.support:support-v4:22.1.1'
     compile 'com.google.android.gms:play-services-ads:7.3.0'
+    compile 'com.android.support:recyclerview-v7:22.0.0'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
index a890ebfc..0dcb3851 100644
--- a/mopub-sample/pom.xml
+++ b/mopub-sample/pom.xml
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 <?xml version="1.0" encoding="UTF-8"?>
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
@@ -136,3 +137,108 @@
         </plugins>
     </build>
 </project>
+=======
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>com.mopub.mobileads</groupId>
+        <artifactId>mopub-android</artifactId>
+        <version>1.0</version>
+    </parent>
+
+    <artifactId>mopub-sample</artifactId>
+    <version>1.0.0-SNAPSHOT</version>
+    <packaging>apk</packaging>
+    <name>MoPub Simple Ads Demo</name>
+    <description>Sample application that demonstrates how to use the MoPub SDK.</description>
+
+    <properties>
+        <robolectric.version>2.1</robolectric.version>
+    </properties>
+
+    <dependencies>
+
+        <!--main-->
+
+        <dependency>
+            <groupId>com.mopub.mobileads</groupId>
+            <artifactId>mopub-sdk</artifactId>
+            <version>1.0.0-SNAPSHOT</version>
+            <type>aar</type>
+        </dependency>
+
+        <dependency>
+            <groupId>com.android.support</groupId>
+            <artifactId>support-v4</artifactId>
+            <version>22.0.0</version>
+            <type>aar</type>
+        </dependency>
+
+        <dependency>
+            <groupId>com.android.support</groupId>
+            <artifactId>recyclerview-v7</artifactId>
+            <version>22.0.0</version>
+            <type>aar</type>
+        </dependency>
+        
+        <dependency>
+            <groupId>com.google.android.gms</groupId>
+            <artifactId>play-services-ads</artifactId>
+            <version>7.0.0</version>
+            <type>aar</type>
+        </dependency>
+
+        <dependency> <groupId>com.google.android</groupId>
+            <artifactId>android</artifactId>
+            <version>4.4.2</version>
+            <scope>provided</scope>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <finalName>${project.artifactId}</finalName>
+
+        <plugins>
+            <plugin>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>2.3.2</version>
+                <!-- Skip tests. We use Gradle to build and run tests. -->
+                <executions>
+                    <execution>
+                        <id>default-testCompile</id>
+                        <phase>test-compile</phase>
+                        <goals>
+                            <goal>testCompile</goal>
+                        </goals>
+                        <configuration>
+                            <skip>true</skip>
+                        </configuration>
+                    </execution>
+                </executions>
+                <configuration>
+                    <source>7</source>
+                    <target>7</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>com.simpligility.maven.plugins</groupId>
+                <artifactId>android-maven-plugin</artifactId>
+                <version>4.2.0</version>
+                <configuration>
+                    <androidManifestFile>AndroidManifest.xml</androidManifestFile>
+                    <resourceDirectory>res</resourceDirectory>
+                    <sdk>
+                        <!-- platform or api level (api level 4 = platform 1.6)-->
+                        <platform>22</platform>
+                    </sdk>
+                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
+                </configuration>
+                <extensions>true</extensions>
+            </plugin>
+        </plugins>
+    </build>
+</project>
+>>>>>>> upstream/master
diff --git a/mopub-sample/res/layout/recycler_view_fragment.xml b/mopub-sample/res/layout/recycler_view_fragment.xml
new file mode 100644
index 00000000..0d04e5a9
--- /dev/null
+++ b/mopub-sample/res/layout/recycler_view_fragment.xml
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical" android:layout_width="match_parent"
+              android:layout_height="match_parent">
+    <TextView
+        android:id="@+id/description"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:paddingTop="8dp"
+        android:singleLine="true"
+        android:textColor="?android:attr/textColorPrimary"
+        android:textSize="16sp"
+        android:textStyle="bold"/>
+
+    <TextView
+        android:id="@+id/ad_unit_id"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:singleLine="true"
+        android:textColor="?android:attr/textColorSecondary"
+        android:textSize="14sp"
+        android:textStyle="normal"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <EditText
+            android:id="@+id/keywords_field"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="3"
+            android:hint="@string/keywords"
+            android:imeOptions="actionDone"
+            android:inputType="text|textFilter|textShortMessage"
+            android:singleLine="true"/>
+
+        <Button
+            android:id="@+id/load_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/load_ad"/>
+
+        <Button
+            android:id="@+id/switch_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/switch_layout"/>
+    </LinearLayout>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/native_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:padding="5dp" />
+
+</LinearLayout>
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index b8c79761..f3b287a3 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <string name="app_name">MoPub Sample App</string>
@@ -21,3 +22,30 @@
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
 </resources>
+=======
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">MoPub Sample App</string>
+    <string name="keywords">Keywords (optional)</string>
+    <string name="load_ad">Load Ad</string>
+    <string name="refresh_ad">Refresh Ad</string>
+    <string name="switch_layout">Switch Layout</string>
+    <string name="show_ad">Show Ad</string>
+    <string name="native_icon_image">native_icon_image</string>
+    <string name="native_main_image">native_main_image</string>
+    <string name="learn_more">Learn More</string>
+    <string name="save">Save Ad Unit</string>
+    <string name="ad_unit_id">Ad Unit Id:</string>
+    <string name="ad_unit_hint">Enter Ad Unit Id</string>
+    <string name="ad_unit_name">Name:</string>
+    <string name="ad_unit_name_hint">Enter Name</string>
+    <string name="ad_type">Ad Type:</string>
+    <string name="add_ad_unit_title">Add an Ad Unit</string>
+    <string name="add_ad_unit_button">Add an Ad Unit</string>
+    <string name="ad_unit_id_banner">b195f8dd8ded45fe847ad89ed1d016da</string>
+    <string name="ad_unit_id_mrect">252412d5e9364a05ab77d9396346d73d</string>
+    <string name="ad_unit_id_interstitial">24534e1901884e398f1253216226017e</string>
+    <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
+    <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
+</resources>
+>>>>>>> upstream/master
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index 6db46fa4..47e13226 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.simpleadsdemo;
 
 import android.content.Context;
@@ -91,3 +92,90 @@ public void close() throws SecurityException {
     }
 }
 
+=======
+package com.mopub.simpleadsdemo;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.logging.Handler;
+import java.util.logging.LogManager;
+import java.util.logging.LogRecord;
+import java.util.logging.Logger;
+
+/**
+ * Used to intercept logs so that we can view logs at a lower level
+ * than Verbose (ie. Level.FINEST). This will show a toast when we
+ * receive a matching error from the mopub sdk.
+ */
+public class LoggingUtils {
+    private LoggingUtils() {
+    }
+
+    private static boolean sEnabled;
+
+    /**
+     * Makes it so that this app can intercept Level.FINEST log messages.
+     * This is not thread safe.
+     *
+     * @param context Needs a context to send toasts.
+     */
+    static void enableCanaryLogging(@NonNull final Context context) {
+        if (sEnabled) {
+            return;
+        }
+
+        // This makes sure the static block in MoPubLog is executed before
+        // LogManager#getLogManager is called.
+        MoPubLog.c("Canary level logging enabled");
+
+        final Handler handler = new SampleAppLogHandler(context.getApplicationContext());
+        final Logger logger = getLogger();
+        logger.addHandler(handler);
+
+        sEnabled = true;
+    }
+
+    private static Logger getLogger() {
+        return LogManager.getLogManager().getLogger(MoPubLog.LOGGER_NAMESPACE);
+    }
+
+    private static class SampleAppLogHandler extends Handler {
+
+        @NonNull
+        private final Context mContext;
+
+        protected SampleAppLogHandler(@NonNull final Context context) {
+            super();
+            mContext = context;
+        }
+
+        @Override
+        public void publish(final LogRecord logRecord) {
+            if (logRecord == null) {
+                return;
+            }
+            // Toasts the warmup message if X-Warmup flag is set to 1
+            if (MoPubErrorCode.WARMUP.toString().equals(logRecord.getMessage())) {
+                Utils.logToast(mContext, MoPubErrorCode.WARMUP.toString());
+            }
+            // Toasts the no connection message if a native response failed due to no internet
+            if (MoPubErrorCode.NO_CONNECTION.toString().equals(logRecord.getMessage())) {
+                Utils.logToast(mContext, MoPubErrorCode.NO_CONNECTION.toString());
+            }
+        }
+
+        @Override
+        public void flush() {
+        }
+
+        @Override
+        public void close() throws SecurityException {
+        }
+    }
+}
+
+>>>>>>> upstream/master
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
index 40b417fb..af774f91 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
@@ -13,6 +13,7 @@
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
 
 class MoPubSQLiteHelper extends SQLiteOpenHelper {
@@ -24,7 +25,7 @@
     public static final String COLUMN_AD_TYPE = "adType";
 
     private static final String DATABASE_NAME = "savedConfigurations.db";
-    private static final int DATABASE_VERSION = 2;
+    private static final int DATABASE_VERSION = 3;
 
     private static final String DATABASE_CREATE = "create table " + TABLE_AD_CONFIGURATIONS
             + " ("
@@ -69,6 +70,11 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
                         .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
                         .description("MoPub Ad Placer Sample")
                         .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
+                        .description("MoPub Recycler View Sample")
+                        .build());
         adUnitList.add(
                 new MoPubSampleAdUnit
                         .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index 3e2b7dac..724656ff 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -21,6 +21,7 @@
         INTERSTITIAL("Interstitial", InterstitialDetailFragment.class),
         REWARDED_VIDEO("Rewarded Video", RewardedVideoDetailFragment.class),
         LIST_VIEW("Native List View", NativeListViewFragment.class),
+        RECYCLER_VIEW("Native Recycler View", NativeRecyclerViewFragment.class),
         CUSTOM_NATIVE("Native Gallery (Custom Stream)", NativeGalleryFragment.class);
 
         String getName() {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
new file mode 100644
index 00000000..29feeac4
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -0,0 +1,154 @@
+package com.mopub.simpleadsdemo;
+
+
+import android.location.Location;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mopub.nativeads.MoPubNativeAdPositioning;
+import com.mopub.nativeads.MoPubRecyclerAdapter;
+import com.mopub.nativeads.RequestParameters;
+import com.mopub.nativeads.ViewBinder;
+
+import java.util.EnumSet;
+import java.util.Locale;
+
+public class NativeRecyclerViewFragment extends Fragment {
+    private MoPubRecyclerAdapter mRecyclerAdapter;
+    private MoPubSampleAdUnit mAdConfiguration;
+    private RequestParameters mRequestParameters;
+    private enum LayoutType { LINEAR, GRID };
+    private LayoutType mLayoutType;
+    private RecyclerView mRecyclerView;
+
+    @Override
+    public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGroup container,
+            @Nullable final Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+
+        mAdConfiguration = MoPubSampleAdUnit.fromBundle(getArguments());
+        final View view = inflater.inflate(R.layout.recycler_view_fragment, container, false);
+        mRecyclerView = (RecyclerView) view.findViewById(R.id.native_recycler_view);
+        final DetailFragmentViewHolder viewHolder = DetailFragmentViewHolder.fromView(view);
+        final Button switchButton = (Button) view.findViewById(R.id.switch_button);
+        switchButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                toggleRecyclerLayout();
+            }
+        });
+
+        viewHolder.mLoadButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                // If your app already has location access, include it here.
+                final Location location = null;
+                final String keywords = viewHolder.mKeywordsField.getText().toString();
+
+                // Setting desired assets on your request helps native ad networks and bidders
+                // provide higher-quality ads.
+                final EnumSet<RequestParameters.NativeAdAsset> desiredAssets = EnumSet.of(
+                        RequestParameters.NativeAdAsset.TITLE,
+                        RequestParameters.NativeAdAsset.TEXT,
+                        RequestParameters.NativeAdAsset.ICON_IMAGE,
+                        RequestParameters.NativeAdAsset.MAIN_IMAGE,
+                        RequestParameters.NativeAdAsset.CALL_TO_ACTION_TEXT);
+
+                mRequestParameters = new RequestParameters.Builder()
+                        .location(location)
+                        .keywords(keywords)
+                        .desiredAssets(desiredAssets)
+                        .build();
+
+                if (mRecyclerAdapter != null) {
+                    mRecyclerAdapter.refreshAds(mAdConfiguration.getAdUnitId(), mRequestParameters);
+                }
+            }
+        });
+        final String adUnitId = mAdConfiguration.getAdUnitId();
+        viewHolder.mDescriptionView.setText(mAdConfiguration.getDescription());
+        viewHolder.mAdUnitIdView.setText(adUnitId);
+
+        final RecyclerView.Adapter originalAdapter = new DemoRecyclerAdapter();
+
+        mRecyclerAdapter = new MoPubRecyclerAdapter(getActivity(), originalAdapter,
+                new MoPubNativeAdPositioning.MoPubServerPositioning());
+        mRecyclerAdapter.registerViewBinder(new ViewBinder.Builder(R.layout.native_ad_list_item)
+                .titleId(R.id.native_title)
+                .textId(R.id.native_text)
+                .mainImageId(R.id.native_main_image)
+                .iconImageId(R.id.native_icon_image)
+                .callToActionId(R.id.native_cta)
+                .build());
+
+        mRecyclerView.setAdapter(mRecyclerAdapter);
+        mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
+        mLayoutType = LayoutType.LINEAR;
+        mRecyclerAdapter.loadAds(mAdConfiguration.getAdUnitId());
+        return view;
+    }
+
+    void toggleRecyclerLayout() {
+        if (mLayoutType == LayoutType.LINEAR) {
+            mLayoutType = LayoutType.GRID;
+            mRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(), 2));
+        } else {
+            mLayoutType = LayoutType.LINEAR;
+            mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
+        }
+    }
+
+    @Override
+    public void onDestroyView() {
+        // You must call this or the ad adapter may cause a memory leak.
+        mRecyclerAdapter.destroy();
+        super.onDestroyView();
+    }
+
+    private static class DemoRecyclerAdapter extends RecyclerView.Adapter<DemoViewHolder> {
+        private static final int ITEM_COUNT = 150;
+        @Override
+        public DemoViewHolder onCreateViewHolder(final ViewGroup parent,
+                final int viewType) {
+            final View itemView = LayoutInflater.from(parent.getContext())
+                    .inflate(android.R.layout.simple_list_item_1, parent, false);
+            return new DemoViewHolder(itemView);
+        }
+
+        @Override
+        public void onBindViewHolder(final DemoViewHolder holder, final int position) {
+            holder.textView.setText(String.format(Locale.US, "Content Item #%d", position));
+        }
+
+        @Override
+        public long getItemId(final int position) {
+            return (long) position;
+        }
+
+        @Override
+        public int getItemCount() {
+            return ITEM_COUNT;
+        }
+    }
+
+    /**
+     * A view holder for R.layout.simple_list_item_1
+     */
+    private static class DemoViewHolder extends RecyclerView.ViewHolder {
+        public final TextView textView;
+
+        public DemoViewHolder(final View itemView) {
+            super(itemView);
+            textView = (TextView) itemView.findViewById(android.R.id.text1);
+        }
+    }
+}
diff --git a/mopub-sdk/AndroidManifest.xml b/mopub-sdk/AndroidManifest.xml
index 6c809602..66f4309d 100644
--- a/mopub-sdk/AndroidManifest.xml
+++ b/mopub-sdk/AndroidManifest.xml
@@ -1,10 +1,10 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-		package="com.mopub.mobileads"
-		android:versionCode="1"
-		android:versionName="1.0">
-	<uses-sdk
-        android:minSdkVersion="9"
-        android:targetSdkVersion="22"/>
-    <application/>
-</manifest>
\ No newline at end of file
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.mopub.mobileads"
+          android:versionCode="1"
+          android:versionName="1.0">
+    <uses-sdk
+        android:minSdkVersion="9"
+        android:targetSdkVersion="22"/>
+    <application/>
+</manifest>
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index fcf8b868..5081b02e 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -5,6 +5,7 @@ repositories {
 }
 
 apply plugin: 'com.android.library'
+//apply plugin: 'org.robolectric'
 
 group = 'com.mopub'
 
@@ -15,8 +16,8 @@ android {
     buildToolsVersion '22.0.1'
 
     defaultConfig {
-        versionCode 25
-        versionName "3.8.0"
+        versionCode 26
+        versionName "3.9.0"
         minSdkVersion 9
         targetSdkVersion 22
         consumerProguardFiles 'proguard.txt'
@@ -34,11 +35,33 @@ android {
         }
     }
 
+    testOptions {
+        unitTests {
+            // This causes android platform methods from the test JAR
+            // to return null, false, etc instead of throwing an exception.
+            // We should periodically disable this and tackle the broken tests
+            // as it exposes when we are hitting platform APIs in our tests.
+            // If these tests *require* platform APIs we may want to make them
+            // connected tests instead.
+            returnDefaultValues = true
+
+            // Test JVM settings since we have a lot of classes loaded.
+            all {
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
+                forkEvery 200
+            }
+        }
+    }
+
     buildTypes {
         release {
             minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard.txt')
         }
+      
+        debug {
+            minifyEnabled false
+        }
     }
 
     // Note: You will also need a local.properties file to set the location of the SDK in the same 
@@ -47,10 +70,17 @@ android {
     // difference between the two methods, you can use the one you prefer.
 }
 
+
 dependencies {
     compile 'com.android.support:support-v4:22.2.0'
     compile 'com.android.support:support-annotations:22.2.0'
+    compile 'com.android.support:recyclerview-v7:22.2.0'
     compile 'com.mopub.volley:mopub-volley:1.1.0'
+
+    testCompile 'junit:junit:4.12'
+    testCompile 'org.robolectric:robolectric:3.0-rc3'
+    testCompile 'com.squareup:fest-android:1.0.8'
+    testCompile 'org.mockito:mockito-core:2.0.26-beta'
 }
 
 apply plugin: 'maven'
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index 20adf591..892c7999 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -15,10 +15,6 @@
     <name>MoPub SDK</name>
     <description>The SDK for MoPub developers.</description>
 
-    <properties>
-        <robolectric.version>2.1</robolectric.version>
-    </properties>
-
     <dependencies>
 
         <!--main-->
@@ -35,49 +31,20 @@
             <type>aar</type>
         </dependency>
 
+        <dependency>
+            <groupId>com.android.support</groupId>
+            <artifactId>recyclerview-v7</artifactId>
+            <version>22.0.0</version>
+            <type>aar</type>
+        </dependency>
+        
         <dependency>
             <groupId>com.mopub.volley</groupId>
             <artifactId>mopub-volley</artifactId>
             <version>1.1.0</version>
         </dependency>
 
-        <!--test-->
-        <dependency>
-            <groupId>org.apache.httpcomponents</groupId>
-            <artifactId>httpclient</artifactId>
-            <version>4.0.3</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.squareup</groupId>
-            <artifactId>fest-android</artifactId>
-            <version>1.0.7</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit-dep</artifactId>
-            <version>4.10</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.mockito</groupId>
-            <artifactId>mockito-core</artifactId>
-            <version>1.9.5</version>
-            <scope>test</scope>
-        </dependency>
-
-        <!--android & robolectric-->
-        <dependency>
-            <groupId>org.robolectric</groupId>
-            <artifactId>robolectric</artifactId>
-            <version>${robolectric.version}</version>
-            <scope>test</scope>
-        </dependency>
-
+        <!--android & oobolectric-->
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
@@ -93,9 +60,22 @@
             <plugin>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>2.3.2</version>
+                <!-- Skip tests. We use Gradle to build and run tests. -->
+                <executions>
+                    <execution>
+                        <id>default-testCompile</id>
+                        <phase>test-compile</phase>
+                        <goals>
+                            <goal>testCompile</goal>
+                        </goals>
+                        <configuration>
+                            <skip>true</skip>
+                        </configuration>
+                    </execution>
+                </executions>
                 <configuration>
-                    <source>1.6</source>
-                    <target>1.6</target>
+                    <source>7</source>
+                    <target>7</target>
                 </configuration>
             </plugin>
             <plugin>
@@ -113,18 +93,6 @@
                 </configuration>
                 <extensions>true</extensions>
             </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-surefire-plugin</artifactId>
-                <version>2.6</version>
-                <configuration>
-                    <argLine>-Xms512m -Xmx1024m -XX:MaxPermSize=256m</argLine>
-                    <excludes>
-                        <exclude>**/Test*.java</exclude>
-                    </excludes>
-                    <parallel>classesAndMethods</parallel>
-                </configuration>
-            </plugin>
         </plugins>
     </build>
 </project>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java
new file mode 100644
index 00000000..b0bb9239
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -0,0 +1,101 @@
+package com.mopub.common;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.exceptions.IntentNotResolvableException;
+
+import java.util.EnumSet;
+
+import static com.mopub.common.util.Drawables.LEFT_ARROW;
+import static com.mopub.common.util.Drawables.RIGHT_ARROW;
+import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
+import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
+
+class BrowserWebViewClient extends WebViewClient {
+
+    private static final EnumSet<UrlAction> SUPPORTED_URL_ACTIONS = EnumSet.of(
+            UrlAction.HANDLE_PHONE_SCHEME,
+            UrlAction.OPEN_APP_MARKET,
+            UrlAction.OPEN_IN_APP_BROWSER,
+            UrlAction.HANDLE_SHARE_TWEET,
+            UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+            UrlAction.FOLLOW_DEEP_LINK
+    );
+
+    @NonNull
+    private MoPubBrowser mMoPubBrowser;
+
+    public BrowserWebViewClient(@NonNull final MoPubBrowser moPubBrowser) {
+        mMoPubBrowser = moPubBrowser;
+    }
+
+    @Override
+    public void onReceivedError(WebView view, int errorCode, String description,
+            String failingUrl) {
+        MoPubLog.d("MoPubBrowser error: " + description);
+    }
+
+    @Override
+    public boolean shouldOverrideUrlLoading(WebView view, String url) {
+        if (TextUtils.isEmpty(url)) {
+            return false;
+        }
+
+        try {
+            new UrlHandler.Builder()
+                    .withSupportedUrlActions(SUPPORTED_URL_ACTIONS)
+                    .withoutMoPubBrowser()
+                    .withResultActions(new UrlHandler.ResultActions() {
+                        @Override
+                        public void urlHandlingSucceeded(@NonNull String url,
+                                @NonNull UrlAction urlAction) {
+                            if (urlAction.equals(UrlAction.OPEN_IN_APP_BROWSER)) {
+                                mMoPubBrowser.getWebView().loadUrl(url);
+                            } else {
+                                // UrlAction opened in external app, so close MoPubBrowser
+                                mMoPubBrowser.finish();
+                            }
+                        }
+
+                        @Override
+                        public void urlHandlingFailed(@NonNull String url,
+                                @NonNull UrlAction lastFailedUrlAction) { }
+                    })
+                    .build().handleUrl(mMoPubBrowser.getApplicationContext(), url,
+                            true, // = fromUserInteraction
+                            true // = throwExceptionOnFailure
+                        );
+            return true;
+        } catch (IntentNotResolvableException e) {
+            return false;
+        }
+    }
+
+    @Override
+    public void onPageStarted(WebView view, String url, Bitmap favicon) {
+        super.onPageStarted(view, url, favicon);
+        mMoPubBrowser.getForwardButton()
+                .setImageDrawable(UNRIGHT_ARROW.createDrawable(mMoPubBrowser));
+    }
+
+    @Override
+    public void onPageFinished(WebView view, String url) {
+        super.onPageFinished(view, url);
+
+        Drawable backImageDrawable = view.canGoBack()
+                ? LEFT_ARROW.createDrawable(mMoPubBrowser)
+                : UNLEFT_ARROW.createDrawable(mMoPubBrowser);
+        mMoPubBrowser.getBackButton().setImageDrawable(backImageDrawable);
+
+        Drawable forwardImageDrawable = view.canGoForward()
+                ? RIGHT_ARROW.createDrawable(mMoPubBrowser)
+                : UNRIGHT_ARROW.createDrawable(mMoPubBrowser);
+        mMoPubBrowser.getForwardButton().setImageDrawable(forwardImageDrawable);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 12e2921d..302a5170 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -8,7 +8,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager;
 
 public class MoPub {
-    public static final String SDK_VERSION = "3.8.0";
+    public static final String SDK_VERSION = "3.9.0";
 
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index b4e88938..8433719f 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -3,11 +3,10 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
-import android.net.Uri;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
@@ -16,7 +15,6 @@
 import android.webkit.WebChromeClient;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
-import android.webkit.WebViewClient;
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
@@ -25,6 +23,8 @@
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.util.WebViews;
 
+import java.util.EnumSet;
+
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
 import static com.mopub.common.util.Drawables.BACKGROUND;
@@ -32,9 +32,6 @@
 import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.REFRESH;
 import static com.mopub.common.util.Drawables.RIGHT_ARROW;
-import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
-import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
-import static com.mopub.common.util.Intents.deviceCanHandleIntent;
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
@@ -46,6 +43,31 @@
     private ImageButton mRefreshButton;
     private ImageButton mCloseButton;
 
+    @NonNull
+    public ImageButton getBackButton() {
+        return mBackButton;
+    }
+
+    @NonNull
+    public ImageButton getCloseButton() {
+        return mCloseButton;
+    }
+
+    @NonNull
+    public ImageButton getForwardButton() {
+        return mForwardButton;
+    }
+
+    @NonNull
+    public ImageButton getRefreshButton() {
+        return mRefreshButton;
+    }
+
+    @NonNull
+    public WebView getWebView() {
+        return mWebView;
+    }
+
     public static void open(final Context context, final String url) {
         MoPubLog.d("Opening url in MoPubBrowser: " + url);
         final Intent intent = new Intent(context, MoPubBrowser.class);
@@ -85,51 +107,8 @@ private void initializeWebView() {
         webSettings.setUseWideViewPort(true);
 
         mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
-        mWebView.setWebViewClient(new WebViewClient() {
-            @Override
-            public void onReceivedError(WebView view, int errorCode, String description,
-                    String failingUrl) {
-                MoPubLog.d("MoPubBrowser error: " + description);
-            }
 
-            @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                if (url == null) {
-                    return false;
-                }
-
-                final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-                if (UrlAction.FOLLOW_DEEP_LINK.shouldTryHandlingUrl(Uri.parse(url))
-                        && deviceCanHandleIntent(MoPubBrowser.this, intent)) {
-                    startActivity(intent);
-                    finish();
-                    return true;
-                } else {
-                    return false;
-                }
-            }
-
-            @Override
-            public void onPageStarted(WebView view, String url, Bitmap favicon) {
-                super.onPageStarted(view, url, favicon);
-                mForwardButton.setImageDrawable(UNRIGHT_ARROW.createDrawable(MoPubBrowser.this));
-            }
-
-            @Override
-            public void onPageFinished(WebView view, String url) {
-                super.onPageFinished(view, url);
-
-                Drawable backImageDrawable = view.canGoBack()
-                        ? LEFT_ARROW.createDrawable(MoPubBrowser.this)
-                        : UNLEFT_ARROW.createDrawable(MoPubBrowser.this);
-                mBackButton.setImageDrawable(backImageDrawable);
-
-                Drawable forwardImageDrawable = view.canGoForward()
-                        ? RIGHT_ARROW.createDrawable(MoPubBrowser.this)
-                        : UNRIGHT_ARROW.createDrawable(MoPubBrowser.this);
-                mForwardButton.setImageDrawable(forwardImageDrawable);
-            }
-        });
+        mWebView.setWebViewClient(new BrowserWebViewClient(this));
 
         mWebView.setWebChromeClient(new WebChromeClient() {
             public void onProgressChanged(WebView webView, int progress) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
index cd76c51e..ca5a52ec 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
@@ -1,302 +1,304 @@
-package com.mopub.common;
-
-
-import android.os.Looper;
-
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.IllegalFormatException;
-
-/**
- * Simple static methods to be called at the start of your own methods to verify correct arguments
- * and state.
- *
- * Each method supports 2 flavors - one that will always throw a runtime exception, and a NoThrow
- * version that will only throw an exception when in strict mode. We use the former
- * for internal state checks, and the later to validate arguments passed to the SDK.
- */
-public final class Preconditions {
-
-    public static final String EMPTY_ARGUMENTS = "";
-
-    private Preconditions() {
-        // Non-instantiable.
-    }
-
-    /**
-     * Ensures the truth of an expression.
-     */
-    public static void checkArgument(boolean expression) {
-        checkArgumentInternal(expression, true, "Illegal argument.", EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures the truth of an expression, with an error message.
-     */
-    public static void checkArgument(boolean expression, String errorMessage) {
-        checkArgumentInternal(expression, true, errorMessage, EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures the truth of an expression, with an error message that takes arguments.
-     */
-    public static void checkArgument(boolean expression,
-            String errorMessageTemplate, Object... errorMessageArgs) {
-        checkArgumentInternal(expression, true, errorMessageTemplate, errorMessageArgs);
-    }
-
-    /**
-     * Ensures the truth of an expression involving the state of the caller.
-     */
-    public static void checkState(boolean expression) {
-        checkStateInternal(expression, true, "Illegal state.", EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures the truth of an expression involving the state of the caller, with an error message.
-     */
-    public static void checkState(boolean expression, String errorMessage) {
-        checkStateInternal(expression, true, errorMessage, EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures the truth of an expression involving the state of the caller, with an error message
-     * that takes arguments.
-     */
-    public static void checkState(boolean expression,
-            String errorMessageTemplate, Object... errorMessageArgs) {
-        checkStateInternal(expression, true, errorMessageTemplate, errorMessageArgs);
-    }
-
-    /**
-     * Ensures that an object reference is not null.
-     */
-    public static void checkNotNull(Object reference) {
-        checkNotNullInternal(reference, true, "Object can not be null.", EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures that an object reference is not null, with an error message.
-     */
-    public static void checkNotNull(Object reference, String errorMessage) {
-        checkNotNullInternal(reference, true, errorMessage, EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures that an object reference is not null, with an error message that takes arguments.
-     */
-    public static void checkNotNull(Object reference,
-            String errorMessageTemplate, Object... errorMessageArgs) {
-        checkNotNullInternal(reference, true, errorMessageTemplate, errorMessageArgs);
-    }
-
-    /**
-     * Ensures that the current thread is the UI thread.
-     */
-    public static void checkUiThread() {
-        checkUiThreadInternal(true, "This method must be called from the UI thread.",
-                EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures that the current thread is the UI thread, with an error message.
-     */
-    public static void checkUiThread(String errorMessage) {
-        checkUiThreadInternal(true, errorMessage, EMPTY_ARGUMENTS);
-    }
-
-    /**
-     * Ensures that the current thread is the UI thread, with an error message that takes
-     * arguments.
-     */
-    public static void checkUiThread(String errorMessageTemplate, Object... errorMessageArgs) {
-        checkUiThreadInternal(true, errorMessageTemplate, errorMessageArgs);
-    }
-
-    /**
-     * Preconditions checks that avoid throwing and exception in release mode. These versions return
-     * a boolean which the caller should check.
-     */
-    public final static class NoThrow {
-        private static volatile boolean sStrictMode = false;
-
-        /**
-         * Enables or disables strict mode.
-         *
-         * In strict mode, this class will throw anyway. For example, you could set strict mode to
-         * BuildConfig.DEBUG to always get exceptions when in the IDE.
-         *
-         * @param strictMode Whether to use strict mode.
-         */
-        public static void setStrictMode(boolean strictMode) {
-            sStrictMode = strictMode;
-        }
-
-        /**
-         * Ensures the truth of an expression.
-         */
-        public static boolean checkArgument(boolean expression) {
-            return checkArgumentInternal(expression, sStrictMode, "Illegal argument",
-                    EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures the truth of an expression, with an error message.
-         */
-        public static boolean checkArgument(boolean expression, String errorMessage) {
-            return checkArgumentInternal(expression, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures the truth of an expression, with an error message that takes arguments.
-         */
-        public static boolean checkArgument(boolean expression,
-                String errorMessageTemplate, Object... errorMessageArgs) {
-            return checkArgumentInternal(expression, sStrictMode, errorMessageTemplate,
-                    errorMessageArgs);
-        }
-
-
-        /**
-         * Ensures the truth of an expression involving the state of the caller.
-         */
-        public static boolean checkState(boolean expression) {
-            return checkStateInternal(expression, sStrictMode, "Illegal state.", EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures the truth of an expression involving the state of the caller, with an error
-         * message.
-         */
-        public static boolean checkState(boolean expression, String errorMessage) {
-            return checkStateInternal(expression, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures the truth of an expression involving the state of the caller, with an error
-         * message that takes arguments.
-         */
-        public static boolean checkState(boolean expression,
-                String errorMessageTemplate, Object... errorMessageArgs) {
-            return checkStateInternal(expression, sStrictMode, errorMessageTemplate,
-                    errorMessageArgs);
-        }
-
-        /**
-         * Ensures that an object reference is not null.
-         */
-        public static boolean checkNotNull(Object reference) {
-            return checkNotNullInternal(reference, sStrictMode, "Object can not be null.",
-                    EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures that an object reference is not null, with an error message.
-         */
-        public static boolean checkNotNull(Object reference, String errorMessage) {
-            return checkNotNullInternal(reference, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures that an object reference is not null, with an error message that takes
-         * arguments.
-         */
-        public static boolean checkNotNull(Object reference,
-                String errorMessageTemplate, Object... errorMessageArgs) {
-            return checkNotNullInternal(reference, sStrictMode, errorMessageTemplate,
-                    errorMessageArgs);
-        }
-
-        /**
-         * Ensures that the current thread is the UI thread.
-         */
-        public static boolean checkUiThread() {
-            return checkUiThreadInternal(sStrictMode,
-                    "This method must be called from the UI thread.", EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures that the current thread is the UI thread, with an error message.
-         */
-        public static boolean checkUiThread(String errorMessage) {
-            return checkUiThreadInternal(sStrictMode, errorMessage, EMPTY_ARGUMENTS);
-        }
-
-        /**
-         * Ensures that the current thread is the UI thread, with an error message that takes
-         * arguments.
-         */
-        public static boolean checkUiThread(String errorMessageTemplate,
-                Object... errorMessageArgs) {
-            return checkUiThreadInternal(false, errorMessageTemplate, errorMessageArgs);
-        }
-    }
-
-    private static boolean checkArgumentInternal(boolean expression, boolean allowThrow,
-            String errorMessageTemplate, Object... errorMessageArgs) {
-        if (expression) {
-            return true;
-        }
-        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
-        if (allowThrow) {
-            throw new IllegalArgumentException(errorMessage);
-        }
-        MoPubLog.e(errorMessage);
-        return false;
-    }
-
-    private static boolean checkStateInternal(boolean expression, boolean allowThrow,
-            String errorMessageTemplate, Object... errorMessageArgs) {
-        if (expression) {
-            return true;
-        }
-        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
-        if (allowThrow) {
-            throw new IllegalStateException(errorMessage);
-        }
-        MoPubLog.e(errorMessage);
-        return false;
-    }
-
-    private static boolean checkNotNullInternal(Object reference, boolean allowThrow,
-            String errorMessageTemplate, Object... errorMessageArgs) {
-        if (reference != null) {
-            return true;
-        }
-        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
-        if (allowThrow) {
-            throw new NullPointerException(errorMessage);
-        }
-        MoPubLog.e(errorMessage);
-        return false;
-    }
-
-    private static boolean checkUiThreadInternal(boolean allowThrow,
-            String errorMessageTemplate, Object... errorMessageArgs) {
-        // Check that the main looper is the current looper.
-        if (Looper.getMainLooper().equals(Looper.myLooper())) {
-            return true;
-        }
-        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
-        if (allowThrow) {
-            throw new IllegalStateException(errorMessage);
-        }
-        MoPubLog.e(errorMessage);
-        return false;
-    }
-
-    /**
-     * Substitutes each {@code %s} in {@code template} with an argument. These are matched by
-     * position - the first {@code %s} gets {@code args[0]}, etc.
-     */
-    private static String format(String template, Object... args) {
-        template = String.valueOf(template);  // null -> "null"
-
-        try {
-            return String.format(template, args);
-        } catch (IllegalFormatException exception) {
-            MoPubLog.e("MoPub preconditions had a format exception: " + exception.getMessage());
-            return template;
-        }
-    }
-}
+package com.mopub.common;
+
+
+import android.os.Looper;
+
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.IllegalFormatException;
+
+/**
+ * Simple static methods to be called at the start of your own methods to verify correct arguments
+ * and state.
+ *
+ * Each method supports 2 flavors - one that will always throw a runtime exception, and a NoThrow
+ * version that will only throw an exception when in strict mode. We use the former
+ * for internal state checks, and the later to validate arguments passed to the SDK.
+ */
+public final class Preconditions {
+
+    public static final String EMPTY_ARGUMENTS = "";
+
+    private Preconditions() {
+        // Non-instantiable.
+    }
+
+    /**
+     * Ensures the truth of an expression.
+     */
+    public static void checkArgument(boolean expression) {
+        checkArgumentInternal(expression, true, "Illegal argument.", EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression, with an error message.
+     */
+    public static void checkArgument(boolean expression, String errorMessage) {
+        checkArgumentInternal(expression, true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression, with an error message that takes arguments.
+     */
+    public static void checkArgument(boolean expression,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        checkArgumentInternal(expression, true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Ensures the truth of an expression involving the state of the caller.
+     */
+    public static void checkState(boolean expression) {
+        checkStateInternal(expression, true, "Illegal state.", EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression involving the state of the caller, with an error message.
+     */
+    public static void checkState(boolean expression, String errorMessage) {
+        checkStateInternal(expression, true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression involving the state of the caller, with an error message
+     * that takes arguments.
+     */
+    public static void checkState(boolean expression,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        checkStateInternal(expression, true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Ensures that an object reference is not null.
+     */
+    public static void checkNotNull(Object reference) {
+        checkNotNullInternal(reference, true, "Object can not be null.", EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that an object reference is not null, with an error message.
+     */
+    public static void checkNotNull(Object reference, String errorMessage) {
+        checkNotNullInternal(reference, true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that an object reference is not null, with an error message that takes arguments.
+     */
+    public static void checkNotNull(Object reference,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        checkNotNullInternal(reference, true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Ensures that the current thread is the UI thread.
+     */
+    public static void checkUiThread() {
+        checkUiThreadInternal(true, "This method must be called from the UI thread.",
+                EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that the current thread is the UI thread, with an error message.
+     */
+    public static void checkUiThread(String errorMessage) {
+        checkUiThreadInternal(true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that the current thread is the UI thread, with an error message that takes
+     * arguments.
+     */
+    public static void checkUiThread(String errorMessageTemplate, Object... errorMessageArgs) {
+        checkUiThreadInternal(true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Preconditions checks that avoid throwing and exception in release mode. These versions return
+     * a boolean which the caller should check.
+     */
+    public final static class NoThrow {
+        private static volatile boolean sStrictMode = false;
+
+        /**
+         * Enables or disables strict mode.
+         *
+         * In strict mode, this class will throw anyway. For example, you could set strict mode to
+         * BuildConfig.DEBUG to always get exceptions when in the IDE.
+         *
+         * @param strictMode Whether to use strict mode.
+         */
+        public static void setStrictMode(boolean strictMode) {
+            sStrictMode = strictMode;
+        }
+
+        /**
+         * Ensures the truth of an expression.
+         */
+        public static boolean checkArgument(boolean expression) {
+            return checkArgumentInternal(expression, sStrictMode, "Illegal argument",
+                    EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression, with an error message.
+         */
+        public static boolean checkArgument(boolean expression, String errorMessage) {
+            return checkArgumentInternal(expression, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression, with an error message that takes arguments.
+         */
+        public static boolean checkArgument(boolean expression,
+                String errorMessageTemplate, Object... errorMessageArgs) {
+            return checkArgumentInternal(expression, sStrictMode, errorMessageTemplate,
+                    errorMessageArgs);
+        }
+
+
+        /**
+         * Ensures the truth of an expression involving the state of the caller.
+         */
+        public static boolean checkState(boolean expression) {
+            return checkStateInternal(expression, sStrictMode, "Illegal state.", EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression involving the state of the caller, with an error
+         * message.
+         */
+        public static boolean checkState(boolean expression, String errorMessage) {
+            return checkStateInternal(expression, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression involving the state of the caller, with an error
+         * message that takes arguments.
+         */
+        public static boolean checkState(boolean expression,
+                String errorMessageTemplate, Object... errorMessageArgs) {
+            return checkStateInternal(expression, sStrictMode, errorMessageTemplate,
+                    errorMessageArgs);
+        }
+
+        /**
+         * Ensures that an object reference is not null.
+         *
+         * @returns true if
+         */
+        public static boolean checkNotNull(Object reference) {
+            return checkNotNullInternal(reference, sStrictMode, "Object can not be null.",
+                    EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that an object reference is not null, with an error message.
+         */
+        public static boolean checkNotNull(Object reference, String errorMessage) {
+            return checkNotNullInternal(reference, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that an object reference is not null, with an error message that takes
+         * arguments.
+         */
+        public static boolean checkNotNull(Object reference,
+                String errorMessageTemplate, Object... errorMessageArgs) {
+            return checkNotNullInternal(reference, sStrictMode, errorMessageTemplate,
+                    errorMessageArgs);
+        }
+
+        /**
+         * Ensures that the current thread is the UI thread.
+         */
+        public static boolean checkUiThread() {
+            return checkUiThreadInternal(sStrictMode,
+                    "This method must be called from the UI thread.", EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that the current thread is the UI thread, with an error message.
+         */
+        public static boolean checkUiThread(String errorMessage) {
+            return checkUiThreadInternal(sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that the current thread is the UI thread, with an error message that takes
+         * arguments.
+         */
+        public static boolean checkUiThread(String errorMessageTemplate,
+                Object... errorMessageArgs) {
+            return checkUiThreadInternal(false, errorMessageTemplate, errorMessageArgs);
+        }
+    }
+
+    private static boolean checkArgumentInternal(boolean expression, boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        if (expression) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new IllegalArgumentException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    private static boolean checkStateInternal(boolean expression, boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        if (expression) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new IllegalStateException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    private static boolean checkNotNullInternal(Object reference, boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        if (reference != null) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new NullPointerException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    private static boolean checkUiThreadInternal(boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        // Check that the main looper is the current looper.
+        if (Looper.getMainLooper().equals(Looper.myLooper())) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new IllegalStateException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    /**
+     * Substitutes each {@code %s} in {@code template} with an argument. These are matched by
+     * position - the first {@code %s} gets {@code args[0]}, etc.
+     */
+    private static String format(String template, Object... args) {
+        template = String.valueOf(template);  // null -> "null"
+
+        try {
+            return String.format(template, args);
+        } catch (IllegalFormatException exception) {
+            MoPubLog.e("MoPub preconditions had a format exception: " + exception.getMessage());
+            return template;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
index d8fd9c92..0ecb1ef8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
@@ -4,17 +4,19 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.util.List;
+
 import static com.mopub.common.Constants.HTTP;
 import static com.mopub.common.Constants.HTTPS;
-import static com.mopub.common.UrlHandler.MoPubSchemeListener;
+import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
  * {@code UrlAction} describes the different kinds of actions for URLs that {@link UrlHandler} can
@@ -36,11 +38,13 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             final String host = uri.getHost();
+            final UrlHandler.MoPubSchemeListener moPubSchemeListener =
+                    urlHandler.getMoPubSchemeListener();
 
             if ("finishLoad".equals(host)) {
                 moPubSchemeListener.onFinishLoad();
@@ -61,9 +65,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             MoPubLog.d("Link to about page ignored.");
         }
@@ -80,9 +84,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             final String errorMessage = "Could not handle intent with URI: " + uri + "\n\tIs " +
                     "this intent supported on your phone?";
@@ -97,9 +101,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             final String errorMessage = "Unable to load mopub native browser url: " + uri;
             try {
@@ -124,9 +128,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             Intents.launchApplicationUrl(context, uri);
         }
@@ -140,11 +144,11 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
-            if (!skipShowMoPubBrowser) {
+            if (!urlHandler.shouldSkipShowMoPubBrowser()) {
                 Intents.showMoPubBrowserForUrl(context, uri);
             }
         }
@@ -162,9 +166,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             Preconditions.checkNotNull(context);
             Preconditions.checkNotNull(uri);
@@ -181,7 +185,87 @@ protected void performAction(@NonNull final Context context, @NonNull final Uri
         }
     },
 
-    /* 7 */ FOLLOW_DEEP_LINK(true) {
+    /* 7 */ FOLLOW_DEEP_LINK_WITH_FALLBACK(true) {
+        @Override
+        public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
+            return "deeplink+".equalsIgnoreCase(uri.getScheme());
+        }
+
+        @Override
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
+                throws IntentNotResolvableException {
+
+            // 1. Parse the URL as a valid deeplink+
+            if (!"navigate".equalsIgnoreCase(uri.getHost())) {
+                throw new IntentNotResolvableException("Deeplink+ URL did not have 'navigate' as" +
+                        " the host.");
+            }
+
+            final String primaryUrl;
+            final List<String> primaryTrackingUrls;
+            final String fallbackUrl;
+            final List<String> fallbackTrackingUrls;
+            try {
+                primaryUrl = uri.getQueryParameter("primaryUrl");
+                primaryTrackingUrls = uri.getQueryParameters("primaryTrackingUrl");
+                fallbackUrl = uri.getQueryParameter("fallbackUrl");
+                fallbackTrackingUrls = uri.getQueryParameters("fallbackTrackingUrl");
+            } catch (UnsupportedOperationException e) {
+                // If the URL is not hierarchical, getQueryParameter[s] will throw
+                // UnsupportedOperationException (see http://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
+                throw new IntentNotResolvableException("Deeplink+ URL was not a hierarchical" +
+                        " URI.");
+            }
+
+            if (primaryUrl == null) {
+                throw new IntentNotResolvableException("Deeplink+ did not have 'primaryUrl' query" +
+                        " param.");
+            }
+
+            final Uri primaryUri = Uri.parse(primaryUrl);
+            if (shouldTryHandlingUrl(primaryUri)) {
+                // Nested Deeplink+ URLs are not allowed
+                throw new IntentNotResolvableException("Deeplink+ had another Deeplink+ as the " +
+                        "'primaryUrl'.");
+            }
+
+            // 2. Attempt to handle the primary URL
+            try {
+                Intents.launchApplicationUrl(context, primaryUri);
+                makeTrackingHttpRequest(primaryTrackingUrls, context, BaseEvent.Name.CLICK_REQUEST);
+                return;
+            } catch (IntentNotResolvableException e) {
+                // Primary URL failed; proceed to attempt fallback URL
+            }
+
+            // 3. Attempt to handle the fallback URL
+            if (fallbackUrl == null) {
+                throw new IntentNotResolvableException("Unable to handle 'primaryUrl' for " +
+                        "Deeplink+ and 'fallbackUrl' was missing.");
+            }
+
+            if (shouldTryHandlingUrl(Uri.parse(fallbackUrl))) {
+                // Nested Deeplink+ URLs are not allowed
+                throw new IntentNotResolvableException("Deeplink+ URL had another Deeplink+ " +
+                        "URL as the 'fallbackUrl'.");
+            }
+
+            // UrlAction.handleUrl already verified this comes from a user interaction
+            final boolean fromUserInteraction = true;
+
+            // Throw IntentNotResolvableException on failure to signal parent handleUrl to continue
+            // attempting to match other UrlActions
+            final boolean throwExceptionOnFailure = true;
+
+            urlHandler.handleUrl(context, fallbackUrl, fromUserInteraction,
+                    throwExceptionOnFailure);
+            makeTrackingHttpRequest(fallbackTrackingUrls, context, BaseEvent.Name.CLICK_REQUEST);
+        }
+    },
+
+    /* 8 */ FOLLOW_DEEP_LINK(true) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             final String scheme = uri.getScheme();
@@ -190,9 +274,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             Intents.launchApplicationUrl(context, uri);
         }
@@ -206,27 +290,34 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException { }
     };
 
     public void handleUrl(
+            UrlHandler urlHandler,
             @NonNull final Context context,
             @NonNull final Uri destinationUri,
-            final boolean fromUserInteraction,
-            final boolean skipShowMoPubBrowser,
-            @Nullable final MoPubSchemeListener moPubSchemeListener)
+            final boolean fromUserInteraction)
             throws IntentNotResolvableException {
         MoPubLog.d("Ad event URL: " + destinationUri);
         if (mRequiresUserInteraction && !fromUserInteraction) {
             throw new IntentNotResolvableException("Attempted to handle action without user " +
                     "interaction.");
         } else {
-            performAction(context, destinationUri, skipShowMoPubBrowser,
-                    moPubSchemeListener);
+            performAction(context, destinationUri, urlHandler);
+        }
+    }
+
+    public static UrlAction fromString(@NonNull final String actionName) {
+        for (UrlAction action : UrlAction.values()) {
+            if (actionName.equals(action.toString())) {
+                return action;
+            }
         }
+        return NOOP;
     }
 
     private final boolean mRequiresUserInteraction;
@@ -238,9 +329,7 @@ public void handleUrl(
     public abstract boolean shouldTryHandlingUrl(@NonNull final Uri uri);
 
     protected abstract void performAction(
-            @NonNull final Context context,
-            @NonNull final Uri uri,
-            final boolean skipShowMoPubBrowser,
-            @Nullable final MoPubSchemeListener moPubSchemeListener)
+            @NonNull final Context context, @NonNull final Uri uri,
+            @NonNull final UrlHandler urlHandler)
             throws IntentNotResolvableException;
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
index 9d62edc1..d558cf2e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
@@ -12,7 +12,6 @@
 
 import java.util.EnumSet;
 
-
 /**
  * {@code UrlHandler} facilitates handling user clicks on different URLs, allowing configuration
  * for which kinds of URLs to handle and then responding accordingly for a given URL.
@@ -72,8 +71,7 @@ void urlHandlingFailed(@NonNull final String url,
          * @param first A {@code UrlAction} for the {@code UrlHandler} to support.
          * @param others An arbitrary number of {@code UrlAction}s for the {@code UrlHandler} to
          * support.
-         * @return A {@link com.mopub.common.UrlHandler.Builder} with the desired supported
-         * {@code UrlAction}s added.
+         * @return A {@link Builder} with the desired supported {@code UrlAction}s added.
          */
         public Builder withSupportedUrlActions(@NonNull final UrlAction first,
                 @Nullable final UrlAction... others) {
@@ -81,13 +79,25 @@ public Builder withSupportedUrlActions(@NonNull final UrlAction first,
             return this;
         }
 
+        /**
+         * Sets the {@link UrlAction}s to support in the {@code UrlHandler} to build.
+         *
+         * @param supportedUrlActions An {@code EnumSet} of {@code UrlAction}s for the
+         * {@code UrlHandler} to support.
+         * @return A {@link Builder} with the desired supported {@code UrlAction}s added.
+         */
+        public Builder withSupportedUrlActions(
+                @NonNull final EnumSet<UrlAction> supportedUrlActions) {
+            this.supportedUrlActions = EnumSet.copyOf(supportedUrlActions);
+            return this;
+        }
+        
         /**
          * Sets the {@link ResultActions} for the {@code UrlHandler} to
          * build.
          *
          * @param resultActions A {@code ClickListener} for the {@code UrlHandler}.
-         * @return A {@link com.mopub.common.UrlHandler.Builder} with the desired
-         * {@code ClickListener} added.
+         * @return A {@link Builder} with the desired {@code ClickListener} added.
          */
         public Builder withResultActions(@NonNull final ResultActions resultActions) {
             this.resultActions = resultActions;
@@ -95,12 +105,10 @@ public Builder withResultActions(@NonNull final ResultActions resultActions) {
         }
 
         /**
-         * Sets the {@link com.mopub.common.UrlHandler.MoPubSchemeListener} for the
-         * {@code UrlHandler} to build.
+         * Sets the {@link MoPubSchemeListener} for the {@code UrlHandler} to build.
          *
          * @param moPubSchemeListener A {@code MoPubSchemeListener} for the {@code UrlHandler}.
-         * @return A {@link com.mopub.common.UrlHandler.Builder} with the desired
-         * {@code MoPubSchemeListener} added.
+         * @return A {@link Builder} with the desired {@code MoPubSchemeListener} added.
          */
         public Builder withMoPubSchemeListener(
                 @NonNull final MoPubSchemeListener moPubSchemeListener) {
@@ -112,8 +120,7 @@ public Builder withMoPubSchemeListener(
          * If called, will avoid starting a {@link MoPubBrowser} activity where applicable.
          * (see {@link Intents#showMoPubBrowserForUrl(Context, Uri)})
          *
-         * @return A {@link com.mopub.common.UrlHandler.Builder} that will skip starting a
-         * {@code MoPubBrowser}.
+         * @return A {@link Builder} that will skip starting a {@code MoPubBrowser}.
          */
         public Builder withoutMoPubBrowser() {
             this.skipShowMoPubBrowser = true;
@@ -122,7 +129,7 @@ public Builder withoutMoPubBrowser() {
 
         /**
          * Creates an immutable {@link UrlHandler} with the desired configuration, according to the
-         * other {@link com.mopub.common.UrlHandler.Builder} methods called before.
+         * other {@link Builder} methods called before.
          *
          * @return An immutable {@code UrlHandler} with the desired configuration.
          */
@@ -155,20 +162,40 @@ public void urlHandlingFailed(@NonNull String url, @NonNull UrlAction lastFailed
     @NonNull
     private MoPubSchemeListener mMoPubSchemeListener;
     private boolean mSkipShowMoPubBrowser;
+    private boolean mAlreadySucceeded;
 
     /**
-     * Do not instantiate UrlHandler directly; use {@link com.mopub.common.UrlHandler.Builder}
-     * instead.
+     * Do not instantiate UrlHandler directly; use {@link Builder} instead.
      */
     private UrlHandler(
             @NonNull final EnumSet<UrlAction> supportedUrlActions,
             @NonNull final ResultActions resultActions,
             @NonNull final MoPubSchemeListener moPubSchemeListener,
             final boolean skipShowMoPubBrowser) {
+        mSupportedUrlActions = EnumSet.copyOf(supportedUrlActions);
         mResultActions = resultActions;
         mMoPubSchemeListener = moPubSchemeListener;
         mSkipShowMoPubBrowser = skipShowMoPubBrowser;
-        mSupportedUrlActions = supportedUrlActions;
+        mAlreadySucceeded = false;
+    }
+
+    @NonNull
+    EnumSet<UrlAction> getSupportedUrlActions() {
+        return EnumSet.copyOf(mSupportedUrlActions);
+    }
+
+    @NonNull
+    ResultActions getResultActions() {
+        return mResultActions;
+    }
+
+    @NonNull
+    MoPubSchemeListener getMoPubSchemeListener() {
+        return mMoPubSchemeListener;
+    }
+
+    boolean shouldSkipShowMoPubBrowser() {
+        return mSkipShowMoPubBrowser;
     }
 
     /**
@@ -192,21 +219,34 @@ public void handleUrl(@NonNull final Context context, @NonNull final String dest
      */
     public void handleUrl(@NonNull final Context context, @NonNull final String destinationUrl,
             final boolean fromUserInteraction) {
+        try {
+            final boolean throwExceptionOnFailure = false;
+            handleUrl(context, destinationUrl, fromUserInteraction, throwExceptionOnFailure);
+        } catch (IntentNotResolvableException e) {
+            // Exception will never be thrown since throwExceptionOnFailure is false
+        }
+    }
+
+    public void handleUrl(@NonNull final Context context, @NonNull final String destinationUrl,
+            final boolean fromUserInteraction, final boolean throwExceptionOnFailure)
+            throws IntentNotResolvableException {
         UrlAction lastFailedUrlAction = UrlAction.NOOP;
+        final String errorMessage;
 
         if (TextUtils.isEmpty(destinationUrl)) {
-            MoPubLog.d("Attempted to handle empty url.");
+            errorMessage = "Attempted to handle empty url.";
         } else {
             final Uri destinationUri = Uri.parse(destinationUrl);
             for (final UrlAction urlAction : mSupportedUrlActions) {
                 if (urlAction.shouldTryHandlingUrl(destinationUri)) {
                     try {
-                        urlAction.handleUrl(context, destinationUri, fromUserInteraction,
-                                mSkipShowMoPubBrowser, mMoPubSchemeListener);
-                        if (!UrlAction.IGNORE_ABOUT_SCHEME.equals(urlAction) &&
-                                !UrlAction.HANDLE_MOPUB_SCHEME.equals(urlAction)) {
+                        urlAction.handleUrl(this, context, destinationUri, fromUserInteraction);
+                        if (!mAlreadySucceeded
+                                && !UrlAction.IGNORE_ABOUT_SCHEME.equals(urlAction)
+                                && !UrlAction.HANDLE_MOPUB_SCHEME.equals(urlAction)) {
                             mResultActions.urlHandlingSucceeded(destinationUri.toString(),
                                     urlAction);
+                            mAlreadySucceeded = true;
                         }
                         return;
                     } catch (IntentNotResolvableException e) {
@@ -216,9 +256,14 @@ public void handleUrl(@NonNull final Context context, @NonNull final String dest
                     }
                 }
             }
-            MoPubLog.d("Link ignored. Unable to handle url: " + destinationUrl);
+            errorMessage = "Link ignored. Unable to handle url: " + destinationUrl;
         }
 
         mResultActions.urlHandlingFailed(destinationUrl, lastFailedUrlAction);
+
+        MoPubLog.d(errorMessage);
+        if (throwExceptionOnFailure) {
+            throw new IntentNotResolvableException(errorMessage);
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
index 42402779..fa140548 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,122 +1,155 @@
-package com.mopub.common.logging;
-
-import android.util.Log;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.logging.Handler;
-import java.util.logging.Level;
-import java.util.logging.LogManager;
-import java.util.logging.LogRecord;
-import java.util.logging.Logger;
-
-public class MoPubLog {
-    private static final String LOGTAG = "MoPub";
-    private static final Logger LOGGER = Logger.getLogger("com.mopub");
-    private static final MoPubLogHandler LOG_HANDLER = new MoPubLogHandler();
-
-    static {
-        LogManager.getLogManager().addLogger(LOGGER);
-        LOGGER.addHandler(LOG_HANDLER);
-        LOGGER.setLevel(Level.FINE);
-    }
-
-    private MoPubLog() {}
-
-    public static void c(final String message) {
-        MoPubLog.c(message, null);
-    }
-
-    public static void v(final String message) {
-        MoPubLog.v(message, null);
-    }
-
-    public static void d(final String message) {
-        MoPubLog.d(message, null);
-    }
-
-    public static void i(final String message) {
-        MoPubLog.i(message, null);
-    }
-
-    public static void w(final String message) {
-        MoPubLog.w(message, null);
-    }
-
-    public static void e(final String message) {
-        MoPubLog.e(message, null);
-    }
-
-    public static void c(final String message, final Throwable throwable) {
-        LOGGER.log(Level.FINEST, message, throwable);
-    }
-
-    public static void v(final String message, final Throwable throwable) {
-        LOGGER.log(Level.FINE, message, throwable);
-    }
-
-    public static void d(final String message, final Throwable throwable) {
-        LOGGER.log(Level.CONFIG, message, throwable);
-    }
-
-    public static void i(final String message, final Throwable throwable) {
-        LOGGER.log(Level.INFO, message, throwable);
-    }
-
-    public static void w(final String message, final Throwable throwable) {
-        LOGGER.log(Level.WARNING, message, throwable);
-    }
-
-    public static void e(final String message, final Throwable throwable) {
-        LOGGER.log(Level.SEVERE, message, throwable);
-    }
-
-    private static final class MoPubLogHandler extends Handler {
-        private static final Map<Level, Integer> LEVEL_TO_LOG = new HashMap<Level, Integer>(7);
-
-        /*
-         * Mapping between Level.* and Log.*:
-         * Level.FINEST  => Log.v
-         * Level.FINER   => Log.v
-         * Level.FINE    => Log.v
-         * Level.CONFIG  => Log.d
-         * Level.INFO    => Log.i
-         * Level.WARNING => Log.w
-         * Level.SEVERE  => Log.e
-         */
-        static {
-            LEVEL_TO_LOG.put(Level.FINEST, Log.VERBOSE);
-            LEVEL_TO_LOG.put(Level.FINER, Log.VERBOSE);
-            LEVEL_TO_LOG.put(Level.FINE, Log.VERBOSE);
-            LEVEL_TO_LOG.put(Level.CONFIG, Log.DEBUG);
-            LEVEL_TO_LOG.put(Level.INFO, Log.INFO);
-            LEVEL_TO_LOG.put(Level.WARNING, Log.WARN);
-            LEVEL_TO_LOG.put(Level.SEVERE, Log.ERROR);
-        }
-
-        @Override
-        public void publish(final LogRecord logRecord) {
-            if (isLoggable(logRecord)) {
-                final int priority;
-                if (LEVEL_TO_LOG.containsKey(logRecord.getLevel())) {
-                    priority = LEVEL_TO_LOG.get(logRecord.getLevel());
-                } else {
-                    priority = Log.VERBOSE;
-                }
-
-                String message = logRecord.getMessage() + "\n";
-
-                final Throwable error = logRecord.getThrown();
-                if (error != null) {
-                    message += Log.getStackTraceString(error);
-                }
-
-                Log.println(priority, LOGTAG, message);
-            }
-        }
-
-        @Override public void close() {}
-
-        @Override public void flush() {}
-    }
-}
+package com.mopub.common.logging;
+
+import android.annotation.SuppressLint;
+import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.mopub.common.VisibleForTesting;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Handler;
+import java.util.logging.Level;
+import java.util.logging.LogManager;
+import java.util.logging.LogRecord;
+import java.util.logging.Logger;
+
+public class MoPubLog {
+    public static final String LOGGER_NAMESPACE = "com.mopub";
+
+    private static final String LOGTAG = "MoPub";
+    private static final Logger LOGGER = Logger.getLogger(LOGGER_NAMESPACE);
+    private static final MoPubLogHandler LOG_HANDLER = new MoPubLogHandler();
+
+    /**
+     * Sets up the {@link Logger}, {@link Handler}, and prevents any parent Handlers from being
+     * notified to avoid duplicated log messages.
+     */
+    static {
+        LOGGER.setUseParentHandlers(false);
+        LOGGER.setLevel(Level.ALL);
+        LOG_HANDLER.setLevel(Level.FINE);
+
+        LogManager.getLogManager().addLogger(LOGGER);
+        addHandler(LOGGER, LOG_HANDLER);
+    }
+
+    private MoPubLog() {}
+
+    public static void c(final String message) {
+        MoPubLog.c(message, null);
+    }
+
+    public static void v(final String message) {
+        MoPubLog.v(message, null);
+    }
+
+    public static void d(final String message) {
+        MoPubLog.d(message, null);
+    }
+
+    public static void i(final String message) {
+        MoPubLog.i(message, null);
+    }
+
+    public static void w(final String message) {
+        MoPubLog.w(message, null);
+    }
+
+    public static void e(final String message) {
+        MoPubLog.e(message, null);
+    }
+
+    public static void c(final String message, final Throwable throwable) {
+        LOGGER.log(Level.FINEST, message, throwable);
+    }
+
+    public static void v(final String message, final Throwable throwable) {
+        LOGGER.log(Level.FINE, message, throwable);
+    }
+
+    public static void d(final String message, final Throwable throwable) {
+        LOGGER.log(Level.CONFIG, message, throwable);
+    }
+
+    public static void i(final String message, final Throwable throwable) {
+        LOGGER.log(Level.INFO, message, throwable);
+    }
+
+    public static void w(final String message, final Throwable throwable) {
+        LOGGER.log(Level.WARNING, message, throwable);
+    }
+
+    public static void e(final String message, final Throwable throwable) {
+        LOGGER.log(Level.SEVERE, message, throwable);
+    }
+
+    @VisibleForTesting
+    public static void setSdkHandlerLevel(@NonNull final Level level) {
+        LOG_HANDLER.setLevel(level);
+    }
+
+    /**
+     * Adds a {@link Handler} to a {@link Logger} if they are not already associated.
+     */
+    private static void addHandler(@NonNull final Logger logger,
+            @NonNull final Handler handler) {
+        final Handler[] currentHandlers = logger.getHandlers();
+        for (final Handler currentHandler : currentHandlers) {
+            if (currentHandler.equals(handler)) {
+                return;
+            }
+        }
+        logger.addHandler(handler);
+    }
+
+    private static final class MoPubLogHandler extends Handler {
+        private static final Map<Level, Integer> LEVEL_TO_LOG = new HashMap<Level, Integer>(7);
+
+        /*
+         * Mapping between Level.* and Log.*:
+         * Level.FINEST  => Log.v
+         * Level.FINER   => Log.v
+         * Level.FINE    => Log.v
+         * Level.CONFIG  => Log.d
+         * Level.INFO    => Log.i
+         * Level.WARNING => Log.w
+         * Level.SEVERE  => Log.e
+         */
+        static {
+            LEVEL_TO_LOG.put(Level.FINEST, Log.VERBOSE);
+            LEVEL_TO_LOG.put(Level.FINER, Log.VERBOSE);
+            LEVEL_TO_LOG.put(Level.FINE, Log.VERBOSE);
+            LEVEL_TO_LOG.put(Level.CONFIG, Log.DEBUG);
+            LEVEL_TO_LOG.put(Level.INFO, Log.INFO);
+            LEVEL_TO_LOG.put(Level.WARNING, Log.WARN);
+            LEVEL_TO_LOG.put(Level.SEVERE, Log.ERROR);
+        }
+
+        @Override
+        @SuppressLint("LogTagMismatch")
+        public void publish(final LogRecord logRecord) {
+            if (isLoggable(logRecord)) {
+                final int priority;
+                if (LEVEL_TO_LOG.containsKey(logRecord.getLevel())) {
+                    priority = LEVEL_TO_LOG.get(logRecord.getLevel());
+                } else {
+                    priority = Log.VERBOSE;
+                }
+
+                String message = logRecord.getMessage() + "\n";
+
+                final Throwable error = logRecord.getThrown();
+                if (error != null) {
+                    message += Log.getStackTraceString(error);
+                }
+
+                Log.println(priority, LOGTAG, message);
+            }
+        }
+
+        @Override public void close() {}
+
+        @Override public void flush() {}
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
index 4cd15e79..47406b98 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -1,310 +1,310 @@
-package com.mopub.common.util;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.ActivityManager;
-import android.content.Context;
-import android.content.pm.ActivityInfo;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.content.res.Configuration;
-import android.graphics.Point;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.os.Build;
-import android.os.StatFs;
-import android.provider.Settings;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.DisplayMetrics;
-import android.view.Display;
-import android.view.Surface;
-import android.view.WindowManager;
-
-import com.mopub.common.CreativeOrientation;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-
-import org.apache.http.conn.util.InetAddressUtils;
-
-import java.io.File;
-import java.net.InetAddress;
-import java.net.NetworkInterface;
-import java.net.SocketException;
-import java.util.Locale;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static android.Manifest.permission.INTERNET;
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static com.mopub.common.util.VersionCode.HONEYCOMB;
-import static com.mopub.common.util.VersionCode.currentApiLevel;
-import static java.util.Collections.list;
-
-public class DeviceUtils {
-    private static final int MAX_MEMORY_CACHE_SIZE = 30 * 1024 * 1024; // 30 MB
-    private static final int MIN_DISK_CACHE_SIZE = 30 * 1024 * 1024; // 30 MB
-    private static final int MAX_DISK_CACHE_SIZE = 100 * 1024 * 1024; // 100 MB
-
-    private DeviceUtils() {}
-
-    public static enum ForceOrientation {
-        FORCE_PORTRAIT("portrait"),
-        FORCE_LANDSCAPE("landscape"),
-        DEVICE_ORIENTATION("device"),
-        UNDEFINED("");
-
-        @NonNull private final String mKey;
-
-        private ForceOrientation(@NonNull final String key) {
-            mKey = key;
-        }
-
-        @NonNull
-        public static ForceOrientation getForceOrientation(@Nullable String key) {
-            for (final ForceOrientation orientation : ForceOrientation.values()) {
-                if (orientation.mKey.equalsIgnoreCase(key)) {
-                    return orientation;
-                }
-            }
-
-            return UNDEFINED;
-        }
-    }
-
-    public static enum IP {
-        IPv4,
-        IPv6;
-
-        private boolean matches(final String address) {
-            switch (this) {
-                case IPv4:
-                    return InetAddressUtils.isIPv4Address(address);
-                case IPv6:
-                    return InetAddressUtils.isIPv6Address(address);
-                default:
-                    return false;
-            }
-        }
-
-        private String toString(final String address) {
-            switch (this) {
-                case IPv4:
-                    return address;
-                case IPv6:
-                    return address.split("%")[0];
-                default:
-                    return null;
-            }
-        }
-    }
-
-    public static String getIpAddress(IP ip) throws SocketException {
-        for (final NetworkInterface networkInterface : list(NetworkInterface.getNetworkInterfaces())) {
-            for (final InetAddress address : list(networkInterface.getInetAddresses())) {
-                if (!address.isLoopbackAddress()) {
-                    String hostAddress = address.getHostAddress().toUpperCase(Locale.US);
-                    if (ip.matches(hostAddress)) {
-                        return ip.toString(hostAddress);
-                    }
-                }
-            }
-        }
-
-        return null;
-    }
-
-    public static String getHashedUdid(final Context context) {
-        if (context == null) {
-            return null;
-        }
-
-        String udid = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
-        return Utils.sha1(udid);
-    }
-
-    public static boolean isNetworkAvailable(@Nullable final Context context) {
-        if (context == null) {
-            return false;
-        }
-
-        final int internetPermission = context.checkCallingOrSelfPermission(INTERNET);
-        if (internetPermission == PackageManager.PERMISSION_DENIED) {
-            return false;
-        }
-
-        /**
-         * This is only checking if we have permission to access the network state
-         * It's possible to not have permission to check network state but still be able
-         * to access the network itself.
-         */
-        final int networkAccessPermission = context.checkCallingOrSelfPermission(ACCESS_NETWORK_STATE);
-        if (networkAccessPermission == PackageManager.PERMISSION_DENIED) {
-            return true;
-        }
-
-        // Otherwise, perform the connectivity check.
-        try {
-            final ConnectivityManager connnectionManager =
-                    (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
-            final NetworkInfo networkInfo = connnectionManager.getActiveNetworkInfo();
-            return networkInfo.isConnected();
-        } catch (NullPointerException e) {
-            return false;
-        }
-    }
-
-    public static int memoryCacheSizeBytes(final Context context) {
-        final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
-        long memoryClass = activityManager.getMemoryClass();
-
-        if (currentApiLevel().isAtLeast(HONEYCOMB)) {
-            try {
-                final int flagLargeHeap = ApplicationInfo.class.getDeclaredField("FLAG_LARGE_HEAP").getInt(null);
-                if (Utils.bitMaskContainsFlag(context.getApplicationInfo().flags, flagLargeHeap)) {
-                    memoryClass = (Integer) new MethodBuilder(activityManager, "getLargeMemoryClass").execute();
-                }
-            } catch (Exception e) {
-                MoPubLog.d("Unable to reflectively determine large heap size on Honeycomb and above.");
-            }
-        }
-
-        long result = Math.min(MAX_MEMORY_CACHE_SIZE, memoryClass / 8 * 1024 * 1024);
-        return (int) result;
-    }
-
-    public static long diskCacheSizeBytes(File dir, long minSize) {
-        long size = minSize;
-        try {
-            StatFs statFs = new StatFs(dir.getAbsolutePath());
-            long availableBytes = ((long) statFs.getBlockCount()) * statFs.getBlockSize();
-            size = availableBytes / 50;
-        } catch (IllegalArgumentException e) {
-            MoPubLog.d("Unable to calculate 2% of available disk space, defaulting to minimum");
-        }
-
-        // Bound inside min/max size for disk cache.
-        return Math.max(Math.min(size, MAX_DISK_CACHE_SIZE), MIN_DISK_CACHE_SIZE);
-    }
-
-    public static long diskCacheSizeBytes(File dir) {
-        return diskCacheSizeBytes(dir, MIN_DISK_CACHE_SIZE);
-    }
-
-    public static int getScreenOrientation(@NonNull final Activity activity) {
-        final int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
-        final int deviceOrientation = activity.getResources().getConfiguration().orientation;
-
-        return getScreenOrientationFromRotationAndOrientation(rotation, deviceOrientation);
-    }
-
-    static int getScreenOrientationFromRotationAndOrientation(int rotation, int orientation) {
-        if (Configuration.ORIENTATION_PORTRAIT == orientation) {
-            switch (rotation) {
-                case Surface.ROTATION_180:
-                case Surface.ROTATION_270:
-                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
-
-                case Surface.ROTATION_0:
-                case Surface.ROTATION_90:
-                default:
-                    return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-            }
-        } else if (Configuration.ORIENTATION_LANDSCAPE == orientation) {
-            switch (rotation) {
-                case Surface.ROTATION_180:
-                case Surface.ROTATION_270:
-                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
-
-                case Surface.ROTATION_0:
-                case Surface.ROTATION_90:
-                default:
-                    return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
-            }
-        } else {
-            MoPubLog.d("Unknown screen orientation. Defaulting to portrait.");
-            return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
-        }
-    }
-
-    /**
-     * Lock this activity in the requested orientation, rotating the display if necessary.
-     *
-     * @param creativeOrientation the orientation of the screen needed by the ad creative.
-     */
-    public static void lockOrientation(@NonNull Activity activity, @NonNull CreativeOrientation creativeOrientation) {
-        if (!Preconditions.NoThrow.checkNotNull(creativeOrientation) || !Preconditions.NoThrow.checkNotNull(activity)) {
-            return;
-        }
-
-        Display display = ((WindowManager) activity.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        final int currentRotation = display.getRotation();
-        final int deviceOrientation = activity.getResources().getConfiguration().orientation;
-
-        final int currentOrientation = getScreenOrientationFromRotationAndOrientation(currentRotation, deviceOrientation);
-        int requestedOrientation;
-
-        // Choose a requested orientation that will result in the smallest change from the existing orientation.
-        if (CreativeOrientation.PORTRAIT == creativeOrientation) {
-            if (ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT == currentOrientation) {
-                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
-            } else {
-                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-            }
-        } else if (CreativeOrientation.LANDSCAPE == creativeOrientation) {
-            if (ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE == currentOrientation) {
-                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
-            } else {
-                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
-            }
-        } else {
-            // Don't lock screen orientation if the creative doesn't care.
-            return;
-        }
-
-        activity.setRequestedOrientation(requestedOrientation);
-    }
-
-    /**
-     * This tries to get the physical number of pixels on the device. This attempts to include
-     * the pixels in the notification bar and soft buttons.
-     *
-     * @param context Needs a context (application is fine) to determine width/height.
-     * @return Width and height of the device
-     */
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    public static Point getDeviceDimensions(@NonNull final Context context) {
-        Integer bestWidthPixels = null;
-        Integer bestHeightPixels = null;
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
-            final WindowManager windowManager = (WindowManager) context.getSystemService(
-                    Context.WINDOW_SERVICE);
-            final Display display = windowManager.getDefaultDisplay();
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                final Point screenSize = new Point();
-                display.getRealSize(screenSize);
-                bestWidthPixels = screenSize.x;
-                bestHeightPixels = screenSize.y;
-            } else {
-                try {
-                    bestWidthPixels = (Integer) new MethodBuilder(display,
-                            "getRawWidth").execute();
-                    bestHeightPixels = (Integer) new MethodBuilder(display,
-                            "getRawHeight").execute();
-                } catch (Exception e) {
-                    // Best effort. If this fails, just get the height and width normally,
-                    // which may not capture the pixels used in the notification bar.
-                    MoPubLog.v("Display#getRawWidth/Height failed.", e);
-                }
-            }
-        }
-
-        if (bestWidthPixels == null || bestHeightPixels == null) {
-            final DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
-            bestWidthPixels = displayMetrics.widthPixels;
-            bestHeightPixels = displayMetrics.heightPixels;
-        }
-
-        return new Point(bestWidthPixels, bestHeightPixels);
-    }
-}
+package com.mopub.common.util;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.content.Context;
+import android.content.pm.ActivityInfo;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.res.Configuration;
+import android.graphics.Point;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Build;
+import android.os.StatFs;
+import android.provider.Settings;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.DisplayMetrics;
+import android.view.Display;
+import android.view.Surface;
+import android.view.WindowManager;
+
+import com.mopub.common.CreativeOrientation;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+
+import org.apache.http.conn.util.InetAddressUtils;
+
+import java.io.File;
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.util.Locale;
+
+import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static android.Manifest.permission.INTERNET;
+import static com.mopub.common.util.Reflection.MethodBuilder;
+import static com.mopub.common.util.VersionCode.HONEYCOMB;
+import static com.mopub.common.util.VersionCode.currentApiLevel;
+import static java.util.Collections.list;
+
+public class DeviceUtils {
+    private static final int MAX_MEMORY_CACHE_SIZE = 30 * 1024 * 1024; // 30 MB
+    private static final int MIN_DISK_CACHE_SIZE = 30 * 1024 * 1024; // 30 MB
+    private static final int MAX_DISK_CACHE_SIZE = 100 * 1024 * 1024; // 100 MB
+
+    private DeviceUtils() {}
+
+    public static enum ForceOrientation {
+        FORCE_PORTRAIT("portrait"),
+        FORCE_LANDSCAPE("landscape"),
+        DEVICE_ORIENTATION("device"),
+        UNDEFINED("");
+
+        @NonNull private final String mKey;
+
+        private ForceOrientation(@NonNull final String key) {
+            mKey = key;
+        }
+
+        @NonNull
+        public static ForceOrientation getForceOrientation(@Nullable String key) {
+            for (final ForceOrientation orientation : ForceOrientation.values()) {
+                if (orientation.mKey.equalsIgnoreCase(key)) {
+                    return orientation;
+                }
+            }
+
+            return UNDEFINED;
+        }
+    }
+
+    public static enum IP {
+        IPv4,
+        IPv6;
+
+        private boolean matches(final String address) {
+            switch (this) {
+                case IPv4:
+                    return InetAddressUtils.isIPv4Address(address);
+                case IPv6:
+                    return InetAddressUtils.isIPv6Address(address);
+                default:
+                    return false;
+            }
+        }
+
+        private String toString(final String address) {
+            switch (this) {
+                case IPv4:
+                    return address;
+                case IPv6:
+                    return address.split("%")[0];
+                default:
+                    return null;
+            }
+        }
+    }
+
+    public static String getIpAddress(IP ip) throws SocketException {
+        for (final NetworkInterface networkInterface : list(NetworkInterface.getNetworkInterfaces())) {
+            for (final InetAddress address : list(networkInterface.getInetAddresses())) {
+                if (!address.isLoopbackAddress()) {
+                    String hostAddress = address.getHostAddress().toUpperCase(Locale.US);
+                    if (ip.matches(hostAddress)) {
+                        return ip.toString(hostAddress);
+                    }
+                }
+            }
+        }
+
+        return null;
+    }
+
+    public static String getHashedUdid(final Context context) {
+        if (context == null) {
+            return null;
+        }
+
+        String udid = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
+        return Utils.sha1(udid);
+    }
+
+    public static boolean isNetworkAvailable(@Nullable final Context context) {
+        if (context == null) {
+            return false;
+        }
+
+        final int internetPermission = context.checkCallingOrSelfPermission(INTERNET);
+        if (internetPermission == PackageManager.PERMISSION_DENIED) {
+            return false;
+        }
+
+        /**
+         * This is only checking if we have permission to access the network state
+         * It's possible to not have permission to check network state but still be able
+         * to access the network itself.
+         */
+        final int networkAccessPermission = context.checkCallingOrSelfPermission(ACCESS_NETWORK_STATE);
+        if (networkAccessPermission == PackageManager.PERMISSION_DENIED) {
+            return true;
+        }
+
+        // Otherwise, perform the connectivity check.
+        try {
+            final ConnectivityManager connnectionManager =
+                    (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+            final NetworkInfo networkInfo = connnectionManager.getActiveNetworkInfo();
+            return networkInfo.isConnected();
+        } catch (NullPointerException e) {
+            return false;
+        }
+    }
+
+    public static int memoryCacheSizeBytes(final Context context) {
+        final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
+        long memoryClass = activityManager.getMemoryClass();
+
+        if (currentApiLevel().isAtLeast(HONEYCOMB)) {
+            try {
+                final int flagLargeHeap = ApplicationInfo.class.getDeclaredField("FLAG_LARGE_HEAP").getInt(null);
+                if (Utils.bitMaskContainsFlag(context.getApplicationInfo().flags, flagLargeHeap)) {
+                    memoryClass = (Integer) new MethodBuilder(activityManager, "getLargeMemoryClass").execute();
+                }
+            } catch (Exception e) {
+                MoPubLog.d("Unable to reflectively determine large heap size on Honeycomb and above.");
+            }
+        }
+
+        long result = Math.min(MAX_MEMORY_CACHE_SIZE, memoryClass / 8 * 1024 * 1024);
+        return (int) result;
+    }
+
+    public static long diskCacheSizeBytes(File dir, long minSize) {
+        long size = minSize;
+        try {
+            StatFs statFs = new StatFs(dir.getAbsolutePath());
+            long availableBytes = ((long) statFs.getBlockCount()) * statFs.getBlockSize();
+            size = availableBytes / 50;
+        } catch (IllegalArgumentException e) {
+            MoPubLog.d("Unable to calculate 2% of available disk space, defaulting to minimum");
+        }
+
+        // Bound inside min/max size for disk cache.
+        return Math.max(Math.min(size, MAX_DISK_CACHE_SIZE), MIN_DISK_CACHE_SIZE);
+    }
+
+    public static long diskCacheSizeBytes(File dir) {
+        return diskCacheSizeBytes(dir, MIN_DISK_CACHE_SIZE);
+    }
+
+    public static int getScreenOrientation(@NonNull final Activity activity) {
+        final int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
+        final int deviceOrientation = activity.getResources().getConfiguration().orientation;
+
+        return getScreenOrientationFromRotationAndOrientation(rotation, deviceOrientation);
+    }
+
+    static int getScreenOrientationFromRotationAndOrientation(int rotation, int orientation) {
+        if (Configuration.ORIENTATION_PORTRAIT == orientation) {
+            switch (rotation) {
+                case Surface.ROTATION_90:
+                case Surface.ROTATION_180:
+                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
+
+                case Surface.ROTATION_0:
+                case Surface.ROTATION_270:
+                default:
+                    return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+            }
+        } else if (Configuration.ORIENTATION_LANDSCAPE == orientation) {
+            switch (rotation) {
+                case Surface.ROTATION_180:
+                case Surface.ROTATION_270:
+                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
+
+                case Surface.ROTATION_0:
+                case Surface.ROTATION_90:
+                default:
+                    return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+            }
+        } else {
+            MoPubLog.d("Unknown screen orientation. Defaulting to portrait.");
+            return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
+        }
+    }
+
+    /**
+     * Lock this activity in the requested orientation, rotating the display if necessary.
+     *
+     * @param creativeOrientation the orientation of the screen needed by the ad creative.
+     */
+    public static void lockOrientation(@NonNull Activity activity, @NonNull CreativeOrientation creativeOrientation) {
+        if (!Preconditions.NoThrow.checkNotNull(creativeOrientation) || !Preconditions.NoThrow.checkNotNull(activity)) {
+            return;
+        }
+
+        Display display = ((WindowManager) activity.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        final int currentRotation = display.getRotation();
+        final int deviceOrientation = activity.getResources().getConfiguration().orientation;
+
+        final int currentOrientation = getScreenOrientationFromRotationAndOrientation(currentRotation, deviceOrientation);
+        int requestedOrientation;
+
+        // Choose a requested orientation that will result in the smallest change from the existing orientation.
+        if (CreativeOrientation.PORTRAIT == creativeOrientation) {
+            if (ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT == currentOrientation) {
+                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
+            } else {
+                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+            }
+        } else if (CreativeOrientation.LANDSCAPE == creativeOrientation) {
+            if (ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE == currentOrientation) {
+                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
+            } else {
+                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+            }
+        } else {
+            // Don't lock screen orientation if the creative doesn't care.
+            return;
+        }
+
+        activity.setRequestedOrientation(requestedOrientation);
+    }
+
+    /**
+     * This tries to get the physical number of pixels on the device. This attempts to include
+     * the pixels in the notification bar and soft buttons.
+     *
+     * @param context Needs a context (application is fine) to determine width/height.
+     * @return Width and height of the device
+     */
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    public static Point getDeviceDimensions(@NonNull final Context context) {
+        Integer bestWidthPixels = null;
+        Integer bestHeightPixels = null;
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
+            final WindowManager windowManager = (WindowManager) context.getSystemService(
+                    Context.WINDOW_SERVICE);
+            final Display display = windowManager.getDefaultDisplay();
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                final Point screenSize = new Point();
+                display.getRealSize(screenSize);
+                bestWidthPixels = screenSize.x;
+                bestHeightPixels = screenSize.y;
+            } else {
+                try {
+                    bestWidthPixels = (Integer) new MethodBuilder(display,
+                            "getRawWidth").execute();
+                    bestHeightPixels = (Integer) new MethodBuilder(display,
+                            "getRawHeight").execute();
+                } catch (Exception e) {
+                    // Best effort. If this fails, just get the height and width normally,
+                    // which may not capture the pixels used in the notification bar.
+                    MoPubLog.v("Display#getRawWidth/Height failed.", e);
+                }
+            }
+        }
+
+        if (bestWidthPixels == null || bestHeightPixels == null) {
+            final DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
+            bestWidthPixels = displayMetrics.widthPixels;
+            bestHeightPixels = displayMetrics.heightPixels;
+        }
+
+        return new Point(bestWidthPixels, bestHeightPixels);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
new file mode 100644
index 00000000..267a9bbf
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -0,0 +1,61 @@
+package com.mopub.common.util;
+
+import android.graphics.Bitmap;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.widget.ImageView;
+
+
+public class ImageUtils {
+
+    /**
+     * Fast Gaussian blurring algorithm source:
+     * https://github.com/patrickfav/BlurTestAndroid/blob/master/BlurBenchmark/src/main/java/at/favre/app/blurbenchmark/blur/algorithms/GaussianFastBlur.java
+     *
+     */
+    @NonNull
+    public static Bitmap applyFastGaussianBlurToBitmap(@NonNull Bitmap mutableBitmap, int radius) {
+        int w = mutableBitmap.getWidth();
+        int h = mutableBitmap.getHeight();
+        int[] pixels = new int[w * h];
+        mutableBitmap.getPixels(pixels, 0, w, 0, 0, w, h);
+
+        for (int r = radius; r >= 1; r /= 2) {
+            for (int i = r; i < h - r; i++) {
+                for (int j = r; j < w - r; j++) {
+                    int tl = pixels[(i - r) * w + j - r];
+                    int tr = pixels[(i - r) * w + j + r];
+                    int tc = pixels[(i - r) * w + j];
+                    int bl = pixels[(i + r) * w + j - r];
+                    int br = pixels[(i + r) * w + j + r];
+                    int bc = pixels[(i + r) * w + j];
+                    int cl = pixels[i * w + j - r];
+                    int cr = pixels[i * w + j + r];
+
+                    pixels[(i * w) + j] = 0xFF000000 |
+                            (((tl & 0xFF) + (tr & 0xFF) + (tc & 0xFF) + (bl & 0xFF) + (br & 0xFF) + (bc & 0xFF) + (cl & 0xFF) + (cr & 0xFF)) >> 3) & 0xFF |
+                            (((tl & 0xFF00) + (tr & 0xFF00) + (tc & 0xFF00) + (bl & 0xFF00) + (br & 0xFF00) + (bc & 0xFF00) + (cl & 0xFF00) + (cr & 0xFF00)) >> 3) & 0xFF00 |
+                            (((tl & 0xFF0000) + (tr & 0xFF0000) + (tc & 0xFF0000) + (bl & 0xFF0000) + (br & 0xFF0000) + (bc & 0xFF0000) + (cl & 0xFF0000) + (cr & 0xFF0000)) >> 3) & 0xFF0000;
+                }
+            }
+        }
+
+        mutableBitmap.setPixels(pixels, 0, w, 0, 0, w, h);
+        return mutableBitmap;
+    }
+
+    /**
+     * Sets the alpha value of the ImageView.
+     * API Level < 16: http://developer.android.com/reference/android/widget/ImageView.html#setAlpha(int)
+     * API Level >= 16: http://developer.android.com/reference/android/widget/ImageView.html#setImageAlpha(int)
+     * @param imageView the ImageView
+     * @param alpha the alpha value being applied to the ImageView
+     */
+    public static void setImageViewAlpha(@NonNull ImageView imageView, int alpha) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            imageView.setImageAlpha(alpha);
+        } else {
+            imageView.setAlpha(alpha);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
index 1af522f5..ba776d4f 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -19,6 +19,7 @@
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.util.EnumSet;
 import java.util.List;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
@@ -203,11 +204,15 @@ public static Intent intentForShareTweet(@NonNull final Uri uri)
 
     /**
      * Launches a {@link MoPubBrowser} activity with the desired URL.
-     *  @param context The activity context.
+     * @param context The activity context.
      * @param uri The URL to load in the started {@link MoPubBrowser} activity.
      */
     public static void showMoPubBrowserForUrl(@NonNull final Context context,
-            @NonNull Uri uri) throws IntentNotResolvableException {
+            @NonNull Uri uri)
+            throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(uri);
+
         MoPubLog.d("Final URI to show in browser: " + uri);
 
         final Bundle extras = new Bundle();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
index 708fcc95..0c5021b6 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
@@ -1,19 +1,37 @@
-package com.mopub.common.util;
-
-public class Numbers {
-    private Numbers() {}
-
-    public static Double parseDouble(final Object value) throws ClassCastException {
-        if (value instanceof Number) {
-            return ((Number) value).doubleValue();
-        } else if (value instanceof String) {
-            try {
-                return Double.valueOf((String) value);
-            } catch (NumberFormatException e) {
-                throw new ClassCastException("Unable to parse " + value + " as double.");
-            }
-        } else {
-            throw new ClassCastException("Unable to parse " + value + " as double.");
-        }
-    }
-}
+package com.mopub.common.util;
+
+public class Numbers {
+    private Numbers() {}
+
+    /**
+     * Tries to parse the double value from a Number or String.
+     * @param value the object to parse.
+     * @return a {@code Double} instance containing the parsed double value.
+     * @throws ClassCastException if {@code value} cannot be parsed as a double value.
+     */
+    public static Double parseDouble(final Object value) throws ClassCastException {
+        if (value instanceof Number) {
+            return ((Number) value).doubleValue();
+        } else if (value instanceof String) {
+            try {
+                return Double.valueOf((String) value);
+            } catch (NumberFormatException e) {
+                throw new ClassCastException("Unable to parse " + value + " as double.");
+            }
+        } else {
+            throw new ClassCastException("Unable to parse " + value + " as double.");
+        }
+    }
+
+    /**
+     * Rounds up to the nearest full second. Formally, this is the long
+     * closest to negative infinity above or equal to millis, in milliseconds,
+     * converted to seconds.
+     *
+     * @param millis Time in milliseconds
+     * @return Time in seconds, rounded up.
+     */
+    public static long convertMillisecondsToSecondsRoundedUp(final long millis) {
+        return Math.round(Math.ceil(millis / 1000f));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java b/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
index a22bd6b2..f474c2f1 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
@@ -1,49 +1,55 @@
-package com.mopub.common.util;
-
-import android.text.TextUtils;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.regex.Pattern;
-
-public class Strings {
-    // Regex patterns
-    private static Pattern percentagePattern = Pattern.compile("((\\d{1,2})|(100))%");
-    private static Pattern absolutePattern = Pattern.compile("\\d{2}:\\d{2}:\\d{2}(.\\d{3})?");
-
-    public static String fromStream(InputStream inputStream) throws IOException {
-        int numberBytesRead = 0;
-        StringBuilder out = new StringBuilder();
-        byte[] bytes = new byte[4096];
-
-        while (numberBytesRead != -1) {
-            out.append(new String(bytes, 0, numberBytesRead));
-            numberBytesRead = inputStream.read(bytes);
-        }
-
-        inputStream.close();
-
-        return out.toString();
-    }
-
-    public static boolean isPercentageTracker(String progressValue) {
-        return !TextUtils.isEmpty(progressValue)
-                && percentagePattern.matcher(progressValue).matches();
-    }
-
-    public static boolean isAbsoluteTracker(String progressValue) {
-        return !TextUtils.isEmpty(progressValue)
-                && absolutePattern.matcher(progressValue).matches();
-    }
-
-    public static Integer parseAbsoluteOffset(String progressValue) {
-        final String[] split = progressValue.split(":");
-        if (split.length != 3) {
-            return null;
-        }
-
-        return Integer.parseInt(split[0]) * 60 * 60 * 1000 // Hours
-                + Integer.parseInt(split[1]) * 60 * 1000 // Minutes
-                + (int)(Float.parseFloat(split[2]) * 1000);
-    }
-}
+package com.mopub.common.util;
+
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.regex.Pattern;
+
+public class Strings {
+    // Regex patterns
+    private static Pattern percentagePattern = Pattern.compile("((\\d{1,2})|(100))%");
+    private static Pattern absolutePattern = Pattern.compile("\\d{2}:\\d{2}:\\d{2}(.\\d{3})?");
+
+    public static String fromStream(InputStream inputStream) throws IOException {
+        int numberBytesRead = 0;
+        StringBuilder out = new StringBuilder();
+        byte[] bytes = new byte[4096];
+
+        while (numberBytesRead != -1) {
+            out.append(new String(bytes, 0, numberBytesRead));
+            numberBytesRead = inputStream.read(bytes);
+        }
+
+        inputStream.close();
+
+        return out.toString();
+    }
+
+    public static boolean isPercentageTracker(String progressValue) {
+        return !TextUtils.isEmpty(progressValue)
+                && percentagePattern.matcher(progressValue).matches();
+    }
+
+    public static boolean isAbsoluteTracker(String progressValue) {
+        return !TextUtils.isEmpty(progressValue)
+                && absolutePattern.matcher(progressValue).matches();
+    }
+
+    @Nullable
+    public static Integer parseAbsoluteOffset(@Nullable String progressValue) {
+        if (progressValue == null) {
+            return null;
+        }
+
+        final String[] split = progressValue.split(":");
+        if (split.length != 3) {
+            return null;
+        }
+
+        return Integer.parseInt(split[0]) * 60 * 60 * 1000 // Hours
+                + Integer.parseInt(split[1]) * 60 * 1000 // Minutes
+                + (int)(Float.parseFloat(split[2]) * 1000);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index f29a61a2..461cc496 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -1,59 +1,57 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-
-import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
-
-public class BaseVideoPlayerActivity extends Activity {
-    static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
-    public static final String VIDEO_URL = "video_url";
-
-    public static void startMraid(final Context context, final String videoUrl) {
-        final Intent intentVideoPlayerActivity = createIntentMraid(context, videoUrl);
-        try {
-            context.startActivity(intentVideoPlayerActivity);
-        } catch (ActivityNotFoundException e) {
-            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
-        }
-    }
-
-    static Intent createIntentMraid(final Context context,
-            final String videoUrl) {
-        final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
-        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
-        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "mraid");
-        intentVideoPlayerActivity.putExtra(VIDEO_URL, videoUrl);
-        return intentVideoPlayerActivity;
-    }
-
-    static void startVast(final Context context,
-            final VastVideoConfiguration vastVideoConfiguration,
-            final long broadcastIdentifier) {
-        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfiguration, broadcastIdentifier);
-        try {
-            context.startActivity(intentVideoPlayerActivity);
-        } catch (ActivityNotFoundException e) {
-            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
-        }
-    }
-
-    static Intent createIntentVast(final Context context,
-            final VastVideoConfiguration vastVideoConfiguration,
-            final long broadcastIdentifier) {
-        final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
-        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
-        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "vast");
-        intentVideoPlayerActivity.putExtra(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-        intentVideoPlayerActivity.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        return intentVideoPlayerActivity;
-    }
-}
-
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+
+import com.mopub.common.logging.MoPubLog;
+
+import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
+
+public class BaseVideoPlayerActivity extends Activity {
+    static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
+    public static final String VIDEO_URL = "video_url";
+
+    public static void startMraid(final Context context, final String videoUrl) {
+        final Intent intentVideoPlayerActivity = createIntentMraid(context, videoUrl);
+        try {
+            context.startActivity(intentVideoPlayerActivity);
+        } catch (ActivityNotFoundException e) {
+            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+        }
+    }
+
+    static Intent createIntentMraid(final Context context,
+            final String videoUrl) {
+        final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
+        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
+        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "mraid");
+        intentVideoPlayerActivity.putExtra(VIDEO_URL, videoUrl);
+        return intentVideoPlayerActivity;
+    }
+
+    static void startVast(final Context context,
+            final VastVideoConfiguration vastVideoConfiguration,
+            final long broadcastIdentifier) {
+        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfiguration, broadcastIdentifier);
+        try {
+            context.startActivity(intentVideoPlayerActivity);
+        } catch (ActivityNotFoundException e) {
+            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+        }
+    }
+
+    static Intent createIntentVast(final Context context,
+            final VastVideoConfiguration vastVideoConfiguration,
+            final long broadcastIdentifier) {
+        final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
+        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
+        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "vast");
+        intentVideoPlayerActivity.putExtra(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        intentVideoPlayerActivity.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        return intentVideoPlayerActivity;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 16731700..13a603b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -1,93 +1,95 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.RelativeLayout;
-import android.widget.VideoView;
-
-import com.mopub.common.logging.MoPubLog;
-
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-
-public abstract class BaseVideoViewController {
-    private final Context mContext;
-    private final RelativeLayout mLayout;
-    private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
-    @Nullable private Long mBroadcastIdentifier;
-
-    public interface BaseVideoViewControllerListener {
-        void onSetContentView(final View view);
-        void onSetRequestedOrientation(final int requestedOrientation);
-        void onFinish();
-        void onStartActivityForResult(final Class<? extends Activity> clazz,
-                final int requestCode,
-                final Bundle extras);
-    }
-
-    protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
-        mContext = context.getApplicationContext();
-        mBroadcastIdentifier = broadcastIdentifier;
-        mBaseVideoViewControllerListener = baseVideoViewControllerListener;
-        mLayout = new RelativeLayout(mContext);
-    }
-
-     protected void onCreate() {
-        final RelativeLayout.LayoutParams adViewLayout = new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
-        adViewLayout.addRule(RelativeLayout.CENTER_IN_PARENT);
-        mLayout.addView(getVideoView(), 0, adViewLayout);
-        mBaseVideoViewControllerListener.onSetContentView(mLayout);
-    }
-
-    protected abstract VideoView getVideoView();
-    protected abstract void onPause();
-    protected abstract void onResume();
-    protected abstract void onDestroy();
-
-    public boolean backButtonEnabled() {
-        return true;
-    }
-
-    void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
-        // By default, the activity result is ignored
-    }
-
-    protected BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
-        return mBaseVideoViewControllerListener;
-    }
-
-    protected Context getContext() {
-        return mContext;
-    }
-
-    public ViewGroup getLayout() {
-        return mLayout;
-    }
-
-    protected void videoError(boolean shouldFinish) {
-        MoPubLog.e("Video cannot be played.");
-        broadcastAction(ACTION_INTERSTITIAL_FAIL);
-        if (shouldFinish) {
-           mBaseVideoViewControllerListener.onFinish();
-        }
-    }
-
-    protected void videoCompleted(boolean shouldFinish) {
-        if (shouldFinish) {
-            mBaseVideoViewControllerListener.onFinish();
-        }
-    }
-
-    void broadcastAction(final String action) {
-        if (mBroadcastIdentifier != null) {
-            EventForwardingBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
-        } else {
-            MoPubLog.w("Tried to broadcast a video event without a braodcast identifier to send to.");
-        }
-    }
-}
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.RelativeLayout;
+import android.widget.VideoView;
+
+import com.mopub.common.logging.MoPubLog;
+
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+
+public abstract class BaseVideoViewController {
+    private final Context mContext;
+    private final RelativeLayout mLayout;
+    private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
+    @Nullable private Long mBroadcastIdentifier;
+
+    public interface BaseVideoViewControllerListener {
+        void onSetContentView(final View view);
+        void onSetRequestedOrientation(final int requestedOrientation);
+        void onFinish();
+        void onStartActivityForResult(final Class<? extends Activity> clazz,
+                final int requestCode,
+                final Bundle extras);
+    }
+
+    protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        mContext = context.getApplicationContext();
+        mBroadcastIdentifier = broadcastIdentifier;
+        mBaseVideoViewControllerListener = baseVideoViewControllerListener;
+        mLayout = new RelativeLayout(mContext);
+    }
+
+     protected void onCreate() {
+        final RelativeLayout.LayoutParams adViewLayout = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
+        adViewLayout.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mLayout.addView(getVideoView(), 0, adViewLayout);
+        mBaseVideoViewControllerListener.onSetContentView(mLayout);
+    }
+
+    protected abstract VideoView getVideoView();
+    protected abstract void onPause();
+    protected abstract void onResume();
+    protected abstract void onDestroy();
+    protected abstract void onSaveInstanceState(@NonNull Bundle outState);
+
+    public boolean backButtonEnabled() {
+        return true;
+    }
+
+    void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        // By default, the activity result is ignored
+    }
+
+    protected BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
+        return mBaseVideoViewControllerListener;
+    }
+
+    protected Context getContext() {
+        return mContext;
+    }
+
+    public ViewGroup getLayout() {
+        return mLayout;
+    }
+
+    protected void videoError(boolean shouldFinish) {
+        MoPubLog.e("Video cannot be played.");
+        broadcastAction(ACTION_INTERSTITIAL_FAIL);
+        if (shouldFinish) {
+           mBaseVideoViewControllerListener.onFinish();
+        }
+    }
+
+    protected void videoCompleted(boolean shouldFinish) {
+        if (shouldFinish) {
+            mBaseVideoViewControllerListener.onFinish();
+        }
+    }
+
+    void broadcastAction(final String action) {
+        if (mBroadcastIdentifier != null) {
+            EventForwardingBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
+        } else {
+            MoPubLog.w("Tried to broadcast a video event without a braodcast identifier to send to.");
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 589b12de..60f3e6b3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -1,180 +1,205 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.Constants;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-
-import java.util.Map;
-import java.util.TreeMap;
-
-import static com.mopub.common.DataKeys.AD_HEIGHT;
-import static com.mopub.common.DataKeys.AD_REPORT_KEY;
-import static com.mopub.common.DataKeys.AD_WIDTH;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-
-public class CustomEventBannerAdapter implements CustomEventBannerListener {
-    public static final int DEFAULT_BANNER_TIMEOUT_DELAY = Constants.TEN_SECONDS_MILLIS;
-    private boolean mInvalidated;
-    private MoPubView mMoPubView;
-    private Context mContext;
-    private CustomEventBanner mCustomEventBanner;
-    private Map<String, Object> mLocalExtras;
-    private Map<String, String> mServerExtras;
-
-    private final Handler mHandler;
-    private final Runnable mTimeout;
-    private boolean mStoredAutorefresh;
-
-    public CustomEventBannerAdapter(@NonNull MoPubView moPubView,
-            @NonNull String className,
-            @NonNull Map<String, String> serverExtras,
-            long broadcastIdentifier,
-            @Nullable AdReport adReport) {
-        Preconditions.checkNotNull(serverExtras);
-        mHandler = new Handler();
-        mMoPubView = moPubView;
-        mContext = moPubView.getContext();
-        mTimeout = new Runnable() {
-            @Override
-            public void run() {
-                MoPubLog.d("Third-party network timed out.");
-                onBannerFailed(NETWORK_TIMEOUT);
-                invalidate();
-            }
-        };
-
-        MoPubLog.d("Attempting to invoke custom event: " + className);
-        try {
-            mCustomEventBanner = CustomEventBannerFactory.create(className);
-        } catch (Exception exception) {
-            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
-            mMoPubView.loadFailUrl(ADAPTER_NOT_FOUND);
-            return;
-        }
-
-        // Attempt to load the JSON extras into mServerExtras.
-        mServerExtras = new TreeMap<String,String>(serverExtras);
-
-        mLocalExtras = mMoPubView.getLocalExtras();
-        if (mMoPubView.getLocation() != null) {
-            mLocalExtras.put("location", mMoPubView.getLocation());
-        }
-        mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        mLocalExtras.put(AD_REPORT_KEY, adReport);
-        mLocalExtras.put(AD_WIDTH, mMoPubView.getAdWidth());
-        mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
-    }
-
-    void loadAd() {
-        if (isInvalidated() || mCustomEventBanner == null) {
-            return;
-        }
-
-        if (getTimeoutDelayMilliseconds() > 0) {
-            mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
-        }
-
-        mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
-    }
-
-    void invalidate() {
-        if (mCustomEventBanner != null) mCustomEventBanner.onInvalidate();
-        mContext = null;
-        mCustomEventBanner = null;
-        mLocalExtras = null;
-        mServerExtras = null;
-        mInvalidated = true;
-    }
-
-    boolean isInvalidated() {
-        return mInvalidated;
-    }
-
-    private void cancelTimeout() {
-        mHandler.removeCallbacks(mTimeout);
-    }
-
-    private int getTimeoutDelayMilliseconds() {
-        if (mMoPubView == null
-                || mMoPubView.getAdTimeoutDelay() == null
-                || mMoPubView.getAdTimeoutDelay() < 0) {
-            return DEFAULT_BANNER_TIMEOUT_DELAY;
-        }
-
-        return mMoPubView.getAdTimeoutDelay() * 1000;
-    }
-
-    /*
-     * CustomEventBanner.Listener implementation
-     */
-    @Override
-    public void onBannerLoaded(View bannerView) {
-        if (isInvalidated()) {
-            return;
-        }
-
-        cancelTimeout();
-
-        if (mMoPubView != null) {
-            mMoPubView.nativeAdLoaded();
-            mMoPubView.setAdContentView(bannerView);
-            if (!(bannerView instanceof HtmlBannerWebView)) {
-                mMoPubView.trackNativeImpression();
-            }
-        }
-    }
-
-    @Override
-    public void onBannerFailed(MoPubErrorCode errorCode) {
-        if (isInvalidated()) return;
-        
-        if (mMoPubView != null) {
-            if (errorCode == null) {
-                errorCode = UNSPECIFIED;
-            }
-            cancelTimeout();
-            mMoPubView.loadFailUrl(errorCode);
-        }
-    }
-
-    @Override
-    public void onBannerExpanded() {
-        if (isInvalidated()) return;
-
-        mStoredAutorefresh = mMoPubView.getAutorefreshEnabled();
-        mMoPubView.setAutorefreshEnabled(false);
-        mMoPubView.adPresentedOverlay();
-    }
-
-    @Override
-    public void onBannerCollapsed() {
-        if (isInvalidated()) return;
-
-        mMoPubView.setAutorefreshEnabled(mStoredAutorefresh);
-        mMoPubView.adClosed();
-    }
-
-    @Override
-    public void onBannerClicked() {
-        if (isInvalidated()) return;
-        
-        if (mMoPubView != null) mMoPubView.registerClick();
-    }
-    
-    @Override
-    public void onLeaveApplication() {
-        onBannerClicked();
-    }
-}
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+import com.mopub.mobileads.factories.CustomEventBannerFactory;
+
+import java.util.Map;
+import java.util.TreeMap;
+
+import static com.mopub.common.DataKeys.AD_HEIGHT;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.AD_WIDTH;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+public class CustomEventBannerAdapter implements CustomEventBannerListener {
+    public static final int DEFAULT_BANNER_TIMEOUT_DELAY = Constants.TEN_SECONDS_MILLIS;
+    private boolean mInvalidated;
+    private MoPubView mMoPubView;
+    private Context mContext;
+    private CustomEventBanner mCustomEventBanner;
+    private Map<String, Object> mLocalExtras;
+    private Map<String, String> mServerExtras;
+
+    private final Handler mHandler;
+    private final Runnable mTimeout;
+    private boolean mStoredAutorefresh;
+
+    public CustomEventBannerAdapter(@NonNull MoPubView moPubView,
+            @NonNull String className,
+            @NonNull Map<String, String> serverExtras,
+            long broadcastIdentifier,
+            @Nullable AdReport adReport) {
+        Preconditions.checkNotNull(serverExtras);
+        mHandler = new Handler();
+        mMoPubView = moPubView;
+        mContext = moPubView.getContext();
+        mTimeout = new Runnable() {
+            @Override
+            public void run() {
+                MoPubLog.d("Third-party network timed out.");
+                onBannerFailed(NETWORK_TIMEOUT);
+                invalidate();
+            }
+        };
+
+        MoPubLog.d("Attempting to invoke custom event: " + className);
+        try {
+            mCustomEventBanner = CustomEventBannerFactory.create(className);
+        } catch (Exception exception) {
+            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
+            mMoPubView.loadFailUrl(ADAPTER_NOT_FOUND);
+            return;
+        }
+
+        // Attempt to load the JSON extras into mServerExtras.
+        mServerExtras = new TreeMap<String, String>(serverExtras);
+
+        mLocalExtras = mMoPubView.getLocalExtras();
+        if (mMoPubView.getLocation() != null) {
+            mLocalExtras.put("location", mMoPubView.getLocation());
+        }
+        mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        mLocalExtras.put(AD_REPORT_KEY, adReport);
+        mLocalExtras.put(AD_WIDTH, mMoPubView.getAdWidth());
+        mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
+    }
+
+    void loadAd() {
+        if (isInvalidated() || mCustomEventBanner == null) {
+            return;
+        }
+
+        if (getTimeoutDelayMilliseconds() > 0) {
+            mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
+        }
+
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
+        } catch (Exception e) {
+            MoPubLog.d("Loading a custom event banner threw an exception.", e);
+            onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+    void invalidate() {
+        if (mCustomEventBanner != null) {
+            // Custom event classes can be developed by any third party and may not be tested.
+            // We catch all exceptions here to prevent crashes from untested code.
+            try {
+                mCustomEventBanner.onInvalidate();
+            } catch (Exception e) {
+                MoPubLog.d("Invalidating a custom event banner threw an exception", e);
+            }
+        }
+        mContext = null;
+        mCustomEventBanner = null;
+        mLocalExtras = null;
+        mServerExtras = null;
+        mInvalidated = true;
+    }
+
+    boolean isInvalidated() {
+        return mInvalidated;
+    }
+
+    private void cancelTimeout() {
+        mHandler.removeCallbacks(mTimeout);
+    }
+
+    private int getTimeoutDelayMilliseconds() {
+        if (mMoPubView == null
+                || mMoPubView.getAdTimeoutDelay() == null
+                || mMoPubView.getAdTimeoutDelay() < 0) {
+            return DEFAULT_BANNER_TIMEOUT_DELAY;
+        }
+
+        return mMoPubView.getAdTimeoutDelay() * 1000;
+    }
+
+    /*
+     * CustomEventBanner.Listener implementation
+     */
+    @Override
+    public void onBannerLoaded(View bannerView) {
+        if (isInvalidated()) {
+            return;
+        }
+
+        cancelTimeout();
+
+        if (mMoPubView != null) {
+            mMoPubView.nativeAdLoaded();
+            mMoPubView.setAdContentView(bannerView);
+            if (!(bannerView instanceof HtmlBannerWebView)) {
+                mMoPubView.trackNativeImpression();
+            }
+        }
+    }
+
+    @Override
+    public void onBannerFailed(MoPubErrorCode errorCode) {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mMoPubView != null) {
+            if (errorCode == null) {
+                errorCode = UNSPECIFIED;
+            }
+            cancelTimeout();
+            mMoPubView.loadFailUrl(errorCode);
+        }
+    }
+
+    @Override
+    public void onBannerExpanded() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        mStoredAutorefresh = mMoPubView.getAutorefreshEnabled();
+        mMoPubView.setAutorefreshEnabled(false);
+        mMoPubView.adPresentedOverlay();
+    }
+
+    @Override
+    public void onBannerCollapsed() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        mMoPubView.setAutorefreshEnabled(mStoredAutorefresh);
+        mMoPubView.adClosed();
+    }
+
+    @Override
+    public void onBannerClicked() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mMoPubView != null) {
+            mMoPubView.registerClick();
+        }
+    }
+
+    @Override
+    public void onLeaveApplication() {
+        onBannerClicked();
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index accf0073..740ec3c4 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -1,200 +1,229 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.Constants;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-
-import java.util.Map;
-import java.util.TreeMap;
-
-import static com.mopub.common.DataKeys.AD_REPORT_KEY;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-
-public class CustomEventInterstitialAdapter implements CustomEventInterstitialListener {
-    public static final int DEFAULT_INTERSTITIAL_TIMEOUT_DELAY = Constants.THIRTY_SECONDS_MILLIS;
-
-    private final MoPubInterstitial mMoPubInterstitial;
-    private boolean mInvalidated;
-    private CustomEventInterstitialAdapterListener mCustomEventInterstitialAdapterListener;
-    private CustomEventInterstitial mCustomEventInterstitial;
-    private Context mContext;
-    private Map<String, Object> mLocalExtras;
-    private Map<String, String> mServerExtras;
-    private final Handler mHandler;
-    private final Runnable mTimeout;
-
-    public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInterstitial,
-            @NonNull final String className,
-            @NonNull final Map<String, String> serverExtras,
-            long broadcastIdentifier,
-            @Nullable AdReport adReport) {
-        Preconditions.checkNotNull(serverExtras);
-        mHandler = new Handler();
-        mMoPubInterstitial = moPubInterstitial;
-        mContext = mMoPubInterstitial.getActivity();
-        mTimeout = new Runnable() {
-            @Override
-            public void run() {
-                MoPubLog.d("Third-party network timed out.");
-                onInterstitialFailed(NETWORK_TIMEOUT);
-                invalidate();
-            }
-        };
-
-        MoPubLog.d("Attempting to invoke custom event: " + className);
-        try {
-            mCustomEventInterstitial = CustomEventInterstitialFactory.create(className);
-        } catch (Exception exception) {
-            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
-            mMoPubInterstitial.onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
-            return;
-        }
-
-        mServerExtras = new TreeMap<String, String>(serverExtras);
-        mLocalExtras = mMoPubInterstitial.getLocalExtras();
-        if (mMoPubInterstitial.getLocation() != null) {
-            mLocalExtras.put("location", mMoPubInterstitial.getLocation());
-        }
-        mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        mLocalExtras.put(AD_REPORT_KEY, adReport);
-    }
-    
-    void loadInterstitial() {
-        if (isInvalidated() || mCustomEventInterstitial == null) {
-            return;
-        }
-
-        if (getTimeoutDelayMilliseconds() > 0) {
-            mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
-        }
-
-        mCustomEventInterstitial.loadInterstitial(mContext, this, mLocalExtras, mServerExtras);
-    }
-    
-    void showInterstitial() {
-        if (isInvalidated() || mCustomEventInterstitial == null) return;
-        
-        mCustomEventInterstitial.showInterstitial();
-    }
-
-    void invalidate() {
-        if (mCustomEventInterstitial != null) mCustomEventInterstitial.onInvalidate();
-        mCustomEventInterstitial = null;
-        mContext = null;
-        mServerExtras = null;
-        mLocalExtras = null;
-        mCustomEventInterstitialAdapterListener = null;
-        mInvalidated = true;
-    }
-
-    boolean isInvalidated() {
-        return mInvalidated;
-    }
-
-    void setAdapterListener(CustomEventInterstitialAdapterListener listener) {
-        mCustomEventInterstitialAdapterListener = listener;
-    }
-
-    private void cancelTimeout() {
-        mHandler.removeCallbacks(mTimeout);
-    }
-
-    private int getTimeoutDelayMilliseconds() {
-        if (mMoPubInterstitial == null
-                || mMoPubInterstitial.getAdTimeoutDelay() == null
-                || mMoPubInterstitial.getAdTimeoutDelay() < 0) {
-            return DEFAULT_INTERSTITIAL_TIMEOUT_DELAY;
-        }
-
-        return mMoPubInterstitial.getAdTimeoutDelay() * 1000;
-    }
-
-    interface CustomEventInterstitialAdapterListener {
-        void onCustomEventInterstitialLoaded();
-        void onCustomEventInterstitialFailed(MoPubErrorCode errorCode);
-        void onCustomEventInterstitialShown();
-        void onCustomEventInterstitialClicked();
-        void onCustomEventInterstitialDismissed();
-    }
-
-    /*
-     * CustomEventInterstitial.Listener implementation
-     */
-    @Override
-    public void onInterstitialLoaded() {
-        if (isInvalidated()) {
-            return;
-        }
-
-        cancelTimeout();
-
-        if (mCustomEventInterstitialAdapterListener != null) {
-            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialLoaded();
-        }
-    }
-
-    @Override
-    public void onInterstitialFailed(MoPubErrorCode errorCode) {
-        if (isInvalidated()) {
-            return;
-        }
-
-        if (mCustomEventInterstitialAdapterListener != null) {
-            if (errorCode == null) {
-                errorCode = UNSPECIFIED;
-            }
-            cancelTimeout();
-            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialFailed(errorCode);
-        }
-    }
-
-    @Override
-    public void onInterstitialShown() {
-        if (isInvalidated()) {
-            return;
-        }
-
-        if (mCustomEventInterstitialAdapterListener != null) {
-            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialShown();
-        }
-    }
-
-    @Override
-    public void onInterstitialClicked() {
-        if (isInvalidated()) {
-            return;
-        }
-
-        if (mCustomEventInterstitialAdapterListener != null) {
-            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialClicked();
-        }
-    }
-
-    @Override
-    public void onLeaveApplication() {
-        onInterstitialClicked();
-    }
-
-    @Override
-    public void onInterstitialDismissed() {
-        if (isInvalidated()) return;
-
-        if (mCustomEventInterstitialAdapterListener != null) mCustomEventInterstitialAdapterListener.onCustomEventInterstitialDismissed();
-    }
-
-    @Deprecated
-    void setCustomEventInterstitial(CustomEventInterstitial interstitial) {
-        mCustomEventInterstitial = interstitial;
-    }
-}
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
+
+import java.util.Map;
+import java.util.TreeMap;
+
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+public class CustomEventInterstitialAdapter implements CustomEventInterstitialListener {
+    public static final int DEFAULT_INTERSTITIAL_TIMEOUT_DELAY = Constants.THIRTY_SECONDS_MILLIS;
+
+    private final MoPubInterstitial mMoPubInterstitial;
+    private boolean mInvalidated;
+    private CustomEventInterstitialAdapterListener mCustomEventInterstitialAdapterListener;
+    private CustomEventInterstitial mCustomEventInterstitial;
+    private Context mContext;
+    private Map<String, Object> mLocalExtras;
+    private Map<String, String> mServerExtras;
+    private final Handler mHandler;
+    private final Runnable mTimeout;
+
+    public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInterstitial,
+            @NonNull final String className,
+            @NonNull final Map<String, String> serverExtras,
+            long broadcastIdentifier,
+            @Nullable AdReport adReport) {
+        Preconditions.checkNotNull(serverExtras);
+        mHandler = new Handler();
+        mMoPubInterstitial = moPubInterstitial;
+        mContext = mMoPubInterstitial.getActivity();
+        mTimeout = new Runnable() {
+            @Override
+            public void run() {
+                MoPubLog.d("Third-party network timed out.");
+                onInterstitialFailed(NETWORK_TIMEOUT);
+                invalidate();
+            }
+        };
+
+        MoPubLog.d("Attempting to invoke custom event: " + className);
+        try {
+            mCustomEventInterstitial = CustomEventInterstitialFactory.create(className);
+        } catch (Exception exception) {
+            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
+            mMoPubInterstitial.onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
+            return;
+        }
+
+        mServerExtras = new TreeMap<String, String>(serverExtras);
+        mLocalExtras = mMoPubInterstitial.getLocalExtras();
+        if (mMoPubInterstitial.getLocation() != null) {
+            mLocalExtras.put("location", mMoPubInterstitial.getLocation());
+        }
+        mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        mLocalExtras.put(AD_REPORT_KEY, adReport);
+    }
+
+    void loadInterstitial() {
+        if (isInvalidated() || mCustomEventInterstitial == null) {
+            return;
+        }
+
+        if (getTimeoutDelayMilliseconds() > 0) {
+            mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
+        }
+
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            mCustomEventInterstitial.loadInterstitial(mContext, this, mLocalExtras, mServerExtras);
+        } catch (Exception e) {
+            MoPubLog.d("Loading a custom event interstitial threw an exception.", e);
+            onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+    void showInterstitial() {
+        if (isInvalidated() || mCustomEventInterstitial == null) {
+            return;
+        }
+
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            mCustomEventInterstitial.showInterstitial();
+        } catch (Exception e) {
+            MoPubLog.d("Showing a custom event interstitial threw an exception.", e);
+            onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+    void invalidate() {
+        if (mCustomEventInterstitial != null) {
+
+            // Custom event classes can be developed by any third party and may not be tested.
+            // We catch all exceptions here to prevent crashes from untested code.
+            try {
+                mCustomEventInterstitial.onInvalidate();
+            } catch (Exception e) {
+                MoPubLog.d("Invalidating a custom event interstitial threw an exception.", e);
+            }
+        }
+        mCustomEventInterstitial = null;
+        mContext = null;
+        mServerExtras = null;
+        mLocalExtras = null;
+        mCustomEventInterstitialAdapterListener = null;
+        mInvalidated = true;
+    }
+
+    boolean isInvalidated() {
+        return mInvalidated;
+    }
+
+    void setAdapterListener(CustomEventInterstitialAdapterListener listener) {
+        mCustomEventInterstitialAdapterListener = listener;
+    }
+
+    private void cancelTimeout() {
+        mHandler.removeCallbacks(mTimeout);
+    }
+
+    private int getTimeoutDelayMilliseconds() {
+        if (mMoPubInterstitial == null
+                || mMoPubInterstitial.getAdTimeoutDelay() == null
+                || mMoPubInterstitial.getAdTimeoutDelay() < 0) {
+            return DEFAULT_INTERSTITIAL_TIMEOUT_DELAY;
+        }
+
+        return mMoPubInterstitial.getAdTimeoutDelay() * 1000;
+    }
+
+    interface CustomEventInterstitialAdapterListener {
+        void onCustomEventInterstitialLoaded();
+        void onCustomEventInterstitialFailed(MoPubErrorCode errorCode);
+        void onCustomEventInterstitialShown();
+        void onCustomEventInterstitialClicked();
+        void onCustomEventInterstitialDismissed();
+    }
+
+    /*
+     * CustomEventInterstitial.Listener implementation
+     */
+    @Override
+    public void onInterstitialLoaded() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        cancelTimeout();
+
+        if (mCustomEventInterstitialAdapterListener != null) {
+            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialLoaded();
+        }
+    }
+
+    @Override
+    public void onInterstitialFailed(MoPubErrorCode errorCode) {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mCustomEventInterstitialAdapterListener != null) {
+            if (errorCode == null) {
+                errorCode = UNSPECIFIED;
+            }
+            cancelTimeout();
+            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialFailed(errorCode);
+        }
+    }
+
+    @Override
+    public void onInterstitialShown() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mCustomEventInterstitialAdapterListener != null) {
+            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialShown();
+        }
+    }
+
+    @Override
+    public void onInterstitialClicked() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mCustomEventInterstitialAdapterListener != null) {
+            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialClicked();
+        }
+    }
+
+    @Override
+    public void onLeaveApplication() {
+        onInterstitialClicked();
+    }
+
+    @Override
+    public void onInterstitialDismissed() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mCustomEventInterstitialAdapterListener != null) {
+            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialDismissed();
+        }
+    }
+
+    @Deprecated
+    void setCustomEventInterstitial(CustomEventInterstitial interstitial) {
+        mCustomEventInterstitial = interstitial;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index b581bb8b..35e56469 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -13,12 +13,25 @@
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
 
+import java.util.EnumSet;
+
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 class HtmlWebViewClient extends WebViewClient {
     static final String MOPUB_FINISH_LOAD = "mopub://finishLoad";
     static final String MOPUB_FAIL_LOAD = "mopub://failLoad";
 
+    private final EnumSet<UrlAction> SUPPORTED_URL_ACTIONS = EnumSet.of(
+            UrlAction.HANDLE_MOPUB_SCHEME,
+            UrlAction.IGNORE_ABOUT_SCHEME,
+            UrlAction.HANDLE_PHONE_SCHEME,
+            UrlAction.OPEN_APP_MARKET,
+            UrlAction.OPEN_NATIVE_BROWSER,
+            UrlAction.OPEN_IN_APP_BROWSER,
+            UrlAction.HANDLE_SHARE_TWEET,
+            UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+            UrlAction.FOLLOW_DEEP_LINK);
+
     private final Context mContext;
     private HtmlWebViewListener mHtmlWebViewListener;
     private BaseHtmlWebView mHtmlWebView;
@@ -36,15 +49,7 @@
     @Override
     public boolean shouldOverrideUrlLoading(final WebView view, final String url) {
         new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        UrlAction.HANDLE_MOPUB_SCHEME,
-                        UrlAction.IGNORE_ABOUT_SCHEME,
-                        UrlAction.HANDLE_PHONE_SCHEME,
-                        UrlAction.OPEN_APP_MARKET,
-                        UrlAction.OPEN_NATIVE_BROWSER,
-                        UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET,
-                        UrlAction.FOLLOW_DEEP_LINK)
+                .withSupportedUrlActions(SUPPORTED_URL_ACTIONS)
                 .withResultActions(new UrlHandler.ResultActions() {
                     @Override
                     public void urlHandlingSucceeded(@NonNull String url,
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 54de9137..12e402dd 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -1,199 +1,201 @@
-package com.mopub.mobileads;
-
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Build.VERSION;
-import android.os.Build.VERSION_CODES;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-import android.view.View;
-import android.view.WindowManager;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import com.mopub.mraid.MraidController;
-import com.mopub.mraid.MraidController.MraidListener;
-import com.mopub.mraid.MraidController.UseCustomCloseListener;
-import com.mopub.mraid.MraidWebViewDebugListener;
-import com.mopub.mraid.PlacementType;
-
-import static com.mopub.common.DataKeys.AD_REPORT_KEY;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
-
-public class MraidActivity extends BaseInterstitialActivity {
-    @Nullable private MraidController mMraidController;
-    @Nullable private MraidWebViewDebugListener mDebugListener;
-
-    public static void preRenderHtml(@NonNull final Context context,
-            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @NonNull final String htmlData) {
-        BaseWebView dummyWebView = new BaseWebView(context);
-
-        dummyWebView.enablePlugins(false);
-        dummyWebView.setWebViewClient(new WebViewClient() {
-            @Override
-            public void onPageFinished(final WebView view, final String url) {
-                customEventInterstitialListener.onInterstitialLoaded();
-            }
-
-            @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                return true;
-            }
-
-            @Override
-            public void onReceivedError(final WebView view, final int errorCode,
-                    final String description,
-                    final String failingUrl) {
-                super.onReceivedError(view, errorCode, description, failingUrl);
-                customEventInterstitialListener.onInterstitialFailed(
-                        MoPubErrorCode.MRAID_LOAD_ERROR);
-            }
-        });
-
-        dummyWebView.loadDataWithBaseURL(null, htmlData, "text/html", "UTF-8", null);
-    }
-
-    public static void start(@NonNull Context context, @Nullable AdReport adreport, @NonNull String htmlData, long broadcastIdentifier) {
-        Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier);
-        try {
-            context.startActivity(intent);
-        } catch (ActivityNotFoundException exception) {
-            Log.d("MraidInterstitial", "MraidActivity.class not found. Did you declare MraidActivity in your manifest?");
-        }
-    }
-
-    @VisibleForTesting
-    protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
-            @NonNull String htmlData, long broadcastIdentifier) {
-        Intent intent = new Intent(context, MraidActivity.class);
-        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
-        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        intent.putExtra(AD_REPORT_KEY, adReport);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        return intent;
-    }
-
-    @Override
-    public View getAdView() {
-        String htmlData = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
-        if (htmlData == null) {
-            MoPubLog.w("MraidActivity received a null HTML body. Finishing the activity.");
-            finish();
-            return new View(this);
-        }
-
-        mMraidController = new MraidController(
-                this, mAdReport, PlacementType.INTERSTITIAL);
-
-        mMraidController.setDebugListener(mDebugListener);
-        mMraidController.setMraidListener(new MraidListener() {
-            @Override
-            public void onLoaded(View view) {
-                // This is only done for the interstitial. Banners have a different mechanism
-                // for tracking third party impressions.
-                mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
-            }
-
-            @Override
-            public void onFailedToLoad() {
-                MoPubLog.d("MraidActivity failed to load. Finishing the activity");
-                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
-                        ACTION_INTERSTITIAL_FAIL);
-                finish();
-            }
-
-            public void onClose() {
-                mMraidController.loadJavascript(WEB_VIEW_DID_CLOSE.getJavascript());
-                finish();
-            }
-
-            @Override
-            public void onExpand() {
-                // No-op. The interstitial is always expanded.
-            }
-
-            @Override
-            public void onOpen() {
-                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
-                        ACTION_INTERSTITIAL_CLICK);
-            }
-        });
-
-        // Needed because the Activity provides the close button, not the controller. This
-        // gets called if the creative calls mraid.useCustomClose.
-        mMraidController.setUseCustomCloseListener(new UseCustomCloseListener() {
-            public void useCustomCloseChanged(boolean useCustomClose) {
-                if (useCustomClose) {
-                    hideInterstitialCloseButton();
-                } else {
-                    showInterstitialCloseButton();
-                }
-            }
-        });
-
-        mMraidController.loadContent(htmlData);
-        return mMraidController.getAdContainer();
-    }
-
-    @Override
-    public void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
-
-        if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {
-            getWindow().setFlags(
-                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
-                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-        }
-    }
-
-    @Override
-    protected void onPause() {
-        if (mMraidController != null) {
-            mMraidController.pause(isFinishing());
-        }
-        super.onPause();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (mMraidController != null) {
-            mMraidController.resume();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (mMraidController != null) {
-            mMraidController.destroy();
-        }
-
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
-        super.onDestroy();
-    }
-
-    @VisibleForTesting
-    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
-        mDebugListener = debugListener;
-        if (mMraidController != null) {
-            mMraidController.setDebugListener(debugListener);
-        }
-    }
-}
+package com.mopub.mobileads;
+
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import android.view.View;
+import android.view.WindowManager;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mraid.MraidController;
+import com.mopub.mraid.MraidController.MraidListener;
+import com.mopub.mraid.MraidController.UseCustomCloseListener;
+import com.mopub.mraid.MraidWebViewDebugListener;
+import com.mopub.mraid.PlacementType;
+
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+
+public class MraidActivity extends BaseInterstitialActivity {
+    @Nullable private MraidController mMraidController;
+    @Nullable private MraidWebViewDebugListener mDebugListener;
+
+    public static void preRenderHtml(@NonNull final Context context,
+            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
+            @NonNull final String htmlData) {
+        BaseWebView dummyWebView = new BaseWebView(context);
+
+        dummyWebView.enablePlugins(false);
+        dummyWebView.setWebViewClient(new WebViewClient() {
+            @Override
+            public void onPageFinished(final WebView view, final String url) {
+                customEventInterstitialListener.onInterstitialLoaded();
+            }
+
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                return true;
+            }
+
+            @Override
+            public void onReceivedError(final WebView view, final int errorCode,
+                    final String description,
+                    final String failingUrl) {
+                super.onReceivedError(view, errorCode, description, failingUrl);
+                customEventInterstitialListener.onInterstitialFailed(
+                        MoPubErrorCode.MRAID_LOAD_ERROR);
+            }
+        });
+
+        dummyWebView.loadDataWithBaseURL("http://" + Constants.HOST + "/",
+                htmlData, "text/html", "UTF-8", null);
+    }
+
+    public static void start(@NonNull Context context, @Nullable AdReport adreport, @NonNull String htmlData, long broadcastIdentifier) {
+        Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier);
+        try {
+            context.startActivity(intent);
+        } catch (ActivityNotFoundException exception) {
+            Log.d("MraidInterstitial", "MraidActivity.class not found. Did you declare MraidActivity in your manifest?");
+        }
+    }
+
+    @VisibleForTesting
+    protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
+            @NonNull String htmlData, long broadcastIdentifier) {
+        Intent intent = new Intent(context, MraidActivity.class);
+        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        intent.putExtra(AD_REPORT_KEY, adReport);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        return intent;
+    }
+
+    @Override
+    public View getAdView() {
+        String htmlData = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
+        if (htmlData == null) {
+            MoPubLog.w("MraidActivity received a null HTML body. Finishing the activity.");
+            finish();
+            return new View(this);
+        }
+
+        mMraidController = new MraidController(
+                this, mAdReport, PlacementType.INTERSTITIAL);
+
+        mMraidController.setDebugListener(mDebugListener);
+        mMraidController.setMraidListener(new MraidListener() {
+            @Override
+            public void onLoaded(View view) {
+                // This is only done for the interstitial. Banners have a different mechanism
+                // for tracking third party impressions.
+                mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
+            }
+
+            @Override
+            public void onFailedToLoad() {
+                MoPubLog.d("MraidActivity failed to load. Finishing the activity");
+                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_FAIL);
+                finish();
+            }
+
+            public void onClose() {
+                mMraidController.loadJavascript(WEB_VIEW_DID_CLOSE.getJavascript());
+                finish();
+            }
+
+            @Override
+            public void onExpand() {
+                // No-op. The interstitial is always expanded.
+            }
+
+            @Override
+            public void onOpen() {
+                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_CLICK);
+            }
+        });
+
+        // Needed because the Activity provides the close button, not the controller. This
+        // gets called if the creative calls mraid.useCustomClose.
+        mMraidController.setUseCustomCloseListener(new UseCustomCloseListener() {
+            public void useCustomCloseChanged(boolean useCustomClose) {
+                if (useCustomClose) {
+                    hideInterstitialCloseButton();
+                } else {
+                    showInterstitialCloseButton();
+                }
+            }
+        });
+
+        mMraidController.loadContent(htmlData);
+        return mMraidController.getAdContainer();
+    }
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
+
+        if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {
+            getWindow().setFlags(
+                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
+                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        if (mMraidController != null) {
+            mMraidController.pause(isFinishing());
+        }
+        super.onPause();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (mMraidController != null) {
+            mMraidController.resume();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (mMraidController != null) {
+            mMraidController.destroy();
+        }
+
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
+        super.onDestroy();
+    }
+
+    @VisibleForTesting
+    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
+        mDebugListener = debugListener;
+        if (mMraidController != null) {
+            mMraidController.setDebugListener(debugListener);
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 2c9c840c..d44f2f22 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -1,146 +1,155 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.view.Window;
-import android.view.WindowManager;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Intents;
-import com.mopub.mraid.MraidVideoViewController;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
-
-public class MraidVideoPlayerActivity extends BaseVideoPlayerActivity implements BaseVideoViewController.BaseVideoViewControllerListener {
-    @Nullable private BaseVideoViewController mBaseVideoController;
-    private long mBroadcastIdentifier;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        requestWindowFeature(Window.FEATURE_NO_TITLE);
-        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
-
-        mBroadcastIdentifier = getBroadcastIdentifierFromIntent(getIntent());
-
-        try {
-            mBaseVideoController = createVideoViewController();
-        } catch (IllegalStateException e) {
-            // This can happen if the activity was started without valid intent extras. We leave
-            // mBaseVideoController set to null, and finish the activity immediately.
-            
-            broadcastAction(this, mBroadcastIdentifier, ACTION_INTERSTITIAL_FAIL);
-            finish();
-            return;
-        }
-
-        mBaseVideoController.onCreate();
-    }
-
-    @Override
-    protected void onPause() {
-        if (mBaseVideoController != null) {
-            mBaseVideoController.onPause();
-        }
-        super.onPause();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (mBaseVideoController != null) {
-            mBaseVideoController.onResume();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (mBaseVideoController != null) {
-            mBaseVideoController.onDestroy();
-        }
-        super.onDestroy();
-    }
-
-    @Override
-    public void onBackPressed() {
-        if (mBaseVideoController != null && mBaseVideoController.backButtonEnabled()) {
-            super.onBackPressed();
-        }
-    }
-
-    @Override
-    protected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
-        if (mBaseVideoController != null) {
-            mBaseVideoController.onActivityResult(requestCode, resultCode, data);
-        }
-    }
-
-    private BaseVideoViewController createVideoViewController() throws IllegalStateException {
-        String clazz = getIntent().getStringExtra(VIDEO_CLASS_EXTRAS_KEY);
-
-        if ("vast".equals(clazz)) {
-            return new VastVideoViewController(this, getIntent().getExtras(), mBroadcastIdentifier, this);
-        } else if ("mraid".equals(clazz)) {
-            return new MraidVideoViewController(this, getIntent().getExtras(), this);
-        } else {
-            throw new IllegalStateException("Unsupported video type: " + clazz);
-        }
-    }
-
-    /**
-     * Implementation of BaseVideoViewControllerListener
-     */
-
-    @Override
-    public void onSetContentView(final View view) {
-        setContentView(view);
-    }
-
-    @Override
-    public void onSetRequestedOrientation(final int requestedOrientation) {
-        setRequestedOrientation(requestedOrientation);
-    }
-
-    @Override
-    public void onFinish() {
-        finish();
-    }
-
-    @Override
-    public void onStartActivityForResult(final Class<? extends Activity> clazz,
-            final int requestCode,
-            final Bundle extras) {
-        if (clazz == null) {
-            return;
-        }
-
-        final Intent intent = Intents.getStartActivityIntent(this, clazz, extras);
-
-        try {
-            startActivityForResult(intent, requestCode);
-        } catch (ActivityNotFoundException e) {
-            MoPubLog.d("Activity " + clazz.getName() + " not found. Did you declare it in your AndroidManifest.xml?");
-        }
-    }
-
-    protected static long getBroadcastIdentifierFromIntent(Intent intent) {
-        return intent.getLongExtra(BROADCAST_IDENTIFIER_KEY, -1);
-    }
-
-    @Deprecated // for testing
-    BaseVideoViewController getBaseVideoViewController() {
-        return mBaseVideoController;
-    }
-
-    @Deprecated // for testing
-    void setBaseVideoViewController(final BaseVideoViewController baseVideoViewController) {
-        mBaseVideoController = baseVideoViewController;
-    }
-}
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.mraid.MraidVideoViewController;
+
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+
+public class MraidVideoPlayerActivity extends BaseVideoPlayerActivity implements BaseVideoViewController.BaseVideoViewControllerListener {
+    @Nullable private BaseVideoViewController mBaseVideoController;
+    private long mBroadcastIdentifier;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
+
+        mBroadcastIdentifier = getBroadcastIdentifierFromIntent(getIntent());
+
+        try {
+            mBaseVideoController = createVideoViewController(savedInstanceState);
+        } catch (IllegalStateException e) {
+            // This can happen if the activity was started without valid intent extras. We leave
+            // mBaseVideoController set to null, and finish the activity immediately.
+            
+            broadcastAction(this, mBroadcastIdentifier, ACTION_INTERSTITIAL_FAIL);
+            finish();
+            return;
+        }
+
+        mBaseVideoController.onCreate();
+    }
+
+    @Override
+    protected void onPause() {
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onPause();
+        }
+        super.onPause();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onResume();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onDestroy();
+        }
+        super.onDestroy();
+    }
+
+    @Override
+    protected void onSaveInstanceState(@NonNull Bundle outState) {
+        super.onSaveInstanceState(outState);
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onSaveInstanceState(outState);
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (mBaseVideoController != null && mBaseVideoController.backButtonEnabled()) {
+            super.onBackPressed();
+        }
+    }
+
+    @Override
+    protected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+
+    private BaseVideoViewController createVideoViewController(Bundle savedInstanceState) throws IllegalStateException {
+        String clazz = getIntent().getStringExtra(VIDEO_CLASS_EXTRAS_KEY);
+
+        if ("vast".equals(clazz)) {
+            return new VastVideoViewController(this, getIntent().getExtras(), savedInstanceState, mBroadcastIdentifier, this);
+        } else if ("mraid".equals(clazz)) {
+            return new MraidVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
+        } else {
+            throw new IllegalStateException("Unsupported video type: " + clazz);
+        }
+    }
+
+    /**
+     * Implementation of BaseVideoViewControllerListener
+     */
+
+    @Override
+    public void onSetContentView(final View view) {
+        setContentView(view);
+    }
+
+    @Override
+    public void onSetRequestedOrientation(final int requestedOrientation) {
+        setRequestedOrientation(requestedOrientation);
+    }
+
+    @Override
+    public void onFinish() {
+        finish();
+    }
+
+    @Override
+    public void onStartActivityForResult(final Class<? extends Activity> clazz,
+            final int requestCode,
+            final Bundle extras) {
+        if (clazz == null) {
+            return;
+        }
+
+        final Intent intent = Intents.getStartActivityIntent(this, clazz, extras);
+
+        try {
+            startActivityForResult(intent, requestCode);
+        } catch (ActivityNotFoundException e) {
+            MoPubLog.d("Activity " + clazz.getName() + " not found. Did you declare it in your AndroidManifest.xml?");
+        }
+    }
+
+    protected static long getBroadcastIdentifierFromIntent(Intent intent) {
+        return intent.getLongExtra(BROADCAST_IDENTIFIER_KEY, -1);
+    }
+
+    @Deprecated // for testing
+    BaseVideoViewController getBaseVideoViewController() {
+        return mBaseVideoController;
+    }
+
+    @Deprecated // for testing
+    void setBaseVideoViewController(final BaseVideoViewController baseVideoViewController) {
+        mBaseVideoController = baseVideoViewController;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
new file mode 100644
index 00000000..dbbec142
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
@@ -0,0 +1,73 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+/**
+ * This XML manager handles the initial Ad node.
+ * There can be many Ad nodes in a VAST document, and this individually separates each one.
+ * The VAST 3.0 spec for Ad nodes states it can have either <i>one</i> InLine or <i>one</i>
+ * Wrapper as children. However, our implementation handles the case of having both an InLine
+ * and a Wrapper.
+ */
+class VastAdXmlManager {
+
+    // Element names
+    private static final String INLINE = "InLine";
+    private static final String WRAPPER = "Wrapper";
+
+    // Attribute names
+    private static final String SEQUENCE = "sequence";
+
+    @NonNull private final Node mAdNode;
+
+    VastAdXmlManager(@NonNull final Node adNode) {
+        Preconditions.checkNotNull(adNode);
+        mAdNode = adNode;
+    }
+
+    /**
+     * If there is an InLine section, return its XML manager.
+     *
+     * @return The {@link VastInLineXmlManager} or {@code null} if there is no InLine child node.
+     */
+    @Nullable
+    VastInLineXmlManager getInLineXmlManager() {
+        Node inLineNode = XmlUtils.getFirstMatchingChildNode(mAdNode, INLINE);
+        VastInLineXmlManager vastInLineXmlManager = null;
+        if (inLineNode != null) {
+            vastInLineXmlManager = new VastInLineXmlManager(inLineNode);
+        }
+        return vastInLineXmlManager;
+    }
+
+    /**
+     * If there is a Wrapper section, return its XML manager.
+     *
+     * @return The {@link VastWrapperXmlManager} or {@code null} if there is no Wrapper child node.
+     */
+    @Nullable
+    VastWrapperXmlManager getWrapperXmlManager() {
+        Node wrapperNode = XmlUtils.getFirstMatchingChildNode(mAdNode, WRAPPER);
+        VastWrapperXmlManager vastWrapperXmlManager = null;
+        if (wrapperNode != null) {
+            vastWrapperXmlManager = new VastWrapperXmlManager(wrapperNode);
+        }
+        return vastWrapperXmlManager;
+    }
+
+    /**
+     * Gets the attribute for sequence number. This attribute is optional.
+     *
+     * @return The sequence number
+     */
+    @Nullable
+    String getSequence() {
+        return XmlUtils.getAttributeValue(mAdNode, SEQUENCE);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
new file mode 100644
index 00000000..f1998357
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
@@ -0,0 +1,143 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.List;
+
+abstract class VastBaseInLineWrapperXmlManager {
+
+    // Element Names
+    private static final String IMPRESSION_TRACKER = "Impression";
+    private static final String COMPANION = "Companion";
+    private static final String LINEAR = "Linear";
+    private static final String CREATIVES = "Creatives";
+    private static final String CREATIVE = "Creative";
+    private static final String COMPANION_ADS = "CompanionAds";
+    private static final String ERROR = "Error";
+
+    @NonNull protected final Node mNode;
+
+    VastBaseInLineWrapperXmlManager(@NonNull Node node) {
+        Preconditions.checkNotNull(node);
+        mNode = node;
+    }
+
+    /**
+     * Gets a list of impression trackers for this InLine node. If there are no trackers, return
+     * an empty list.
+     *
+     * @return List of URLs of impression trackers
+     */
+    @NonNull
+    List<VastTracker> getImpressionTrackers() {
+        final List<Node> impressionNodes = XmlUtils.getMatchingChildNodes(mNode, IMPRESSION_TRACKER);
+
+        List<VastTracker> impressionTrackers = new ArrayList<VastTracker>();
+        for (Node impressionNode : impressionNodes) {
+            String uri = XmlUtils.getNodeValue(impressionNode);
+            if (!TextUtils.isEmpty(uri)) {
+                impressionTrackers.add(new VastTracker(uri));
+            }
+        }
+
+        return impressionTrackers;
+    }
+
+    /**
+     * Gets the error tracker associated with this node.
+     *
+     * @return The URL of the error tracker.
+     */
+    @NonNull
+    List<VastTracker> getErrorTrackers() {
+        final List<VastTracker> errorTrackers = new ArrayList<VastTracker>();
+        final List<Node> errorNodes = XmlUtils.getMatchingChildNodes(mNode, ERROR);
+        if (errorNodes == null) {
+            return errorTrackers;
+        }
+
+        for (Node error : errorNodes) {
+            final String tracker = XmlUtils.getNodeValue(error);
+            if (!TextUtils.isEmpty(tracker)) {
+                errorTrackers.add(new VastTracker(tracker, true));
+            }
+        }
+        return errorTrackers;
+    }
+
+    /**
+     * If there is a Linear section with at least one linear creative, return its XML manager.
+     *
+     * @return The {@link VastLinearXmlManager}s or an empty list if there is no Linear child node.
+     */
+    @NonNull
+    List<VastLinearXmlManager> getLinearXmlManagers() {
+        final List<VastLinearXmlManager> linearXmlManagers = new ArrayList<VastLinearXmlManager>();
+        final Node creativesNode = XmlUtils.getFirstMatchingChildNode(mNode, CREATIVES);
+        if (creativesNode == null) {
+            return linearXmlManagers;
+        }
+
+        // NOTE: there can only be one <Linear>, <CompanionAds>, OR <NonLinearAds> element
+        // per creative node
+
+        final List<Node> creativeNodes = XmlUtils.getMatchingChildNodes(creativesNode, CREATIVE);
+        if (creativeNodes == null) {
+            return linearXmlManagers;
+        }
+
+        for (Node creativeNode : creativeNodes) {
+            Node linearNode = XmlUtils.getFirstMatchingChildNode(creativeNode, LINEAR);
+            if (linearNode != null) {
+                linearXmlManagers.add(new VastLinearXmlManager(linearNode));
+            }
+        }
+        return linearXmlManagers;
+    }
+
+    /**
+     * If there is a CompanionAds section with at least one CompanionAd, return its XML manager.
+     *
+     * @return The {@link VastCompanionAdXmlManager}s or an empty list if there are no
+     * CompanionAds or Companion child node.
+     */
+    @NonNull
+    List<VastCompanionAdXmlManager> getCompanionAdXmlManagers() {
+        final List<VastCompanionAdXmlManager> companionAdXmlManagers = new
+                ArrayList<VastCompanionAdXmlManager>();
+        final Node creativesNode = XmlUtils.getFirstMatchingChildNode(mNode, CREATIVES);
+        if (creativesNode == null) {
+            return companionAdXmlManagers;
+        }
+
+        final List<Node> creativeNodes = XmlUtils.getMatchingChildNodes(creativesNode, CREATIVE);
+        if (creativeNodes == null) {
+            return companionAdXmlManagers;
+        }
+
+        for (Node creativeNode : creativeNodes) {
+            final Node companionAds = XmlUtils.getFirstMatchingChildNode(creativeNode, COMPANION_ADS);
+            if (companionAds == null) {
+                continue;
+            }
+
+            List<Node> companionAdsNodes = XmlUtils.getMatchingChildNodes(companionAds, COMPANION);
+            if (companionAdsNodes == null) {
+                continue;
+            }
+
+            for (Node companionNode : companionAdsNodes) {
+                companionAdXmlManagers.add(new VastCompanionAdXmlManager(companionNode));
+            }
+        }
+
+        return companionAdXmlManagers;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAd.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAd.java
new file mode 100644
index 00000000..159ae790
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAd.java
@@ -0,0 +1,173 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.util.Intents;
+
+import java.io.Serializable;
+import java.util.List;
+
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
+
+public class VastCompanionAd implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private final int mWidth;
+    private final int mHeight;
+    @NonNull private final VastResource mVastResource;
+    @Nullable private final String mClickThroughUrl;
+    @NonNull private final List<VastTracker> mClickTrackers;
+    @NonNull private final List<VastTracker> mCreativeViewTrackers;
+
+    public VastCompanionAd(
+            int width,
+            int height,
+            @NonNull VastResource vastResource,
+            @Nullable String clickThroughUrl,
+            @NonNull List<VastTracker> clickTrackers,
+            @NonNull List<VastTracker> creativeViewTrackers) {
+        Preconditions.checkNotNull(vastResource);
+        Preconditions.checkNotNull(clickTrackers, "clickTrackers cannot be null");
+        Preconditions.checkNotNull(creativeViewTrackers, "creativeViewTrackers cannot be null");
+
+        mWidth = width;
+        mHeight = height;
+        mVastResource = vastResource;
+        mClickThroughUrl = clickThroughUrl;
+        mClickTrackers = clickTrackers;
+        mCreativeViewTrackers = creativeViewTrackers;
+    }
+
+    /**
+     * Add click trackers.
+     *
+     * @param clickTrackers List of URLs to hit
+     */
+    public void addClickTrackers(@NonNull final List<VastTracker> clickTrackers) {
+        Preconditions.checkNotNull(clickTrackers, "clickTrackers cannot be null");
+        mClickTrackers.addAll(clickTrackers);
+    }
+
+    /**
+     * Add creativeView trackers that are supposed to be fired when the companion ad is visible.
+     *
+     * @param creativeViewTrackers List of URLs to hit when this companion is viewed
+     */
+    public void addCreativeViewTrackers(@NonNull final List<VastTracker> creativeViewTrackers) {
+        Preconditions.checkNotNull(creativeViewTrackers, "creativeViewTrackers cannot be null");
+        mCreativeViewTrackers.addAll(creativeViewTrackers);
+    }
+
+    public int getWidth() {
+        return mWidth;
+    }
+
+    public int getHeight() {
+        return mHeight;
+    }
+
+    @NonNull
+    public VastResource getVastResource() {
+        return mVastResource;
+    }
+
+    @Nullable
+    public String getClickThroughUrl() {
+        return mClickThroughUrl;
+    }
+
+    @NonNull
+    public List<VastTracker> getClickTrackers() {
+        return mClickTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getCreativeViewTrackers() {
+        return mCreativeViewTrackers;
+    }
+
+    /**
+     * Called when the companion ad is displayed after the video. Handles firing the impression
+     * trackers.
+     *
+     * @param context         the context.
+     * @param contentPlayHead the time into the video. (should be equal to the duration)
+     */
+    void handleImpression(@NonNull Context context, int contentPlayHead) {
+        Preconditions.checkNotNull(context);
+
+        makeVastTrackingHttpRequest(
+                mCreativeViewTrackers,
+                null,
+                contentPlayHead,
+                null,
+                context
+        );
+    }
+
+    /**
+     * Called when the companion ad is clicked. Handles forwarding the user to the specified click
+     * through uri.
+     *
+     * @param context                the context. Has to be an activity context.
+     * @param requestCode            The code that identifies what kind of activity request is going
+     *                               to be made
+     * @param webViewClickThroughUrl The clickthrough url from the webview that should override the
+     *                               one set in the companion ad if the resource is Javascript,
+     *                               HTML, or an IFrame.
+     */
+    void handleClick(@NonNull final Context context, final int requestCode,
+            @Nullable final String webViewClickThroughUrl) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkArgument(context instanceof Activity, "context must be an activity");
+
+        final String correctClickThroughUrl = mVastResource.getCorrectClickThroughUrl(
+                mClickThroughUrl, webViewClickThroughUrl);
+
+        if (TextUtils.isEmpty(correctClickThroughUrl)) {
+            return;
+        }
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(
+                        UrlAction.IGNORE_ABOUT_SCHEME,
+                        UrlAction.OPEN_APP_MARKET,
+                        UrlAction.OPEN_NATIVE_BROWSER,
+                        UrlAction.OPEN_IN_APP_BROWSER,
+                        UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                        UrlAction.FOLLOW_DEEP_LINK)
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
+                            Bundle bundle = new Bundle();
+                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY,
+                                    url);
+
+                            Intent intent = Intents.getStartActivityIntent(
+                                    context, MoPubBrowser.class, bundle);
+                            ((Activity) context).startActivityForResult(intent, requestCode);
+                        }
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                    }
+                })
+                .withoutMoPubBrowser()
+                .build().handleUrl(context, correctClickThroughUrl);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
new file mode 100644
index 00000000..abacc76c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
@@ -0,0 +1,146 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * This XML manager handles companion ads.
+ */
+class VastCompanionAdXmlManager {
+
+    // Element names
+    private static final String VIDEO_TRACKER = "Tracking";
+    private static final String TRACKING_EVENTS = "TrackingEvents";
+    private static final String COMPANION_CLICK_THROUGH = "CompanionClickThrough";
+    private static final String COMPANION_CLICK_TRACKING = "CompanionClickTracking";
+
+    // Attribute names
+    private static final String EVENT = "event";
+    private static final String WIDTH = "width";
+    private static final String HEIGHT = "height";
+
+    // Attribute values
+    private static final String CREATIVE_VIEW = "creativeView";
+
+    @NonNull private final Node mCompanionNode;
+    @NonNull private final VastResourceXmlManager mResourceXmlManager;
+
+    VastCompanionAdXmlManager(@NonNull final Node companionNode) {
+        Preconditions.checkNotNull(companionNode, "companionNode cannot be null");
+        mCompanionNode = companionNode;
+        mResourceXmlManager = new VastResourceXmlManager(companionNode);
+    }
+
+    /**
+     * Gets the width attribute for the companion ad or {@code null} if not present. This
+     * attribute is required according to the VAST 3.0 spec.
+     *
+     * @return Integer width attribute or {@code null}.
+     */
+    @Nullable
+    Integer getWidth() {
+        return XmlUtils.getAttributeValueAsInt(mCompanionNode, WIDTH);
+    }
+
+    /**
+     * Gets the height attribute for the companion ad or {@code null} if not present. This
+     * attribute is required according to the VAST 3.0 spec.
+     *
+     * @return Integer height attribute or {@code null}.
+     */
+    @Nullable
+    Integer getHeight() {
+        return XmlUtils.getAttributeValueAsInt(mCompanionNode, HEIGHT);
+    }
+
+    @NonNull
+    VastResourceXmlManager getResourceXmlManager() {
+        return mResourceXmlManager;
+    }
+
+    /**
+     * Gets the clickthrough url of this companion ad or {@code null} if it does not exist.
+     *
+     * @return The String clickthrough URL or {@code null}
+     */
+    @Nullable
+    String getClickThroughUrl() {
+        final Node node = XmlUtils.getFirstMatchingChildNode(
+                mCompanionNode,
+                COMPANION_CLICK_THROUGH
+        );
+        return XmlUtils.getNodeValue(node);
+    }
+
+    /**
+     * Gets a list of click trackers for this companion ad. If none are present, return an empty
+     * list.
+     *
+     * @return List of click tracker URLs or an empty list.
+     */
+    @NonNull
+    List<VastTracker> getClickTrackers() {
+        final List<VastTracker> companionAdClickTrackers = new ArrayList<VastTracker>();
+        final List<Node> trackerNodes = XmlUtils.getMatchingChildNodes(mCompanionNode, COMPANION_CLICK_TRACKING);
+        if (trackerNodes == null) {
+            return companionAdClickTrackers;
+        }
+        for (final Node trackerNode : trackerNodes) {
+            String uri = XmlUtils.getNodeValue(trackerNode);
+            if (!TextUtils.isEmpty(uri)) {
+                companionAdClickTrackers.add(new VastTracker(uri));
+            }
+        }
+        return companionAdClickTrackers;
+    }
+
+    /**
+     * Gets a list of creativeView trackers for this companion ad. These are impression trackers for
+     * just this companion ad as the normal impression trackers are reserved for the whole ad. These
+     * should fire when this companion ad is shown. If none are present, return an empty list.
+     *
+     * @return List of creative view URLs or an empty list.
+     */
+    @NonNull
+    List<VastTracker> getCompanionCreativeViewTrackers() {
+        final List<VastTracker> companionCreativeViewTrackers = new ArrayList<VastTracker>();
+        final Node node = XmlUtils.getFirstMatchingChildNode(
+                mCompanionNode,
+                TRACKING_EVENTS
+        );
+
+        if (node == null) {
+            return companionCreativeViewTrackers;
+        }
+
+        final List<Node> trackerNodes = XmlUtils.getMatchingChildNodes(
+                node,
+                VIDEO_TRACKER,
+                EVENT,
+                Collections.singletonList(CREATIVE_VIEW)
+        );
+
+        for (final Node trackerNode : trackerNodes) {
+            final String trackerUrl = XmlUtils.getNodeValue(trackerNode);
+            companionCreativeViewTrackers.add(new VastTracker(trackerUrl));
+        }
+
+        return companionCreativeViewTrackers;
+    }
+
+    boolean hasResources() {
+        return !TextUtils.isEmpty(mResourceXmlManager.getStaticResource()) ||
+                !TextUtils.isEmpty(mResourceXmlManager.getHTMLResource()) ||
+                !TextUtils.isEmpty(mResourceXmlManager.getIFrameResource());
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
new file mode 100644
index 00000000..f216a958
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
@@ -0,0 +1,63 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+
+/**
+ * The various possible error codes for VAST that MoPub supports. See
+ * http://www.iab.net/media/file/VASTv3.0.pdf for more information about the error codes.
+ */
+public enum VastErrorCode {
+    /**
+     * For any type of XML issue in the VAST document. e.g. missing a matching tag, missing a square
+     * bracket, not using CDATA correctly, etc.
+     */
+    XML_PARSING_ERROR("100"),
+
+    /**
+     * When following a wrapper redirect and the URI was either unavailable or reached a timeout
+     * as defined by the video player.
+     */
+    WRAPPER_TIMEOUT("301"),
+
+    /**
+     * When receiving a no ads VAST response after one or more Wrappers. See section 2.4.2.4 in the
+     * Vast 3.0 spec for details.
+     */
+    NO_ADS_VAST_RESPONSE("303"),
+
+    /**
+     * For any reason the linear video ad failed to download or play (or for errors during
+     * playback).
+     */
+    GENERAL_LINEAR_AD_ERROR("400"),
+
+    /**
+     * For any reason the companion ad failed to download or show. MoPub still tries to show the
+     * linear ad regardless of the status of the companion ad.
+     */
+    GENERAL_COMPANION_AD_ERROR("600"),
+
+    /**
+     * Any other error, or an unexpected error.
+     */
+    UNDEFINED_ERROR("900");
+
+    @NonNull private final String mErrorCode;
+
+    VastErrorCode(@NonNull String errorCode) {
+        Preconditions.checkNotNull(errorCode, "errorCode cannot be null");
+        mErrorCode = errorCode;
+    }
+
+    /**
+     * Gets the code for the error
+     *
+     * @return String of the code representing that error
+     */
+    @NonNull
+    String getErrorCode() {
+        return mErrorCode;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIcon.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIcon.java
new file mode 100644
index 00000000..37cd3590
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIcon.java
@@ -0,0 +1,182 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+
+import java.io.Serializable;
+import java.util.List;
+
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
+
+/**
+ * The data and event handlers for the icon displayed during a VAST 3.0 video.
+ */
+class VastIcon implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private final int mWidth;
+    private final int mHeight;
+    private final int mOffsetMS;
+    @Nullable private final Integer mDurationMS;
+    @NonNull private final VastResource mVastResource;
+    @NonNull private final List<VastTracker> mClickTrackingUris;
+    @Nullable private final String mClickThroughUri;
+    @NonNull private final List<VastTracker> mViewTrackingUris;
+
+    VastIcon(int width,
+            int height,
+            @Nullable Integer offsetMS,
+            @Nullable Integer durationMS,
+            @NonNull VastResource vastResource,
+            @NonNull List<VastTracker> clickTrackingUris,
+            @Nullable String clickThroughUri,
+            @NonNull List<VastTracker> viewTrackingUris) {
+        Preconditions.checkNotNull(vastResource);
+        Preconditions.checkNotNull(clickTrackingUris);
+        Preconditions.checkNotNull(viewTrackingUris);
+
+        mWidth = width;
+        mHeight = height;
+        mOffsetMS = offsetMS == null ? 0 : offsetMS;
+        mDurationMS = durationMS;
+        mVastResource = vastResource;
+        mClickTrackingUris = clickTrackingUris;
+        mClickThroughUri = clickThroughUri;
+        mViewTrackingUris = viewTrackingUris;
+    }
+
+    int getWidth() {
+        return mWidth;
+    }
+
+    int getHeight() {
+        return mHeight;
+    }
+
+    /**
+     * The offset time into a video that the icon is displayed.
+     *
+     * @return the offset in milliseconds.
+     */
+    int getOffsetMS() {
+        return mOffsetMS;
+    }
+
+    /**
+     * The duration that the icon is displayed during a video.
+     *
+     * @return the duration in milliseconds.
+     */
+    @Nullable
+    Integer getDurationMS() {
+        return mDurationMS;
+    }
+
+    /**
+     * The resource describing the icon's type.
+     *
+     * @return the resource.
+     */
+    @NonNull
+    VastResource getVastResource() {
+        return mVastResource;
+    }
+
+    @NonNull
+    List<VastTracker> getClickTrackingUris() {
+        return mClickTrackingUris;
+    }
+
+    @Nullable
+    String getClickThroughUri() {
+        return mClickThroughUri;
+    }
+
+    @NonNull
+    List<VastTracker> getViewTrackingUris() {
+        return mViewTrackingUris;
+    }
+
+    /**
+     * Called when the icon is displayed during the video. Handles firing the impression trackers.
+     *
+     * @param context the context.
+     * @param contentPlayHead the time into the video.
+     * @param assetUri the uri of the video.
+     */
+    void handleImpression(@NonNull Context context, int contentPlayHead, @NonNull String assetUri) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(assetUri);
+
+        makeVastTrackingHttpRequest(
+                mViewTrackingUris,
+                null,
+                contentPlayHead,
+                assetUri,
+                context
+        );
+    }
+
+    /**
+     * Called when the icon is clicked. Handles forwarding the user to the click through uri.
+     *
+     * @param context                the context.
+     * @param webViewClickThroughUri The click through uri for Javascript, HTML and IFrame resources
+     *                               from the WebView
+     */
+    void handleClick(@NonNull final Context context, @Nullable String webViewClickThroughUri) {
+        Preconditions.checkNotNull(context);
+
+
+        final String correctClickThroughUri = mVastResource.getCorrectClickThroughUrl(
+                mClickThroughUri, webViewClickThroughUri);
+
+        if (TextUtils.isEmpty(correctClickThroughUri)) {
+            return;
+        }
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(
+                        UrlAction.IGNORE_ABOUT_SCHEME,
+                        UrlAction.OPEN_NATIVE_BROWSER,
+                        UrlAction.OPEN_IN_APP_BROWSER)
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
+                            Bundle bundle = new Bundle();
+                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
+
+                            Intent intent = Intents.getStartActivityIntent(
+                                    context, MoPubBrowser.class, bundle);
+                            try {
+                                Intents.startActivity(context, intent);
+                            } catch (IntentNotResolvableException e) {
+                                MoPubLog.d(e.getMessage());
+                            }
+                        }
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                    }
+                })
+                .withoutMoPubBrowser()
+                .build()
+                .handleUrl(context, correctClickThroughUri);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
new file mode 100644
index 00000000..68afcb66
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
@@ -0,0 +1,154 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Strings;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This XML manager handles Vast 3.0 icons.
+ */
+public class VastIconXmlManager {
+
+    // Element names
+    public static final String ICON_CLICKS = "IconClicks";
+    public static final String ICON_CLICK_TRACKING = "IconClickTracking";
+    public static final String ICON_CLICK_THROUGH = "IconClickThrough";
+    public static final String ICON_VIEW_TRACKING = "IconViewTracking";
+
+    // Attribute names
+    public static final String WIDTH = "width";
+    public static final String HEIGHT = "height";
+    public static final String OFFSET = "offset";
+    public static final String DURATION = "duration";
+
+    @NonNull private final Node mIconNode;
+    @NonNull private final VastResourceXmlManager mResourceXmlManager;
+
+    VastIconXmlManager(@NonNull final Node iconNode) {
+        Preconditions.checkNotNull(iconNode);
+        mIconNode = iconNode;
+        mResourceXmlManager = new VastResourceXmlManager(iconNode);
+    }
+
+    /**
+     * Gets the width attribute for the icon in dp or {@code null} if not present. This attribute
+     * is required according to the VAST 3.0 spec.
+     *
+     * @return Integer width attribute or {@code null}.
+     */
+    @Nullable
+    Integer getWidth() {
+        return XmlUtils.getAttributeValueAsInt(mIconNode, WIDTH);
+    }
+
+    /**
+     * Gets the height attribute for the icon in dp or {@code null} if not present. This attribute
+     * is required according to the VAST 3.0 spec.
+     *
+     * @return Integer height attribute or {@code null}.
+     */
+    @Nullable
+    Integer getHeight() {
+        return XmlUtils.getAttributeValueAsInt(mIconNode, HEIGHT);
+    }
+
+    /**
+     * Gets the offset attribute for the icon or {@code null} if not present or not formatted
+     * correctly. It represents the time in milliseconds into the video that the icon will be
+     * displayed. The attribute value is represented as HH:MM:SS[.mmm] and this method translates
+     * it to milliseconds. This attribute is optional according to the VAST 3.0 spec.
+     *
+     * @return Integer offset in milliseconds attribute or {@code null}.
+     */
+    @Nullable
+    Integer getOffsetMS() {
+        String iconOffsetStr = XmlUtils.getAttributeValue(mIconNode, OFFSET);
+        Integer iconOffset = null;
+        try {
+            iconOffset = Strings.parseAbsoluteOffset(iconOffsetStr);
+        } catch (NumberFormatException e) {
+            MoPubLog.d(String.format("Invalid VAST icon offset format: %s:", iconOffsetStr));
+        }
+        return iconOffset;
+    }
+
+    /**
+     * Gets the duration attribute for the icon or {@code null} if not present or not formatted
+     * correctly. It represents the duration in milliseconds that the icon will be displayed.
+     * The attribute value is represented as HH:MM:SS[.mmm] and this method translates it to
+     * milliseconds. This attribute is optional according to the VAST 3.0 spec.
+     *
+     * @return Integer duration in milliseconds attribute or {@code null}.
+     */
+    @Nullable
+    Integer getDurationMS() {
+        String iconDurationStr = XmlUtils.getAttributeValue(mIconNode, DURATION);
+        Integer iconDuration = null;
+        try {
+            iconDuration = Strings.parseAbsoluteOffset(iconDurationStr);
+        } catch (NumberFormatException e) {
+            MoPubLog.d(String.format("Invalid VAST icon duration format: %s:", iconDurationStr));
+        }
+        return iconDuration;
+    }
+
+    @NonNull
+    VastResourceXmlManager getResourceXmlManager() {
+        return mResourceXmlManager;
+    }
+
+    @NonNull
+    List<VastTracker> getClickTrackingUris() {
+        Node iconClicksNode = XmlUtils.getFirstMatchingChildNode(mIconNode, ICON_CLICKS);
+        List<VastTracker> iconClickTrackingUris = new ArrayList<VastTracker>();
+        if (iconClicksNode == null) {
+            return iconClickTrackingUris;
+        }
+
+        List<Node> iconClickTrackingNodes =
+                XmlUtils.getMatchingChildNodes(iconClicksNode, ICON_CLICK_TRACKING);
+        for (Node iconClickTrackingNode : iconClickTrackingNodes) {
+            String uri = XmlUtils.getNodeValue(iconClickTrackingNode);
+            if (uri != null) {
+                iconClickTrackingUris.add(new VastTracker(uri));
+            }
+        }
+        return iconClickTrackingUris;
+    }
+
+    @Nullable
+    String getClickThroughUri() {
+        Node iconClicksNode = XmlUtils.getFirstMatchingChildNode(mIconNode, ICON_CLICKS);
+        if (iconClicksNode == null) {
+            return null;
+        }
+
+        Node iconClickThroughNode =
+                XmlUtils.getFirstMatchingChildNode(iconClicksNode, ICON_CLICK_THROUGH);
+        return XmlUtils.getNodeValue(iconClickThroughNode);
+    }
+
+    @NonNull
+    List<VastTracker> getViewTrackingUris() {
+        List<Node> iconViewTrackingNodes =
+                XmlUtils.getMatchingChildNodes(mIconNode, ICON_VIEW_TRACKING);
+        List<VastTracker> iconViewTrackingUris = new ArrayList<VastTracker>();
+
+        for (Node iconViewTrackingNode : iconViewTrackingNodes) {
+            String uri = XmlUtils.getNodeValue(iconViewTrackingNode);
+            if (uri != null) {
+                iconViewTrackingUris.add(new VastTracker(uri));
+            }
+        }
+        return iconViewTrackingUris;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
new file mode 100644
index 00000000..108d5f5c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
@@ -0,0 +1,16 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import org.w3c.dom.Node;
+
+/**
+ * This XML manager handles InLine nodes. An InLine node can contain impression trackers,
+ * video ads, and companion ads.
+ */
+class VastInLineXmlManager extends VastBaseInLineWrapperXmlManager {
+
+    VastInLineXmlManager(@NonNull final Node inLineNode) {
+        super(inLineNode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
new file mode 100644
index 00000000..6852e38e
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -0,0 +1,411 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Strings;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * This XML manager handles the meta data around the video file. This includes video progress
+ * trackers and click trackers. This also houses the manager for the actual media file.
+ */
+class VastLinearXmlManager {
+
+    // Element names
+    private static final String TRACKING_EVENTS = "TrackingEvents";
+    private static final String VIDEO_CLICKS = "VideoClicks";
+    private static final String VIDEO_TRACKER = "Tracking";
+    private static final String CLICK_THROUGH = "ClickThrough";
+    private static final String CLICK_TRACKER = "ClickTracking";
+    private static final String MEDIA_FILES = "MediaFiles";
+    private static final String MEDIA_FILE = "MediaFile";
+    public static final String ICONS = "Icons";
+    public static final String ICON = "Icon";
+
+    // Attribute names
+    private static final String EVENT = "event";
+    private static final String OFFSET = "offset";
+    private static final String SKIP_OFFSET = "skipoffset";
+
+    // Attribute values
+    private static final String CREATIVE_VIEW = "creativeView";
+    private static final String START = "start";
+    private static final String FIRST_QUARTILE = "firstQuartile";
+    private static final String MIDPOINT = "midpoint";
+    private static final String THIRD_QUARTILE = "thirdQuartile";
+    private static final String COMPLETE = "complete";
+    private static final String PAUSE = "pause";
+    private static final String RESUME = "resume";
+    private static final String CLOSE = "close";
+    private static final String CLOSE_LINEAR = "closeLinear";
+    private static final String PROGRESS = "progress";
+    private static final String SKIP = "skip";
+
+    private static final int CREATIVE_VIEW_TRACKER_THRESHOLD = 0;
+    private static final int START_TRACKER_THRESHOLD = 2000;
+    private static final float FIRST_QUARTER_MARKER = 0.25f;
+    private static final float MID_POINT_MARKER = 0.50f;
+    private static final float THIRD_QUARTER_MARKER = 0.75f;
+
+    @NonNull private final Node mLinearNode;
+
+    VastLinearXmlManager(@NonNull final Node linearNode) {
+        Preconditions.checkNotNull(linearNode);
+        mLinearNode = linearNode;
+    }
+
+    /**
+     * Return a sorted list of the video's percent-based progress-trackers. These are the
+     * quartile trackers and any "progress" nodes with percent-based offsets.
+     *
+     * Quartile trackers look like:
+     * {@code
+     * <Tracking event="firstQuartile">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     *
+     * Percent-based progress trackers look like:
+     * {@code
+     * <Tracking event="progress" offset="11%">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     */
+    @NonNull
+    List<VastFractionalProgressTracker> getFractionalProgressTrackers() {
+        // Add all the quartile trackers from VAST 2.0:
+        List<VastFractionalProgressTracker> percentTrackers = new ArrayList<VastFractionalProgressTracker>();
+
+        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackersByAttribute(FIRST_QUARTILE), FIRST_QUARTER_MARKER);
+        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackersByAttribute(MIDPOINT), MID_POINT_MARKER);
+        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackersByAttribute(THIRD_QUARTILE), THIRD_QUARTER_MARKER);
+
+        final Node trackingEvents = XmlUtils.getFirstMatchingChildNode(mLinearNode, TRACKING_EVENTS);
+        if (trackingEvents != null) {
+            // Get any other trackers with event="progress" offset="n%"
+            final List<Node> progressNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
+                    VIDEO_TRACKER, EVENT, Collections.singletonList(PROGRESS));
+
+            for (Node progressNode : progressNodes) {
+                String offsetString = XmlUtils.getAttributeValue(progressNode, OFFSET);
+                if (offsetString == null) {
+                    continue;
+                }
+                offsetString = offsetString.trim();
+                if (Strings.isPercentageTracker(offsetString)) {
+                    String trackingUrl = XmlUtils.getNodeValue(progressNode);
+                    try {
+                        float trackingFraction =
+                                Float.parseFloat(offsetString.replace("%", "")) / 100f;
+                        percentTrackers.add(new VastFractionalProgressTracker(trackingUrl, trackingFraction));
+                    } catch (NumberFormatException e) {
+                        MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
+                                offsetString));
+                    }
+                }
+            }
+        }
+
+        // Sort the list so we can quickly index it in the video progress runnable.
+        Collections.sort(percentTrackers);
+        return percentTrackers;
+    }
+
+    /**
+     * Return a sorted list of the video's absolute progress trackers. This includes start trackers
+     * and any "progress" nodes with absolute offsets.
+     *
+     * Start trackers live in nodes like:
+     * {@code
+     * <Tracking event="start">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     * Absolute progress trackers look like:
+     * {@code
+     * <Tracking event="progress" offset="00:00:10.000">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     */
+    @NonNull
+    List<VastAbsoluteProgressTracker> getAbsoluteProgressTrackers() {
+        List<VastAbsoluteProgressTracker> trackers = new ArrayList<VastAbsoluteProgressTracker>();
+
+        // Start trackers are treated as absolute trackers with a 2s offset.
+        final List<String> startTrackers = getVideoTrackersByAttribute(START);
+        for (String url : startTrackers) {
+            trackers.add(new VastAbsoluteProgressTracker(url, START_TRACKER_THRESHOLD));
+        }
+
+        final Node trackingEvents = XmlUtils.getFirstMatchingChildNode(mLinearNode, TRACKING_EVENTS);
+        if (trackingEvents != null) {
+            // Parse progress trackers and extract the absolute offsets of the form "HH:MM:SS[.mmm]"
+
+            final List<Node> progressNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
+                    VIDEO_TRACKER, EVENT, Collections.singletonList(PROGRESS));
+            for (Node progressNode : progressNodes) {
+                String offsetString = XmlUtils.getAttributeValue(progressNode, OFFSET);
+                if (offsetString == null) {
+                    continue;
+                }
+                offsetString = offsetString.trim();
+                if (Strings.isAbsoluteTracker(offsetString)) {
+                    String trackingUrl = XmlUtils.getNodeValue(progressNode);
+                    try {
+                        Integer trackingMilliseconds = Strings.parseAbsoluteOffset(offsetString);
+                        if (trackingMilliseconds != null) {
+                            trackers.add(new VastAbsoluteProgressTracker(trackingUrl, trackingMilliseconds));
+                        }
+                    } catch (NumberFormatException e) {
+                        MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
+                                offsetString));
+                    }
+                }
+            }
+
+            // Parse creativeView trackers
+            final List<Node> creativeViewNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
+                    VIDEO_TRACKER, EVENT, Collections.singletonList(CREATIVE_VIEW));
+            for (Node creativeViewNode : creativeViewNodes) {
+                trackers.add(
+                        new VastAbsoluteProgressTracker(XmlUtils.getNodeValue(creativeViewNode),
+                                CREATIVE_VIEW_TRACKER_THRESHOLD));
+            }
+        }
+
+        // Sort the list so we can quickly index it in the video progress runnable.
+        Collections.sort(trackers);
+        return trackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the video finishes playing. This list may be empty.
+     *
+     * @return List of String URLs of video complete trackers.
+     */
+    @NonNull
+    List<VastTracker> getVideoCompleteTrackers() {
+        return getVideoTrackersByAttributeAsVastTrackers(COMPLETE);
+    }
+
+    /**
+     * Gets a list of URLs for when the video pauses. This list may be empty.
+     *
+     * @return List of String URLs of pause trackers.
+     */
+    @NonNull
+    List<VastTracker> getPauseTrackers() {
+        List<String> trackers = getVideoTrackersByAttribute(PAUSE);
+        List<VastTracker> vastRepeatableTrackers = new ArrayList<VastTracker>();
+        for (String tracker : trackers) {
+            vastRepeatableTrackers.add(new VastTracker(tracker, true));
+        }
+        return vastRepeatableTrackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the video resumes. This list may be empty.
+     *
+     * @return List of String URLs of resume trackers.
+     */
+    @NonNull
+    List<VastTracker> getResumeTrackers() {
+        List<String> trackers = getVideoTrackersByAttribute(RESUME);
+        List<VastTracker> vastRepeatableTrackers = new ArrayList<VastTracker>();
+        for (String tracker : trackers) {
+            vastRepeatableTrackers.add(new VastTracker(tracker, true));
+        }
+        return vastRepeatableTrackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the video closes. This list may be empty.
+     *
+     * @return List of String URLs of video closes.
+     */
+    @NonNull
+    List<VastTracker> getVideoCloseTrackers() {
+        List<VastTracker> closeTrackers = getVideoTrackersByAttributeAsVastTrackers(CLOSE);
+        closeTrackers.addAll(getVideoTrackersByAttributeAsVastTrackers(CLOSE_LINEAR));
+        return closeTrackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the user skips the video. This list may be empty.
+     *
+     * @return List of String URLs of video skip trackers.
+     */
+    @NonNull
+    List<VastTracker> getVideoSkipTrackers() {
+        return getVideoTrackersByAttributeAsVastTrackers(SKIP);
+    }
+
+    /**
+     * Gets the clickthrough url. May be null.
+     *
+     * @return The clickthrough URL or {@code null} if there isn't one.
+     */
+    @Nullable
+    String getClickThroughUrl() {
+        final Node videoClicks = XmlUtils.getFirstMatchingChildNode(mLinearNode, VIDEO_CLICKS);
+        if (videoClicks == null) {
+            return null;
+        }
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(videoClicks, CLICK_THROUGH));
+    }
+
+    /**
+     * Gets a list of URLs to track the video click event. This list may be empty.
+     *
+     * @return List of String URLs of click trackers.
+     */
+    @NonNull
+    List<VastTracker> getClickTrackers() {
+        List<VastTracker> clickTrackers = new ArrayList<VastTracker>();
+
+        final Node videoClicks = XmlUtils.getFirstMatchingChildNode(mLinearNode, VIDEO_CLICKS);
+        if (videoClicks == null) {
+            return clickTrackers;
+        }
+
+        final List<Node> clickTrackerNodes = XmlUtils.getMatchingChildNodes(
+                videoClicks,
+                CLICK_TRACKER
+        );
+
+        for (Node clickTrackerNode : clickTrackerNodes) {
+            String tracker = XmlUtils.getNodeValue(clickTrackerNode);
+            if (tracker != null) {
+                clickTrackers.add(new VastTracker(tracker));
+            }
+        }
+        return clickTrackers;
+    }
+
+    /**
+     * Gets where the video can be skipped from. This can be in a percentage or in the format
+     * 'hh:mm:ss(.mmm)' (for example, a video that is skippable 5 seconds into a 20 second video
+     * would be '25%', '00:00:05', or '00:00:05.000').
+     *
+     * @return The skip offset, or {@code null} if there isn't one.
+     */
+    @Nullable
+    String getSkipOffset() {
+        final String skipOffsetString = XmlUtils.getAttributeValue(mLinearNode, SKIP_OFFSET);
+        if (skipOffsetString == null) {
+            return null;
+        }
+
+        if (skipOffsetString.trim().isEmpty()) {
+            return null;
+        }
+
+        return skipOffsetString.trim();
+    }
+
+    /**
+     * If there is a Media section, return its XML manager.
+     *
+     * @return The {@link VastMediaXmlManager}
+     * or an empty list if there is no Media child node.
+     */
+    @NonNull
+    List<VastMediaXmlManager> getMediaXmlManagers() {
+        final List<VastMediaXmlManager> mediaXmlManagers = new ArrayList<VastMediaXmlManager>();
+
+        final Node mediaFiles = XmlUtils.getFirstMatchingChildNode(mLinearNode, MEDIA_FILES);
+        if (mediaFiles == null) {
+            return mediaXmlManagers;
+        }
+
+        List<Node> mediaNodes = XmlUtils.getMatchingChildNodes(mediaFiles, MEDIA_FILE);
+        for (Node mediaNode : mediaNodes) {
+            mediaXmlManagers.add(new VastMediaXmlManager(mediaNode));
+        }
+
+        return mediaXmlManagers;
+    }
+
+    @NonNull
+    List<VastIconXmlManager> getIconXmlManagers() {
+        final List<VastIconXmlManager> iconXmlManagers = new ArrayList<VastIconXmlManager>();
+
+        final Node icons= XmlUtils.getFirstMatchingChildNode(mLinearNode, ICONS);
+        if (icons == null) {
+            return iconXmlManagers;
+        }
+
+        List<Node> iconNodes = XmlUtils.getMatchingChildNodes(icons, ICON);
+        for (Node iconNode : iconNodes) {
+            iconXmlManagers.add(new VastIconXmlManager(iconNode));
+        }
+
+        return iconXmlManagers;
+    }
+
+    @NonNull
+    private List<VastTracker> getVideoTrackersByAttributeAsVastTrackers(
+            @NonNull final String attributeValue) {
+        List<String> trackers = getVideoTrackersByAttribute(attributeValue);
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>(trackers.size());
+        for (String tracker : trackers) {
+            vastTrackers.add(new VastTracker(tracker));
+        }
+        return vastTrackers;
+    }
+
+    /**
+     * This helper method makes it easy to get a tracking event with a specific name in a linear
+     * node. This returns an empty list if there isn't a tracker with that event name.
+     *
+     * @param attributeValue The name of the tracking event
+     * @return List of URLs with that tracker name or an empty list if none found.
+     */
+    @NonNull
+    private List<String> getVideoTrackersByAttribute(@NonNull final String attributeValue) {
+        Preconditions.checkNotNull(attributeValue);
+        List<String> videoTrackers = new ArrayList<String>();
+
+        final Node trackingEvents = XmlUtils.getFirstMatchingChildNode(mLinearNode, TRACKING_EVENTS);
+        if (trackingEvents == null) {
+            return videoTrackers;
+        }
+
+        final List<Node> videoTrackerNodes = XmlUtils.getMatchingChildNodes(
+                trackingEvents,
+                VIDEO_TRACKER,
+                EVENT,
+                Collections.singletonList(attributeValue)
+        );
+
+        for (Node videoTrackerNode : videoTrackerNodes) {
+            String tracker = XmlUtils.getNodeValue(videoTrackerNode);
+            if (tracker != null) {
+                videoTrackers.add(tracker);
+            }
+        }
+
+        return videoTrackers;
+    }
+
+    private void addQuartileTrackerWithFraction(
+            @NonNull final List<VastFractionalProgressTracker> trackers,
+            @NonNull final List<String> urls, float fraction) {
+        Preconditions.checkNotNull(trackers, "trackers cannot be null");
+        Preconditions.checkNotNull(urls, "urls cannot be null");
+        for (String url : urls) {
+            trackers.add(new VastFractionalProgressTracker(url, fraction));
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
new file mode 100644
index 00000000..dd5cf87b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
@@ -0,0 +1,29 @@
+package com.mopub.mobileads;
+
+/**
+ * Macros that MoPub supports. This is in the format of [name]. For example, an errorcode macro
+ * would show up as "http://www.somesite.com/somemethod?error=[ERRORCODE]"
+ */
+enum VastMacro {
+    /**
+     * The VAST error number that represents type of error. See {@link VastErrorCode} for possible
+     * values.
+     */
+    ERRORCODE,
+
+    /**
+     * Current progress of the video in the format HH:MM:SS.mmm. For example, 4.5 seconds into the
+     * video would be represented as 00:00:04.500.
+     */
+    CONTENTPLAYHEAD,
+
+    /**
+     * A random 8-digit number intended for cachebusting.
+     */
+    CACHEBUSTING,
+
+    /**
+     * The url of the current video.
+     */
+    ASSETURI
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java
new file mode 100644
index 00000000..429376ba
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java
@@ -0,0 +1,105 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Handles macro substitution with actual data.
+ */
+public class VastMacroHelper {
+
+    @NonNull private final List<String> mOriginalUris;
+    @NonNull private final Map<VastMacro, String> mMacroDataMap;
+
+    public VastMacroHelper(@NonNull final List<String> uris) {
+        Preconditions.checkNotNull(uris, "uris cannot be null");
+        mOriginalUris = uris;
+        mMacroDataMap = new HashMap<VastMacro, String>();
+        mMacroDataMap.put(VastMacro.CACHEBUSTING, getCachebustingString());
+    }
+
+    @NonNull
+    public List<String> getUris() {
+        List<String> modifiedUris = new ArrayList<String>();
+
+        for(final String originalUri : mOriginalUris) {
+            String modifiedUri = originalUri;
+            if (TextUtils.isEmpty(modifiedUri)) {
+                continue;
+            }
+            for (final VastMacro vastMacro : VastMacro.values()) {
+                String value = mMacroDataMap.get(vastMacro);
+                if (value == null) {
+                    value = "";
+                }
+
+                modifiedUri = modifiedUri.replaceAll("\\[" + vastMacro.name() + "\\]",
+                        value);
+            }
+
+            modifiedUris.add(modifiedUri);
+        }
+
+        return modifiedUris;
+    }
+
+    @NonNull
+    public VastMacroHelper withErrorCode(@Nullable final VastErrorCode errorCode) {
+        if (errorCode != null) {
+            mMacroDataMap.put(VastMacro.ERRORCODE, errorCode.getErrorCode());
+        }
+        return this;
+    }
+
+    @NonNull
+    public VastMacroHelper withContentPlayHead(@Nullable final Integer contentPlayHeadMS) {
+        if (contentPlayHeadMS != null) {
+            String contentPlayHeadMSStr = formatContentPlayHead(contentPlayHeadMS);
+            if (!TextUtils.isEmpty(contentPlayHeadMSStr)) {
+                mMacroDataMap.put(VastMacro.CONTENTPLAYHEAD, contentPlayHeadMSStr);
+            }
+        }
+        return this;
+    }
+
+    @NonNull
+    public VastMacroHelper withAssetUri(@Nullable String assetUri) {
+        if (!TextUtils.isEmpty(assetUri)) {
+            // URL-encode any URLs
+            try {
+                assetUri = URLEncoder.encode(assetUri, "UTF-8");
+            } catch (UnsupportedEncodingException e) {
+                MoPubLog.w("Failed to encode url", e);
+            }
+            mMacroDataMap.put(VastMacro.ASSETURI, assetUri);
+        }
+        return this;
+    }
+
+    @NonNull
+    private String getCachebustingString() {
+        return String.format(Locale.US, "%08d", Math.round(Math.random() * 100000000));
+    }
+
+    @NonNull
+    private String formatContentPlayHead(int contentPlayHeadMS) {
+        return String.format("%02d:%02d:%02d.%03d",
+                TimeUnit.MILLISECONDS.toHours(contentPlayHeadMS),
+                TimeUnit.MILLISECONDS.toMinutes(contentPlayHeadMS) % TimeUnit.HOURS.toMinutes(1),
+                TimeUnit.MILLISECONDS.toSeconds(contentPlayHeadMS) % TimeUnit.MINUTES.toSeconds(1),
+                contentPlayHeadMS % 1000);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
new file mode 100644
index 00000000..ffac9c83
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
@@ -0,0 +1,172 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+
+import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
+
+/**
+ * Given a VAST xml document, this class manages the lifecycle of parsing and finding a video and
+ * possibly companion ad. It provides the API for clients to prepare a
+ * {@link VastVideoConfiguration}.
+ */
+public class VastManager implements VastXmlManagerAggregator.VastXmlManagerAggregatorListener {
+    /**
+     * Users of this class should subscribe to this listener to get updates
+     * when a video is found or when no video is available.
+     */
+    public interface VastManagerListener {
+        /**
+         * Called when a video is found or if the VAST document is invalid. Passes in {@code null}
+         * when the VAST document is invalid.
+         *
+         * @param vastVideoConfiguration A configuration that can be used for displaying a VAST
+         *                               video or {@code null} if the VAST document is invalid.
+         */
+        void onVastVideoConfigurationPrepared(
+                @Nullable final VastVideoConfiguration vastVideoConfiguration);
+    }
+
+    @Nullable private VastManagerListener mVastManagerListener;
+    @Nullable private VastXmlManagerAggregator mVastXmlManagerAggregator;
+    private double mScreenAspectRatio;
+    private int mScreenArea;
+
+    public VastManager(@NonNull final Context context) {
+        initializeScreenDimensions(context);
+    }
+
+    /**
+     * Creates and starts an async task that parses the VAST xml document.
+     *
+     * @param vastXml The initial VAST xml document
+     * @param vastManagerListener Notified when a video configuration has been found or when
+     *                            the VAST document is invalid
+     */
+    public void prepareVastVideoConfiguration(@Nullable final String vastXml,
+            @NonNull final VastManagerListener vastManagerListener,
+            @NonNull final Context context) {
+        Preconditions.checkNotNull(vastManagerListener, "vastManagerListener cannot be null");
+        Preconditions.checkNotNull(context, "context cannot be null");
+        if (mVastXmlManagerAggregator == null) {
+            mVastManagerListener = vastManagerListener;
+            mVastXmlManagerAggregator = new VastXmlManagerAggregator(this, mScreenAspectRatio,
+                    mScreenArea, context.getApplicationContext());
+
+            try {
+                AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
+            } catch (Exception e) {
+                MoPubLog.d("Failed to aggregate vast xml", e);
+                mVastManagerListener.onVastVideoConfigurationPrepared(null);
+            }
+        }
+    }
+
+    /**
+     * Stops the VAST aggregator from continuing to follow wrapper redirects.
+     */
+    public void cancel() {
+        if (mVastXmlManagerAggregator != null) {
+            mVastXmlManagerAggregator.cancel(true);
+            mVastXmlManagerAggregator = null;
+        }
+    }
+
+    @Override
+    public void onAggregationComplete(
+            @Nullable final VastVideoConfiguration vastVideoConfiguration) {
+        if (mVastManagerListener == null) {
+            throw new IllegalStateException(
+                    "mVastManagerListener cannot be null here. Did you call " +
+                            "prepareVastVideoConfiguration()?");
+        }
+        if (vastVideoConfiguration == null) {
+            mVastManagerListener.onVastVideoConfigurationPrepared(null);
+            return;
+        }
+
+        if (updateDiskMediaFileUrl(vastVideoConfiguration)) {
+            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
+            return;
+        }
+
+        final VastVideoDownloadTask vastVideoDownloadTask = new VastVideoDownloadTask(
+                new VastVideoDownloadTaskListener() {
+                    @Override
+                    public void onComplete(boolean success) {
+                        if (success && updateDiskMediaFileUrl(vastVideoConfiguration)) {
+                            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
+                        } else {
+                            mVastManagerListener.onVastVideoConfigurationPrepared(null);
+                        }
+                    }
+                }
+        );
+
+        try {
+            AsyncTasks.safeExecuteOnExecutor(
+                    vastVideoDownloadTask,
+                    vastVideoConfiguration.getNetworkMediaFileUrl()
+            );
+        } catch (Exception e) {
+            MoPubLog.d("Failed to download vast video", e);
+            mVastManagerListener.onVastVideoConfigurationPrepared(null);
+        }
+    }
+
+    /**
+     * This method takes the media file http url and checks to see if we have the media file downloaded
+     * and cached in the Disk LRU cache. If it is cached, then the {@link VastVideoConfiguration} is
+     * updated with the media file's url on disk.
+     *
+     * @param vastVideoConfiguration used to store the media file's disk url and web url
+     * @return true if the media file was already cached locally, otherwise false
+     */
+    private boolean updateDiskMediaFileUrl(
+            @NonNull final VastVideoConfiguration vastVideoConfiguration) {
+        Preconditions.checkNotNull(vastVideoConfiguration, "vastVideoConfiguration cannot be null");
+
+        final String networkMediaFileUrl = vastVideoConfiguration.getNetworkMediaFileUrl();
+        if (CacheService.containsKeyDiskCache(networkMediaFileUrl)) {
+            final String filePathDiskCache = CacheService.getFilePathDiskCache(networkMediaFileUrl);
+            vastVideoConfiguration.setDiskMediaFileUrl(filePathDiskCache);
+            return true;
+        }
+        return false;
+    }
+
+    private void initializeScreenDimensions(@NonNull final Context context) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        // This currently assumes that all vast videos will be played in landscape
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        int x = display.getWidth();
+        int y = display.getHeight();
+
+        // For landscape, width is always greater than height
+        int screenWidth = Math.max(x, y);
+        int screenHeight = Math.min(x, y);
+        mScreenAspectRatio = (double) screenWidth / screenHeight;
+        mScreenArea = screenWidth * screenHeight;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    int getScreenArea() {
+        return mScreenArea;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    double getScreenAspectRatio() {
+        return mScreenAspectRatio;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
new file mode 100644
index 00000000..a86d500c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
@@ -0,0 +1,83 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+/**
+ * This XML manager handles the actual video.
+ */
+class VastMediaXmlManager {
+
+    // Attribute names
+    private static final String WIDTH = "width";
+    private static final String HEIGHT = "height";
+    private static final String DELIVERY = "delivery";
+    private static final String VIDEO_TYPE  = "type";
+
+    @NonNull private final Node mMediaNode;
+
+    VastMediaXmlManager(@NonNull final Node mediaNode) {
+        Preconditions.checkNotNull(mediaNode, "mediaNode cannot be null");
+        mMediaNode = mediaNode;
+    }
+
+    /**
+     * 'progressive' for progressive download (e.g. HTTP) or 'streaming' for streaming protocols
+     * or {@code null} if not specified. MoPub expects to download the video. This is a required
+     * attribute.
+     *
+     * @return String of delivery type or {@code null}
+     */
+    @Nullable
+    String getDelivery() {
+        return XmlUtils.getAttributeValue(mMediaNode, DELIVERY);
+    }
+
+    /**
+     * Expected width of the video in pixels or {@code null} if not specified. This is a
+     * required attribute.
+     *
+     * @return Integer width of video or {@code null}
+     */
+    @Nullable
+    Integer getWidth() {
+        return XmlUtils.getAttributeValueAsInt(mMediaNode, WIDTH);
+    }
+
+    /**
+     * Expected height of the video in pixels or {@code null} if not specified. This is a
+     * required attribute.
+     *
+     * @return Integer height of video or {@code null}
+     */
+    @Nullable
+    Integer getHeight() {
+        return XmlUtils.getAttributeValueAsInt(mMediaNode, HEIGHT);
+    }
+
+    /**
+     * The MIME file type of the video or {@code null} if not specified. This is a required
+     * attribute. (e.g. 'video/x-flv' or 'video/mp4').
+     *
+     * @return The String type or {@code null}
+     */
+    @Nullable
+    String getType() {
+        return XmlUtils.getAttributeValue(mMediaNode, VIDEO_TYPE);
+    }
+
+    /**
+     * The URL of the video or {@code null} if not specified.
+     *
+     * @return String url of video or {@code null}
+     */
+    @Nullable
+    String getMediaUrl() {
+        return XmlUtils.getNodeValue(mMediaNode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java
new file mode 100644
index 00000000..41d387de
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java
@@ -0,0 +1,210 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+
+import java.io.Serializable;
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * The data and its type used to populate a Vast 3.0 companion ad or icon.
+ */
+class VastResource implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private static final List<String> VALID_IMAGE_TYPES =
+            Arrays.asList("image/jpeg", "image/png", "image/bmp", "image/gif");
+    private static final List<String> VALID_APPLICATION_TYPES =
+            Arrays.asList("application/x-javascript");
+
+    /**
+     * The type of resource ordered according to priority.
+     */
+    enum Type {
+        STATIC_RESOURCE,
+        HTML_RESOURCE,
+        IFRAME_RESOURCE
+    }
+
+    /**
+     * The type of the static resource. Only static resources only will have values other than NONE.
+     */
+    enum CreativeType {
+        NONE,
+        IMAGE,
+        JAVASCRIPT
+    }
+
+    @NonNull private String mResource;
+    @NonNull private Type mType;
+    @NonNull private CreativeType mCreativeType;
+    private int mWidth;
+    private int mHeight;
+
+    /**
+     * Helper method that tries to create a {@link VastResource} by accessing all resource types on
+     * the {@link VastResourceXmlManager} in order of priority defined by the {@link Type} enum.
+     *
+     * @param resourceXmlManager the manager used to populate the {@link VastResource}
+     * @param width              the expected width of the resource. This only affects IFrames.
+     * @param height             the expected height of the resource. This only affects IFrames.
+     * @return the newly created VastResource
+     */
+    @Nullable
+    static VastResource fromVastResourceXmlManager(
+            @NonNull final VastResourceXmlManager resourceXmlManager, final int width,
+            final int height) {
+        for (Type type : Type.values()) {
+            VastResource vastResource =
+                    fromVastResourceXmlManager(resourceXmlManager, type, width, height);
+            if (vastResource != null) {
+                return vastResource;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Tries to create a {@link VastResource} by accessing a specific resource {@link Type} on the
+     * {@link VastResourceXmlManager}.
+     *
+     * @param resourceXmlManager the manager used to populate the {@link VastResource}
+     * @param type the resource {@link Type} to try to access
+     * @param width the expected width of the resource. This only affects IFrames.
+     * @param height the expected height of the resource. This only affects IFrames.
+     * @return the newly created VastResource
+     */
+    @Nullable
+    static VastResource fromVastResourceXmlManager(
+            @NonNull final VastResourceXmlManager resourceXmlManager,
+            final @NonNull Type type, final int width, final int height) {
+        Preconditions.checkNotNull(resourceXmlManager);
+        Preconditions.checkNotNull(type);
+
+        String iFrameResource = resourceXmlManager.getIFrameResource();
+        String htmlResource = resourceXmlManager.getHTMLResource();
+        String staticResource = resourceXmlManager.getStaticResource();
+        String staticResourceType = resourceXmlManager.getStaticResourceType();
+
+        String resource;
+        CreativeType creativeType;
+
+        if (type == Type.STATIC_RESOURCE &&
+                staticResource != null && staticResourceType != null
+                && (VALID_IMAGE_TYPES.contains(staticResourceType)
+                || VALID_APPLICATION_TYPES.contains(staticResourceType))) {
+            resource = staticResource;
+            if (VALID_IMAGE_TYPES.contains(staticResourceType)) {
+                creativeType = CreativeType.IMAGE;
+            } else {
+                creativeType = CreativeType.JAVASCRIPT;
+            }
+        } else if (type == Type.HTML_RESOURCE && htmlResource != null) {
+            resource = htmlResource;
+            creativeType = CreativeType.NONE;
+        } else if (type == Type.IFRAME_RESOURCE && iFrameResource != null) {
+            resource = iFrameResource;
+            creativeType = CreativeType.NONE;
+        } else {
+            return null;
+        }
+
+        return new VastResource(resource, type, creativeType, width, height);
+    }
+
+    /**
+     * Private constructor. Use fromVastResourceXmlManager() to create a VastResource.
+     */
+    VastResource(@NonNull final String resource, @NonNull final Type type,
+            @NonNull final CreativeType creativeType, final int width, final int height) {
+        Preconditions.checkNotNull(resource);
+        Preconditions.checkNotNull(type);
+        Preconditions.checkNotNull(creativeType);
+
+        mResource = resource;
+        mType = type;
+        mCreativeType = creativeType;
+        mWidth = width;
+        mHeight = height;
+    }
+
+    @NonNull
+    public String getResource() {
+        return mResource;
+    }
+
+    @NonNull
+    public Type getType() {
+        return mType;
+    }
+
+    @NonNull
+    public CreativeType getCreativeType() {
+        return mCreativeType;
+    }
+
+    /**
+     * Initializes a WebView used to display the resource.
+     *
+     * @param webView the resource's WebView.
+     */
+    public void initializeWebView(@NonNull VastWebView webView) {
+        Preconditions.checkNotNull(webView);
+
+        if (mType == Type.IFRAME_RESOURCE) {
+            webView.loadData("<iframe frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" " +
+                    "marginwidth=\"0\" style=\"border: 0px; margin: 0px;\" width=\"" + mWidth +
+                    "\" height=\"" + mHeight + "\" src=\"" + mResource + "\"></iframe>");
+        } else if (mType == Type.HTML_RESOURCE) {
+            webView.loadData(mResource);
+        } else if (mType == Type.STATIC_RESOURCE) {
+            if (mCreativeType == CreativeType.IMAGE) {
+                String data = "<html>" +
+                        "<head>" +
+                        "</head>" +
+                        // Set margin and padding to 0 in order to get rid of Android WebView
+                        // default padding
+                        "<body style=\"margin:0;padding:0\">" +
+                        "<img src=\"" + mResource + "\" width=\"100%\" style=\"max-width:100%;max-height:100%;\" />" +
+                        "</body>" +
+                        "</html>";
+                webView.loadData(data);
+            } else if (mCreativeType == CreativeType.JAVASCRIPT) {
+                String data = "<script src=\"" + mResource + "\"></script>";
+                webView.loadData(data);
+            }
+        }
+    }
+
+    /**
+     * Selects the correct click through url based on the type of resource.
+     *
+     * @param vastClickThroughUrl    The click through url as specified in the vast document. This
+     *                               is used with static images.
+     * @param webViewClickThroughUrl The click through url when pertaining to Javascript, HTML,
+     *                               IFrames that originated from a WebView.
+     * @return String representing the correct click through for the resource type which may be
+     * {@code null} if the correct click through url was not specified or {@code null}.
+     */
+    @Nullable
+    public String getCorrectClickThroughUrl(@Nullable final String vastClickThroughUrl,
+            @Nullable final String webViewClickThroughUrl) {
+        switch (mType) {
+            case STATIC_RESOURCE:
+                if (VastResource.CreativeType.IMAGE == mCreativeType) {
+                    return vastClickThroughUrl;
+                } else if (VastResource.CreativeType.JAVASCRIPT == mCreativeType) {
+                    return webViewClickThroughUrl;
+                }
+                return null;
+            case HTML_RESOURCE:
+            case IFRAME_RESOURCE:
+                return webViewClickThroughUrl;
+            default:
+                return null;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
new file mode 100644
index 00000000..51db66d4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
@@ -0,0 +1,76 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+public class VastResourceXmlManager {
+
+    // Element names
+    public static final String STATIC_RESOURCE = "StaticResource";
+    public static final String IFRAME_RESOURCE = "IFrameResource";
+    public static final String HTML_RESOURCE = "HTMLResource";
+
+    // Attribute names
+    public static final String CREATIVE_TYPE = "creativeType";
+
+    @NonNull private final Node mResourceNode;
+
+    VastResourceXmlManager(@NonNull final Node resourceNode) {
+        Preconditions.checkNotNull(resourceNode);
+        mResourceNode = resourceNode;
+    }
+
+    /**
+     * If this node has a static resource, then this method returns the static resource data,
+     * if present. This returns {@code null} if this node does not have a static resource.
+     *
+     * @return The static resource data or {@code null}
+     */
+    @Nullable
+    String getStaticResource() {
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(mResourceNode, STATIC_RESOURCE));
+    }
+
+    /**
+     * If this node has a static resource, then this method returns the type of the static resource.
+     * This returns {@code null} if this node does not have a static resource.
+     *
+     * @return The static resource type or {@code null}
+     */
+    @Nullable
+    String getStaticResourceType() {
+        Node staticResource = XmlUtils.getFirstMatchingChildNode(mResourceNode, STATIC_RESOURCE);
+        String attribute = XmlUtils.getAttributeValue(staticResource, CREATIVE_TYPE);
+        if (attribute != null) {
+            return attribute.toLowerCase();
+        }
+        return null;
+    }
+
+    /**
+     * If this node has an iframe resource, then this method returns the iframe resource data, if
+     * present. This returns {@code null} if this node does not have an iframe resource.
+     *
+     * @return The iframe resource data or {@code null}
+     */
+    @Nullable
+    String getIFrameResource() {
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(mResourceNode, IFRAME_RESOURCE));
+    }
+
+    /**
+     * If this node has an HTML resource, then this method returns the HTML resource data, if
+     * present. This returns {@code null} if this node does not have an HTML resource.
+     *
+     * @return The HTML resource data or {@code null}
+     */
+    @Nullable
+    String getHTMLResource() {
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(mResourceNode, HTML_RESOURCE));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
index 3922cd7c..46019add 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
@@ -1,35 +1,45 @@
-package com.mopub.mobileads;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.common.Preconditions;
-
-import java.io.Serializable;
-
-/**
- * State encapsulation for VAST tracking URLs that should only be called once. For example, progress
- * trackers are only called once.
- */
-public class VastTracker implements Serializable {
-    private static final long serialVersionUID = 0L;
-    @NonNull protected final String mTrackingUrl;
-    private boolean mCalled;
-
-    public VastTracker(@NonNull String trackingUrl) {
-        Preconditions.checkNotNull(trackingUrl);
-        mTrackingUrl = trackingUrl;
-    }
-
-    @NonNull
-    public String getTrackingUrl() {
-        return mTrackingUrl;
-    }
-
-    public void setTracked() {
-        mCalled = true;
-    }
-
-    public boolean isTracked() {
-        return mCalled;
-    }
-}
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+
+import java.io.Serializable;
+
+/**
+ * State encapsulation for VAST tracking URLs that may or may not only be called once. For example,
+ * progress trackers are only called once, but error trackers are repeatable.
+ */
+public class VastTracker implements Serializable {
+    private static final long serialVersionUID = 0L;
+    @NonNull protected final String mTrackingUrl;
+    private boolean mCalled;
+    private boolean mIsRepeatable;
+
+    public VastTracker(@NonNull String trackingUrl) {
+        Preconditions.checkNotNull(trackingUrl);
+        mTrackingUrl = trackingUrl;
+    }
+
+    public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
+        this(trackingUrl);
+        mIsRepeatable = isRepeatable;
+    }
+
+    @NonNull
+    public String getTrackingUrl() {
+        return mTrackingUrl;
+    }
+
+    public void setTracked() {
+        mCalled = true;
+    }
+
+    public boolean isTracked() {
+        return mCalled;
+    }
+
+    public boolean isRepeatable() {
+        return mIsRepeatable;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
new file mode 100644
index 00000000..a547b3a5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
@@ -0,0 +1,149 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.CloseButtonDrawable;
+import com.mopub.mobileads.resource.DrawableConstants;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageLoader;
+
+import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
+
+public class VastVideoCloseButtonWidget extends RelativeLayout {
+    @NonNull private TextView mTextView;
+    @NonNull private ImageView mImageView;
+    @NonNull private final ImageLoader mImageLoader;
+    @NonNull private CloseButtonDrawable mCloseButtonDrawable;
+
+    private final int mEdgePadding;
+    private final int mTextRightMargin;
+    private final int mImagePadding;
+    private final int mWidgetHeight;
+
+    public VastVideoCloseButtonWidget(@NonNull final Context context) {
+        super(context);
+
+        setId((int) Utils.generateUniqueId());
+
+        mEdgePadding = Dips.dipsToIntPixels(DrawableConstants.CloseButton.EDGE_PADDING, context);
+        mImagePadding = Dips.dipsToIntPixels(DrawableConstants.CloseButton.IMAGE_PADDING_DIPS, context);
+        mWidgetHeight = Dips.dipsToIntPixels(DrawableConstants.CloseButton.WIDGET_HEIGHT_DIPS, context);
+        mTextRightMargin = Dips.dipsToIntPixels(DrawableConstants.CloseButton.TEXT_RIGHT_MARGIN_DIPS, context);
+
+        mCloseButtonDrawable = new CloseButtonDrawable();
+        mImageLoader = Networking.getImageLoader(context);
+
+        createImageView();
+        createTextView();
+
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                WRAP_CONTENT,
+                mWidgetHeight);
+
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP | RelativeLayout.ALIGN_PARENT_RIGHT);
+        setLayoutParams(layoutParams);
+    }
+
+    private void createImageView() {
+        mImageView = new ImageView(getContext());
+        mImageView.setId((int) Utils.generateUniqueId());
+
+        final RelativeLayout.LayoutParams iconLayoutParams = new RelativeLayout.LayoutParams(
+                mWidgetHeight,
+                mWidgetHeight);
+
+        iconLayoutParams.addRule(ALIGN_PARENT_RIGHT);
+
+        mImageView.setImageDrawable(mCloseButtonDrawable);
+        mImageView.setPadding(mImagePadding, mImagePadding + mEdgePadding, mImagePadding + mEdgePadding, mImagePadding);
+        addView(mImageView, iconLayoutParams);
+    }
+
+    private void createTextView() {
+        mTextView = new TextView(getContext());
+        mTextView.setSingleLine();
+        mTextView.setEllipsize(TextUtils.TruncateAt.END);
+        mTextView.setTextColor(DrawableConstants.CloseButton.TEXT_COLOR);
+        mTextView.setTextSize(DrawableConstants.CloseButton.TEXT_SIZE_SP);
+        mTextView.setTypeface(DrawableConstants.CloseButton.TEXT_TYPEFACE);
+        mTextView.setText(DrawableConstants.CloseButton.DEFAULT_CLOSE_BUTTON_TEXT);
+
+        final RelativeLayout.LayoutParams textLayoutParams = new RelativeLayout.LayoutParams(
+                WRAP_CONTENT,
+                WRAP_CONTENT);
+
+        textLayoutParams.addRule(CENTER_VERTICAL);
+        textLayoutParams.addRule(LEFT_OF, mImageView.getId());
+
+        mTextView.setPadding(0, mEdgePadding, 0, 0);
+        // space between text and image
+        textLayoutParams.setMargins(0, 0, mTextRightMargin, 0);
+
+        addView(mTextView, textLayoutParams);
+    }
+
+    void updateCloseButtonText(@Nullable final String text) {
+        if (mTextView != null) {
+            mTextView.setText(text);
+        }
+    }
+
+    void updateCloseButtonIcon(@NonNull final String imageUrl) {
+        mImageLoader.get(imageUrl, new ImageLoader.ImageListener() {
+            @Override
+            public void onResponse(final ImageLoader.ImageContainer imageContainer,
+                    final boolean isImmediate) {
+                Bitmap bitmap = imageContainer.getBitmap();
+                if (bitmap != null) {
+                    mImageView.setImageBitmap(bitmap);
+                } else {
+                    MoPubLog.d(String.format("%s returned null bitmap", imageUrl));
+                }
+            }
+
+            @Override
+            public void onErrorResponse(final VolleyError volleyError) {
+                MoPubLog.d("Failed to load image.", volleyError);
+            }
+        });
+    }
+
+    void setOnTouchListenerToContent(@Nullable View.OnTouchListener onTouchListener) {
+        mImageView.setOnTouchListener(onTouchListener);
+        mTextView.setOnTouchListener(onTouchListener);
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    ImageView getImageView() {
+        return mImageView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setImageView(ImageView imageView) {
+        mImageView = imageView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    TextView getTextView() {
+        return mTextView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfiguration.java
new file mode 100644
index 00000000..27c53a8a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfiguration.java
@@ -0,0 +1,304 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.util.DeviceUtils;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public class VastVideoConfiguration implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    @NonNull private final ArrayList<VastTracker> mImpressionTrackers;
+    @NonNull private final ArrayList<VastFractionalProgressTracker> mFractionalTrackers;
+    @NonNull private final ArrayList<VastAbsoluteProgressTracker> mAbsoluteTrackers;
+    @NonNull private final ArrayList<VastTracker> mPauseTrackers;
+    @NonNull private final ArrayList<VastTracker> mResumeTrackers;
+    @NonNull private final ArrayList<VastTracker> mCompleteTrackers;
+    @NonNull private final ArrayList<VastTracker> mCloseTrackers;
+    @NonNull private final ArrayList<VastTracker> mSkipTrackers;
+    @NonNull private final ArrayList<VastTracker> mClickTrackers;
+    @NonNull private final ArrayList<VastTracker> mErrorTrackers;
+    @Nullable private String mClickThroughUrl;
+    @Nullable private String mNetworkMediaFileUrl;
+    @Nullable private String mDiskMediaFileUrl;
+    @Nullable private String mSkipOffset;
+    @Nullable private VastCompanionAd mVastCompanionAd;
+    @Nullable private VastIcon mVastIcon;
+
+    // Custom extensions
+    @Nullable private String mCustomCtaText;
+    @Nullable private String mCustomSkipText;
+    @Nullable private String mCustomCloseIconUrl;
+    @NonNull private DeviceUtils.ForceOrientation mCustomForceOrientation = DeviceUtils.ForceOrientation.FORCE_LANDSCAPE; // Default is forcing landscape
+
+    /**
+     * Flag to indicate if the VAST xml document has explicitly set the orientation as opposed to
+     * using the default.
+     */
+    private boolean mIsForceOrientationSet;
+
+    public VastVideoConfiguration() {
+        mImpressionTrackers = new ArrayList<VastTracker>();
+        mFractionalTrackers = new ArrayList<VastFractionalProgressTracker>();
+        mAbsoluteTrackers = new ArrayList<VastAbsoluteProgressTracker>();
+        mPauseTrackers = new ArrayList<VastTracker>();
+        mResumeTrackers = new ArrayList<VastTracker>();
+        mCompleteTrackers = new ArrayList<VastTracker>();
+        mCloseTrackers = new ArrayList<VastTracker>();
+        mSkipTrackers = new ArrayList<VastTracker>();
+        mClickTrackers = new ArrayList<VastTracker>();
+        mErrorTrackers = new ArrayList<VastTracker>();
+    }
+
+    /**
+     * Setters
+     */
+
+    public void addImpressionTrackers(@NonNull final List<VastTracker> impressionTrackers) {
+        Preconditions.checkNotNull(impressionTrackers, "impressionTrackers cannot be null");
+        mImpressionTrackers.addAll(impressionTrackers);
+    }
+
+    /**
+     * Add trackers for percentage-based tracking. This includes all quartile trackers and any
+     * "progress" events with other percentages.
+     */
+    public void addFractionalTrackers(@NonNull final List<VastFractionalProgressTracker> fractionalTrackers) {
+        Preconditions.checkNotNull(fractionalTrackers, "fractionalTrackers cannot be null");
+        mFractionalTrackers.addAll(fractionalTrackers);
+        Collections.sort(mFractionalTrackers);
+    }
+
+    /**
+     * Add trackers for absolute tracking. This includes start trackers, which have an absolute threshold of 2 seconds.
+     */
+    public void addAbsoluteTrackers(@NonNull final List<VastAbsoluteProgressTracker> absoluteTrackers) {
+        Preconditions.checkNotNull(absoluteTrackers, "absoluteTrackers cannot be null");
+        mAbsoluteTrackers.addAll(absoluteTrackers);
+        Collections.sort(mAbsoluteTrackers);
+    }
+
+    public void addCompleteTrackers(@NonNull final List<VastTracker> completeTrackers) {
+        Preconditions.checkNotNull(completeTrackers, "completeTrackers cannot be null");
+        mCompleteTrackers.addAll(completeTrackers);
+    }
+
+    /**
+     * Add trackers for when the video is paused.
+     *
+     * @param pauseTrackers List of String URLs to hit
+     */
+    public void addPauseTrackers(@NonNull List<VastTracker> pauseTrackers) {
+        Preconditions.checkNotNull(pauseTrackers, "pauseTrackers cannot be null");
+        mPauseTrackers.addAll(pauseTrackers);
+    }
+
+    /**
+     * Add trackers for when the video is resumed.
+     *
+     * @param resumeTrackers List of String URLs to hit
+     */
+    public void addResumeTrackers(@NonNull List<VastTracker> resumeTrackers) {
+        Preconditions.checkNotNull(resumeTrackers, "resumeTrackers cannot be null");
+        mResumeTrackers.addAll(resumeTrackers);
+    }
+
+    public void addCloseTrackers(@NonNull final List<VastTracker> closeTrackers) {
+        Preconditions.checkNotNull(closeTrackers, "closeTrackers cannot be null");
+        mCloseTrackers.addAll(closeTrackers);
+    }
+
+    public void addSkipTrackers(@NonNull final List<VastTracker> skipTrackers) {
+        Preconditions.checkNotNull(skipTrackers, "skipTrackers cannot be null");
+        mSkipTrackers.addAll(skipTrackers);
+    }
+
+    public void addClickTrackers(@NonNull final List<VastTracker> clickTrackers) {
+        Preconditions.checkNotNull(clickTrackers, "clickTrackers cannot be null");
+        mClickTrackers.addAll(clickTrackers);
+    }
+
+    /**
+     * Add trackers for errors.
+     *
+     * @param errorTrackers A URL to hit when an error happens.
+     */
+    public void addErrorTrackers(@NonNull final List<VastTracker> errorTrackers) {
+        Preconditions.checkNotNull(errorTrackers, "errorTrackers cannot be null");
+        mErrorTrackers.addAll(errorTrackers);
+    }
+
+    public void setClickThroughUrl(@Nullable final String clickThroughUrl) {
+        mClickThroughUrl = clickThroughUrl;
+    }
+
+    public void setNetworkMediaFileUrl(@Nullable final String networkMediaFileUrl) {
+        mNetworkMediaFileUrl = networkMediaFileUrl;
+    }
+
+    public void setDiskMediaFileUrl(@Nullable final String diskMediaFileUrl) {
+        mDiskMediaFileUrl = diskMediaFileUrl;
+    }
+
+    public void setVastCompanionAd(@Nullable final VastCompanionAd vastCompanionAd) {
+        mVastCompanionAd = vastCompanionAd;
+    }
+
+    public void setVastIcon(@Nullable final VastIcon vastIcon) {
+        mVastIcon = vastIcon;
+    }
+
+    public void setCustomCtaText(@Nullable final String customCtaText) {
+        if (customCtaText != null) {
+            mCustomCtaText = customCtaText;
+        }
+    }
+
+    public void setCustomSkipText(@Nullable final String customSkipText) {
+        if (customSkipText != null) {
+            mCustomSkipText = customSkipText;
+        }
+    }
+
+    public void setCustomCloseIconUrl(@Nullable final String customCloseIconUrl) {
+        if (customCloseIconUrl != null) {
+            mCustomCloseIconUrl = customCloseIconUrl;
+        }
+    }
+
+    public void setCustomForceOrientation(@Nullable final DeviceUtils.ForceOrientation customForceOrientation) {
+        if (customForceOrientation != null && customForceOrientation != DeviceUtils.ForceOrientation.UNDEFINED) {
+            mCustomForceOrientation = customForceOrientation;
+            mIsForceOrientationSet = true;
+        }
+    }
+
+    public void setSkipOffset(@Nullable final String skipOffset) {
+        if (skipOffset != null) {
+            mSkipOffset = skipOffset;
+        }
+    }
+
+    /**
+     * Getters
+     */
+
+    @NonNull
+    public List<VastTracker> getImpressionTrackers() {
+        return mImpressionTrackers;
+    }
+
+    @NonNull
+    public ArrayList<VastAbsoluteProgressTracker> getAbsoluteTrackers() {
+        return mAbsoluteTrackers;
+    }
+
+    @NonNull
+    public ArrayList<VastFractionalProgressTracker> getFractionalTrackers() {
+        return mFractionalTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getPauseTrackers() {
+        return mPauseTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getResumeTrackers() {
+        return mResumeTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getCompleteTrackers() {
+        return mCompleteTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getCloseTrackers() {
+        return mCloseTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getSkipTrackers() {
+        return mSkipTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getClickTrackers() {
+        return mClickTrackers;
+    }
+
+    /**
+     * Gets a list of error trackers.
+     *
+     * @return List of String URLs.
+     */
+    @NonNull
+    public List<VastTracker> getErrorTrackers() {
+        return mErrorTrackers;
+    }
+
+    @Nullable
+    public String getClickThroughUrl() {
+        return mClickThroughUrl;
+    }
+
+    @Nullable
+    public String getNetworkMediaFileUrl() {
+        return mNetworkMediaFileUrl;
+    }
+
+    @Nullable
+    public String getDiskMediaFileUrl() {
+        return mDiskMediaFileUrl;
+    }
+
+    @Nullable
+    public VastCompanionAd getVastCompanionAd() {
+        return mVastCompanionAd;
+    }
+
+    @Nullable
+    public VastIcon getVastIcon() {
+        return mVastIcon;
+    }
+
+    @Nullable
+    public String getCustomCtaText() {
+        return mCustomCtaText;
+    }
+
+    @Nullable
+    public String getCustomSkipText() {
+        return mCustomSkipText;
+    }
+
+    @Nullable
+    public String getCustomCloseIconUrl() {
+        return mCustomCloseIconUrl;
+    }
+
+    public boolean isCustomForceOrientationSet() {
+        return mIsForceOrientationSet;
+    }
+
+    /**
+     * Get custom force orientation
+     * @return ForceOrientation enum (default is FORCE_LANDSCAPE)
+     */
+    @NonNull
+    public DeviceUtils.ForceOrientation getCustomForceOrientation() {
+        return mCustomForceOrientation;
+    }
+
+    @Nullable
+    public String getSkipOffset() {
+        return mSkipOffset;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
new file mode 100644
index 00000000..86e243a5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
@@ -0,0 +1,141 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.CtaButtonDrawable;
+import com.mopub.mobileads.resource.DrawableConstants;
+
+public class VastVideoCtaButtonWidget extends ImageView {
+    @NonNull private CtaButtonDrawable mCtaButtonDrawable;
+    @NonNull private final RelativeLayout.LayoutParams mLandscapeLayoutParams;
+    @NonNull private final RelativeLayout.LayoutParams mPortraitLayoutParams;
+
+    private boolean mIsVideoSkippable;
+    private boolean mIsVideoComplete;
+    private boolean mHasCompanionAd;
+
+    public VastVideoCtaButtonWidget(@NonNull final Context context, final int videoViewId,
+            final boolean hasCompanionAd) {
+        super(context);
+
+        mHasCompanionAd = hasCompanionAd;
+
+        setId((int) Utils.generateUniqueId());
+
+        final int width = Dips.dipsToIntPixels(DrawableConstants.CtaButton.WIDTH_DIPS, context);
+        final int height = Dips.dipsToIntPixels(DrawableConstants.CtaButton.HEIGHT_DIPS, context);
+        final int margin = Dips.dipsToIntPixels(DrawableConstants.CtaButton.MARGIN_DIPS, context);
+
+        mCtaButtonDrawable = new CtaButtonDrawable(context);
+        setImageDrawable(mCtaButtonDrawable);
+
+        // landscape layout: placed bottom-right corner of video view
+        mLandscapeLayoutParams = new RelativeLayout.LayoutParams(width, height);
+        mLandscapeLayoutParams.setMargins(margin, margin, margin, margin);
+        mLandscapeLayoutParams.addRule(RelativeLayout.ALIGN_BOTTOM, videoViewId);
+        mLandscapeLayoutParams.addRule(RelativeLayout.ALIGN_RIGHT, videoViewId);
+
+        // portrait layout: placed center below video view
+        mPortraitLayoutParams = new RelativeLayout.LayoutParams(width, height);
+        mPortraitLayoutParams.setMargins(margin, margin, margin, margin);
+        mPortraitLayoutParams.addRule(RelativeLayout.BELOW, videoViewId);
+        mPortraitLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
+
+        updateLayoutAndVisibility();
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+
+        updateLayoutAndVisibility();
+    }
+
+    void updateCtaText(@NonNull final String customCtaText) {
+        mCtaButtonDrawable.setCtaText(customCtaText);
+    }
+
+    void notifyVideoSkippable() {
+        mIsVideoSkippable = true;
+        updateLayoutAndVisibility();
+    }
+
+    void notifyVideoComplete() {
+        mIsVideoSkippable = true;
+        mIsVideoComplete = true;
+        updateLayoutAndVisibility();
+    }
+
+    private void updateLayoutAndVisibility() {
+        // If video is not skippable yet, do not show CTA button
+        if (!mIsVideoSkippable) {
+            return;
+        }
+
+        final int currentOrientation = getResources().getConfiguration().orientation;
+
+        switch (currentOrientation) {
+            case Configuration.ORIENTATION_LANDSCAPE:
+                // Do not show CTA button if ALL these conditions are satisfied:
+                // 1. device in landscape mode
+                // 2. video has finished playing
+                // 3. there is a companion ad
+                if (mIsVideoComplete && mHasCompanionAd) {
+                    setVisibility(View.GONE);
+                } else {
+                    setVisibility(View.VISIBLE);
+                    setLayoutParams(mLandscapeLayoutParams);
+                }
+                break;
+            case Configuration.ORIENTATION_PORTRAIT:
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+            case Configuration.ORIENTATION_UNDEFINED:
+                MoPubLog.d("Screen orientation undefined: CTA button widget defaulting to portrait layout");
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+            case Configuration.ORIENTATION_SQUARE:
+                MoPubLog.d("Screen orientation is deprecated ORIENTATION_SQUARE: CTA button widget defaulting to portrait layout");
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+            default:
+                MoPubLog.d("Unrecognized screen orientation: CTA button widget defaulting to portrait layout");
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+        }
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    String getCtaText() {
+        return mCtaButtonDrawable.getCtaText();
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    boolean hasPortraitLayoutParams() {
+        return getLayoutParams().equals(mPortraitLayoutParams);
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    boolean hasLandscapeLayoutParams() {
+        return getLayoutParams().equals(mLandscapeLayoutParams);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
new file mode 100644
index 00000000..d72141a6
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
@@ -0,0 +1,31 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.drawable.GradientDrawable;
+import android.support.annotation.NonNull;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.util.Dips;
+import com.mopub.mobileads.resource.DrawableConstants;
+
+public class VastVideoGradientStripWidget extends ImageView {
+    public VastVideoGradientStripWidget(@NonNull final Context context,
+            @NonNull final GradientDrawable.Orientation gradientOrientation, final int layoutVerb,
+            final int layoutAnchor) {
+        super(context);
+
+        final GradientDrawable gradientDrawable = new GradientDrawable(gradientOrientation,
+                new int[] {DrawableConstants.GradientStrip.START_COLOR,
+                        DrawableConstants.GradientStrip.END_COLOR});
+        setImageDrawable(gradientDrawable);
+
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                Dips.dipsToIntPixels(DrawableConstants.GradientStrip.GRADIENT_STRIP_HEIGHT_DIPS,
+                        context));
+        layoutParams.addRule(layoutVerb, layoutAnchor);
+        setLayoutParams(layoutParams);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 517afb44..aef161a6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -1,74 +1,72 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.DataKeys;
-import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.util.vast.VastManager;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-
-import java.util.Map;
-
-class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
-    private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private String mVastResponse;
-    private VastManager mVastManager;
-    private VastVideoConfiguration mVastVideoConfiguration;
-
-    @Override
-    protected void extractExtras(Map<String, String> serverExtras) {
-        mVastResponse = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
-    }
-
-    @Override
-    protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        mCustomEventInterstitialListener = customEventInterstitialListener;
-
-        if (!CacheService.initializeDiskCache(mContext)) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_CACHE_ERROR);
-            return;
-        }
-
-        mVastManager = VastManagerFactory.create(mContext);
-        mVastManager.prepareVastVideoConfiguration(mVastResponse, this);
-    }
-
-    @Override
-    public void showInterstitial() {
-        MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfiguration, mBroadcastIdentifier);
-    }
-
-    @Override
-    public void onInvalidate() {
-        if (mVastManager != null) {
-            mVastManager.cancel();
-        }
-
-        super.onInvalidate();
-    }
-
-    /*
-     * VastManager.VastManagerListener implementation
-     */
-
-    @Override
-    public void onVastVideoConfigurationPrepared(final VastVideoConfiguration vastVideoConfiguration) {
-        if (vastVideoConfiguration == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
-            return;
-        }
-
-        mVastVideoConfiguration = vastVideoConfiguration;
-        mCustomEventInterstitialListener.onInterstitialLoaded();
-    }
-
-
-    @Deprecated // for testing
-    String getVastResponse() {
-        return mVastResponse;
-    }
-
-    @Deprecated // for testing
-    void setVastManager(VastManager vastManager) {
-        mVastManager = vastManager;
-    }
-}
+package com.mopub.mobileads;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.DataKeys;
+import com.mopub.mobileads.factories.VastManagerFactory;
+
+import java.util.Map;
+
+class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
+    private CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private String mVastResponse;
+    private VastManager mVastManager;
+    private VastVideoConfiguration mVastVideoConfiguration;
+
+    @Override
+    protected void extractExtras(Map<String, String> serverExtras) {
+        mVastResponse = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
+    }
+
+    @Override
+    protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
+        mCustomEventInterstitialListener = customEventInterstitialListener;
+
+        if (!CacheService.initializeDiskCache(mContext)) {
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_CACHE_ERROR);
+            return;
+        }
+
+        mVastManager = VastManagerFactory.create(mContext);
+        mVastManager.prepareVastVideoConfiguration(mVastResponse, this, mContext);
+    }
+
+    @Override
+    public void showInterstitial() {
+        MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfiguration, mBroadcastIdentifier);
+    }
+
+    @Override
+    public void onInvalidate() {
+        if (mVastManager != null) {
+            mVastManager.cancel();
+        }
+
+        super.onInvalidate();
+    }
+
+    /*
+     * VastManager.VastManagerListener implementation
+     */
+
+    @Override
+    public void onVastVideoConfigurationPrepared(final VastVideoConfiguration vastVideoConfiguration) {
+        if (vastVideoConfiguration == null) {
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
+            return;
+        }
+
+        mVastVideoConfiguration = vastVideoConfiguration;
+        mCustomEventInterstitialListener.onInterstitialLoaded();
+    }
+
+
+    @Deprecated // for testing
+    String getVastResponse() {
+        return mVastResponse;
+    }
+
+    @Deprecated // for testing
+    void setVastManager(VastManager vastManager) {
+        mVastManager = vastManager;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
new file mode 100644
index 00000000..7f7eb5d3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.DrawableConstants;
+import com.mopub.mobileads.resource.ProgressBarDrawable;
+
+public class VastVideoProgressBarWidget extends ImageView {
+    @NonNull private ProgressBarDrawable mProgressBarDrawable;
+
+    public VastVideoProgressBarWidget(@NonNull final Context context, final int anchorId) {
+        super(context);
+
+        setId((int) Utils.generateUniqueId());
+
+        mProgressBarDrawable = new ProgressBarDrawable(context);
+        setImageDrawable(mProgressBarDrawable);
+
+        final int progressBarHeight
+                = Dips.dipsToIntPixels(DrawableConstants.ProgressBar.HEIGHT_DIPS, context);
+
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                progressBarHeight);
+
+        layoutParams.addRule(RelativeLayout.ALIGN_BOTTOM, anchorId);
+
+        setLayoutParams(layoutParams);
+    }
+
+    void calibrateAndMakeVisible(final int duration, final int skipOffset) {
+        mProgressBarDrawable.setDurationAndSkipOffset(duration, skipOffset);
+        setVisibility(View.VISIBLE);
+    }
+
+    void updateProgress(final int progress) {
+        mProgressBarDrawable.setProgress(progress);
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    ProgressBarDrawable getImageViewDrawable() {
+        return mProgressBarDrawable;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setImageViewDrawable(@NonNull ProgressBarDrawable drawable) {
+        mProgressBarDrawable = drawable;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
new file mode 100644
index 00000000..8fe0e8fd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
@@ -0,0 +1,78 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.DrawableConstants;
+import com.mopub.mobileads.resource.RadialCountdownDrawable;
+
+public class VastVideoRadialCountdownWidget extends ImageView {
+    @NonNull private RadialCountdownDrawable mRadialCountdownDrawable;
+    private int mLastProgressMilliseconds;
+
+    public VastVideoRadialCountdownWidget(@NonNull final Context context) {
+        super(context);
+
+        setId((int) Utils.generateUniqueId());
+
+        final int sideLength = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.SIDE_LENGTH_DIPS, context);
+        final int topMargin = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.TOP_MARGIN_DIPS, context);
+        final int rightMargin = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.RIGHT_MARGIN_DIPS, context);
+        final int padding = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.PADDING_DIPS, context);
+
+        mRadialCountdownDrawable = new RadialCountdownDrawable(context);
+        setImageDrawable(mRadialCountdownDrawable);
+        setPadding(padding, padding, padding, padding);
+
+        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                sideLength,
+                sideLength);
+        layoutParams.setMargins(0, topMargin, rightMargin, 0);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP | RelativeLayout.ALIGN_PARENT_RIGHT);
+        setLayoutParams(layoutParams);
+    }
+
+    void calibrateAndMakeVisible(final int initialCountdownMilliseconds) {
+        mRadialCountdownDrawable.setInitialCountdown(initialCountdownMilliseconds);
+        setVisibility(VISIBLE);
+    }
+
+    void updateCountdownProgress(final int initialCountdownMilliseconds, final int currentProgressMilliseconds) {
+        // There exists an Android video player bug where VideoView.getCurrentPosition()
+        // temporarily returns 0 right after backgrounding and switching back to the app.
+        // Therefore, we check against the last known current position to ensure that it's
+        // monotonically increasing.
+        if (currentProgressMilliseconds >= mLastProgressMilliseconds) {
+            int millisecondsUntilSkippable = initialCountdownMilliseconds - currentProgressMilliseconds;
+
+            // XXX
+            // After backgrounding and switching back to the app,
+            // this widget becomes erroneously visible.
+            if (millisecondsUntilSkippable < 0) {
+                setVisibility(GONE);
+            } else {
+                mRadialCountdownDrawable.updateCountdownProgress(currentProgressMilliseconds);
+                mLastProgressMilliseconds = currentProgressMilliseconds;
+            }
+        }
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    RadialCountdownDrawable getImageViewDrawable() {
+        return mRadialCountdownDrawable;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setImageViewDrawable(RadialCountdownDrawable drawable) {
+        mRadialCountdownDrawable = drawable;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 0125daa1..7bef8ed8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -5,44 +5,38 @@
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.Color;
-import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
-import android.graphics.drawable.LayerDrawable;
+import android.media.MediaMetadataRetriever;
 import android.media.MediaPlayer;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.DownloadTask;
-import com.mopub.common.HttpResponses;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
 import com.mopub.common.UrlHandler;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Dips;
-import com.mopub.common.util.Drawables;
+import com.mopub.common.util.ImageUtils;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Strings;
+import com.mopub.common.util.Utils;
 import com.mopub.common.util.VersionCode;
-import com.mopub.mobileads.util.vast.VastCompanionAd;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-import com.mopub.network.TrackingRequest;
-
-import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
+import com.mopub.mobileads.resource.DrawableConstants;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -53,57 +47,88 @@
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-import static com.mopub.common.HttpClient.initializeHttpGet;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
-public class VastVideoViewController extends BaseVideoViewController implements DownloadTask.DownloadTaskListener {
+public class VastVideoViewController extends BaseVideoViewController {
     static final String VAST_VIDEO_CONFIGURATION = "vast_video_configuration";
+    static final String CURRENT_POSITION = "current_position";
+    static final String RESUMED_VAST_CONFIGURATION = "resumed_vast_configuration";
 
     private static final long VIDEO_PROGRESS_TIMER_CHECKER_DELAY = 50;
     private static final long VIDEO_COUNTDOWN_UPDATE_INTERVAL = 250;
     private static final int MOPUB_BROWSER_REQUEST_CODE = 1;
     private static final int MAX_VIDEO_RETRIES = 1;
     private static final int VIDEO_VIEW_FILE_PERMISSION_ERROR = Integer.MIN_VALUE;
+    private static final int SEEKER_POSITION_NOT_INITIALIZED = -1;
+
+    /**
+     * Android WebViews supposedly have padding on each side of 10 dp. However, through empirical
+     * testing, the number is actually closer to 8 dp. Increasing the width and height of the
+     * WebView by this many dp will make the images inside not get cut off. This also prevents the
+     * image from being scrollable.
+     */
+    public static final int WEBVIEW_PADDING = 16;
 
     static final int DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON = 5 * 1000;
     static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 16 * 1000;
 
     private final VastVideoConfiguration mVastVideoConfiguration;
-    private final VastCompanionAd mVastCompanionAd;
-    private final VastVideoToolbar mVastVideoToolbar;
-    private final VideoView mVideoView;
-    private final ImageView mCompanionAdImageView;
-    private final View.OnTouchListener mClickThroughListener;
-
-    private final VastVideoViewProgressRunnable mProgressCheckerRunnable;
-    private final VastVideoViewCountdownRunnable mCountdownRunnable;
-    private int mShowCloseButtonDelay = DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
 
-    private boolean mShowCloseButtonEventFired;
+    @NonNull private final VideoView mVideoView;
+    @NonNull private VastVideoGradientStripWidget mTopGradientStripWidget;
+    @NonNull private VastVideoGradientStripWidget mBottomGradientStripWidget;
+    @NonNull private ImageView mBlurredLastVideoFrameImageView;
+
+    @NonNull private VastVideoProgressBarWidget mProgressBarWidget;
+    @NonNull private VastVideoRadialCountdownWidget mRadialCountdownWidget;
+    @NonNull private VastVideoCtaButtonWidget mCtaButtonWidget;
+    @NonNull private VastVideoCloseButtonWidget mCloseButtonWidget;
+
+    @Nullable private final VastCompanionAd mVastCompanionAd;
+    @NonNull private final View mCompanionAdView;
+    @Nullable private final VastIcon mVastIcon;
+    @NonNull private final View mIconView;
+
+    @NonNull private final VastVideoViewProgressRunnable mProgressCheckerRunnable;
+    @NonNull private final VastVideoViewCountdownRunnable mCountdownRunnable;
+    @NonNull private final View.OnTouchListener mClickThroughListener;
 
+    @Nullable private MediaMetadataRetriever mMediaMetadataRetriever;
+
+    private int mShowCloseButtonDelay = DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
+    private boolean mShowCloseButtonEventFired;
     private int mSeekerPositionOnPause;
     private boolean mIsVideoFinishedPlaying;
     private int mVideoRetries;
-
     private boolean mVideoError;
-    private boolean mCompletionTrackerFired;
-
     private boolean mHasSkipOffset = false;
+    private boolean mIsCalibrationDone = false;
+    private int mDuration;
 
     VastVideoViewController(final Context context,
-            final Bundle bundle,
+            final Bundle intentExtras,
+            @Nullable final Bundle savedInstanceState,
             final long broadcastIdentifier,
             final BaseVideoViewControllerListener baseVideoViewControllerListener)
             throws IllegalStateException {
         super(context, broadcastIdentifier, baseVideoViewControllerListener);
-        mSeekerPositionOnPause = -1;
-        mVideoRetries = 0;
+        mSeekerPositionOnPause = SEEKER_POSITION_NOT_INITIALIZED;
 
-        Serializable serializable = bundle.getSerializable(VAST_VIDEO_CONFIGURATION);
-        if (serializable != null && serializable instanceof VastVideoConfiguration) {
+        Serializable resumedVastConfiguration = null;
+        if (savedInstanceState != null) {
+            resumedVastConfiguration =
+                    savedInstanceState.getSerializable(RESUMED_VAST_CONFIGURATION);
+        }
+        Serializable serializable = intentExtras.getSerializable(VAST_VIDEO_CONFIGURATION);
+        if (resumedVastConfiguration != null
+                && resumedVastConfiguration instanceof VastVideoConfiguration) {
+            mVastVideoConfiguration = (VastVideoConfiguration) resumedVastConfiguration;
+            mSeekerPositionOnPause =
+                    savedInstanceState.getInt(CURRENT_POSITION, SEEKER_POSITION_NOT_INITIALIZED);
+        } else if (serializable != null && serializable instanceof VastVideoConfiguration) {
             mVastVideoConfiguration = (VastVideoConfiguration) serializable;
         } else {
             throw new IllegalStateException("VastVideoConfiguration is invalid");
@@ -114,29 +139,63 @@
         }
 
         mVastCompanionAd = mVastVideoConfiguration.getVastCompanionAd();
+        mVastIcon = mVastVideoConfiguration.getVastIcon();
+
+        mMediaMetadataRetriever = createMediaMetadataRetriever();
 
         mClickThroughListener = new View.OnTouchListener() {
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
-                    handleClick(
+                    makeVastTrackingHttpRequest(
                             mVastVideoConfiguration.getClickTrackers(),
-                            mVastVideoConfiguration.getClickThroughUrl()
+                            null,
+                            mIsVideoFinishedPlaying ? mDuration : getCurrentPosition(),
+                            getNetworkMediaFileUrl(),
+                            getContext()
                     );
+                    handleClick(mVastVideoConfiguration.getClickThroughUrl());
                 }
                 return true;
             }
         };
 
-        createVideoBackground(context);
+        // Add widgets in the following order.
+        // Ordering matters because some placements are relative to other widgets.
 
-        mVideoView = createVideoView(context);
+        // Solid black background
+        getLayout().setBackgroundColor(Color.BLACK);
+
+        // Video view
+        mVideoView = createVideoView(context, View.VISIBLE);
         mVideoView.requestFocus();
 
-        mVastVideoToolbar = createVastVideoToolBar(context);
-        getLayout().addView(mVastVideoToolbar);
+        // Top transparent gradient strip overlaying top of screen
+        addTopGradientStripWidget(context, View.VISIBLE);
+
+        // Progress bar overlaying bottom of video view
+        addProgressBarWidget(context, View.INVISIBLE);
+
+        // Bottom transparent gradient strip above progress bar
+        addBottomGradientStripWidget(context, View.VISIBLE);
+
+        // Radial countdown timer snapped to top-right corner of screen
+        addRadialCountdownWidget(context, View.INVISIBLE);
+
+        // Companion ad view, set to invisible initially to have it be drawn to calculate size
+        mCompanionAdView = createCompanionAdView(context, mVastCompanionAd, View.INVISIBLE);
+
+        // Icon view
+        mIconView = createIconView(context, mVastIcon, View.INVISIBLE);
+
+        // Blurred last frame
+        addBlurredLastVideoFrameImageView(context, View.INVISIBLE);
+
+        // Close button snapped to top-right corner of screen
+        addCloseButtonWidget(context, View.GONE);
 
-        mCompanionAdImageView = createCompanionAdImageView(context);
+        // Always add last to layout since it must be visible above all other views
+        addCtaButtonWidget(context, View.INVISIBLE);
 
         Handler mainHandler = new Handler(Looper.getMainLooper());
         mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mainHandler);
@@ -167,12 +226,12 @@ protected void onCreate() {
                 break;
         }
 
-        downloadCompanionAd();
-
-        makeTrackingHttpRequest(
+        makeVastTrackingHttpRequest(
                 mVastVideoConfiguration.getImpressionTrackers(),
-                getContext(),
-                BaseEvent.Name.IMPRESSION_REQUEST
+                null,
+                getCurrentPosition(),
+                getNetworkMediaFileUrl(),
+                getContext()
         );
         broadcastAction(ACTION_INTERSTITIAL_SHOW);
     }
@@ -184,10 +243,21 @@ protected void onResume() {
         mVideoRetries = 0;
         startRunnables();
 
-        mVideoView.seekTo(mSeekerPositionOnPause);
+        if (mSeekerPositionOnPause > 0) {
+            mVideoView.seekTo(mSeekerPositionOnPause);
+        }
         if (!mIsVideoFinishedPlaying) {
             mVideoView.start();
         }
+        if (mSeekerPositionOnPause != SEEKER_POSITION_NOT_INITIALIZED) {
+            makeVastTrackingHttpRequest(
+                    mVastVideoConfiguration.getResumeTrackers(),
+                    null,
+                    mSeekerPositionOnPause,
+                    mVastVideoConfiguration.getNetworkMediaFileUrl(),
+                    getContext()
+            );
+        }
     }
 
     @Override
@@ -195,6 +265,15 @@ protected void onPause() {
         stopRunnables();
         mSeekerPositionOnPause = getCurrentPosition();
         mVideoView.pause();
+        if (!mIsVideoFinishedPlaying) {
+            makeVastTrackingHttpRequest(
+                    mVastVideoConfiguration.getPauseTrackers(),
+                    null,
+                    getCurrentPosition(),
+                    mVastVideoConfiguration.getNetworkMediaFileUrl(),
+                    getContext()
+            );
+        }
     }
 
     @Override
@@ -203,6 +282,12 @@ protected void onDestroy() {
         broadcastAction(ACTION_INTERSTITIAL_DISMISS);
     }
 
+    @Override
+    protected void onSaveInstanceState(@NonNull Bundle outState) {
+        outState.putInt(CURRENT_POSITION, mSeekerPositionOnPause);
+        outState.putSerializable(RESUMED_VAST_CONFIGURATION, mVastVideoConfiguration);
+    }
+
     // Enable the device's back button when the video close button has been displayed
     @Override
     public boolean backButtonEnabled() {
@@ -216,49 +301,6 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
         }
     }
 
-    // DownloadTaskListener
-    @Override
-    public void onComplete(String url, DownloadResponse downloadResponse) {
-        if (downloadResponse != null && downloadResponse.getStatusCode() == HttpStatus.SC_OK) {
-            final Bitmap companionAdBitmap = HttpResponses.asBitmap(downloadResponse);
-            if (companionAdBitmap != null) {
-                // If Bitmap fits in ImageView, then don't use MATCH_PARENT
-                final int width = Dips.dipsToIntPixels(companionAdBitmap.getWidth(), getContext());
-                final int height = Dips.dipsToIntPixels(companionAdBitmap.getHeight(), getContext());
-                final int imageViewWidth = mCompanionAdImageView.getMeasuredWidth();
-                final int imageViewHeight = mCompanionAdImageView.getMeasuredHeight();
-                if (width < imageViewWidth && height < imageViewHeight) {
-                    mCompanionAdImageView.getLayoutParams().width = width;
-                    mCompanionAdImageView.getLayoutParams().height = height;
-                }
-                mCompanionAdImageView.setImageBitmap(companionAdBitmap);
-                mCompanionAdImageView.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View view) {
-                        if (mVastCompanionAd != null) {
-                            handleClick(
-                                    mVastCompanionAd.getClickTrackers(),
-                                    mVastCompanionAd.getClickThroughUrl()
-                            );
-                        }
-                    }
-                });
-            }
-        }
-    }
-
-    private void downloadCompanionAd() {
-        if (mVastCompanionAd != null) {
-            try {
-                final HttpGet httpGet = initializeHttpGet(mVastCompanionAd.getImageUrl(), getContext());
-                final DownloadTask downloadTask = new DownloadTask(this);
-                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpGet);
-            } catch (Exception e) {
-                MoPubLog.d("Failed to download companion ad", e);
-            }
-        }
-    }
-
     private void adjustSkipOffset() {
         int videoDuration = getDuration();
 
@@ -293,6 +335,38 @@ private void adjustSkipOffset() {
         }
     }
 
+    private void prepareBlurredLastVideoFrame() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {
+            if (mVastCompanionAd == null && mMediaMetadataRetriever != null) {
+
+                try {
+                    mMediaMetadataRetriever.setDataSource(mVastVideoConfiguration.getDiskMediaFileUrl());
+                } catch (RuntimeException e) {
+                    // XXX
+                    // MediaMetadataRetriever.setDataSource() might throw RuntimeException,
+                    // possibly due to decoding issues for certain video formats.
+                    // http://stackoverflow.com/questions/9657280/mediaplayer-setdatasource-causes-ioexception-for-valid-file
+                    if (e.getMessage().contains("0x80000000")) {
+                        MoPubLog.d("MediaMetadataRetriever.setDataSource() failed: status = 0x80000000");
+                        return;
+                    } else {
+                        throw e;
+                    }
+                }
+
+                Bitmap lastVideoFrame = mMediaMetadataRetriever.getFrameAtTime(
+                        getDuration() * 1000, MediaMetadataRetriever.OPTION_CLOSEST);
+
+                Bitmap blurredLastVideoFrame = ImageUtils.applyFastGaussianBlurToBitmap(
+                        lastVideoFrame, 4);
+
+                mBlurredLastVideoFrameImageView.setImageBitmap(blurredLastVideoFrame);
+                ImageUtils.setImageViewAlpha(mBlurredLastVideoFrameImageView,
+                        DrawableConstants.BlurredLastVideoFrame.ALPHA);
+            }
+        }
+    }
+
     /**
      * Returns untriggered VAST progress trackers with a progress before the provided position.
      *
@@ -341,63 +415,23 @@ private int remainingProgressTrackerCount() {
         return getUntriggeredTrackersBefore(Integer.MAX_VALUE, Integer.MAX_VALUE).size();
     }
 
-    private void createVideoBackground(final Context context) {
-        GradientDrawable gradientDrawable = new GradientDrawable(
-                GradientDrawable.Orientation.TOP_BOTTOM,
-                new int[]{Color.argb(0, 0, 0, 0), Color.argb(255, 0, 0, 0)}
-        );
-        Drawable[] layers = new Drawable[2];
-        layers[0] = Drawables.THATCHED_BACKGROUND.createDrawable(context);
-        layers[1] = gradientDrawable;
-        LayerDrawable layerList = new LayerDrawable(layers);
-        getLayout().setBackgroundDrawable(layerList);
-    }
-
-    private VastVideoToolbar createVastVideoToolBar(final Context context) {
-        final VastVideoToolbar vastVideoToolbar = new VastVideoToolbar(context);
-        vastVideoToolbar.setCloseButtonOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View view, MotionEvent motionEvent) {
-                if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
-                    TrackingRequest.makeTrackingHttpRequest(
-                            mVastVideoConfiguration.getCloseTrackers(), context);
-                    TrackingRequest.makeTrackingHttpRequest(
-                            mVastVideoConfiguration.getSkipTrackers(), context);
-                    getBaseVideoViewControllerListener().onFinish();
-                }
-                return true;
-            }
-        });
-        vastVideoToolbar.setLearnMoreButtonOnTouchListener(mClickThroughListener);
-
-        // update custom CTA text if specified in VAST extension
-        String customCtaText = mVastVideoConfiguration.getCustomCtaText();
-        if (customCtaText != null) {
-            vastVideoToolbar.updateLearnMoreButtonText(customCtaText);
-        }
-
-        // update custom skip text if specified in VAST extensions
-        String customSkipText = mVastVideoConfiguration.getCustomSkipText();
-        if (customSkipText != null) {
-            vastVideoToolbar.updateCloseButtonText(customSkipText);
-        }
-
-        // update custom close icon if specified in VAST extensions
-        String customCloseIconUrl = mVastVideoConfiguration.getCustomCloseIconUrl();
-        if (customCloseIconUrl != null) {
-            vastVideoToolbar.updateCloseButtonIcon(customCloseIconUrl);
-        }
+    private VideoView createVideoView(@NonNull final Context context, int initialVisibility) {
+        final VideoView videoView = new VideoView(context);
 
-        return vastVideoToolbar;
-    }
+        videoView.setId((int) Utils.generateUniqueId());
 
-    private VideoView createVideoView(final Context context) {
-        final VideoView videoView = new VideoView(context);
         videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
             @Override
             public void onPrepared(MediaPlayer mp) {
                 // Called when media source is ready for playback
+                // The VideoView duration defaults to -1 when the video is not prepared or playing;
+                // Therefore set it here so that we have access to it at all times
+                mDuration = mVideoView.getDuration();
                 adjustSkipOffset();
+                prepareBlurredLastVideoFrame();
+                mProgressBarWidget.calibrateAndMakeVisible(getDuration(), mShowCloseButtonDelay);
+                mRadialCountdownWidget.calibrateAndMakeVisible(mShowCloseButtonDelay);
+                mIsCalibrationDone = true;
             }
         });
         videoView.setOnTouchListener(mClickThroughListener);
@@ -413,15 +447,32 @@ public void onCompletion(MediaPlayer mp) {
 
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
                 // fire the completion event even if the whole video isn't watched.
-                if (!mVideoError && remainingProgressTrackerCount() == 0 && !mCompletionTrackerFired) {
-                    makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers(), context);
-                    mCompletionTrackerFired = true;
+                if (!mVideoError && remainingProgressTrackerCount() == 0) {
+                    makeVastTrackingHttpRequest(
+                            mVastVideoConfiguration.getCompleteTrackers(),
+                            null,
+                            getCurrentPosition(),
+                            getNetworkMediaFileUrl(),
+                            getContext()
+                    );
                 }
 
-                videoView.setVisibility(View.GONE);
-                // check the drawable to see if the image view was populated with content
-                if (mCompanionAdImageView.getDrawable() != null) {
-                    mCompanionAdImageView.setVisibility(View.VISIBLE);
+                videoView.setVisibility(View.INVISIBLE);
+
+                mProgressBarWidget.setVisibility(View.GONE);
+                mTopGradientStripWidget.setVisibility(View.GONE);
+                mBottomGradientStripWidget.setVisibility(View.GONE);
+                mIconView.setVisibility(View.GONE);
+
+                mCtaButtonWidget.notifyVideoComplete();
+
+                // Show companion ad if available
+                if (mVastCompanionAd != null) {
+                    mCompanionAdView.setVisibility(View.VISIBLE);
+                    mVastCompanionAd.handleImpression(context, mDuration);
+                } else if (mBlurredLastVideoFrameImageView.getDrawable() != null) {
+                    // If there is no companion ad, show blurred last video frame with dark overlay
+                    mBlurredLastVideoFrameImageView.setVisibility(View.VISIBLE);
                 }
             }
         });
@@ -436,16 +487,146 @@ public boolean onError(final MediaPlayer mediaPlayer, final int what, final int
                     makeVideoInteractable();
                     videoError(false);
                     mVideoError = true;
+
+                    makeVastTrackingHttpRequest(
+                            mVastVideoConfiguration.getErrorTrackers(),
+                            VastErrorCode.GENERAL_LINEAR_AD_ERROR,
+                            getCurrentPosition(),
+                            getNetworkMediaFileUrl(),
+                            getContext()
+                    );
+
                     return false;
                 }
             }
         });
 
         videoView.setVideoPath(mVastVideoConfiguration.getDiskMediaFileUrl());
+        videoView.setVisibility(initialVisibility);
 
         return videoView;
     }
 
+    private void addTopGradientStripWidget(@NonNull final Context context, int initialVisibility) {
+        mTopGradientStripWidget = new VastVideoGradientStripWidget(context,
+                GradientDrawable.Orientation.TOP_BOTTOM,
+                RelativeLayout.ALIGN_TOP,
+                mVideoView.getId());
+        mTopGradientStripWidget.setVisibility(initialVisibility);
+        getLayout().addView(mTopGradientStripWidget);
+    }
+
+    private void addBottomGradientStripWidget(@NonNull final Context context, int initialVisibility) {
+        mBottomGradientStripWidget = new VastVideoGradientStripWidget(context,
+                GradientDrawable.Orientation.BOTTOM_TOP,
+                RelativeLayout.ABOVE,
+                mProgressBarWidget.getId());
+        mBottomGradientStripWidget.setVisibility(initialVisibility);
+        getLayout().addView(mBottomGradientStripWidget);
+    }
+
+    private void addProgressBarWidget(@NonNull final Context context, int initialVisibility) {
+        mProgressBarWidget = new VastVideoProgressBarWidget(context, mVideoView.getId());
+        mProgressBarWidget.setVisibility(initialVisibility);
+        getLayout().addView(mProgressBarWidget);
+    }
+
+    private void addRadialCountdownWidget(@NonNull final Context context, int initialVisibility) {
+        mRadialCountdownWidget = new VastVideoRadialCountdownWidget(context);
+        mRadialCountdownWidget.setVisibility(initialVisibility);
+        getLayout().addView(mRadialCountdownWidget);
+    }
+
+    private void addCtaButtonWidget(@NonNull final Context context, int initialVisibility) {
+        boolean hasCompanionAd = (mVastCompanionAd != null);
+
+        mCtaButtonWidget = new VastVideoCtaButtonWidget(context, mVideoView.getId(), hasCompanionAd);
+
+        mCtaButtonWidget.setVisibility(initialVisibility);
+
+        getLayout().addView(mCtaButtonWidget);
+
+        mCtaButtonWidget.setOnTouchListener(mClickThroughListener);
+
+        // Update custom CTA text if specified in VAST extension
+        String customCtaText = mVastVideoConfiguration.getCustomCtaText();
+        if (customCtaText != null) {
+            mCtaButtonWidget.updateCtaText(customCtaText);
+        }
+    }
+
+    private void addCloseButtonWidget(@NonNull final Context context, int initialVisibility) {
+        mCloseButtonWidget = new VastVideoCloseButtonWidget(context);
+        mCloseButtonWidget.setVisibility(initialVisibility);
+
+        getLayout().addView(mCloseButtonWidget);
+
+        final View.OnTouchListener closeOnTouchListener = new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                final int currentPosition;
+                if (mIsVideoFinishedPlaying) {
+                    currentPosition = mDuration;
+                } else {
+                    currentPosition = getCurrentPosition();
+                }
+                if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
+                    makeVastTrackingHttpRequest(
+                            mVastVideoConfiguration.getCloseTrackers(),
+                            null,
+                            currentPosition,
+                            getNetworkMediaFileUrl(),
+                            getContext()
+                    );
+                    makeVastTrackingHttpRequest(
+                            mVastVideoConfiguration.getSkipTrackers(),
+                            null,
+                            currentPosition,
+                            getNetworkMediaFileUrl(),
+                            getContext()
+                    );
+                    getBaseVideoViewControllerListener().onFinish();
+                }
+                return true;
+            }
+        };
+
+        mCloseButtonWidget.setOnTouchListenerToContent(closeOnTouchListener);
+
+        // Update custom skip text if specified in VAST extensions
+        final String customSkipText = mVastVideoConfiguration.getCustomSkipText();
+        if (customSkipText != null) {
+            mCloseButtonWidget.updateCloseButtonText(customSkipText);
+        }
+
+        // Update custom close icon if specified in VAST extensions
+        final String customCloseIconUrl = mVastVideoConfiguration.getCustomCloseIconUrl();
+        if (customCloseIconUrl != null) {
+            mCloseButtonWidget.updateCloseButtonIcon(customCloseIconUrl);
+        }
+    }
+
+    @Nullable
+    private MediaMetadataRetriever createMediaMetadataRetriever() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {
+            return new MediaMetadataRetriever();
+        }
+
+        return null;
+    }
+
+    private void addBlurredLastVideoFrameImageView(@NonNull final Context context,
+            int initialVisibility) {
+
+        mBlurredLastVideoFrameImageView = new ImageView(context);
+        mBlurredLastVideoFrameImageView.setVisibility(initialVisibility);
+
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
+
+        getLayout().addView(mBlurredLastVideoFrameImageView, layoutParams);
+    }
+
     boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int what, final int extra) {
         // XXX
         // VideoView has a bug in versions lower than Jelly Bean, Api Level 16, Android 4.1
@@ -488,9 +669,7 @@ boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int what, final in
      * other links in the MoPub in-app browser.
      */
     @VisibleForTesting
-    void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
-        makeTrackingHttpRequest(clickThroughTrackers, getContext(), BaseEvent.Name.CLICK_REQUEST);
-
+    void handleClick(final String clickThroughUrl) {
         if (TextUtils.isEmpty(clickThroughUrl)) {
             return;
         }
@@ -500,16 +679,19 @@ void handleClick(final List<String> clickThroughTrackers, final String clickThro
         new UrlHandler.Builder()
                 .withSupportedUrlActions(
                         UrlAction.IGNORE_ABOUT_SCHEME,
+                        UrlAction.OPEN_APP_MARKET,
                         UrlAction.OPEN_NATIVE_BROWSER,
                         UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET)
+                        UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                        UrlAction.FOLLOW_DEEP_LINK)
                 .withResultActions(new UrlHandler.ResultActions() {
                     @Override
                     public void urlHandlingSucceeded(@NonNull String url,
                             @NonNull UrlAction urlAction) {
                         if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
                             Bundle bundle = new Bundle();
-                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, clickThroughUrl);
+                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
 
                             getBaseVideoViewControllerListener().onStartActivityForResult(
                                     MoPubBrowser.class, MOPUB_BROWSER_REQUEST_CODE, bundle);
@@ -525,27 +707,120 @@ public void urlHandlingFailed(@NonNull String url,
                 .build().handleUrl(getContext(), clickThroughUrl);
     }
 
-    private ImageView createCompanionAdImageView(final Context context) {
+    /**
+     * Creates and lays out the webview used to display the companion ad.
+     *
+     * @param context         The context.
+     * @param vastCompanionAd The data used to populate the view.
+     * @return the populated webview
+     */
+    @NonNull
+    @VisibleForTesting
+    View createCompanionAdView(@NonNull final Context context,
+            @Nullable final VastCompanionAd vastCompanionAd,
+            int initialVisibility) {
+        Preconditions.checkNotNull(context);
+
+        if (vastCompanionAd == null) {
+            final View emptyView = new View(context);
+            emptyView.setVisibility(View.INVISIBLE);
+            return emptyView;
+        }
+
         RelativeLayout relativeLayout = new RelativeLayout(context);
         relativeLayout.setGravity(Gravity.CENTER);
         RelativeLayout.LayoutParams layoutParams =
                 new RelativeLayout.LayoutParams(
                         RelativeLayout.LayoutParams.MATCH_PARENT,
                         RelativeLayout.LayoutParams.MATCH_PARENT);
-        layoutParams.addRule(RelativeLayout.BELOW, mVastVideoToolbar.getId());
         getLayout().addView(relativeLayout, layoutParams);
 
-        ImageView imageView = new ImageView(context);
-        // Set to invisible to have it be drawn to calculate size
-        imageView.setVisibility(View.INVISIBLE);
+        VastWebView companionView = VastWebView.createView(context,
+                vastCompanionAd.getVastResource());
+        companionView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
+            @Override
+            public void onVastWebViewClick() {
+                broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                makeVastTrackingHttpRequest(
+                        vastCompanionAd.getClickTrackers(),
+                        null,
+                        mDuration,
+                        null,
+                        context
+                );
+                vastCompanionAd.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, null);
+            }
+        });
+        companionView.setWebViewClient(new WebViewClient() {
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                vastCompanionAd.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, url);
+                return true;
+            }
+        });
+
+        companionView.setVisibility(initialVisibility);
 
         final RelativeLayout.LayoutParams companionAdLayout = new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.MATCH_PARENT,
-                RelativeLayout.LayoutParams.MATCH_PARENT
+                Dips.dipsToIntPixels(vastCompanionAd.getWidth() + WEBVIEW_PADDING, context),
+                Dips.dipsToIntPixels(vastCompanionAd.getHeight() + WEBVIEW_PADDING, context)
         );
+        companionAdLayout.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
 
-        relativeLayout.addView(imageView, companionAdLayout);
-        return imageView;
+        relativeLayout.addView(companionView, companionAdLayout);
+        return companionView;
+    }
+
+    /**
+     * Creates and lays out the webview used to display the icon.
+     *
+     * @param context the context.
+     * @param vastIcon the data used to populate the view.
+     * @return the populated webview.
+     */
+    @NonNull
+    @VisibleForTesting
+    View createIconView(@NonNull final Context context, @Nullable final VastIcon vastIcon, int initialVisibility) {
+        Preconditions.checkNotNull(context);
+
+        if (vastIcon == null) {
+            return new View(context);
+        }
+
+        VastWebView iconView = VastWebView.createView(context, vastIcon.getVastResource());
+        iconView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
+            @Override
+            public void onVastWebViewClick() {
+                makeVastTrackingHttpRequest(
+                        vastIcon.getClickTrackingUris(),
+                        null,
+                        getCurrentPosition(),
+                        getNetworkMediaFileUrl(),
+                        context
+                );
+                vastIcon.handleClick(getContext(), null);
+            }
+        });
+        iconView.setWebViewClient(new WebViewClient() {
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                vastIcon.handleClick(getContext(), url);
+                return true;
+            }
+        });
+        iconView.setVisibility(initialVisibility);
+
+        // Add extra room for the WebView to account for the natural padding in Android WebViews.
+        RelativeLayout.LayoutParams layoutParams =
+                new RelativeLayout.LayoutParams(
+                        Dips.asIntPixels(vastIcon.getWidth() + WEBVIEW_PADDING, context),
+                        Dips.asIntPixels(vastIcon.getHeight() + WEBVIEW_PADDING, context));
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+
+        getLayout().addView(iconView, layoutParams);
+
+        return iconView;
     }
 
     int getDuration() {
@@ -556,33 +831,58 @@ int getCurrentPosition() {
         return mVideoView.getCurrentPosition();
     }
 
-    boolean isLongVideo(final int duration) {
-        return (duration >= MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-    }
-
     void makeVideoInteractable() {
         mShowCloseButtonEventFired = true;
-        mVastVideoToolbar.makeInteractable();
+
+        mRadialCountdownWidget.setVisibility(View.GONE);
+        mCloseButtonWidget.setVisibility(View.VISIBLE);
+
+        mCtaButtonWidget.notifyVideoSkippable();
     }
 
     boolean shouldBeInteractable() {
         return !mShowCloseButtonEventFired && getCurrentPosition() >= mShowCloseButtonDelay;
     }
 
-    boolean shouldShowCountdown() {
-        // show countdown if any of the following conditions is satisfied:
-        // 1) long video
-        // 2) skipoffset is specified in VAST and is less than video duration
-        final int duration = getDuration();
-        return isLongVideo(duration) || (mHasSkipOffset && mShowCloseButtonDelay < duration);
+    void updateCountdown() {
+        if (mIsCalibrationDone) {
+            mRadialCountdownWidget.updateCountdownProgress(mShowCloseButtonDelay, getCurrentPosition());
+        }
     }
 
-    void updateCountdown() {
-        mVastVideoToolbar.updateCountdownWidget(mShowCloseButtonDelay - getCurrentPosition());
+    void updateProgressBar() {
+        mProgressBarWidget.updateProgress(getCurrentPosition());
     }
 
-    void updateDuration() {
-        mVastVideoToolbar.updateDurationWidget(getDuration() - getCurrentPosition());
+    String getNetworkMediaFileUrl() {
+        if (mVastVideoConfiguration == null) {
+            return null;
+        }
+        return mVastVideoConfiguration.getNetworkMediaFileUrl();
+    }
+
+    /**
+     * Displays and impresses the icon if the current position of the video is greater than the
+     * offset of the icon. Once the current position is greater than the offset plus duration, the
+     * icon is then hidden again.
+     *
+     * @param currentPosition the current position of the video in milliseconds.
+     */
+    void handleIconDisplay(int currentPosition) {
+        if (mVastIcon == null || currentPosition < mVastIcon.getOffsetMS()) {
+            return;
+        }
+
+        mIconView.setVisibility(View.VISIBLE);
+        mVastIcon.handleImpression(getContext(), currentPosition, getNetworkMediaFileUrl());
+
+        if (mVastIcon.getDurationMS() == null) {
+            return;
+        }
+
+        if (currentPosition >= mVastIcon.getOffsetMS() + mVastIcon.getDurationMS()) {
+            mIconView.setVisibility(View.GONE);
+        }
     }
 
     private boolean shouldAllowClickThrough() {
@@ -657,8 +957,15 @@ boolean isVideoFinishedPlaying() {
     // for testing
     @Deprecated
     @VisibleForTesting
-    ImageView getCompanionAdImageView() {
-        return mCompanionAdImageView;
+    boolean isCalibrationDone() {
+        return mIsCalibrationDone;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    View getCompanionAdView() {
+        return mCompanionAdView;
     }
 
     // for testing
@@ -674,4 +981,81 @@ void setVideoError() {
     boolean getVideoError() {
         return mVideoError;
     }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    View getIconView() {
+        return mIconView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoGradientStripWidget getTopGradientStripWidget() {
+        return mTopGradientStripWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoGradientStripWidget getBottomGradientStripWidget() {
+        return mTopGradientStripWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoProgressBarWidget getProgressBarWidget() {
+        return mProgressBarWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoRadialCountdownWidget getRadialCountdownWidget() {
+        return mRadialCountdownWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoCtaButtonWidget getCtaButtonWidget() {
+        return mCtaButtonWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoCloseButtonWidget getCloseButtonWidget() {
+        return mCloseButtonWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    ImageView getBlurredLastVideoFrameImageView() {
+        return mBlurredLastVideoFrameImageView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setMediaMetadataRetriever(@NonNull MediaMetadataRetriever mediaMetadataRetriever) {
+        mMediaMetadataRetriever = mediaMetadataRetriever;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setRadialCountdownWidget(@NonNull VastVideoRadialCountdownWidget radialCountdownWidget) {
+        mRadialCountdownWidget = radialCountdownWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setProgressBarWidget(@NonNull VastVideoProgressBarWidget progressBarWidget) {
+        mProgressBarWidget = progressBarWidget;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
index 14323626..c3602e9f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
@@ -25,15 +25,10 @@ public VastVideoViewCountdownRunnable(@NonNull VastVideoViewController videoView
 
     @Override
     public void doWork() {
-        // Countdown and interactable are mutually exclusive. Should we refactor to collapse them?
-        if (mVideoViewController.shouldShowCountdown()) {
-            mVideoViewController.updateCountdown();
-        }
+        mVideoViewController.updateCountdown();
 
         if (mVideoViewController.shouldBeInteractable()) {
             mVideoViewController.makeVideoInteractable();
         }
-
-        mVideoViewController.updateDuration();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
index 1936ada0..fdb31fa0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
@@ -4,6 +4,7 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.network.TrackingRequest;
 
 import java.util.ArrayList;
@@ -29,6 +30,8 @@ public void doWork() {
         int videoLength = mVideoViewController.getDuration();
         int currentPosition = mVideoViewController.getCurrentPosition();
 
+        mVideoViewController.updateProgressBar();
+
         if (videoLength > 0) {
             final List<VastTracker> trackersToTrack =
                     mVideoViewController.getUntriggeredTrackersBefore(currentPosition, videoLength);
@@ -38,9 +41,15 @@ public void doWork() {
                     trackUrls.add(tracker.getTrackingUrl());
                     tracker.setTracked();
                 }
-                TrackingRequest.makeTrackingHttpRequest(trackUrls, mVideoViewController.getContext());
+                TrackingRequest.makeTrackingHttpRequest(
+                        new VastMacroHelper(trackUrls)
+                                .withAssetUri(mVideoViewController.getNetworkMediaFileUrl())
+                                .withContentPlayHead(currentPosition)
+                                .getUris(),
+                        mVideoViewController.getContext());
             }
 
+            mVideoViewController.handleIconDisplay(currentPosition);
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
new file mode 100644
index 00000000..5889cd0b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
@@ -0,0 +1,112 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.MotionEvent;
+import android.view.View;
+
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Utils;
+import com.mopub.common.util.VersionCode;
+
+import static com.mopub.common.util.VersionCode.currentApiLevel;
+
+/**
+ * A WebView customized for Vast video needs.
+ */
+class VastWebView extends BaseWebView {
+    interface VastWebViewClickListener {
+        void onVastWebViewClick();
+    }
+
+    @Nullable VastWebViewClickListener mVastWebViewClickListener;
+
+    VastWebView(Context context) {
+        super(context);
+
+        disableScrollingAndZoom();
+        getSettings().setJavaScriptEnabled(true);
+
+        if (currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)) {
+            enablePlugins(true);
+        }
+
+        setBackgroundColor(Color.TRANSPARENT);
+        setOnTouchListener(new VastWebViewOnTouchListener());
+        setId((int) Utils.generateUniqueId());
+    }
+
+    void loadData(String data) {
+        loadDataWithBaseURL("http://" + Constants.HOST + "/",
+                data, "text/html", "utf-8", null);
+    }
+
+    void setVastWebViewClickListener(@NonNull VastWebViewClickListener vastWebViewClickListener) {
+        mVastWebViewClickListener = vastWebViewClickListener;
+    }
+
+    private void disableScrollingAndZoom() {
+        setHorizontalScrollBarEnabled(false);
+        setHorizontalScrollbarOverlay(false);
+        setVerticalScrollBarEnabled(false);
+        setVerticalScrollbarOverlay(false);
+        getSettings().setSupportZoom(false);
+        setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
+    }
+
+    /**
+     * Creates and populates a webview.
+     *
+     * @param context      the context.
+     * @param vastResource A resource describing the contents of the webview
+     * @return a fully populated webview
+     */
+    @NonNull
+    static VastWebView createView(@NonNull final Context context,
+            @NonNull final VastResource vastResource) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(vastResource);
+
+        VastWebView webView = new VastWebView(context);
+        vastResource.initializeWebView(webView);
+
+        return webView;
+    }
+
+    /**
+     * Custom on touch listener to easily detect clicks on the entire WebView.
+     */
+    class VastWebViewOnTouchListener implements View.OnTouchListener {
+        private boolean mClickStarted;
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            switch (event.getAction()) {
+                case MotionEvent.ACTION_DOWN:
+                    mClickStarted = true;
+                    break;
+                case MotionEvent.ACTION_UP:
+                    if (!mClickStarted) {
+                        return false;
+                    }
+                    mClickStarted = false;
+                    if (mVastWebViewClickListener != null) {
+                        mVastWebViewClickListener.onVastWebViewClick();
+                    }
+            }
+
+            return false;
+        }
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    @NonNull
+    VastWebViewClickListener getVastWebViewClickListener() {
+        return mVastWebViewClickListener;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
new file mode 100644
index 00000000..0bf3c15a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -0,0 +1,39 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This XML manager handles Wrapper nodes. Wrappers redirect to other VAST documents (which may
+ * in turn redirect to more wrappers). Wrappers can also contain impression trackers,
+ * trackers for a video ad, and companion ads.
+ */
+class VastWrapperXmlManager extends VastBaseInLineWrapperXmlManager {
+
+    // Element names
+    private static final String VAST_AD_TAG = "VASTAdTagURI";
+
+    VastWrapperXmlManager(@NonNull final Node wrapperNode) {
+        super(wrapperNode);
+        Preconditions.checkNotNull(wrapperNode);
+    }
+
+    /**
+     * Gets the redirect URI to the next VAST xml document. If no redirect URL, return null.
+     *
+     * @return The redirect URI or {@code null} if there isn't one.
+     */
+    @Nullable
+    String getVastAdTagURI() {
+        Node vastAdTagURINode = XmlUtils.getFirstMatchingChildNode(mNode, VAST_AD_TAG);
+        return XmlUtils.getNodeValue(vastAdTagURINode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
new file mode 100644
index 00000000..e13d7c60
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
@@ -0,0 +1,184 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.util.DeviceUtils.ForceOrientation;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NodeList;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+/**
+ * Parses the VAST XML to spec. See www.iab.net for details.
+ * Currently using the VAST 3.0 spec found here: http://www.iab.net/media/file/VASTv3.0.pdf.
+ */
+class VastXmlManager {
+    private static final String ROOT_TAG = "MPMoVideoXMLDocRoot";
+    private static final String ROOT_TAG_OPEN = "<" + ROOT_TAG + ">";
+    private static final String ROOT_TAG_CLOSE = "</" + ROOT_TAG + ">";
+
+    // Element names
+    private static final String AD = "Ad";
+    private static final String ERROR = "Error";
+
+    // Custom element names for VAST 3.0 extensions
+    private static final String MP_IMPRESSION_TRACKER = "MP_TRACKING_URL";
+    private static final String CUSTOM_CTA_TEXT = "MoPubCtaText";
+    private static final String CUSTOM_SKIP_TEXT = "MoPubSkipText";
+    private static final String CUSTOM_CLOSE_ICON = "MoPubCloseIcon";
+    private static final String CUSTOM_FORCE_ORIENTATION = "MoPubForceOrientation";
+
+    // Constants for custom extensions
+    private static final int MAX_CTA_TEXT_LENGTH = 15;
+    private static final int MAX_SKIP_TEXT_LENGTH = 8;
+
+    @Nullable private Document mVastDoc;
+
+    /**
+     * Helper function that builds a document and tries to parse the XML.
+     *
+     * @param xmlString The XML to parse
+     * @throws ParserConfigurationException If the parser is poorly configured
+     * @throws IOException                  If we can't read the document for any reason
+     * @throws SAXException                 If the XML is poorly formatted
+     */
+    void parseVastXml(@NonNull String xmlString) throws ParserConfigurationException,
+            IOException, SAXException {
+        Preconditions.checkNotNull(xmlString, "xmlString cannot be null");
+
+        // if the xml string starts with <?xml?>, this tag can break parsing if it isn't formatted exactly right
+        // or if it's not the first line of the document...we're just going to strip it
+        xmlString = xmlString.replaceFirst("<\\?.*\\?>", "");
+
+        // adserver may embed additional impression trackers as a sibling node of <VAST>
+        // wrap entire document in root node for this case.
+        String documentString = ROOT_TAG_OPEN + xmlString + ROOT_TAG_CLOSE;
+
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setCoalescing(true);
+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
+        mVastDoc = documentBuilder.parse(new InputSource(new StringReader(documentString)));
+    }
+
+    /**
+     * If there is an Ad element, return its XML manager. This is the starting point for VAST
+     * XML documents, and VAST has this as the expected first child. There may be more than one Ad
+     * node in a VAST document. This returns a list of all Ad nodes or an empty list if no Ad nodes
+     * were found.
+     *
+     * @return A List of {@link VastAdXmlManager} or an
+     * empty list if there is no Ad child node.
+     */
+
+    @NonNull
+    List<VastAdXmlManager> getAdXmlManagers() {
+        List<VastAdXmlManager> vastAdXmlManagers = new ArrayList<VastAdXmlManager>();
+        if (mVastDoc == null) {
+            return vastAdXmlManagers;
+        }
+        NodeList nodes = mVastDoc.getElementsByTagName(AD);
+        for (int i = 0; i < nodes.getLength(); ++i) {
+            vastAdXmlManagers.add(new VastAdXmlManager(nodes.item(i)));
+        }
+        return vastAdXmlManagers;
+    }
+
+    /**
+     * Vast documents can have just an error element. This usually is used to indicate that no ad is
+     * available. This gets the url of the error tracker.
+     *
+     * @return The URL of the error tracker or null if it does not exist.
+     */
+    @Nullable
+    VastTracker getErrorTracker() {
+        if (mVastDoc == null) {
+            return null;
+        }
+        String errorTracker = XmlUtils.getFirstMatchingStringData(mVastDoc, ERROR);
+        if (TextUtils.isEmpty(errorTracker)) {
+            return null;
+        }
+        return new VastTracker(errorTracker);
+    }
+
+    /**
+     * Gets a list of MoPub specific impression trackers.
+     *
+     * @return List of URL impression trackers or an empty list if none present.
+     */
+    @NonNull
+    List<VastTracker> getMoPubImpressionTrackers() {
+        List<String> trackers = XmlUtils.getStringDataAsList(mVastDoc, MP_IMPRESSION_TRACKER);
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>(trackers.size());
+        for (String tracker : trackers) {
+            vastTrackers.add(new VastTracker(tracker));
+        }
+        return vastTrackers;
+    }
+
+    /**
+     * Gets the custom call to action text or {@code null} if not specified or too long.
+     *
+     * @return String cta or {@code null}
+     */
+    @Nullable
+    String getCustomCtaText() {
+        String customCtaText = XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_CTA_TEXT);
+        if (customCtaText != null && customCtaText.length() <= MAX_CTA_TEXT_LENGTH) {
+            return customCtaText;
+        }
+
+        return null;
+    }
+
+    /**
+     * Gets the custom text of the skip button or {@code null} if not specified or too long.
+     *
+     * @return String skip text or {@code null}
+     */
+    @Nullable
+    String getCustomSkipText() {
+        String customSkipText = XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_SKIP_TEXT);
+        if (customSkipText != null && customSkipText.length() <= MAX_SKIP_TEXT_LENGTH) {
+            return customSkipText;
+        }
+
+        return null;
+    }
+
+    /**
+     * Gets the custom icon URL or {@code null} if none specified.
+     *
+     * @return String URL of the custom icon or {@code null}
+     */
+    @Nullable
+    String getCustomCloseIconUrl() {
+        return XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_CLOSE_ICON);
+    }
+
+    /**
+     * Gets the orientation that this ad should be forced in. This returns UNDEFINED if not
+     * specified.
+     *
+     * @return {@code ForceOrientation} orientation or {@code UNDEFINED}
+     */
+    @NonNull
+    ForceOrientation getCustomForceOrientation() {
+        return ForceOrientation.getForceOrientation(
+                XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_FORCE_ORIENTATION));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
new file mode 100644
index 00000000..5cc83238
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -0,0 +1,669 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Point;
+import android.net.http.AndroidHttpClient;
+import android.os.AsyncTask;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.common.HttpClient;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Strings;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpGet;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
+
+
+/**
+ * AsyncTask that reads in VAST xml and resolves redirects. This returns a
+ * fully formed {@link VastVideoConfiguration} so that the video can be
+ * displayed with the settings and trackers set in the configuration.
+ */
+public class VastXmlManagerAggregator extends AsyncTask<String, Void, VastVideoConfiguration> {
+
+    /**
+     * Listener for when the xml parsing is done.
+     */
+    interface VastXmlManagerAggregatorListener {
+        /**
+         * When all the wrappers have resolved and aggregation is done, this passes in
+         * a video configuration or null if one is not found.
+         * @param vastVideoConfiguration The video configuration found or null if
+         *                               no video was found.
+         */
+        void onAggregationComplete(final @Nullable VastVideoConfiguration vastVideoConfiguration);
+    }
+
+    // More than reasonable number of nested VAST urls to follow
+    static final int MAX_TIMES_TO_FOLLOW_VAST_REDIRECT = 10;
+    private static final double ASPECT_RATIO_WEIGHT = 40;
+    private static final double AREA_WEIGHT = 60;
+    private static final List<String> VIDEO_MIME_TYPES =
+            Arrays.asList("video/mp4", "video/3gpp");
+
+    @NonNull private final WeakReference<VastXmlManagerAggregatorListener> mVastXmlManagerAggregatorListener;
+    private final double mScreenAspectRatio;
+    private final int mScreenArea;
+    @NonNull private final Context mContext;
+
+    /**
+     * Number of times this has followed a redirect. This value is only
+     * accessed and set on the background thread.
+     */
+    private int mTimesFollowedVastRedirect;
+
+    VastXmlManagerAggregator(@NonNull final VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener,
+            final double screenAspectRatio,
+            final int screenArea,
+            @NonNull final Context context) {
+        super();
+
+        Preconditions.checkNotNull(vastXmlManagerAggregatorListener);
+        Preconditions.checkNotNull(context);
+        mVastXmlManagerAggregatorListener =
+                new WeakReference<VastXmlManagerAggregatorListener>(vastXmlManagerAggregatorListener);
+        mScreenAspectRatio = screenAspectRatio;
+        mScreenArea = screenArea;
+        mContext = context.getApplicationContext();
+    }
+
+    @Override
+    protected VastVideoConfiguration doInBackground(@Nullable String... strings) {
+        AndroidHttpClient httpClient = null;
+        try {
+            httpClient = HttpClient.getHttpClient();
+            if (strings != null && strings.length > 0) {
+                String vastXml = strings[0];
+                if (vastXml == null) {
+                    return null;
+                }
+                return evaluateVastXmlManager(vastXml, httpClient, new ArrayList<VastTracker>());
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Failed to parse VAST XML", e);
+        } finally {
+            if (httpClient != null) {
+                httpClient.close();
+            }
+        }
+
+        return null;
+    }
+
+    @Override
+    protected void onPostExecute(final @Nullable VastVideoConfiguration vastVideoConfiguration) {
+        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
+        if (listener != null) {
+            listener.onAggregationComplete(vastVideoConfiguration);
+        }
+    }
+
+    @Override
+    protected void onCancelled() {
+        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
+        if (listener != null) {
+            listener.onAggregationComplete(null);
+        }
+    }
+
+    /**
+     * Recursively traverses the VAST xml documents and finds the first Linear creative containing a
+     * valid media file. For each Ad element in a document, the method will first try to find a
+     * valid Linear creative in the InLine element. If it does not find one, it will then try to
+     * resolve the Wrapper element which should redirect to more VAST xml documents with more InLine
+     * elements.
+     * <p/>
+     * The list of error trackers are propagated through each wrapper redirect. If at the end of the
+     * wrapper chain, there's no ad, then the error trackers for the entire wrapper chain are fired.
+     * If a valid video is found, the error trackers are stored in the video configuration for
+     * non-xml errors.
+     *
+     * @param vastXml           The xml that this class parses
+     * @param androidHttpClient This is used to follow redirects
+     * @param errorTrackers     This is the current list of error tracker URLs to hit if something
+     *                          goes wrong.
+     * @return {@link VastVideoConfiguration} with all available fields set or null if the xml is
+     * invalid or null.
+     */
+    @VisibleForTesting
+    @Nullable
+    VastVideoConfiguration evaluateVastXmlManager(@NonNull final String vastXml,
+            @NonNull final AndroidHttpClient androidHttpClient,
+            @NonNull final List<VastTracker> errorTrackers) {
+        Preconditions.checkNotNull(vastXml, "vastXml cannot be null");
+        Preconditions.checkNotNull(androidHttpClient, "androidHttpClient cannot be null");
+        Preconditions.checkNotNull(errorTrackers, "errorTrackers cannot be null");
+
+        final VastXmlManager xmlManager = new VastXmlManager();
+        try {
+            xmlManager.parseVastXml(vastXml);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to parse VAST XML", e);
+            makeVastTrackingHttpRequest(errorTrackers, VastErrorCode.XML_PARSING_ERROR, null,
+                    null, mContext);
+            return null;
+        }
+
+        List<VastAdXmlManager> vastAdXmlManagers = xmlManager.getAdXmlManagers();
+
+        // If there are no ads, fire the error trackers
+        if (fireErrorTrackerIfNoAds(vastAdXmlManagers, xmlManager, mContext)) {
+            return null;
+        }
+
+        for (VastAdXmlManager vastAdXmlManager : vastAdXmlManagers) {
+
+            if (!isValidSequenceNumber(vastAdXmlManager.getSequence())) {
+                continue;
+            }
+
+            // InLine evaluation
+            VastInLineXmlManager vastInLineXmlManager = vastAdXmlManager.getInLineXmlManager();
+            if (vastInLineXmlManager != null) {
+                VastVideoConfiguration vastVideoConfiguration = evaluateInLineXmlManager(
+                        vastInLineXmlManager, errorTrackers);
+                // If the vastVideoConfiguration is non null, it means we found a valid media file
+                if (vastVideoConfiguration != null) {
+                    populateMoPubCustomElements(xmlManager, vastVideoConfiguration);
+                    return vastVideoConfiguration;
+                }
+            }
+
+            // Wrapper evaluation
+            VastWrapperXmlManager vastWrapperXmlManager = vastAdXmlManager.getWrapperXmlManager();
+            if (vastWrapperXmlManager != null) {
+                final List<VastTracker> wrapperErrorTrackers = new ArrayList<VastTracker>(errorTrackers);
+                wrapperErrorTrackers.addAll(vastWrapperXmlManager.getErrorTrackers());
+                String vastRedirectXml = evaluateWrapperRedirect(vastWrapperXmlManager,
+                        androidHttpClient, wrapperErrorTrackers);
+                if (vastRedirectXml == null) {
+                    continue;
+                }
+
+                VastVideoConfiguration vastVideoConfiguration = evaluateVastXmlManager(
+                        vastRedirectXml,
+                        androidHttpClient,
+                        wrapperErrorTrackers);
+                // If we don't find a valid video creative somewhere down this wrapper chain,
+                // look at the next Ad element
+                // NOTE: Wrapper elements will never contain media files according to the VAST
+                // 3.0 spec
+                if (vastVideoConfiguration == null) {
+                    continue;
+                }
+
+                // If we have a vastVideoConfiguration it means that we found a valid media file
+                // in one of Wrapper redirects. Therefore, aggregate all trackers in the wrapper
+                vastVideoConfiguration.addImpressionTrackers(
+                        vastWrapperXmlManager.getImpressionTrackers());
+                List<VastLinearXmlManager> linearXmlManagers =
+                        vastWrapperXmlManager.getLinearXmlManagers();
+                for (VastLinearXmlManager linearXmlManager : linearXmlManagers) {
+                    populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfiguration);
+                }
+
+                // Only populate a companion ad if we don't already have one from one of the
+                // redirects
+                final VastCompanionAd companionAd = vastVideoConfiguration.getVastCompanionAd();
+                if (companionAd == null) {
+                    vastVideoConfiguration.setVastCompanionAd(
+                            getBestCompanionAd(vastWrapperXmlManager.getCompanionAdXmlManagers()));
+                } else {
+                    // Otherwise append the companion trackers if it doesn't have resources
+                    for (final VastCompanionAdXmlManager companionAdXmlManager : vastWrapperXmlManager.getCompanionAdXmlManagers()) {
+                        if (!companionAdXmlManager.hasResources()) {
+                            companionAd.addClickTrackers(companionAdXmlManager.getClickTrackers());
+                            companionAd.addCreativeViewTrackers(
+                                    companionAdXmlManager.getCompanionCreativeViewTrackers());
+                        }
+                    }
+                }
+
+                populateMoPubCustomElements(xmlManager, vastVideoConfiguration);
+
+                return vastVideoConfiguration;
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Parses and evaluates an InLine element looking for a valid media file. InLine elements are
+     * evaluated in order and the first valid media file found is used. If a media file is
+     * found, a {@link VastVideoConfiguration} is created and trackers are aggregated. If a
+     * valid companion ad is found, it is also added to the configuration.
+     *
+     * @param vastInLineXmlManager used to extract the media file, clickthrough link, trackers, and
+     *                         companion ad
+     * @param errorTrackers The error trackers from previous wrappers
+     * @return a {@link VastVideoConfiguration} or null if a valid media file was not found
+     */
+    @Nullable
+    private VastVideoConfiguration evaluateInLineXmlManager(
+            @NonNull final VastInLineXmlManager vastInLineXmlManager,
+            @NonNull final List<VastTracker> errorTrackers) {
+        Preconditions.checkNotNull(vastInLineXmlManager);
+
+        List<VastLinearXmlManager> linearXmlManagers = vastInLineXmlManager.getLinearXmlManagers();
+        for (VastLinearXmlManager linearXmlManager : linearXmlManagers) {
+            String bestMediaFileUrl = getBestMediaFileUrl(linearXmlManager.getMediaXmlManagers());
+            if (bestMediaFileUrl != null) {
+                // Create vast video configuration and populate initial trackers
+                VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+                vastVideoConfiguration.addImpressionTrackers(vastInLineXmlManager.getImpressionTrackers());
+                populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfiguration);
+
+                // Linear nodes will only have a click through url and network media file when they
+                // are under an InLine element. They will not have these assets when they are under
+                // a Wrapper element.
+                vastVideoConfiguration.setClickThroughUrl(linearXmlManager.getClickThroughUrl());
+                vastVideoConfiguration.setNetworkMediaFileUrl(bestMediaFileUrl);
+
+                vastVideoConfiguration.setVastCompanionAd(getBestCompanionAd(vastInLineXmlManager
+                        .getCompanionAdXmlManagers()));
+                errorTrackers.addAll(vastInLineXmlManager.getErrorTrackers());
+                vastVideoConfiguration.addErrorTrackers(errorTrackers);
+                return vastVideoConfiguration;
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Retrieves the Wrapper's redirect uri and follows it to return the next VAST xml String.
+     *
+     * @param vastWrapperXmlManager used to get the redirect uri
+     * @param androidHttpClient     the http client
+     * @param wrapperErrorTrackers  Error trackers to hit if something goes wrong
+     * @return the next VAST xml String or {@code null} if it could not be resolved
+     */
+    @Nullable
+    private String evaluateWrapperRedirect(@NonNull VastWrapperXmlManager vastWrapperXmlManager,
+            @NonNull AndroidHttpClient androidHttpClient,
+            @NonNull List<VastTracker> wrapperErrorTrackers) {
+        String vastAdTagUri = vastWrapperXmlManager.getVastAdTagURI();
+        if (vastAdTagUri == null) {
+            return null;
+        }
+
+        String vastRedirectXml = null;
+        try {
+            vastRedirectXml = followVastRedirect(androidHttpClient, vastAdTagUri);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to follow VAST redirect", e);
+            if (!wrapperErrorTrackers.isEmpty()) {
+                makeVastTrackingHttpRequest(wrapperErrorTrackers, VastErrorCode.WRAPPER_TIMEOUT,
+                                null, null, mContext);
+            }
+        }
+
+        return vastRedirectXml;
+    }
+
+    /**
+     * This method aggregates all trackers found in the linearXmlManager and adds them to the
+     * {@link VastVideoConfiguration}. This method also populates the skip offset and icon if they
+     * have not already been populated in one of the wrapper redirects.
+     *
+     * @param linearXmlManager used to retrieve trackers, and assets
+     * @param vastVideoConfiguration modified in this method to store trackers and assets
+     */
+    private void populateLinearTrackersAndIcon(@NonNull final VastLinearXmlManager linearXmlManager,
+            @NonNull final VastVideoConfiguration vastVideoConfiguration) {
+        Preconditions.checkNotNull(linearXmlManager, "linearXmlManager cannot be null");
+        Preconditions.checkNotNull(vastVideoConfiguration, "vastVideoConfiguration cannot be null");
+
+        vastVideoConfiguration.addAbsoluteTrackers(linearXmlManager.getAbsoluteProgressTrackers());
+        vastVideoConfiguration.addFractionalTrackers(
+                linearXmlManager.getFractionalProgressTrackers());
+        vastVideoConfiguration.addPauseTrackers(linearXmlManager.getPauseTrackers());
+        vastVideoConfiguration.addResumeTrackers(linearXmlManager.getResumeTrackers());
+        vastVideoConfiguration.addCompleteTrackers(linearXmlManager.getVideoCompleteTrackers());
+        vastVideoConfiguration.addCloseTrackers(linearXmlManager.getVideoCloseTrackers());
+        vastVideoConfiguration.addSkipTrackers(linearXmlManager.getVideoSkipTrackers());
+        vastVideoConfiguration.addClickTrackers(linearXmlManager.getClickTrackers());
+
+        // Only set the skip offset if we haven't set it already in one of the redirects
+        if (vastVideoConfiguration.getSkipOffset() == null) {
+            vastVideoConfiguration.setSkipOffset(linearXmlManager.getSkipOffset());
+        }
+
+        // Only set the icon if we haven't set it already in one of the redirects
+        if (vastVideoConfiguration.getVastIcon() == null) {
+            vastVideoConfiguration.setVastIcon(getBestIcon(linearXmlManager.getIconXmlManagers()));
+        }
+    }
+
+    /**
+     * Parses all custom MoPub specific custom extensions and impression trackers
+     * and populates them in the {@link VastVideoConfiguration}. These extensions are not part
+     * of the Vast 3.0 spec and are appended to the root of the xml document.
+     *
+     * @param xmlManager used to retrieve the custom extensions and impression trackers
+     * @param vastVideoConfiguration modified in this method to store custom extensions and
+     *                               impression trackers
+     */
+    private void populateMoPubCustomElements(@NonNull final VastXmlManager xmlManager,
+            @NonNull final VastVideoConfiguration vastVideoConfiguration) {
+        Preconditions.checkNotNull(xmlManager, "xmlManager cannot be null");
+        Preconditions.checkNotNull(vastVideoConfiguration, "vastVideoConfiguration cannot be null");
+
+        vastVideoConfiguration.addImpressionTrackers(xmlManager.getMoPubImpressionTrackers());
+
+        if (vastVideoConfiguration.getCustomCtaText() == null) {
+            vastVideoConfiguration.setCustomCtaText(xmlManager.getCustomCtaText());
+        }
+        if (vastVideoConfiguration.getCustomSkipText() == null) {
+            vastVideoConfiguration.setCustomSkipText(xmlManager.getCustomSkipText());
+        }
+        if (vastVideoConfiguration.getCustomCloseIconUrl() == null) {
+            vastVideoConfiguration.setCustomCloseIconUrl(xmlManager.getCustomCloseIconUrl());
+        }
+        if (!vastVideoConfiguration.isCustomForceOrientationSet()) {
+            vastVideoConfiguration.setCustomForceOrientation(xmlManager.getCustomForceOrientation());
+        }
+    }
+
+    /**
+     * Fires the available error tracker if the sole element in this vast document is an Error
+     * element. In the VAST 3.0 spec in section 2.4.2.4, the No Ad Response can be represented by a
+     * VAST document with only the Error element and no Ad elements. Returns whether or not the
+     * error tracker was fired.
+     *
+     * @param vastAdXmlManagers The List of AdXmlManagers to determine if there are any ads
+     *                          available
+     * @param xmlManager        The current VastXmlManager that's used to get the new error tracker
+     * @param context           Used to send an http request
+     * @return {@code true} if the error tracker was fired, {@code false} if the error tracker was
+     * not fired.
+     */
+    private boolean fireErrorTrackerIfNoAds(
+            @NonNull final List<VastAdXmlManager> vastAdXmlManagers,
+            @NonNull final VastXmlManager xmlManager, @NonNull Context context) {
+        // When there is no <Ad> tag and when there is an error tracker
+        if (vastAdXmlManagers.isEmpty() && xmlManager.getErrorTracker() != null ) {
+            // Only use NO_ADS_VAST_RESPONSE if we've followed one or more wrappers
+            makeVastTrackingHttpRequest(
+                    Collections.singletonList(xmlManager.getErrorTracker()),
+                    mTimesFollowedVastRedirect > 0
+                            ? VastErrorCode.NO_ADS_VAST_RESPONSE
+                            : VastErrorCode.UNDEFINED_ERROR,
+                    null, null, context);
+            return true;
+        }
+        return false;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    String getBestMediaFileUrl(@NonNull final List<VastMediaXmlManager> managers) {
+        Preconditions.checkNotNull(managers, "managers cannot be null");
+        final List<VastMediaXmlManager> mediaXmlManagers = new ArrayList<VastMediaXmlManager>(managers);
+        double bestMediaFitness = Double.POSITIVE_INFINITY;
+        String bestMediaFileUrl = null;
+
+        final Iterator<VastMediaXmlManager> xmlManagerIterator = mediaXmlManagers.iterator();
+        while (xmlManagerIterator.hasNext()) {
+            final VastMediaXmlManager mediaXmlManager = xmlManagerIterator.next();
+
+            final String mediaType = mediaXmlManager.getType();
+            final String mediaUrl = mediaXmlManager.getMediaUrl();
+            if (!VIDEO_MIME_TYPES.contains(mediaType) || mediaUrl == null) {
+                xmlManagerIterator.remove();
+                continue;
+            }
+
+            final Integer mediaWidth = mediaXmlManager.getWidth();
+            final Integer mediaHeight = mediaXmlManager.getHeight();
+            if (mediaWidth == null || mediaWidth <= 0 || mediaHeight == null || mediaHeight <= 0) {
+                continue;
+            }
+
+            final double mediaFitness = calculateFitness(mediaWidth, mediaHeight);
+            if (mediaFitness < bestMediaFitness) {
+                bestMediaFitness = mediaFitness;
+                bestMediaFileUrl = mediaUrl;
+            }
+        }
+
+        return bestMediaFileUrl;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    VastCompanionAd getBestCompanionAd(
+            @NonNull final List<VastCompanionAdXmlManager> managers) {
+        Preconditions.checkNotNull(managers, "managers cannot be null");
+        final List<VastCompanionAdXmlManager> companionXmlManagers =
+                new ArrayList<VastCompanionAdXmlManager>(managers);
+        double bestCompanionFitness = Double.POSITIVE_INFINITY;
+        VastCompanionAdXmlManager bestCompanionXmlManager = null;
+        VastResource bestVastResource = null;
+        Point bestVastScaledDimensions = null;
+
+        // Look for the best companion ad in order of prioritized resource types
+        for (VastResource.Type type : VastResource.Type.values()) {
+            final Iterator<VastCompanionAdXmlManager> xmlManagerIterator =
+                    companionXmlManagers.iterator();
+            while (xmlManagerIterator.hasNext()) {
+                final VastCompanionAdXmlManager companionXmlManager = xmlManagerIterator.next();
+
+                final Integer width = companionXmlManager.getWidth();
+                final Integer height = companionXmlManager.getHeight();
+                if (width == null || width <= 0 ||
+                        height == null || height <= 0) {
+                    continue;
+                }
+
+                Point vastScaledDimensions = getScaledDimensions(width, height);
+                VastResource vastResource = VastResource.fromVastResourceXmlManager(
+                        companionXmlManager.getResourceXmlManager(), type,
+                        vastScaledDimensions.x, vastScaledDimensions.y);
+                if (vastResource == null) {
+                    continue;
+                }
+
+                final double companionFitness = calculateFitness(width, height);
+                if (companionFitness < bestCompanionFitness) {
+                    bestCompanionFitness = companionFitness;
+                    bestCompanionXmlManager = companionXmlManager;
+                    bestVastResource = vastResource;
+                    bestVastScaledDimensions = vastScaledDimensions;
+                }
+            }
+            if (bestCompanionXmlManager != null) {
+                break;
+            }
+        }
+
+        if (bestCompanionXmlManager != null) {
+            return new VastCompanionAd(
+                    bestVastScaledDimensions.x,
+                    bestVastScaledDimensions.y,
+                    bestVastResource,
+                    bestCompanionXmlManager.getClickThroughUrl(),
+                    bestCompanionXmlManager.getClickTrackers(),
+                    bestCompanionXmlManager.getCompanionCreativeViewTrackers()
+            );
+        }
+        return null;
+    }
+
+    /**
+     * Given a width and height for a resource, if the dimensions are larger than the screen size
+     * then scale them down to fit in the screen while maintaining the aspect ratio. Scaling
+     * takes into account the default Android WebView padding.
+     *
+     * @param widthDp width of the resource in dips
+     * @param heightDp height of the resource in dips
+     * @return the new scaled dimensions that honor the aspect ratio
+     */
+    @VisibleForTesting
+    @NonNull
+    Point getScaledDimensions(int widthDp, int heightDp) {
+        Point defaultPoint = new Point(widthDp, heightDp);
+        final Display display = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        int x = display.getWidth();
+        int y = display.getHeight();
+
+        // For landscape, width is always greater than height
+        int screenWidth = Math.max(x, y);
+        int screenHeight = Math.min(x, y);
+
+        int widthPx = Dips.dipsToIntPixels(widthDp, mContext);
+        int heightPx = Dips.dipsToIntPixels(heightDp, mContext);
+
+        // Return if the width and height already fit in the screen
+        if (widthPx <= screenWidth && heightPx <= screenHeight) {
+            return defaultPoint;
+        }
+
+        float widthRatio = (float) widthPx / screenWidth;
+        float heightRatio = (float) heightPx / screenHeight;
+
+        Point point = new Point();
+        if (widthRatio >= heightRatio) {
+            point.x = screenWidth - VastVideoViewController.WEBVIEW_PADDING;
+            point.y = (int) (heightPx / widthRatio) - VastVideoViewController.WEBVIEW_PADDING;
+        } else {
+            point.x = (int) (widthPx / heightRatio) - VastVideoViewController.WEBVIEW_PADDING;
+            point.y = screenHeight - VastVideoViewController.WEBVIEW_PADDING;
+        }
+
+        if (point.x < 0 || point.y < 0) {
+            return defaultPoint;
+        }
+
+        point.x = Dips.pixelsToIntDips(point.x, mContext);
+        point.y = Dips.pixelsToIntDips(point.y, mContext);
+
+        return point;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    VastIcon getBestIcon(@NonNull final List<VastIconXmlManager> managers) {
+        Preconditions.checkNotNull(managers, "managers cannot be null");
+        final List<VastIconXmlManager> iconXmlManagers = new ArrayList<VastIconXmlManager>(managers);
+
+        // Look for the best icon in order of prioritized resource types
+        for (VastResource.Type type : VastResource.Type.values()) {
+            final Iterator<VastIconXmlManager> xmlManagerIterator = iconXmlManagers.iterator();
+            while (xmlManagerIterator.hasNext()) {
+                final VastIconXmlManager iconXmlManager = xmlManagerIterator.next();
+
+                final Integer width = iconXmlManager.getWidth();
+                final Integer height = iconXmlManager.getHeight();
+
+                // Icons can be a max of 300 x 300 dp
+                if (width == null || width <= 0 || width > 300
+                        || height == null || height <= 0 || height > 300) {
+                    continue;
+                }
+
+                VastResource vastResource = VastResource.fromVastResourceXmlManager(
+                        iconXmlManager.getResourceXmlManager(), type, width, height);
+
+                if (vastResource == null) {
+                    continue;
+                }
+
+                return new VastIcon(
+                        iconXmlManager.getWidth(),
+                        iconXmlManager.getHeight(),
+                        iconXmlManager.getOffsetMS(),
+                        iconXmlManager.getDurationMS(),
+                        vastResource,
+                        iconXmlManager.getClickTrackingUris(),
+                        iconXmlManager.getClickThroughUri(),
+                        iconXmlManager.getViewTrackingUris());
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Calculates the fitness of the media file or companion by comparing its aspect ratio and
+     * area to those of the device. The closer to 0 the score, the better. The fitness function
+     * weighs aspect ratios and areas differently.
+     *
+     * @param width the width of the media file or companion ad
+     * @param height the height of th media file or companion ad
+     * @return the fitness score. The closer to 0, the better.
+     */
+    private double calculateFitness(final int width, final int height) {
+        final double mediaAspectRatio = (double) width / height;
+        final int mediaArea = width * height;
+        final double aspectRatioRatio = mediaAspectRatio / mScreenAspectRatio;
+        final double areaRatio = (double) mediaArea / mScreenArea;
+        return ASPECT_RATIO_WEIGHT * Math.abs(Math.log(aspectRatioRatio))
+                + AREA_WEIGHT * Math.abs(Math.log(areaRatio));
+    }
+
+    /**
+     * Since MoPub does not support ad pods, do not accept any positive integers greater than 1.
+     * MoPub will use the first ad in an ad pod (sequence = 1), but it will ignore all other ads in
+     * the pod. If no sequence number, MoPub treats it like a stand-alone ad. If the sequence number
+     * is nonsensical (e.g. negative, fails to parse as an integer), MoPub treats it like a
+     * stand-alone ad.
+     *
+     * @param sequence The sequence number
+     * @return True if this is a sequence number that MoPub would show an ad for, false if not.
+     */
+    static boolean isValidSequenceNumber(@Nullable final String sequence) {
+        if (TextUtils.isEmpty(sequence)) {
+            return true;
+        }
+        try {
+            final int sequenceInt = Integer.parseInt(sequence);
+            return sequenceInt < 2;
+        } catch (NumberFormatException e) {
+            // Since the sequence number is not a valid integer, go ahead and pretend there's no
+            // sequence number and show this ad
+            return true;
+        }
+    }
+
+    @Nullable
+    private String followVastRedirect(@NonNull final AndroidHttpClient httpClient,
+            @NonNull final String redirectUrl) throws Exception {
+        Preconditions.checkNotNull(httpClient);
+        Preconditions.checkNotNull(redirectUrl);
+
+        if (mTimesFollowedVastRedirect < MAX_TIMES_TO_FOLLOW_VAST_REDIRECT) {
+            mTimesFollowedVastRedirect++;
+
+            final HttpGet httpget = HttpClient.initializeHttpGet(redirectUrl);
+            final HttpResponse response = httpClient.execute(httpget);
+            final HttpEntity entity = response.getEntity();
+            return (entity != null) ? Strings.fromStream(entity.getContent()) : null;
+        }
+        return null;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setTimesFollowedVastRedirect(final int timesFollowedVastRedirect) {
+        mTimesFollowedVastRedirect = timesFollowedVastRedirect;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
index 17e4e140..d7647f38 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
@@ -1,22 +1,22 @@
-package com.mopub.mobileads.factories;
-
-import android.content.Context;
-
-import com.mopub.mobileads.util.vast.VastManager;
-
-public class VastManagerFactory {
-    protected static VastManagerFactory instance = new VastManagerFactory();
-
-    public static VastManager create(final Context context) {
-        return instance.internalCreate(context);
-    }
-
-    public VastManager internalCreate(final Context context) {
-        return new VastManager(context);
-    }
-
-    @Deprecated // for testing
-    public static void setInstance(VastManagerFactory factory) {
-        instance = factory;
-    }
-}
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+
+import com.mopub.mobileads.VastManager;
+
+public class VastManagerFactory {
+    protected static VastManagerFactory instance = new VastManagerFactory();
+
+    public static VastManager create(final Context context) {
+        return instance.internalCreate(context);
+    }
+
+    public VastManager internalCreate(final Context context) {
+        return new VastManager(context);
+    }
+
+    @Deprecated // for testing
+    public static void setInstance(VastManagerFactory factory) {
+        instance = factory;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
new file mode 100644
index 00000000..d12bf8e1
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
@@ -0,0 +1,34 @@
+package com.mopub.mobileads.resource;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+
+public abstract class BaseWidgetDrawable extends Drawable {
+    protected void drawTextWithinBounds(@NonNull final Canvas canvas,
+            @NonNull final Paint textPaint, @NonNull final Rect textRect,
+            @NonNull final String text) {
+        textPaint.getTextBounds(text, 0, text.length(), textRect);
+        final float textHeight = textPaint.descent() - textPaint.ascent();
+        final float textOffset = (textHeight / 2) - textPaint.descent();
+        canvas.drawText(text, getBounds().centerX(), getBounds().centerY() + textOffset, textPaint);
+    }
+
+    @Override
+    public void setAlpha(int i) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter colorFilter) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index e9f7c8d3..6f3ec074 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,47 +1,26 @@
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Paint;
-import android.graphics.Point;
 
-public class CloseButtonDrawable extends CircleDrawable {
-    private Point centerPoint;
-    private Point bottomLeftPoint;
-    private Point topLeftPoint;
-    private Point topRightPoint;
-    private Point bottomRightPoint;
+public class CloseButtonDrawable extends BaseWidgetDrawable {
     private final Paint closeButtonPaint;
-    private int mDisplacement;
 
     public CloseButtonDrawable() {
         super();
 
-        closeButtonPaint = new Paint(getPaint());
-        closeButtonPaint.setStrokeWidth(4.5f);
-        closeButtonPaint.setStrokeCap(Paint.Cap.ROUND);
+        closeButtonPaint = new Paint();
+        closeButtonPaint.setColor(DrawableConstants.CloseButton.STROKE_COLOR);
+        closeButtonPaint.setStrokeWidth(DrawableConstants.CloseButton.STROKE_WIDTH);
+        closeButtonPaint.setStrokeCap(DrawableConstants.CloseButton.STROKE_CAP);
     }
 
     @Override
     public void draw(final Canvas canvas) {
-        super.draw(canvas);
-
-        mDisplacement = (int) (0.5f * getRadius() / (float) Math.sqrt(2f));
-
-        centerPoint = new Point(getCenterX(), getCenterY());
-
-        bottomLeftPoint = new Point(centerPoint);
-        bottomLeftPoint.offset(-mDisplacement, mDisplacement);
-
-        topLeftPoint = new Point(centerPoint);
-        topLeftPoint.offset(-mDisplacement, -mDisplacement);
-
-        topRightPoint = new Point(centerPoint);
-        topRightPoint.offset(mDisplacement, -mDisplacement);
-
-        bottomRightPoint = new Point(centerPoint);
-        bottomRightPoint.offset(mDisplacement, mDisplacement);
-
-        canvas.drawLine(bottomLeftPoint.x, bottomLeftPoint.y, topRightPoint.x, topRightPoint.y, closeButtonPaint);
-        canvas.drawLine(topLeftPoint.x, topLeftPoint.y, bottomRightPoint.x, bottomRightPoint.y, closeButtonPaint);
+        final int w = getBounds().width();
+        final int h = getBounds().height();
+        canvas.drawLine(0, h, w, 0, closeButtonPaint);
+        canvas.drawLine(0, 0, w, h, closeButtonPaint);
     }
 }
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
new file mode 100644
index 00000000..d3077bac
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
@@ -0,0 +1,83 @@
+package com.mopub.mobileads.resource;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+
+public class CtaButtonDrawable extends BaseWidgetDrawable {
+    @NonNull private final Paint mBackgroundPaint;
+    @NonNull private final Paint mOutlinePaint;
+    @NonNull private final Paint mTextPaint;
+    @NonNull private final RectF mButtonRect;
+    @NonNull private final Rect mTextRect;
+
+    private final int mButtonCornerRadius;
+    private String mCtaText;
+
+    public CtaButtonDrawable(@NonNull final Context context) {
+        super();
+
+        final int outlineStrokeWidth = Dips.dipsToIntPixels(
+                DrawableConstants.CtaButton.OUTLINE_STROKE_WIDTH_DIPS, context);
+        final float textSize = Dips.dipsToFloatPixels(
+                DrawableConstants.CtaButton.TEXT_SIZE_SP, context);
+
+        mBackgroundPaint = new Paint();
+        mBackgroundPaint.setColor(DrawableConstants.CtaButton.BACKGROUND_COLOR);
+        mBackgroundPaint.setAlpha(DrawableConstants.CtaButton.BACKGROUND_ALPHA);
+        mBackgroundPaint.setStyle(DrawableConstants.CtaButton.BACKGROUND_STYLE);
+        mBackgroundPaint.setAntiAlias(true);
+
+        mOutlinePaint = new Paint();
+        mOutlinePaint.setColor(DrawableConstants.CtaButton.OUTLINE_COLOR);
+        mOutlinePaint.setAlpha(DrawableConstants.CtaButton.OUTLINE_ALPHA);
+        mOutlinePaint.setStyle(DrawableConstants.CtaButton.OUTLINE_STYLE);
+        mOutlinePaint.setStrokeWidth(outlineStrokeWidth);
+        mOutlinePaint.setAntiAlias(true);
+
+        mTextPaint = new Paint();
+        mTextPaint.setColor(DrawableConstants.CtaButton.TEXT_COLOR);
+        mTextPaint.setTextAlign(DrawableConstants.CtaButton.TEXT_ALIGN);
+        mTextPaint.setTypeface(DrawableConstants.CtaButton.TEXT_TYPEFACE);
+        mTextPaint.setTextSize(textSize);
+        mTextPaint.setAntiAlias(true);
+
+        mTextRect = new Rect();
+        mCtaText = DrawableConstants.CtaButton.DEFAULT_CTA_TEXT;
+
+        mButtonRect = new RectF();
+        mButtonCornerRadius = Dips.dipsToIntPixels(DrawableConstants.CtaButton.CORNER_RADIUS_DIPS, context);
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        mButtonRect.set(getBounds());
+
+        // Rounded rectangle background fill
+        canvas.drawRoundRect(mButtonRect, mButtonCornerRadius, mButtonCornerRadius, mBackgroundPaint);
+
+        // Rounded rectangle outline
+        canvas.drawRoundRect(mButtonRect, mButtonCornerRadius, mButtonCornerRadius, mOutlinePaint);
+
+        // CTA text
+        drawTextWithinBounds(canvas, mTextPaint, mTextRect, mCtaText);
+    }
+
+    public void setCtaText(@NonNull final String ctaText) {
+        mCtaText = ctaText;
+        invalidateSelf();
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public String getCtaText() {
+        return mCtaText;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
new file mode 100644
index 00000000..5c2b844f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -0,0 +1,91 @@
+package com.mopub.mobileads.resource;
+
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Typeface;
+
+public class DrawableConstants {
+
+    public static class ProgressBar {
+        public static final int HEIGHT_DIPS = 4;
+        public static final int NUGGET_WIDTH_DIPS = 4;
+
+        public static final int BACKGROUND_COLOR = Color.WHITE;
+        public static final int BACKGROUND_ALPHA = 128;
+        public static final Paint.Style BACKGROUND_STYLE = Paint.Style.FILL;
+
+        public static final int PROGRESS_COLOR = Color.parseColor("#FFCC4D");
+        public static final int PROGRESS_ALPHA = 255;
+        public static final Paint.Style PROGRESS_STYLE = Paint.Style.FILL;
+    }
+
+    public static class RadialCountdown {
+        public static final int SIDE_LENGTH_DIPS = 45;
+        public static final int TOP_MARGIN_DIPS = 16;
+        public static final int RIGHT_MARGIN_DIPS = 16;
+        public static final int PADDING_DIPS = 5;
+
+        public static final int CIRCLE_STROKE_WIDTH_DIPS = 3;
+        public static final float TEXT_SIZE_SP = 18f;
+        public static final float START_ANGLE = -90f;
+
+        public static final int BACKGROUND_COLOR = Color.WHITE;
+        public static final int BACKGROUND_ALPHA = 128;
+        public static final Paint.Style BACKGROUND_STYLE = Paint.Style.STROKE;
+
+        public static final int PROGRESS_COLOR = Color.WHITE;
+        public static final int PROGRESS_ALPHA = 255;
+        public static final Paint.Style PROGRESS_STYLE = Paint.Style.STROKE;
+
+        public static final int TEXT_COLOR = Color.WHITE;
+        public static final Paint.Align TEXT_ALIGN = Paint.Align.CENTER;
+    }
+
+    public static class CtaButton {
+        public static final int WIDTH_DIPS = 200;
+        public static final int HEIGHT_DIPS = 42;
+        public static final int MARGIN_DIPS = 16;
+        public static final int CORNER_RADIUS_DIPS = 6;
+        public static final int OUTLINE_STROKE_WIDTH_DIPS = 2;
+        public static final float TEXT_SIZE_SP = 20f;
+
+        public static final int BACKGROUND_COLOR = Color.BLACK;
+        public static final int BACKGROUND_ALPHA = 51;
+        public static final Paint.Style BACKGROUND_STYLE = Paint.Style.FILL;
+
+        public static final int OUTLINE_COLOR = Color.WHITE;
+        public static final int OUTLINE_ALPHA = 51;
+        public static final Paint.Style OUTLINE_STYLE = Paint.Style.STROKE;
+
+        public static final String DEFAULT_CTA_TEXT = "Learn More";
+        public static final Typeface TEXT_TYPEFACE = Typeface.create("Helvetica", Typeface.BOLD);
+        public static final int TEXT_COLOR = Color.WHITE;
+        public static final Paint.Align TEXT_ALIGN = Paint.Align.CENTER;
+    }
+    
+    public static class CloseButton {
+        public static final int WIDGET_HEIGHT_DIPS = 46;
+        public static final int EDGE_PADDING = 16;
+        public static final int IMAGE_PADDING_DIPS = 5;
+        public static final int TEXT_RIGHT_MARGIN_DIPS = 7;
+        public static final float TEXT_SIZE_SP = 20f;
+
+        public static final int STROKE_COLOR = Color.WHITE;
+        public static final float STROKE_WIDTH = 8f;
+        public static final Paint.Cap STROKE_CAP = Paint.Cap.ROUND;
+
+        public static final String DEFAULT_CLOSE_BUTTON_TEXT = "";
+        public static final Typeface TEXT_TYPEFACE = Typeface.create("Helvetica", Typeface.NORMAL);
+        public static final int TEXT_COLOR = Color.WHITE;
+    }
+    
+    public static class GradientStrip {
+        public static final int GRADIENT_STRIP_HEIGHT_DIPS = 72;
+        public static final int START_COLOR = Color.argb(102, 0, 0, 0);
+        public static final int END_COLOR = Color.argb(0, 255, 255, 255);
+    }
+
+    public static class BlurredLastVideoFrame {
+        public static final int ALPHA = 128;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
new file mode 100644
index 00000000..88fc74dc
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
@@ -0,0 +1,113 @@
+package com.mopub.mobileads.resource;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+
+public class ProgressBarDrawable extends BaseWidgetDrawable {
+    @NonNull private final Paint mBackgroundPaint;
+    @NonNull private final Paint mProgressPaint;
+
+    private int mDuration;
+    private int mSkipOffset;
+    private int mCurrentProgress;
+    private int mLastProgress;
+    private float mSkipRatio;
+    private final int mNuggetWidth;
+
+    public ProgressBarDrawable(@NonNull final Context context) {
+        super();
+
+        mBackgroundPaint = new Paint();
+        mBackgroundPaint.setColor(DrawableConstants.ProgressBar.BACKGROUND_COLOR);
+        mBackgroundPaint.setAlpha(DrawableConstants.ProgressBar.BACKGROUND_ALPHA);
+        mBackgroundPaint.setStyle(DrawableConstants.ProgressBar.BACKGROUND_STYLE);
+        mBackgroundPaint.setAntiAlias(true);
+
+        mProgressPaint = new Paint();
+        mProgressPaint.setColor(DrawableConstants.ProgressBar.PROGRESS_COLOR);
+        mProgressPaint.setAlpha(DrawableConstants.ProgressBar.PROGRESS_ALPHA);
+        mProgressPaint.setStyle(DrawableConstants.ProgressBar.PROGRESS_STYLE);
+        mProgressPaint.setAntiAlias(true);
+
+        mNuggetWidth = Dips.dipsToIntPixels(DrawableConstants.ProgressBar.NUGGET_WIDTH_DIPS, context);
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        // Background translucent bar
+        canvas.drawRect(getBounds(), mBackgroundPaint);
+
+        // Progress bar
+        float progressRatio = (float) mCurrentProgress / mDuration;
+        canvas.drawRect(getBounds().left,
+                getBounds().top,
+                getBounds().right * progressRatio,
+                getBounds().bottom,
+                mProgressPaint);
+
+        // Draw skipoffset nugget if skipoffset is in range (0, duration)
+        if (mSkipOffset > 0 && mSkipOffset < mDuration) {
+            float nuggetPosition = getBounds().right * mSkipRatio;
+
+            canvas.drawRect(nuggetPosition,
+                    getBounds().top,
+                    nuggetPosition + mNuggetWidth,
+                    getBounds().bottom,
+                    mProgressPaint);
+        }
+    }
+
+    public void setDurationAndSkipOffset(final int duration, final int skipOffset) {
+        mDuration = duration;
+        mSkipOffset = skipOffset;
+        mSkipRatio = (float) mSkipOffset / mDuration;
+    }
+
+    public void setProgress(final int currentProgress) {
+        // There exists two Android video player bugs in VideoView.getCurrentPosition():
+        // 1) It temporarily returns 0 right after backgrounding and switching back to the app.
+        // 2) Near the end of the video, it never reaches duration and actually returns decreasing values.
+        //
+        // Therefore, we incorporate two checks to get around the bugs and potential visual glitches:
+        // 1) Check against the last known current position to ensure that it's monotonically increasing.
+        // 2) If not monotonically increasing, we only force completion and draw the entire progress
+        // bar when the current position is not 0, i.e. not right after backgrounding.
+
+        if (currentProgress >= mLastProgress) {
+            mCurrentProgress = currentProgress;
+            mLastProgress = currentProgress;
+        } else if (currentProgress != 0) {
+            MoPubLog.d(String.format("Progress not monotonically increasing: last = %d, current = %d",
+                    mLastProgress,
+                    currentProgress));
+            forceCompletion();
+        }
+
+        invalidateSelf();
+    }
+
+    @VisibleForTesting
+    public void forceCompletion() {
+        mCurrentProgress = mDuration;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public float getSkipRatio() {
+        return mSkipRatio;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public int getCurrentProgress() {
+        return mCurrentProgress;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
new file mode 100644
index 00000000..318a6834
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
@@ -0,0 +1,88 @@
+package com.mopub.mobileads.resource;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Numbers;
+
+public class RadialCountdownDrawable extends BaseWidgetDrawable {
+    @NonNull private final Paint mCirclePaint;
+    @NonNull private final Paint mArcPaint;
+    @NonNull private final Paint mTextPaint;
+    @NonNull private Rect mTextRect;
+
+    private int mInitialCountdownMilliseconds;
+    private int mSecondsRemaining;
+    private float mSweepAngle;
+
+    public RadialCountdownDrawable(@NonNull final Context context) {
+        final int circleStrokeWidth = Dips.dipsToIntPixels(
+                DrawableConstants.RadialCountdown.CIRCLE_STROKE_WIDTH_DIPS, context);
+        final float textSizePixels = Dips.dipsToFloatPixels(
+                DrawableConstants.RadialCountdown.TEXT_SIZE_SP, context);
+
+        // Unfilled progress
+        mCirclePaint = new Paint();
+        mCirclePaint.setColor(DrawableConstants.RadialCountdown.BACKGROUND_COLOR);
+        mCirclePaint.setAlpha(DrawableConstants.RadialCountdown.BACKGROUND_ALPHA);
+        mCirclePaint.setStyle(DrawableConstants.RadialCountdown.BACKGROUND_STYLE);
+        mCirclePaint.setStrokeWidth(circleStrokeWidth);
+        mCirclePaint.setAntiAlias(true);
+
+        // Filled progress
+        mArcPaint = new Paint();
+        mArcPaint.setColor(DrawableConstants.RadialCountdown.PROGRESS_COLOR);
+        mArcPaint.setAlpha(DrawableConstants.RadialCountdown.PROGRESS_ALPHA);
+        mArcPaint.setStyle(DrawableConstants.RadialCountdown.PROGRESS_STYLE);
+        mArcPaint.setStrokeWidth(circleStrokeWidth);
+        mArcPaint.setAntiAlias(true);
+
+        // Countdown number text
+        mTextPaint = new Paint();
+        mTextPaint.setColor(DrawableConstants.RadialCountdown.TEXT_COLOR);
+        mTextPaint.setTextAlign(DrawableConstants.RadialCountdown.TEXT_ALIGN);
+        mTextPaint.setTextSize(textSizePixels);
+        mTextPaint.setAntiAlias(true);
+
+        mTextRect = new Rect();
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        final int centerX = getBounds().centerX();
+        final int centerY = getBounds().centerY();
+        final int radius = Math.min(centerX, centerY);
+
+        canvas.drawCircle(centerX, centerY, radius, mCirclePaint);
+
+        final String secondsRemainingText = String.valueOf(mSecondsRemaining);
+        drawTextWithinBounds(canvas, mTextPaint, mTextRect, secondsRemainingText);
+
+        final RectF circle = new RectF(getBounds());
+        canvas.drawArc(circle, DrawableConstants.RadialCountdown.START_ANGLE, mSweepAngle, false, mArcPaint);
+    }
+
+    public void setInitialCountdown(final int initialCountdownMilliseconds) {
+        mInitialCountdownMilliseconds = initialCountdownMilliseconds;
+    }
+
+    public void updateCountdownProgress(final int currentProgressMilliseconds) {
+        int remainingCountdownMilliseconds = mInitialCountdownMilliseconds - currentProgressMilliseconds;
+        mSecondsRemaining = (int) Numbers.convertMillisecondsToSecondsRoundedUp(remainingCountdownMilliseconds);
+        mSweepAngle = 360f * currentProgressMilliseconds / mInitialCountdownMilliseconds;
+        invalidateSelf();
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public int getInitialCountdownMilliseconds() {
+        return mInitialCountdownMilliseconds;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
similarity index 79%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java
rename to mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
index 152b5828..d5c8d3b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
@@ -1,255 +1,270 @@
-package com.mopub.mobileads.util.vast;
-
-import org.w3c.dom.Document;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-class XmlUtils {
-    private XmlUtils() {}
-
-    /**
-     * Gets the first direct child of the given node with a node named {@code nodeName}.
-     *
-     * Only direct children are checked.
-     */
-    static Node getFirstMatchingChildNode(final Node node, final String nodeName) {
-        return getFirstMatchingChildNode(node, nodeName, null, null);
-    }
-
-    /**
-     * Gets the first direct child of the given node with a node named {@code nodeName} that has an
-     * attribute named {@code attributeName} with a value that matches one of {@code attributeValues}.
-     *
-     * Only direct children are checked.
-     *
-     * @param nodeName matching nodes must have this name.
-     * @param attributeName matching nodes must have an attribute with this name.
-     *                      Use null to match nodes with any attributes.
-     * @param attributeValues all matching child nodes' matching attribute will have a value that
-     *                        matches one of these values. Use null to match nodes with any attribute
-     *                        value.
-     */
-    static Node getFirstMatchingChildNode(final Node node, final String nodeName,
-            final String attributeName, final List<String> attributeValues) {
-        if (node == null || nodeName == null) {
-            return null;
-        }
-
-        final List<Node> nodes = getMatchingChildNodes(node, nodeName, attributeName, attributeValues);
-        if (nodes != null && !nodes.isEmpty()) {
-            return nodes.get(0);
-        }
-        return null;
-    }
-
-    /**
-     * Return children of the {@code node} parameter with a matching {@code nodeName} &
-     * {@code attributeName} that matches at least one of the passed-in {@code attributeValues}.
-     * If {@code attributeValues} is empty, no nodes will match. To match names only,
-     * pass null for both {@code attributeName} and {@code attributeValues}.
-     *
-     * @param node the root node to look beneath.
-     * @param nodeName all child nodes will match this element.
-     * @param attributeName all matching child nodes will have an attribute of this name.
-     * @param attributeValues all matching child nodes' matching attribute will have a value that
-     *                        matches one of these values.
-     * @return child nodes that match all parameters
-     */
-    static List<Node> getMatchingChildNodes(final Node node, final String nodeName,
-            final String attributeName, final List<String> attributeValues) {
-        if (node == null || nodeName == null) {
-            return null;
-        }
-
-        final List<Node> nodes = new ArrayList<Node>();
-        final NodeList nodeList = node.getChildNodes();
-        for (int i = 0; i < nodeList.getLength(); ++i) {
-            Node childNode = nodeList.item(i);
-            if (childNode.getNodeName().equals(nodeName)
-                    && nodeMatchesAttributeFilter(childNode, attributeName, attributeValues)) {
-                nodes.add(childNode);
-            }
-        }
-        return nodes;
-    }
-
-    /**
-     * Returns {@code true} iff the node has the attribute {@code attributeName} with a value that
-     * matches one of {@code attributeValues}.
-     */
-    static boolean nodeMatchesAttributeFilter(final Node node, final String attributeName, final List<String> attributeValues) {
-        if (attributeName == null || attributeValues == null) {
-            return true;
-        }
-
-        final NamedNodeMap attrMap = node.getAttributes();
-        if (attrMap != null) {
-            Node attrNode = attrMap.getNamedItem(attributeName);
-            if (attrNode != null && attributeValues.contains(attrNode.getNodeValue())) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    static String getNodeValue(final Node node) {
-        if (node != null
-                && node.getFirstChild() != null
-                && node.getFirstChild().getNodeValue() != null) {
-            return node.getFirstChild().getNodeValue().trim();
-        }
-        return null;
-    }
-
-    static Integer getAttributeValueAsInt(final Node node, final String attributeName) {
-        if (node == null || attributeName == null) {
-            return null;
-        }
-
-        try {
-            return Integer.parseInt(getAttributeValue(node, attributeName));
-        } catch (NumberFormatException e) {
-            return null;
-        }
-    }
-
-    static String getAttributeValue(final Node node, final String attributeName) {
-        if (node == null || attributeName == null) {
-            return null;
-        }
-
-        final NamedNodeMap attrMap = node.getAttributes();
-        final Node attrNode = attrMap.getNamedItem(attributeName);
-        if (attrNode != null) {
-            return attrNode.getNodeValue();
-        }
-        return null;
-    }
-
-    /**
-     * Get a list of data from a {@code Document]'s elements that match the {@code elementName},
-     * {@code attributeName}, and {@code attributeValue} filters. Each node that matches these is
-     * processed by the {@code nodeProcessor} and all non-null results returned by the processor are
-     * returned.
-     *
-     * @param vastDoc The {@link org.w3c.dom.Document} we wish to extract data from.
-     * @param elementName Only elements with this name are processed.
-     * @param attributeName Only elements with this attribute are processed.
-     * @param attributeValue Only elements whose attribute with attributeName matches this value are processed.
-     * @param nodeProcessor Takes matching nodes and produces output data for that node.
-     * @return a {@code List<T>} with processed node data.
-     */
-    static <T> List<T> getListFromDocument(final Document vastDoc, final String elementName,
-            final String attributeName, final String attributeValue, NodeProcessor<T> nodeProcessor) {
-        final ArrayList<T> results = new ArrayList<T>();
-
-        if (vastDoc == null) {
-            return results;
-        }
-
-        final NodeList nodes = vastDoc.getElementsByTagName(elementName);
-        if (nodes == null) {
-            return results;
-        }
-
-        List<String> attributeValues = attributeValue == null ? null : Arrays.asList(attributeValue);
-
-        for (int i = 0; i < nodes.getLength(); i++) {
-            final Node node = nodes.item(i);
-
-            if (node != null && nodeMatchesAttributeFilter(node, attributeName, attributeValues)) {
-                T processed = nodeProcessor.process(node);
-                if (processed != null) {
-                    results.add(processed);
-                }
-            }
-        }
-
-        return results;
-    }
-
-    /**
-     * Get first matching data from a {@code Document]'s elements that match the {@code elementName},
-     * {@code attributeName}, and {@code attributeValue} filters. Nodes that match are processed by
-     * the {@code nodeProcessor} until the first non-null result returned by the processor is
-     * returned.
-     *
-     * @param vastDoc The {@link org.w3c.dom.Document} we wish to extract data from.
-     * @param elementName Only elements with this name are processed.
-     * @param attributeName Only elements with this attribute are processed.
-     * @param attributeValue Only elements whose attribute with attributeName matches this value are processed.
-     * @param nodeProcessor Takes matching nodes and produces output data for that node.
-     * @return node data of type {@code <T>} from first node that matches.
-     */
-    static <T> T getFirstMatchFromDocument(final Document vastDoc, final String elementName,
-            final String attributeName, final String attributeValue, NodeProcessor<T> nodeProcessor) {
-        if (vastDoc == null) {
-            return null;
-        }
-
-        final NodeList nodes = vastDoc.getElementsByTagName(elementName);
-        if (nodes == null) {
-            return null;
-        }
-
-        List<String> attributeValues = attributeValue == null ? null : Arrays.asList(attributeValue);
-
-        for (int i = 0; i < nodes.getLength(); i++) {
-            final Node node = nodes.item(i);
-
-            if (node != null && nodeMatchesAttributeFilter(node, attributeName, attributeValues)) {
-                T processed = nodeProcessor.process(node);
-                if (processed != null) {
-                    return processed;
-                }
-            }
-        }
-
-        return null;
-    }
-
-    static String getFirstMatchingStringData(final Document vastDoc, final String elementName) {
-        return getFirstMatchingStringData(vastDoc, elementName, null, null);
-    }
-
-    static String getFirstMatchingStringData(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
-        return getFirstMatchFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<String>() {
-            @Override
-            public String process(final Node node) {
-                return getNodeValue(node);
-            }
-        });
-    }
-
-    static List<String> getStringDataAsList(final Document vastDoc, final String elementName) {
-        return getStringDataAsList(vastDoc, elementName, null, null);
-    }
-
-    static List<String> getStringDataAsList(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
-        return getListFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<String>() {
-            @Override
-            public String process(final Node node) {
-                return getNodeValue(node);
-            }
-        });
-    }
-
-    static List<Node> getNodesWithElementAndAttribute(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
-       return getListFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<Node>() {
-           @Override
-           public Node process(final Node node) {
-               return node;
-           }
-       });
-    }
-
-    public interface NodeProcessor<T> {
-        public T process(Node node);
-    }
-}
+package com.mopub.mobileads.util;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class XmlUtils {
+    private XmlUtils() {}
+
+    /**
+     * Gets the first direct child of the given node with a node named {@code nodeName}.
+     *
+     * Only direct children are checked.
+     */
+    public static Node getFirstMatchingChildNode(final Node node, final String nodeName) {
+        return getFirstMatchingChildNode(node, nodeName, null, null);
+    }
+
+    /**
+     * Gets the first direct child of the given node with a node named {@code nodeName} that has an
+     * attribute named {@code attributeName} with a value that matches one of {@code attributeValues}.
+     *
+     * Only direct children are checked.
+     *
+     * @param nodeName matching nodes must have this name.
+     * @param attributeName matching nodes must have an attribute with this name.
+     *                      Use null to match nodes with any attributes.
+     * @param attributeValues all matching child nodes' matching attribute will have a value that
+     *                        matches one of these values. Use null to match nodes with any attribute
+     *                        value.
+     */
+    public static Node getFirstMatchingChildNode(final Node node, final String nodeName,
+            final String attributeName, final List<String> attributeValues) {
+        if (node == null || nodeName == null) {
+            return null;
+        }
+
+        final List<Node> nodes = getMatchingChildNodes(node, nodeName, attributeName, attributeValues);
+        if (nodes != null && !nodes.isEmpty()) {
+            return nodes.get(0);
+        }
+        return null;
+    }
+
+    /**
+     * Return children of the {@code node} parameter with a matching {@code nodeName}.
+     *
+     * @param node the root node to look beneath.
+     * @param nodeName all child nodes will match this element.
+     * @return child nodes that match the nodeName
+     */
+    public static List<Node> getMatchingChildNodes(final Node node, final String nodeName) {
+        return getMatchingChildNodes(node, nodeName, null, null);
+    }
+
+    /**
+     * Return children of the {@code node} parameter with a matching {@code nodeName} &
+     * {@code attributeName} that matches at least one of the passed-in {@code attributeValues}.
+     * If {@code attributeValues} is empty, no nodes will match. To match names only,
+     * pass null for both {@code attributeName} and {@code attributeValues}.
+     *
+     * @param node the root node to look beneath.
+     * @param nodeName all child nodes will match this element.
+     * @param attributeName all matching child nodes will have an attribute of this name.
+     * @param attributeValues all matching child nodes' matching attribute will have a value that
+     *                        matches one of these values.
+     * @return child nodes that match all parameters
+     */
+    public static List<Node> getMatchingChildNodes(final Node node, final String nodeName,
+            final String attributeName, final List<String> attributeValues) {
+        if (node == null || nodeName == null) {
+            return null;
+        }
+
+        final List<Node> nodes = new ArrayList<Node>();
+        final NodeList nodeList = node.getChildNodes();
+        for (int i = 0; i < nodeList.getLength(); ++i) {
+            Node childNode = nodeList.item(i);
+            if (childNode.getNodeName().equals(nodeName)
+                    && nodeMatchesAttributeFilter(childNode, attributeName, attributeValues)) {
+                nodes.add(childNode);
+            }
+        }
+        return nodes;
+    }
+
+    /**
+     * Returns {@code true} iff the node has the attribute {@code attributeName} with a value that
+     * matches one of {@code attributeValues}.
+     */
+    public static boolean nodeMatchesAttributeFilter(final Node node, final String attributeName, final List<String> attributeValues) {
+        if (attributeName == null || attributeValues == null) {
+            return true;
+        }
+
+        final NamedNodeMap attrMap = node.getAttributes();
+        if (attrMap != null) {
+            Node attrNode = attrMap.getNamedItem(attributeName);
+            if (attrNode != null && attributeValues.contains(attrNode.getNodeValue())) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public static String getNodeValue(final Node node) {
+        if (node != null
+                && node.getFirstChild() != null
+                && node.getFirstChild().getNodeValue() != null) {
+            return node.getFirstChild().getNodeValue().trim();
+        }
+        return null;
+    }
+
+    public static Integer getAttributeValueAsInt(final Node node, final String attributeName) {
+        if (node == null || attributeName == null) {
+            return null;
+        }
+
+        try {
+            return Integer.parseInt(getAttributeValue(node, attributeName));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+    }
+
+    public static String getAttributeValue(final Node node, final String attributeName) {
+        if (node == null || attributeName == null) {
+            return null;
+        }
+
+        final NamedNodeMap attrMap = node.getAttributes();
+        final Node attrNode = attrMap.getNamedItem(attributeName);
+
+        // XXX: the attribute value must be retrieved using attrNode.getNodeValue(). Even though
+        // getNodeValue(attrNode) works in unit testing, it does not work in production. We were
+        // unable to figure out exactly why.
+        if (attrNode != null) {
+            return attrNode.getNodeValue();
+        }
+        return null;
+    }
+
+    /**
+     * Get a list of data from a {@code Document]'s elements that match the {@code elementName},
+     * {@code attributeName}, and {@code attributeValue} filters. Each node that matches these is
+     * processed by the {@code nodeProcessor} and all non-null results returned by the processor are
+     * returned.
+     *
+     * @param vastDoc The {@link org.w3c.dom.Document} we wish to extract data from.
+     * @param elementName Only elements with this name are processed.
+     * @param attributeName Only elements with this attribute are processed.
+     * @param attributeValue Only elements whose attribute with attributeName matches this value are processed.
+     * @param nodeProcessor Takes matching nodes and produces output data for that node.
+     * @return a {@code List<T>} with processed node data.
+     */
+    public static <T> List<T> getListFromDocument(final Document vastDoc, final String elementName,
+            final String attributeName, final String attributeValue, NodeProcessor<T> nodeProcessor) {
+        final ArrayList<T> results = new ArrayList<T>();
+
+        if (vastDoc == null) {
+            return results;
+        }
+
+        final NodeList nodes = vastDoc.getElementsByTagName(elementName);
+        if (nodes == null) {
+            return results;
+        }
+
+        List<String> attributeValues = attributeValue == null ? null : Arrays.asList(attributeValue);
+
+        for (int i = 0; i < nodes.getLength(); i++) {
+            final Node node = nodes.item(i);
+
+            if (node != null && nodeMatchesAttributeFilter(node, attributeName, attributeValues)) {
+                T processed = nodeProcessor.process(node);
+                if (processed != null) {
+                    results.add(processed);
+                }
+            }
+        }
+
+        return results;
+    }
+
+    /**
+     * Get first matching data from a {@code Document]'s elements that match the {@code elementName},
+     * {@code attributeName}, and {@code attributeValue} filters. Nodes that match are processed by
+     * the {@code nodeProcessor} until the first non-null result returned by the processor is
+     * returned.
+     *
+     * @param vastDoc The {@link org.w3c.dom.Document} we wish to extract data from.
+     * @param elementName Only elements with this name are processed.
+     * @param attributeName Only elements with this attribute are processed.
+     * @param attributeValue Only elements whose attribute with attributeName matches this value are processed.
+     * @param nodeProcessor Takes matching nodes and produces output data for that node.
+     * @return node data of type {@code <T>} from first node that matches.
+     */
+    public static <T> T getFirstMatchFromDocument(final Document vastDoc, final String elementName,
+            final String attributeName, final String attributeValue, NodeProcessor<T> nodeProcessor) {
+        if (vastDoc == null) {
+            return null;
+        }
+
+        final NodeList nodes = vastDoc.getElementsByTagName(elementName);
+        if (nodes == null) {
+            return null;
+        }
+
+        List<String> attributeValues = attributeValue == null ? null : Arrays.asList(attributeValue);
+
+        for (int i = 0; i < nodes.getLength(); i++) {
+            final Node node = nodes.item(i);
+
+            if (node != null && nodeMatchesAttributeFilter(node, attributeName, attributeValues)) {
+                T processed = nodeProcessor.process(node);
+                if (processed != null) {
+                    return processed;
+                }
+            }
+        }
+
+        return null;
+    }
+
+    public static String getFirstMatchingStringData(final Document vastDoc, final String elementName) {
+        return getFirstMatchingStringData(vastDoc, elementName, null, null);
+    }
+
+    public static String getFirstMatchingStringData(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
+        return getFirstMatchFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<String>() {
+            @Override
+            public String process(final Node node) {
+                return getNodeValue(node);
+            }
+        });
+    }
+
+    public static List<String> getStringDataAsList(final Document vastDoc, final String elementName) {
+        return getStringDataAsList(vastDoc, elementName, null, null);
+    }
+
+    public static List<String> getStringDataAsList(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
+        return getListFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<String>() {
+            @Override
+            public String process(final Node node) {
+                return getNodeValue(node);
+            }
+        });
+    }
+
+    public static List<Node> getNodesWithElementAndAttribute(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
+       return getListFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<Node>() {
+           @Override
+           public Node process(final Node node) {
+               return node;
+           }
+       });
+    }
+
+    public interface NodeProcessor<T> {
+        T process(Node node);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
index 3baa843b..30ea194f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
@@ -8,6 +8,7 @@
 import com.mopub.common.util.Strings;
 import com.mopub.mobileads.VastAbsoluteProgressTracker;
 import com.mopub.mobileads.VastFractionalProgressTracker;
+import com.mopub.mobileads.util.XmlUtils;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
index 95f03a9e..1aa843f6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -1,613 +1,622 @@
-package com.mopub.mraid;
-
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Color;
-import android.graphics.Rect;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnTouchListener;
-import android.webkit.ConsoleMessage;
-import android.webkit.JsResult;
-import android.webkit.WebChromeClient;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.CloseableLayout.ClosePosition;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.BaseWebView;
-import com.mopub.mobileads.ViewGestureDetector;
-import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
-import com.mopub.mobileads.resource.MraidJavascript;
-import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
-import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
-
-import org.apache.http.NameValuePair;
-import org.apache.http.client.utils.URLEncodedUtils;
-import org.json.JSONObject;
-
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.HashMap;
-import java.util.Map;
-
-public class MraidBridge {
-    private final AdReport mAdReport;
-
-    public interface MraidBridgeListener {
-        void onPageLoaded();
-
-        void onPageFailedToLoad();
-
-        void onVisibilityChanged(boolean isVisible);
-
-        boolean onJsAlert(@NonNull String message, @NonNull JsResult result);
-
-        boolean onConsoleMessage(@NonNull ConsoleMessage consoleMessage);
-
-        void onResize(int width, int height, int offsetX,
-                int offsetY, @NonNull ClosePosition closePosition, boolean allowOffscreen)
-                throws MraidCommandException;
-
-        void onExpand(URI uri, boolean shouldUseCustomClose) throws MraidCommandException;
-
-        void onClose();
-
-        void onUseCustomClose(boolean shouldUseCustomClose);
-
-        void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
-                forceOrientation) throws MraidCommandException;
-
-        void onOpen(URI uri);
-
-        void onPlayVideo(URI uri);
-    }
-
-    private final String FILTERED_JAVASCRIPT_SOURCE = MraidJavascript.JAVASCRIPT_SOURCE
-            .replaceAll("(?m)^\\s+", "")
-            .replaceAll("(?m)^//.*(?=\\n)", "");
-
-    @NonNull private final PlacementType mPlacementType;
-
-    @NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;
-
-    @Nullable private MraidBridgeListener mMraidBridgeListener;
-
-    @Nullable private MraidWebView mMraidWebView;
-
-    private boolean mIsClicked;
-
-    private boolean mHasLoaded;
-
-    MraidBridge(@Nullable AdReport adReport, @NonNull PlacementType placementType) {
-        this(adReport, placementType, new MraidNativeCommandHandler());
-    }
-
-    @VisibleForTesting
-    MraidBridge(@Nullable AdReport adReport, @NonNull PlacementType placementType,
-            @NonNull MraidNativeCommandHandler mraidNativeCommandHandler) {
-        mAdReport = adReport;
-        mPlacementType = placementType;
-        mMraidNativeCommandHandler = mraidNativeCommandHandler;
-    }
-
-    void setMraidBridgeListener(@Nullable MraidBridgeListener listener) {
-        mMraidBridgeListener = listener;
-    }
-
-    void attachView(@NonNull MraidWebView mraidWebView) {
-        mMraidWebView = mraidWebView;
-        mMraidWebView.getSettings().setJavaScriptEnabled(true);
-
-        mMraidWebView.loadUrl("javascript:" + FILTERED_JAVASCRIPT_SOURCE);
-        mMraidWebView.setScrollContainer(false);
-        mMraidWebView.setVerticalScrollBarEnabled(false);
-        mMraidWebView.setHorizontalScrollBarEnabled(false);
-        mMraidWebView.setBackgroundColor(Color.BLACK);
-
-        mMraidWebView.setWebViewClient(mMraidWebViewClient);
-
-        mMraidWebView.setWebChromeClient(new WebChromeClient() {
-            @Override
-            public boolean onJsAlert(final WebView view, final String url, final String message,
-                    final JsResult result) {
-                if (mMraidBridgeListener != null) {
-                    return mMraidBridgeListener.onJsAlert(message, result);
-                }
-                return super.onJsAlert(view, url, message, result);
-            }
-
-            @Override
-            public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {
-                if (mMraidBridgeListener != null) {
-                    return mMraidBridgeListener.onConsoleMessage(consoleMessage);
-                }
-                return super.onConsoleMessage(consoleMessage);
-            }
-
-            @Override
-            public void onShowCustomView(final View view, final CustomViewCallback callback) {
-                super.onShowCustomView(view, callback);
-            }
-        });
-
-        final ViewGestureDetector gestureDetector = new ViewGestureDetector(
-                mMraidWebView.getContext(), mMraidWebView, mAdReport);
-        gestureDetector.setUserClickListener(new UserClickListener() {
-            @Override
-            public void onUserClick() {
-                mIsClicked = true;
-            }
-
-            @Override
-            public void onResetUserClick() {
-                mIsClicked = false;
-            }
-
-            @Override
-            public boolean wasClicked() {
-                return mIsClicked;
-            }
-        });
-
-        mMraidWebView.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(final View v, final MotionEvent event) {
-                gestureDetector.sendTouchEvent(event);
-
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_UP:
-                        if (!v.hasFocus()) {
-                            v.requestFocus();
-                        }
-                        break;
-                }
-                return false;
-            }
-        });
-
-        mMraidWebView.setVisibilityChangedListener(new OnVisibilityChangedListener() {
-            @Override
-            public void onVisibilityChanged(final boolean isVisible) {
-                if (mMraidBridgeListener != null) {
-                    mMraidBridgeListener.onVisibilityChanged(isVisible);
-                }
-            }
-        });
-    }
-
-    void detach() {
-        mMraidWebView = null;
-    }
-
-    public void setContentHtml(@NonNull String htmlData) {
-        if (mMraidWebView == null) {
-            MoPubLog.d("MRAID bridge called setContentHtml before WebView was attached");
-            return;
-        }
-
-        mHasLoaded = false;
-        mMraidWebView.loadDataWithBaseURL(null, htmlData, "text/html", "UTF-8", null);
-    }
-
-    public void setContentUrl(String url) {
-        if (mMraidWebView == null) {
-            MoPubLog.d("MRAID bridge called setContentHtml while WebView was not attached");
-            return;
-        }
-
-        mHasLoaded = false;
-        mMraidWebView.loadUrl(url);
-    }
-
-    void injectJavaScript(@NonNull String javascript) {
-        if (mMraidWebView == null) {
-            MoPubLog.d("Attempted to inject Javascript into MRAID WebView while was not "
-                    + "attached:\n\t" + javascript);
-            return;
-        }
-        MoPubLog.v("Injecting Javascript into MRAID WebView:\n\t" + javascript);
-        mMraidWebView.loadUrl("javascript:" + javascript);
-    }
-
-    private void fireErrorEvent(@NonNull MraidJavascriptCommand command, @NonNull String message) {
-        injectJavaScript("window.mraidbridge.notifyErrorEvent("
-                + JSONObject.quote(command.toJavascriptString()) + ", "
-                + JSONObject.quote(message) + ")");
-    }
-
-    private void fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand command) {
-        injectJavaScript("window.mraidbridge.nativeCallComplete("
-                + JSONObject.quote(command.toJavascriptString()) + ")");
-    }
-
-    public static class MraidWebView extends BaseWebView {
-        public interface OnVisibilityChangedListener {
-            void onVisibilityChanged(boolean isVisible);
-        }
-
-        @Nullable private OnVisibilityChangedListener mOnVisibilityChangedListener;
-
-        private boolean mIsVisible;
-
-        public MraidWebView(Context context) {
-            super(context);
-            mIsVisible = getVisibility() == View.VISIBLE;
-        }
-
-        void setVisibilityChangedListener(@Nullable OnVisibilityChangedListener listener) {
-            mOnVisibilityChangedListener = listener;
-        }
-
-        @Override
-        protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
-            super.onVisibilityChanged(changedView, visibility);
-            boolean newIsVisible = (visibility == View.VISIBLE);
-            if (newIsVisible != mIsVisible) {
-                mIsVisible = newIsVisible;
-                if (mOnVisibilityChangedListener != null) {
-                    mOnVisibilityChangedListener.onVisibilityChanged(mIsVisible);
-                }
-            }
-        }
-
-        public boolean isVisible() {
-            return mIsVisible;
-        }
-    }
-
-    private final WebViewClient mMraidWebViewClient = new WebViewClient() {
-        @Override
-        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
-            MoPubLog.d("Error: " + description);
-            super.onReceivedError(view, errorCode, description, failingUrl);
-        }
-
-        @Override
-        public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {
-            return handleShouldOverrideUrl(url);
-        }
-
-        @Override
-        public void onPageFinished(@NonNull WebView view, @NonNull String url) {
-            handlePageFinished();
-        }
-    };
-
-    @VisibleForTesting
-    boolean handleShouldOverrideUrl(@NonNull final String url) {
-        URI uri;
-        try {
-            uri = new URI(url);
-        } catch (URISyntaxException e) {
-            MoPubLog.w("Invalid MRAID URL: " + url);
-            fireErrorEvent(MraidJavascriptCommand.UNSPECIFIED, "Mraid command sent an invalid URL");
-            return true;
-        }
-
-        // Note that scheme will be null when we are passed a relative Uri
-        String scheme = uri.getScheme();
-        String host = uri.getHost();
-
-        if ("mopub".equals(scheme)) {
-            if ("failLoad".equals(host)) {
-                if (mPlacementType == PlacementType.INLINE && mMraidBridgeListener != null) {
-                    mMraidBridgeListener.onPageFailedToLoad();
-                }
-            }
-            return true;
-        }
-
-        if ("mraid".equals(scheme)) {
-            Map<String, String> params = new HashMap<String, String>();
-            for (NameValuePair pair : URLEncodedUtils.parse(uri, "UTF-8")) {
-                params.put(pair.getName(), pair.getValue());
-            }
-            MraidJavascriptCommand command = MraidJavascriptCommand.fromJavascriptString(host);
-            try {
-                runCommand(command, params);
-            } catch (MraidCommandException exception) {
-                fireErrorEvent(command, exception.getMessage());
-            }
-            fireNativeCommandCompleteEvent(command);
-            return true;
-        }
-
-        // This block handles all other URLs, including sms://, tel://,
-        // clicking a hyperlink, or setting window.location directly in Javascript. It checks for
-        // clicked in order to avoid interfering with automatically browser redirects.
-        if (mIsClicked) {
-            Intent intent = new Intent();
-            intent.setAction(Intent.ACTION_VIEW);
-            intent.setData(Uri.parse(url));
-            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-            try {
-                if (mMraidWebView == null) {
-                    MoPubLog.d("WebView was detached. Unable to load a URL");
-                    return true;
-                }
-                mMraidWebView.getContext().startActivity(intent);
-                return true;
-            } catch (ActivityNotFoundException e) {
-                MoPubLog.d("No activity found to handle this URL " + url);
-                return false;
-            }
-        }
-
-        return false;
-    }
-
-    @VisibleForTesting
-    private void handlePageFinished() {
-        // This can happen a second time if the ad does something that changes the window location,
-        // such as a redirect, changing window.location in Javascript, or programmatically clicking
-        // a hyperlink. Note that the handleShouldOverrideUrl method skips doing its own
-        // processing if the user hasn't clicked the ad.
-        if (mHasLoaded) {
-            return;
-        }
-
-        mHasLoaded = true;
-        if (mMraidBridgeListener != null) {
-            mMraidBridgeListener.onPageLoaded();
-        }
-    }
-
-    @VisibleForTesting
-    void runCommand(@NonNull final MraidJavascriptCommand command,
-            @NonNull Map<String, String> params)
-            throws MraidCommandException {
-        if (command.requiresClick(mPlacementType) && !mIsClicked) {
-            throw new MraidCommandException("Cannot execute this command unless the user clicks");
-        }
-
-        if (mMraidBridgeListener == null) {
-            throw new MraidCommandException("Invalid state to execute this command");
-        }
-
-        if (mMraidWebView == null) {
-            throw new MraidCommandException("The current WebView is being destroyed");
-        }
-
-        switch (command) {
-            case CLOSE:
-                mMraidBridgeListener.onClose();
-                break;
-            case RESIZE:
-                // All these params are required
-                int width = checkRange(parseSize(params.get("width")), 0, 100000);
-                int height = checkRange(parseSize(params.get("height")), 0, 100000);
-                int offsetX = checkRange(parseSize(params.get("offsetX")), -100000, 100000);
-                int offsetY = checkRange(parseSize(params.get("offsetY")), -100000, 100000);
-                ClosePosition closePosition = parseClosePosition(
-                        params.get("customClosePosition"), ClosePosition.TOP_RIGHT);
-                boolean allowOffscreen = parseBoolean(params.get("allowOffscreen"), true);
-                mMraidBridgeListener.onResize(
-                        width, height, offsetX, offsetY, closePosition, allowOffscreen);
-                break;
-            case EXPAND:
-                URI uri = parseURI(params.get("url"), null);
-                boolean shouldUseCustomClose = parseBoolean(params.get("shouldUseCustomClose"),
-                        false);
-                mMraidBridgeListener.onExpand(uri, shouldUseCustomClose);
-                break;
-            case USE_CUSTOM_CLOSE:
-                shouldUseCustomClose = parseBoolean(params.get("shouldUseCustomClose"), false);
-                mMraidBridgeListener.onUseCustomClose(shouldUseCustomClose);
-                break;
-            case OPEN:
-                uri = parseURI(params.get("url"));
-                mMraidBridgeListener.onOpen(uri);
-                break;
-            case SET_ORIENTATION_PROPERTIES:
-                boolean allowOrientationChange = parseBoolean(params.get("allowOrientationChange"));
-                MraidOrientation forceOrientation = parseOrientation(params.get("forceOrientation"));
-
-                mMraidBridgeListener.onSetOrientationProperties(allowOrientationChange,
-                        forceOrientation);
-                break;
-            case PLAY_VIDEO:
-                uri = parseURI(params.get("uri"));
-                mMraidBridgeListener.onPlayVideo(uri);
-                break;
-            case STORE_PICTURE:
-                uri = parseURI(params.get("uri"));
-                mMraidNativeCommandHandler.storePicture(mMraidWebView.getContext(), uri.toString(),
-                        new MraidCommandFailureListener() {
-                            @Override
-                            public void onFailure(final MraidCommandException exception) {
-                                fireErrorEvent(command, exception.getMessage());
-                            }
-                        });
-                break;
-
-            case CREATE_CALENDAR_EVENT:
-                mMraidNativeCommandHandler.createCalendarEvent(mMraidWebView.getContext(), params);
-                break;
-            case UNSPECIFIED:
-                throw new MraidCommandException("Unspecified MRAID Javascript command");
-        }
-    }
-
-    private ClosePosition parseClosePosition(@NonNull String text,
-            @NonNull ClosePosition defaultValue)
-            throws MraidCommandException {
-        if (TextUtils.isEmpty(text)) {
-            return defaultValue;
-        }
-
-        if (text.equals("top-left")) {
-            return ClosePosition.TOP_LEFT;
-        } else if (text.equals("top-right")) {
-            return ClosePosition.TOP_RIGHT;
-        } else if (text.equals("center")) {
-            return ClosePosition.CENTER;
-        } else if (text.equals("bottom-left")) {
-            return ClosePosition.BOTTOM_LEFT;
-        } else if (text.equals("bottom-right")) {
-            return ClosePosition.BOTTOM_RIGHT;
-        } else if (text.equals("top-center")) {
-            return ClosePosition.TOP_CENTER;
-        } else if (text.equals("bottom-center")) {
-            return ClosePosition.BOTTOM_CENTER;
-        } else {
-            throw new MraidCommandException("Invalid close position: " + text);
-        }
-    }
-
-    private int parseSize(@NonNull String text) throws MraidCommandException {
-        int result;
-        try {
-            result = Integer.parseInt(text, 10);
-        } catch (NumberFormatException e) {
-            throw new MraidCommandException("Invalid numeric parameter: " + text);
-        }
-        return result;
-    }
-
-    private MraidOrientation parseOrientation(String text) throws MraidCommandException {
-        if ("portrait".equals(text)) {
-            return MraidOrientation.PORTRAIT;
-        } else if ("landscape".equals(text)) {
-            return MraidOrientation.LANDSCAPE;
-        } else if ("none".equals(text)) {
-            return MraidOrientation.NONE;
-        } else {
-            throw new MraidCommandException("Invalid orientation: " + text);
-        }
-    }
-
-    private int checkRange(int value, int min, int max) throws MraidCommandException {
-        if (value < min || value > max) {
-            throw new MraidCommandException("Integer parameter out of range: " + value);
-        }
-        return value;
-    }
-
-    private boolean parseBoolean(
-            @Nullable String text, boolean defaultValue) throws MraidCommandException {
-        if (text == null) {
-            return defaultValue;
-        }
-        return parseBoolean(text);
-    }
-
-    private boolean parseBoolean(final String text) throws MraidCommandException {
-        if ("true".equals(text)) {
-            return true;
-        } else if ("false".equals(text)) {
-            return false;
-        }
-        throw new MraidCommandException("Invalid boolean parameter: " + text);
-    }
-
-    @NonNull
-    private URI parseURI(@Nullable String encodedText, URI defaultValue)
-            throws MraidCommandException {
-        if (encodedText == null) {
-            return defaultValue;
-        }
-        return parseURI(encodedText);
-    }
-
-    @NonNull
-    private URI parseURI(@Nullable String encodedText) throws MraidCommandException {
-        if (encodedText == null) {
-            throw new MraidCommandException("Parameter cannot be null");
-        }
-        try {
-            return new URI(encodedText);
-        } catch (URISyntaxException e) {
-            throw new MraidCommandException("Invalid URL parameter: " + encodedText);
-        }
-    }
-
-    void notifyViewability(boolean isViewable) {
-        injectJavaScript("mraidbridge.setIsViewable("
-                + isViewable
-                + ")");
-    }
-
-    void notifyPlacementType(PlacementType placementType) {
-        injectJavaScript("mraidbridge.setPlacementType("
-                + JSONObject.quote(placementType.toJavascriptString())
-                + ")");
-    }
-
-    void notifyViewState(ViewState state) {
-        injectJavaScript("mraidbridge.setState("
-                + JSONObject.quote(state.toJavascriptString())
-                + ")");
-    }
-
-    void notifySupports(boolean sms, boolean telephone, boolean calendar,
-            boolean storePicture, boolean inlineVideo) {
-        injectJavaScript("mraidbridge.setSupports("
-                + sms + "," + telephone + "," + calendar + "," + storePicture + "," + inlineVideo
-                + ")");
-    }
-
-    @NonNull
-    private String stringifyRect(Rect rect) {
-        return rect.left + "," + rect.top + "," + rect.width() + "," + rect.height();
-    }
-
-    @NonNull
-    private String stringifySize(Rect rect) {
-        return rect.width() + "," + rect.height();
-    }
-
-    public void notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics) {
-        injectJavaScript("mraidbridge.setScreenSize("
-                + stringifySize(screenMetrics.getScreenRectDips())
-                + ");mraidbridge.setMaxSize("
-                + stringifySize(screenMetrics.getRootViewRectDips())
-                + ");mraidbridge.setCurrentPosition("
-                + stringifyRect(screenMetrics.getCurrentAdRectDips())
-                + ");mraidbridge.setDefaultPosition("
-                + stringifyRect(screenMetrics.getDefaultAdRectDips())
-                + ")");
-        injectJavaScript("mraidbridge.notifySizeChangeEvent("
-                + stringifySize(screenMetrics.getCurrentAdRect())
-                + ")");
-    }
-
-    void notifyReady() {
-        injectJavaScript("mraidbridge.notifyReadyEvent();");
-    }
-
-    boolean isClicked() {
-        return mIsClicked;
-    }
-
-    boolean isVisible() {
-        return mMraidWebView != null && mMraidWebView.isVisible();
-    }
-
-    boolean isAttached() {
-        return mMraidWebView != null;
-    }
-
-    boolean isLoaded() {
-        return mHasLoaded;
-    }
-
-    @VisibleForTesting
-    MraidWebView getMraidWebView() {
-        return mMraidWebView;
-    }
-
-    @VisibleForTesting
-    void setClicked(boolean clicked) {
-        mIsClicked = clicked;
-    }
-}
+package com.mopub.mraid;
+
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.net.Uri;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnTouchListener;
+import android.webkit.ConsoleMessage;
+import android.webkit.JsResult;
+import android.webkit.WebChromeClient;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.Constants;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.BaseWebView;
+import com.mopub.mobileads.ViewGestureDetector;
+import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
+import com.mopub.mobileads.resource.MraidJavascript;
+import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
+import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
+
+import org.apache.http.NameValuePair;
+import org.apache.http.client.utils.URLEncodedUtils;
+import org.json.JSONObject;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class MraidBridge {
+    private final AdReport mAdReport;
+
+    public interface MraidBridgeListener {
+        void onPageLoaded();
+
+        void onPageFailedToLoad();
+
+        void onVisibilityChanged(boolean isVisible);
+
+        boolean onJsAlert(@NonNull String message, @NonNull JsResult result);
+
+        boolean onConsoleMessage(@NonNull ConsoleMessage consoleMessage);
+
+        void onResize(int width, int height, int offsetX,
+                int offsetY, @NonNull ClosePosition closePosition, boolean allowOffscreen)
+                throws MraidCommandException;
+
+        void onExpand(URI uri, boolean shouldUseCustomClose) throws MraidCommandException;
+
+        void onClose();
+
+        void onUseCustomClose(boolean shouldUseCustomClose);
+
+        void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
+                forceOrientation) throws MraidCommandException;
+
+        void onOpen(URI uri);
+
+        void onPlayVideo(URI uri);
+    }
+
+    private final String FILTERED_JAVASCRIPT_SOURCE = MraidJavascript.JAVASCRIPT_SOURCE
+            .replaceAll("(?m)^\\s+", "")
+            .replaceAll("(?m)^//.*(?=\\n)", "");
+
+    @NonNull private final PlacementType mPlacementType;
+
+    @NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;
+
+    @Nullable private MraidBridgeListener mMraidBridgeListener;
+
+    @Nullable private MraidWebView mMraidWebView;
+
+    private boolean mIsClicked;
+
+    private boolean mHasLoaded;
+
+    MraidBridge(@Nullable AdReport adReport, @NonNull PlacementType placementType) {
+        this(adReport, placementType, new MraidNativeCommandHandler());
+    }
+
+    @VisibleForTesting
+    MraidBridge(@Nullable AdReport adReport, @NonNull PlacementType placementType,
+            @NonNull MraidNativeCommandHandler mraidNativeCommandHandler) {
+        mAdReport = adReport;
+        mPlacementType = placementType;
+        mMraidNativeCommandHandler = mraidNativeCommandHandler;
+    }
+
+    void setMraidBridgeListener(@Nullable MraidBridgeListener listener) {
+        mMraidBridgeListener = listener;
+    }
+
+    void attachView(@NonNull MraidWebView mraidWebView) {
+        mMraidWebView = mraidWebView;
+        mMraidWebView.getSettings().setJavaScriptEnabled(true);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (mPlacementType == PlacementType.INTERSTITIAL) {
+                mraidWebView.getSettings().setMediaPlaybackRequiresUserGesture(false);
+            }
+        }
+
+        mMraidWebView.loadUrl("javascript:" + FILTERED_JAVASCRIPT_SOURCE);
+        mMraidWebView.setScrollContainer(false);
+        mMraidWebView.setVerticalScrollBarEnabled(false);
+        mMraidWebView.setHorizontalScrollBarEnabled(false);
+        mMraidWebView.setBackgroundColor(Color.BLACK);
+
+        mMraidWebView.setWebViewClient(mMraidWebViewClient);
+
+        mMraidWebView.setWebChromeClient(new WebChromeClient() {
+            @Override
+            public boolean onJsAlert(final WebView view, final String url, final String message,
+                    final JsResult result) {
+                if (mMraidBridgeListener != null) {
+                    return mMraidBridgeListener.onJsAlert(message, result);
+                }
+                return super.onJsAlert(view, url, message, result);
+            }
+
+            @Override
+            public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {
+                if (mMraidBridgeListener != null) {
+                    return mMraidBridgeListener.onConsoleMessage(consoleMessage);
+                }
+                return super.onConsoleMessage(consoleMessage);
+            }
+
+            @Override
+            public void onShowCustomView(final View view, final CustomViewCallback callback) {
+                super.onShowCustomView(view, callback);
+            }
+        });
+
+        final ViewGestureDetector gestureDetector = new ViewGestureDetector(
+                mMraidWebView.getContext(), mMraidWebView, mAdReport);
+        gestureDetector.setUserClickListener(new UserClickListener() {
+            @Override
+            public void onUserClick() {
+                mIsClicked = true;
+            }
+
+            @Override
+            public void onResetUserClick() {
+                mIsClicked = false;
+            }
+
+            @Override
+            public boolean wasClicked() {
+                return mIsClicked;
+            }
+        });
+
+        mMraidWebView.setOnTouchListener(new OnTouchListener() {
+            @Override
+            public boolean onTouch(final View v, final MotionEvent event) {
+                gestureDetector.sendTouchEvent(event);
+
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_UP:
+                        if (!v.hasFocus()) {
+                            v.requestFocus();
+                        }
+                        break;
+                }
+                return false;
+            }
+        });
+
+        mMraidWebView.setVisibilityChangedListener(new OnVisibilityChangedListener() {
+            @Override
+            public void onVisibilityChanged(final boolean isVisible) {
+                if (mMraidBridgeListener != null) {
+                    mMraidBridgeListener.onVisibilityChanged(isVisible);
+                }
+            }
+        });
+    }
+
+    void detach() {
+        mMraidWebView = null;
+    }
+
+    public void setContentHtml(@NonNull String htmlData) {
+        if (mMraidWebView == null) {
+            MoPubLog.d("MRAID bridge called setContentHtml before WebView was attached");
+            return;
+        }
+
+        mHasLoaded = false;
+        mMraidWebView.loadDataWithBaseURL("http://" + Constants.HOST + "/",
+                htmlData, "text/html", "UTF-8", null);
+    }
+
+    public void setContentUrl(String url) {
+        if (mMraidWebView == null) {
+            MoPubLog.d("MRAID bridge called setContentHtml while WebView was not attached");
+            return;
+        }
+
+        mHasLoaded = false;
+        mMraidWebView.loadUrl(url);
+    }
+
+    void injectJavaScript(@NonNull String javascript) {
+        if (mMraidWebView == null) {
+            MoPubLog.d("Attempted to inject Javascript into MRAID WebView while was not "
+                    + "attached:\n\t" + javascript);
+            return;
+        }
+        MoPubLog.v("Injecting Javascript into MRAID WebView:\n\t" + javascript);
+        mMraidWebView.loadUrl("javascript:" + javascript);
+    }
+
+    private void fireErrorEvent(@NonNull MraidJavascriptCommand command, @NonNull String message) {
+        injectJavaScript("window.mraidbridge.notifyErrorEvent("
+                + JSONObject.quote(command.toJavascriptString()) + ", "
+                + JSONObject.quote(message) + ")");
+    }
+
+    private void fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand command) {
+        injectJavaScript("window.mraidbridge.nativeCallComplete("
+                + JSONObject.quote(command.toJavascriptString()) + ")");
+    }
+
+    public static class MraidWebView extends BaseWebView {
+        public interface OnVisibilityChangedListener {
+            void onVisibilityChanged(boolean isVisible);
+        }
+
+        @Nullable private OnVisibilityChangedListener mOnVisibilityChangedListener;
+
+        private boolean mIsVisible;
+
+        public MraidWebView(Context context) {
+            super(context);
+            mIsVisible = getVisibility() == View.VISIBLE;
+        }
+
+        void setVisibilityChangedListener(@Nullable OnVisibilityChangedListener listener) {
+            mOnVisibilityChangedListener = listener;
+        }
+
+        @Override
+        protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
+            super.onVisibilityChanged(changedView, visibility);
+            boolean newIsVisible = (visibility == View.VISIBLE);
+            if (newIsVisible != mIsVisible) {
+                mIsVisible = newIsVisible;
+                if (mOnVisibilityChangedListener != null) {
+                    mOnVisibilityChangedListener.onVisibilityChanged(mIsVisible);
+                }
+            }
+        }
+
+        public boolean isVisible() {
+            return mIsVisible;
+        }
+    }
+
+    private final WebViewClient mMraidWebViewClient = new WebViewClient() {
+        @Override
+        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
+            MoPubLog.d("Error: " + description);
+            super.onReceivedError(view, errorCode, description, failingUrl);
+        }
+
+        @Override
+        public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {
+            return handleShouldOverrideUrl(url);
+        }
+
+        @Override
+        public void onPageFinished(@NonNull WebView view, @NonNull String url) {
+            handlePageFinished();
+        }
+    };
+
+    @VisibleForTesting
+    boolean handleShouldOverrideUrl(@NonNull final String url) {
+        URI uri;
+        try {
+            uri = new URI(url);
+        } catch (URISyntaxException e) {
+            MoPubLog.w("Invalid MRAID URL: " + url);
+            fireErrorEvent(MraidJavascriptCommand.UNSPECIFIED, "Mraid command sent an invalid URL");
+            return true;
+        }
+
+        // Note that scheme will be null when we are passed a relative Uri
+        String scheme = uri.getScheme();
+        String host = uri.getHost();
+
+        if ("mopub".equals(scheme)) {
+            if ("failLoad".equals(host)) {
+                if (mPlacementType == PlacementType.INLINE && mMraidBridgeListener != null) {
+                    mMraidBridgeListener.onPageFailedToLoad();
+                }
+            }
+            return true;
+        }
+
+        if ("mraid".equals(scheme)) {
+            Map<String, String> params = new HashMap<String, String>();
+            for (NameValuePair pair : URLEncodedUtils.parse(uri, "UTF-8")) {
+                params.put(pair.getName(), pair.getValue());
+            }
+            MraidJavascriptCommand command = MraidJavascriptCommand.fromJavascriptString(host);
+            try {
+                runCommand(command, params);
+            } catch (MraidCommandException exception) {
+                fireErrorEvent(command, exception.getMessage());
+            }
+            fireNativeCommandCompleteEvent(command);
+            return true;
+        }
+
+        // This block handles all other URLs, including sms://, tel://,
+        // clicking a hyperlink, or setting window.location directly in Javascript. It checks for
+        // clicked in order to avoid interfering with automatically browser redirects.
+        if (mIsClicked) {
+            Intent intent = new Intent();
+            intent.setAction(Intent.ACTION_VIEW);
+            intent.setData(Uri.parse(url));
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+            try {
+                if (mMraidWebView == null) {
+                    MoPubLog.d("WebView was detached. Unable to load a URL");
+                    return true;
+                }
+                mMraidWebView.getContext().startActivity(intent);
+                return true;
+            } catch (ActivityNotFoundException e) {
+                MoPubLog.d("No activity found to handle this URL " + url);
+                return false;
+            }
+        }
+
+        return false;
+    }
+
+    @VisibleForTesting
+    private void handlePageFinished() {
+        // This can happen a second time if the ad does something that changes the window location,
+        // such as a redirect, changing window.location in Javascript, or programmatically clicking
+        // a hyperlink. Note that the handleShouldOverrideUrl method skips doing its own
+        // processing if the user hasn't clicked the ad.
+        if (mHasLoaded) {
+            return;
+        }
+
+        mHasLoaded = true;
+        if (mMraidBridgeListener != null) {
+            mMraidBridgeListener.onPageLoaded();
+        }
+    }
+
+    @VisibleForTesting
+    void runCommand(@NonNull final MraidJavascriptCommand command,
+            @NonNull Map<String, String> params)
+            throws MraidCommandException {
+        if (command.requiresClick(mPlacementType) && !mIsClicked) {
+            throw new MraidCommandException("Cannot execute this command unless the user clicks");
+        }
+
+        if (mMraidBridgeListener == null) {
+            throw new MraidCommandException("Invalid state to execute this command");
+        }
+
+        if (mMraidWebView == null) {
+            throw new MraidCommandException("The current WebView is being destroyed");
+        }
+
+        switch (command) {
+            case CLOSE:
+                mMraidBridgeListener.onClose();
+                break;
+            case RESIZE:
+                // All these params are required
+                int width = checkRange(parseSize(params.get("width")), 0, 100000);
+                int height = checkRange(parseSize(params.get("height")), 0, 100000);
+                int offsetX = checkRange(parseSize(params.get("offsetX")), -100000, 100000);
+                int offsetY = checkRange(parseSize(params.get("offsetY")), -100000, 100000);
+                ClosePosition closePosition = parseClosePosition(
+                        params.get("customClosePosition"), ClosePosition.TOP_RIGHT);
+                boolean allowOffscreen = parseBoolean(params.get("allowOffscreen"), true);
+                mMraidBridgeListener.onResize(
+                        width, height, offsetX, offsetY, closePosition, allowOffscreen);
+                break;
+            case EXPAND:
+                URI uri = parseURI(params.get("url"), null);
+                boolean shouldUseCustomClose = parseBoolean(params.get("shouldUseCustomClose"),
+                        false);
+                mMraidBridgeListener.onExpand(uri, shouldUseCustomClose);
+                break;
+            case USE_CUSTOM_CLOSE:
+                shouldUseCustomClose = parseBoolean(params.get("shouldUseCustomClose"), false);
+                mMraidBridgeListener.onUseCustomClose(shouldUseCustomClose);
+                break;
+            case OPEN:
+                uri = parseURI(params.get("url"));
+                mMraidBridgeListener.onOpen(uri);
+                break;
+            case SET_ORIENTATION_PROPERTIES:
+                boolean allowOrientationChange = parseBoolean(params.get("allowOrientationChange"));
+                MraidOrientation forceOrientation = parseOrientation(params.get("forceOrientation"));
+
+                mMraidBridgeListener.onSetOrientationProperties(allowOrientationChange,
+                        forceOrientation);
+                break;
+            case PLAY_VIDEO:
+                uri = parseURI(params.get("uri"));
+                mMraidBridgeListener.onPlayVideo(uri);
+                break;
+            case STORE_PICTURE:
+                uri = parseURI(params.get("uri"));
+                mMraidNativeCommandHandler.storePicture(mMraidWebView.getContext(), uri.toString(),
+                        new MraidCommandFailureListener() {
+                            @Override
+                            public void onFailure(final MraidCommandException exception) {
+                                fireErrorEvent(command, exception.getMessage());
+                            }
+                        });
+                break;
+
+            case CREATE_CALENDAR_EVENT:
+                mMraidNativeCommandHandler.createCalendarEvent(mMraidWebView.getContext(), params);
+                break;
+            case UNSPECIFIED:
+                throw new MraidCommandException("Unspecified MRAID Javascript command");
+        }
+    }
+
+    private ClosePosition parseClosePosition(@NonNull String text,
+            @NonNull ClosePosition defaultValue)
+            throws MraidCommandException {
+        if (TextUtils.isEmpty(text)) {
+            return defaultValue;
+        }
+
+        if (text.equals("top-left")) {
+            return ClosePosition.TOP_LEFT;
+        } else if (text.equals("top-right")) {
+            return ClosePosition.TOP_RIGHT;
+        } else if (text.equals("center")) {
+            return ClosePosition.CENTER;
+        } else if (text.equals("bottom-left")) {
+            return ClosePosition.BOTTOM_LEFT;
+        } else if (text.equals("bottom-right")) {
+            return ClosePosition.BOTTOM_RIGHT;
+        } else if (text.equals("top-center")) {
+            return ClosePosition.TOP_CENTER;
+        } else if (text.equals("bottom-center")) {
+            return ClosePosition.BOTTOM_CENTER;
+        } else {
+            throw new MraidCommandException("Invalid close position: " + text);
+        }
+    }
+
+    private int parseSize(@NonNull String text) throws MraidCommandException {
+        int result;
+        try {
+            result = Integer.parseInt(text, 10);
+        } catch (NumberFormatException e) {
+            throw new MraidCommandException("Invalid numeric parameter: " + text);
+        }
+        return result;
+    }
+
+    private MraidOrientation parseOrientation(String text) throws MraidCommandException {
+        if ("portrait".equals(text)) {
+            return MraidOrientation.PORTRAIT;
+        } else if ("landscape".equals(text)) {
+            return MraidOrientation.LANDSCAPE;
+        } else if ("none".equals(text)) {
+            return MraidOrientation.NONE;
+        } else {
+            throw new MraidCommandException("Invalid orientation: " + text);
+        }
+    }
+
+    private int checkRange(int value, int min, int max) throws MraidCommandException {
+        if (value < min || value > max) {
+            throw new MraidCommandException("Integer parameter out of range: " + value);
+        }
+        return value;
+    }
+
+    private boolean parseBoolean(
+            @Nullable String text, boolean defaultValue) throws MraidCommandException {
+        if (text == null) {
+            return defaultValue;
+        }
+        return parseBoolean(text);
+    }
+
+    private boolean parseBoolean(final String text) throws MraidCommandException {
+        if ("true".equals(text)) {
+            return true;
+        } else if ("false".equals(text)) {
+            return false;
+        }
+        throw new MraidCommandException("Invalid boolean parameter: " + text);
+    }
+
+    @NonNull
+    private URI parseURI(@Nullable String encodedText, URI defaultValue)
+            throws MraidCommandException {
+        if (encodedText == null) {
+            return defaultValue;
+        }
+        return parseURI(encodedText);
+    }
+
+    @NonNull
+    private URI parseURI(@Nullable String encodedText) throws MraidCommandException {
+        if (encodedText == null) {
+            throw new MraidCommandException("Parameter cannot be null");
+        }
+        try {
+            return new URI(encodedText);
+        } catch (URISyntaxException e) {
+            throw new MraidCommandException("Invalid URL parameter: " + encodedText);
+        }
+    }
+
+    void notifyViewability(boolean isViewable) {
+        injectJavaScript("mraidbridge.setIsViewable("
+                + isViewable
+                + ")");
+    }
+
+    void notifyPlacementType(PlacementType placementType) {
+        injectJavaScript("mraidbridge.setPlacementType("
+                + JSONObject.quote(placementType.toJavascriptString())
+                + ")");
+    }
+
+    void notifyViewState(ViewState state) {
+        injectJavaScript("mraidbridge.setState("
+                + JSONObject.quote(state.toJavascriptString())
+                + ")");
+    }
+
+    void notifySupports(boolean sms, boolean telephone, boolean calendar,
+            boolean storePicture, boolean inlineVideo) {
+        injectJavaScript("mraidbridge.setSupports("
+                + sms + "," + telephone + "," + calendar + "," + storePicture + "," + inlineVideo
+                + ")");
+    }
+
+    @NonNull
+    private String stringifyRect(Rect rect) {
+        return rect.left + "," + rect.top + "," + rect.width() + "," + rect.height();
+    }
+
+    @NonNull
+    private String stringifySize(Rect rect) {
+        return rect.width() + "," + rect.height();
+    }
+
+    public void notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics) {
+        injectJavaScript("mraidbridge.setScreenSize("
+                + stringifySize(screenMetrics.getScreenRectDips())
+                + ");mraidbridge.setMaxSize("
+                + stringifySize(screenMetrics.getRootViewRectDips())
+                + ");mraidbridge.setCurrentPosition("
+                + stringifyRect(screenMetrics.getCurrentAdRectDips())
+                + ");mraidbridge.setDefaultPosition("
+                + stringifyRect(screenMetrics.getDefaultAdRectDips())
+                + ")");
+        injectJavaScript("mraidbridge.notifySizeChangeEvent("
+                + stringifySize(screenMetrics.getCurrentAdRect())
+                + ")");
+    }
+
+    void notifyReady() {
+        injectJavaScript("mraidbridge.notifyReadyEvent();");
+    }
+
+    boolean isClicked() {
+        return mIsClicked;
+    }
+
+    boolean isVisible() {
+        return mMraidWebView != null && mMraidWebView.isVisible();
+    }
+
+    boolean isAttached() {
+        return mMraidWebView != null;
+    }
+
+    boolean isLoaded() {
+        return mHasLoaded;
+    }
+
+    @VisibleForTesting
+    MraidWebView getMraidWebView() {
+        return mMraidWebView;
+    }
+
+    @VisibleForTesting
+    void setClicked(boolean clicked) {
+        mIsClicked = clicked;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
index cfb4bcf9..c66ceb88 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -1042,6 +1042,7 @@ void handleOpen(@NonNull final String url) {
                         UrlAction.OPEN_NATIVE_BROWSER,
                         UrlAction.OPEN_IN_APP_BROWSER,
                         UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
                         UrlAction.FOLLOW_DEEP_LINK)
                 .build().handleUrl(mContext, url);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
index aa5a44f1..644dda72 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
@@ -1,102 +1,109 @@
-package com.mopub.mraid;
-
-import android.content.Context;
-import android.graphics.drawable.StateListDrawable;
-import android.media.MediaPlayer;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.ImageButton;
-import android.widget.RelativeLayout;
-import android.widget.VideoView;
-
-import com.mopub.common.util.Dips;
-import com.mopub.mobileads.BaseVideoViewController;
-
-import static android.view.View.GONE;
-import static android.view.View.OnClickListener;
-import static android.view.View.VISIBLE;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
-
-public class MraidVideoViewController extends BaseVideoViewController {
-    private static final float CLOSE_BUTTON_SIZE = 50f;
-    private static final float CLOSE_BUTTON_PADDING = 8f;
-
-    private final VideoView mVideoView;
-    private ImageButton mCloseButton;
-    private int mButtonPadding;
-    private int mButtonSize;
-
-    public MraidVideoViewController(final Context context, final Bundle bundle, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
-        // No broadcast identifiers are used by MraidVideoViews.
-        super(context, null, baseVideoViewControllerListener);
-
-        mVideoView = new VideoView(context);
-        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
-            @Override
-            public void onCompletion(MediaPlayer mp) {
-                mCloseButton.setVisibility(VISIBLE);
-                videoCompleted(true);
-            }
-        });
-
-        mVideoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
-            @Override
-            public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
-                mCloseButton.setVisibility(VISIBLE);
-                videoError(false);
-
-                return false;
-            }
-        });
-
-        mVideoView.setVideoPath(bundle.getString(VIDEO_URL));
-    }
-
-    @Override
-    protected void onCreate() {
-        super.onCreate();
-        mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE, getContext());
-        mButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING, getContext());
-        createInterstitialCloseButton();
-        mCloseButton.setVisibility(GONE);
-        mVideoView.start();
-    }
-
-    @Override
-    protected VideoView getVideoView() {
-        return mVideoView;
-    }
-
-    @Override
-    protected void onDestroy() {}
-
-    @Override
-    protected void onPause() {}
-
-    @Override
-    protected void onResume() {}
-
-    private void createInterstitialCloseButton() {
-        mCloseButton = new ImageButton(getContext());
-        StateListDrawable states = new StateListDrawable();
-        states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.createDrawable(
-                getContext()));
-        states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.createDrawable(
-                getContext()));
-        mCloseButton.setImageDrawable(states);
-        //noinspection deprecation
-        mCloseButton.setBackgroundDrawable(null);
-        mCloseButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                getBaseVideoViewControllerListener().onFinish();
-            }
-        });
-
-        RelativeLayout.LayoutParams buttonLayout = new RelativeLayout.LayoutParams(mButtonSize, mButtonSize);
-        buttonLayout.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
-        buttonLayout.setMargins(mButtonPadding, 0, mButtonPadding, 0);
-        getLayout().addView(mCloseButton, buttonLayout);
-    }
-}
+package com.mopub.mraid;
+
+import android.content.Context;
+import android.graphics.drawable.StateListDrawable;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.widget.ImageButton;
+import android.widget.RelativeLayout;
+import android.widget.VideoView;
+
+import com.mopub.common.util.Dips;
+import com.mopub.mobileads.BaseVideoViewController;
+
+import static android.view.View.GONE;
+import static android.view.View.OnClickListener;
+import static android.view.View.VISIBLE;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
+import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
+
+public class MraidVideoViewController extends BaseVideoViewController {
+    private static final float CLOSE_BUTTON_SIZE = 50f;
+    private static final float CLOSE_BUTTON_PADDING = 8f;
+
+    private final VideoView mVideoView;
+    private ImageButton mCloseButton;
+    private int mButtonPadding;
+    private int mButtonSize;
+
+    public MraidVideoViewController(final Context context,
+            final Bundle intentExtras,
+            final Bundle savedInstanceState,
+            final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        // No broadcast identifiers are used by MraidVideoViews.
+        super(context, null, baseVideoViewControllerListener);
+
+        mVideoView = new VideoView(context);
+        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+            @Override
+            public void onCompletion(MediaPlayer mp) {
+                mCloseButton.setVisibility(VISIBLE);
+                videoCompleted(true);
+            }
+        });
+
+        mVideoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
+            @Override
+            public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
+                mCloseButton.setVisibility(VISIBLE);
+                videoError(false);
+
+                return false;
+            }
+        });
+
+        mVideoView.setVideoPath(intentExtras.getString(VIDEO_URL));
+    }
+
+    @Override
+    protected void onCreate() {
+        super.onCreate();
+        mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE, getContext());
+        mButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING, getContext());
+        createInterstitialCloseButton();
+        mCloseButton.setVisibility(GONE);
+        mVideoView.start();
+    }
+
+    @Override
+    protected VideoView getVideoView() {
+        return mVideoView;
+    }
+
+    @Override
+    protected void onDestroy() {}
+
+    @Override
+    protected void onPause() {}
+
+    @Override
+    protected void onResume() {}
+
+    @Override
+    protected void onSaveInstanceState(@NonNull Bundle outState) {}
+
+    private void createInterstitialCloseButton() {
+        mCloseButton = new ImageButton(getContext());
+        StateListDrawable states = new StateListDrawable();
+        states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.createDrawable(
+                getContext()));
+        states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.createDrawable(
+                getContext()));
+        mCloseButton.setImageDrawable(states);
+        //noinspection deprecation
+        mCloseButton.setBackgroundDrawable(null);
+        mCloseButton.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                getBaseVideoViewControllerListener().onFinish();
+            }
+        });
+
+        RelativeLayout.LayoutParams buttonLayout = new RelativeLayout.LayoutParams(mButtonSize, mButtonSize);
+        buttonLayout.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+        buttonLayout.setMargins(mButtonPadding, 0, mButtonPadding, 0);
+        getLayout().addView(mCloseButton, buttonLayout);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
index 8c5961c1..5c545e5a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
@@ -39,6 +39,7 @@ public void onSuccess(@NonNull final String resolvedUrl) {
                         UrlAction.OPEN_APP_MARKET,
                         UrlAction.OPEN_IN_APP_BROWSER,
                         UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
                         UrlAction.FOLLOW_DEEP_LINK)
                 .withResultActions(new UrlHandler.ResultActions() {
                     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 4923f32b..8df76574 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,42 +1,48 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.factories.CustomEventNativeFactory;
-import com.mopub.network.AdResponse;
-
-import java.util.Map;
-
-final class CustomEventNativeAdapter {
-    private CustomEventNativeAdapter() {}
-
-    public static void loadNativeAd(@NonNull final Context context,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final AdResponse adResponse,
-            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
-
-        final CustomEventNative customEventNative;
-        String customEventNativeClassName = adResponse.getCustomEventClassName();
-        try {
-            customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
-        } catch (Exception e) {
-            MoPubLog.w("Failed to load Custom Event Native class: " + customEventNativeClassName);
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
-            return;
-        }
-
-        if (adResponse.hasJson()) {
-            localExtras.put(DataKeys.JSON_BODY_KEY, adResponse.getJsonBody());
-        }
-
-        customEventNative.loadNativeAd(
-                context,
-                customEventNativeListener,
-                localExtras,
-                adResponse.getServerExtras()
-        );
-    }
-}
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
+import com.mopub.network.AdResponse;
+
+import java.util.Map;
+
+final class CustomEventNativeAdapter {
+    private CustomEventNativeAdapter() {}
+
+    public static void loadNativeAd(@NonNull final Context context,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final AdResponse adResponse,
+            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
+
+        final CustomEventNative customEventNative;
+        String customEventNativeClassName = adResponse.getCustomEventClassName();
+        try {
+            customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
+        } catch (Exception e) {
+            MoPubLog.w("Failed to load Custom Event Native class: " + customEventNativeClassName);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+            return;
+        }
+        if (adResponse.hasJson()) {
+            localExtras.put(DataKeys.JSON_BODY_KEY, adResponse.getJsonBody());
+        }
+
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            customEventNative.loadNativeAd(
+                    context,
+                    customEventNativeListener,
+                    localExtras,
+                    adResponse.getServerExtras()
+            );
+        } catch (Exception e) {
+            MoPubLog.w("Loading custom event native threw an error.", e);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index d3a0599b..fcf32969 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -1,647 +1,667 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.database.DataSetObserver;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Adapter;
-import android.widget.AdapterView;
-import android.widget.BaseAdapter;
-import android.widget.ListAdapter;
-import android.widget.ListView;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.Preconditions.NoThrow;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
-
-import java.util.List;
-import java.util.WeakHashMap;
-
-import static android.widget.AdapterView.OnItemClickListener;
-import static android.widget.AdapterView.OnItemLongClickListener;
-import static android.widget.AdapterView.OnItemSelectedListener;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
-
-/**
- * {@code MoPubAdAdapter} facilitates placing ads into an Android {@link android.widget.ListView} or
- * other widgets that use a {@link android.widget.ListAdapter}.
- *
- * For your content items, this class will call your original adapter with the original position of
- * content before ads were loaded.
- *
- * This adapter uses a {@link com.mopub.nativeads.MoPubStreamAdPlacer} object internally. If you
- * wish to avoid wrapping your original adapter, you can use {@code MoPubStreamAdPlacer} directly.
- */
-public class MoPubAdAdapter extends BaseAdapter {
-    @NonNull private final WeakHashMap<View, Integer> mViewPositionMap;
-    @NonNull private final Adapter mOriginalAdapter;
-    @NonNull private final MoPubStreamAdPlacer mStreamAdPlacer;
-    @NonNull private final VisibilityTracker mVisibilityTracker;
-
-    @Nullable private MoPubNativeAdLoadedListener mAdLoadedListener;
-
-    /**
-     * Creates a new MoPubAdAdapter object.
-     *
-     * By default, the adapter will contact the server to determine ad positions. If you
-     * wish to hard-code positions in your app, see {@link MoPubAdAdapter(Context,
-     * MoPubClientPositioning)}.
-     *
-     * @param context The activity context.
-     * @param originalAdapter Your original adapter.
-     */
-    public MoPubAdAdapter(@NonNull final Context context, @NonNull final Adapter originalAdapter) {
-        this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
-    }
-
-    /**
-     * Creates a new MoPubAdAdapter object, using server positioning.
-     *
-     * @param context The activity context.
-     * @param originalAdapter Your original adapter.
-     * @param adPositioning A positioning object for specifying where ads will be placed in your
-     * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
-     */
-    public MoPubAdAdapter(@NonNull final Context context,
-            @NonNull final Adapter originalAdapter,
-            @NonNull final MoPubServerPositioning adPositioning) {
-        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
-                new VisibilityTracker(context));
-    }
-
-    /**
-     * Creates a new MoPubAdAdapter object, using client positioning.
-     *
-     * @param context The activity context.
-     * @param originalAdapter Your original adapter.
-     * @param adPositioning A positioning object for specifying where ads will be placed in your
-     * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
-     */
-    public MoPubAdAdapter(@NonNull final Context context,
-            @NonNull final Adapter originalAdapter,
-            @NonNull final MoPubClientPositioning adPositioning) {
-        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
-                new VisibilityTracker(context));
-    }
-
-    @VisibleForTesting
-    MoPubAdAdapter(@NonNull final MoPubStreamAdPlacer streamAdPlacer,
-            @NonNull final Adapter originalAdapter,
-            @NonNull final VisibilityTracker visibilityTracker) {
-        mOriginalAdapter = originalAdapter;
-        mStreamAdPlacer = streamAdPlacer;
-        mViewPositionMap = new WeakHashMap<View, Integer>();
-
-        mVisibilityTracker = visibilityTracker;
-        mVisibilityTracker.setVisibilityTrackerListener(new VisibilityTrackerListener() {
-            @Override
-            public void onVisibilityChanged(@NonNull final List<View> visibleViews,
-                    final List<View> invisibleViews) {
-                handleVisibilityChange(visibleViews);
-            }
-        });
-        mOriginalAdapter.registerDataSetObserver(new DataSetObserver() {
-            @Override
-            public void onChanged() {
-                mStreamAdPlacer.setItemCount(mOriginalAdapter.getCount());
-                notifyDataSetChanged();
-            }
-
-            @Override
-            public void onInvalidated() {
-                notifyDataSetInvalidated();
-            }
-        });
-
-        mStreamAdPlacer.setAdLoadedListener(new MoPubNativeAdLoadedListener() {
-            @Override
-            public void onAdLoaded(final int position) {
-                handleAdLoaded(position);
-            }
-
-            @Override
-            public void onAdRemoved(final int position) {
-                handleAdRemoved(position);
-            }
-
-        });
-
-        mStreamAdPlacer.setItemCount(mOriginalAdapter.getCount());
-    }
-
-    @VisibleForTesting
-    void handleAdLoaded(final int position) {
-        if (mAdLoadedListener != null) {
-            mAdLoadedListener.onAdLoaded(position);
-        }
-        notifyDataSetChanged();
-    }
-
-    @VisibleForTesting
-    void handleAdRemoved(final int position) {
-        if (mAdLoadedListener != null) {
-            mAdLoadedListener.onAdRemoved(position);
-        }
-        notifyDataSetChanged();
-    }
-
-    /**
-     * Registers a {@link MoPubNativeAdRenderer} to use when displaying ads in your stream.
-     *
-     * This renderer will automatically create and render your view when you call {@link #getView}.
-     * If you register a second renderer, it will replace the first, although this behavior is
-     * subject to change in a future SDK version.
-     *
-     * @param adRenderer The ad renderer.
-     */
-    public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
-        if (!Preconditions.NoThrow.checkNotNull(
-                adRenderer, "Tried to set a null ad renderer on the placer.")) {
-            return;
-        }
-        mStreamAdPlacer.registerAdRenderer(adRenderer);
-    }
-
-    /**
-     * Sets a listener that will be called after the SDK loads new ads from the server and places
-     * them into your stream.
-     *
-     * The listener will be active between when you call {@link #loadAds} and when you call {@link
-     * #destroy()}. You can also set the listener to {@code null} to remove the listener.
-     *
-     * Note that there is not a one to one correspondence between calls to {@link #loadAds} and this
-     * listener. The SDK will call the listener every time an ad loads.
-     *
-     * @param listener The listener.
-     */
-    public final void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
-        mAdLoadedListener = listener;
-    }
-
-    /**
-     * Start loading ads from the MoPub server.
-     *
-     * We recommend using {@link #loadAds(String, RequestParameters)} instead of this method, in
-     * order to pass targeting information to the server.
-     *
-     * @param adUnitId The ad unit ID to use when loading ads.
-     */
-    public void loadAds(@NonNull final String adUnitId) {
-        mStreamAdPlacer.loadAds(adUnitId);
-    }
-
-    /**
-     * Start loading ads from the MoPub server, using the given request targeting information.
-     *
-     * When loading ads, {@link MoPubNativeAdLoadedListener#onAdLoaded(int)} will be called for each
-     * ad that is added to the stream.
-     *
-     * To refresh ads in your stream, call {@link #refreshAds(ListView, String)}. When new ads load,
-     * they will replace the current ads in your stream. If you are using {@code
-     * MoPubNativeAdLoadedListener} you will see a call to {@code onAdRemoved} for each of the old
-     * ads, followed by a calls to {@code onAdLoaded}.
-     *
-     * @param adUnitId The ad unit ID to use when loading ads.
-     * @param requestParameters Targeting information to pass to the ad server.
-     */
-    public void loadAds(@NonNull final String adUnitId,
-            @Nullable final RequestParameters requestParameters) {
-        mStreamAdPlacer.loadAds(adUnitId, requestParameters);
-    }
-
-    /**
-     * Whether the given position is an ad.
-     *
-     * This will return {@code true} only if there is an ad loaded for this position. You can also
-     * listen for ads to load using {@link MoPubNativeAdLoadedListener#onAdLoaded(int)}.
-     *
-     * @param position The position to check for an ad, expressed in terms of the position in the
-     * stream including ads.
-     * @return Whether there is an ad at the given position.
-     */
-    public boolean isAd(final int position) {
-        return mStreamAdPlacer.isAd(position);
-    }
-
-    /**
-     * Stops loading ads, immediately clearing any ads currently in the stream.
-     *
-     * This method also stops ads from loading as the user moves through the stream. If you want to
-     * refresh ads, call {@link #refreshAds(ListView, String, RequestParameters)} instead of this
-     * method.
-     *
-     * When ads are cleared, {@link MoPubNativeAdLoadedListener#onAdRemoved} will be called for each
-     * ad that is removed from the stream.
-     */
-    public void clearAds() {
-        mStreamAdPlacer.clearAds();
-    }
-
-    /**
-     * Destroys the ad adapter, preventing it from future use.
-     *
-     * You must call this method before the hosting activity for this class is destroyed in order to
-     * avoid a memory leak. Typically you should destroy the adapter in the life-cycle method that
-     * is counterpoint to the method you used to create the adapter. For example, if you created the
-     * adapter in {@code Fragment#onCreateView} you should destroy it in {code
-     * Fragment#onDestroyView}.
-     */
-    public void destroy() {
-        mStreamAdPlacer.destroy();
-        mVisibilityTracker.destroy();
-    }
-
-    @Override
-    public boolean areAllItemsEnabled() {
-        return mOriginalAdapter instanceof ListAdapter
-                && ((ListAdapter) mOriginalAdapter).areAllItemsEnabled();
-    }
-
-    @Override
-    public boolean isEnabled(final int position) {
-        return isAd(position) || (mOriginalAdapter instanceof ListAdapter
-                && ((ListAdapter) mOriginalAdapter).isEnabled(mStreamAdPlacer.getOriginalPosition(
-                position)));
-    }
-
-    /**
-     * Returns the number of items in your stream, including ads.
-     *
-     * @return The count of items.
-     * @inheritDoc
-     */
-    @Override
-    public int getCount() {
-        return mStreamAdPlacer.getAdjustedCount(mOriginalAdapter.getCount());
-    }
-
-    /**
-     * For ad items, returns an ad data object. For non ad items, calls you original adapter using
-     * the original item position.
-     *
-     * @inheritDoc
-     */
-    @Nullable
-    @Override
-    public Object getItem(final int position) {
-        final Object ad = mStreamAdPlacer.getAdData(position);
-        if (ad != null) {
-            return ad;
-        }
-        return mOriginalAdapter.getItem(mStreamAdPlacer.getOriginalPosition(position));
-    }
-
-    /**
-     * For ad items, returns an ID representing the ad. For non ad items, calls your original
-     * adapter using the original item position.
-     *
-     * For ads, this ID will be a negative integer. If you feel that this ID might collide with your
-     * original adapter's IDs, you should return {@code false} from {@code #hasStableIds()}.
-     *
-     * @inheritDoc
-     */
-    @Override
-    public long getItemId(final int position) {
-        final Object adData = mStreamAdPlacer.getAdData(position);
-        if (adData != null) {
-            return ~System.identityHashCode(adData) + 1;
-        }
-        return mOriginalAdapter.getItemId(mStreamAdPlacer.getOriginalPosition(position));
-    }
-
-    /**
-     * Returns the value returned by {@code hasStableIds()} on your original adapter.
-     *
-     * @inheritDoc
-     */
-    @Override
-    public boolean hasStableIds() {
-        return mOriginalAdapter.hasStableIds();
-    }
-
-    /**
-     * For ad items, returns an ad View for the underlying position. For non-ad items, calls your
-     * original adapter using the original ad position.
-     *
-     * @inheritDoc
-     */
-    @Nullable
-    @Override
-    public View getView(final int position, final View view, final ViewGroup viewGroup) {
-        final View resultView;
-        final View adView = mStreamAdPlacer.getAdView(position, view, viewGroup);
-        if (adView != null) {
-            resultView = adView;
-        } else {
-            resultView = mOriginalAdapter.getView(
-                    mStreamAdPlacer.getOriginalPosition(position), view, viewGroup);
-        }
-        mViewPositionMap.put(resultView, position);
-        mVisibilityTracker.addView(resultView, 0);
-
-        return resultView;
-    }
-
-    /**
-     * For ad items, returns a number greater than or equal to the view type count for your
-     * underlying adapter. For non-ad items, calls your original adapter using the original ad
-     * position.
-     *
-     * @inheritDoc
-     */
-    @Override
-    public int getItemViewType(final int position) {
-        final int viewType = mStreamAdPlacer.getAdViewType(position);
-        if (viewType != MoPubStreamAdPlacer.CONTENT_VIEW_TYPE) {
-            return viewType + mOriginalAdapter.getViewTypeCount() - 1;
-        }
-        return mOriginalAdapter.getItemViewType(mStreamAdPlacer.getOriginalPosition(position));
-    }
-
-    /**
-     * Returns the view type count of your original adapter, plus the the number of possible view
-     * types for ads. The number of possible ad view types is currently 1, but this is subject to
-     * change in future SDK versions.
-     *
-     * @inheritDoc
-     */
-    @Override
-    public int getViewTypeCount() {
-        return mOriginalAdapter.getViewTypeCount() + mStreamAdPlacer.getAdViewTypeCount();
-    }
-
-    /**
-     * Returns whether the adapter is empty, calling through to your original adapter.
-     *
-     * @inheritDoc
-     */
-    @Override
-    public boolean isEmpty() {
-        return mOriginalAdapter.isEmpty() && mStreamAdPlacer.getAdjustedCount(0) == 0;
-    }
-
-    private void handleVisibilityChange(@NonNull final List<View> visibleViews) {
-        // Loop through all visible positions in order to build a max and min range, and then
-        // place ads into that range.
-        int min = Integer.MAX_VALUE;
-        int max = 0;
-        for (final View view : visibleViews) {
-            final Integer pos = mViewPositionMap.get(view);
-            if (pos == null) {
-                continue;
-            }
-            min = Math.min(pos, min);
-            max = Math.max(pos, max);
-        }
-        mStreamAdPlacer.placeAdsInRange(min, max + 1);
-    }
-
-    /**
-     * Returns the original position of an item considering ads in the stream.
-     *
-     * @see {@link MoPubStreamAdPlacer#getOriginalPosition(int)}
-     * @param position The adjusted position.
-     * @return The original position before placing ads.
-     */
-    public int getOriginalPosition(final int position) {
-        return mStreamAdPlacer.getOriginalPosition(position);
-    }
-
-    /**
-     * Returns the position of an item considering ads in the stream.
-     *
-     * @see {@link MoPubStreamAdPlacer#getAdjustedPosition(int)}
-     * @param originalPosition The original position.
-     * @return The position adjusted by placing ads.
-     */
-    public int getAdjustedPosition(final int originalPosition) {
-        return mStreamAdPlacer.getAdjustedPosition(originalPosition);
-    }
-
-    /**
-     * Inserts a content row at the given position, adjusting ad positions accordingly.
-     *
-     * Use this method if you are inserting an item into your stream and want to increment ad
-     * positions based on that new item.
-     *
-     * If you do not want to increment your ad positions when inserting items, you can simply call
-     * notifyDataSetChanged on the adapter and let it reload items normally. This is typically the
-     * case when inserting items at the end of your stream.
-     *
-     * @see {@link MoPubStreamAdPlacer#insertItem(int)}
-     * @param originalPosition The original content position at which to add an item. If you have an
-     * adjusted position, you will need to call {@link #getOriginalPosition} to get this value.
-     */
-    public void insertItem(final int originalPosition) {
-        mStreamAdPlacer.insertItem(originalPosition);
-    }
-
-    /**
-     * Removes the content row at the given position, adjusting ad positions accordingly.
-     *
-     * Use this method if you are removing an item from your stream and want to decrement ad
-     * positions based on that removed item.
-     *
-     * If you do not want to decrement your ad positions when inserting items, you can simply call
-     * notifyDataSet changed on the adapter and let it reload items normally. This is typically the
-     * case when removing items from the end of your stream.
-     *
-     * @see {@link MoPubStreamAdPlacer#removeItem(int)}
-     * @param originalPosition The original content position at which to add an item. If you have an
-     * adjusted position, you will need to call {@link #getOriginalPosition} to get this value.
-     */
-    public void removeItem(final int originalPosition) {
-        mStreamAdPlacer.removeItem(originalPosition);
-    }
-
-    /**
-     * Sets an on click listener for the given ListView, automatically adjusting the listener
-     * callback positions based on ads in the adapter.
-     *
-     * This listener will not be called when ads are clicked.
-     *
-     * @param listView The ListView for this adapter.
-     * @param listener An on click listener.
-     */
-    public void setOnClickListener(@NonNull final ListView listView,
-            @Nullable final OnItemClickListener listener) {
-        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setOnClickListener with a" +
-                " null ListView")) {
-            return;
-        }
-        if (listener == null) {
-            listView.setOnItemClickListener(null);
-            return;
-        }
-
-        listView.setOnItemClickListener(new OnItemClickListener() {
-            @Override
-            public void onItemClick(final AdapterView<?> adapterView, final View view,
-                    final int position, final long id) {
-                if (!mStreamAdPlacer.isAd(position)) {
-                    listener.onItemClick(
-                            adapterView, view, mStreamAdPlacer.getOriginalPosition(position), id);
-                }
-            }
-        });
-    }
-
-    /**
-     * Sets an on long click listener for the given ListView, automatically adjusting the listener
-     * callback positions based on ads in the adapter.
-     *
-     * This listener will not be called when ads are long clicked.
-     *
-     * @param listView The ListView for this adapter.
-     * @param listener An an long click listener.
-     */
-    public void setOnItemLongClickListener(@NonNull final ListView listView,
-            @Nullable final OnItemLongClickListener listener) {
-        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter." +
-                "setOnItemLongClickListener with a null ListView")) {
-            return;
-        }
-        if (listener == null) {
-            listView.setOnItemLongClickListener(null);
-            return;
-        }
-
-        listView.setOnItemLongClickListener(new OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(final AdapterView<?> adapterView,
-                    final View view, final int position, final long id) {
-                return isAd(position) || listener.onItemLongClick(
-                        adapterView, view, mStreamAdPlacer.getOriginalPosition(position), id);
-            }
-        });
-    }
-
-    /**
-     * Sets an on item selected listener for the given ListView, automatically adjusting the
-     * listener callback positions based on ads in the adapter.
-     *
-     * @param listView The ListView for this adapter.
-     * @param listener An an item selected listener.
-     */
-    public void setOnItemSelectedListener(@NonNull final ListView listView,
-            @Nullable final OnItemSelectedListener listener) {
-        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setOnItemSelectedListener" +
-                " with a null ListView")) {
-            return;
-        }
-        if (listener == null) {
-            listView.setOnItemSelectedListener(null);
-            return;
-        }
-
-        listView.setOnItemSelectedListener(new OnItemSelectedListener() {
-            @Override
-            public void onItemSelected(final AdapterView<?> adapterView,
-                    final View view, final int position, final long id) {
-                if (!isAd(position)) {
-                    listener.onItemSelected(adapterView, view,
-                            mStreamAdPlacer.getOriginalPosition(position), id);
-                }
-            }
-
-            @Override
-            public void onNothingSelected(final AdapterView<?> adapterView) {
-                listener.onNothingSelected(adapterView);
-            }
-        });
-    }
-
-    /**
-     * Sets the currently selected item in the ListView, automatically adjusting the position based
-     * on ads in the adapter.
-     *
-     * @param listView The ListView for this adapter.
-     * @param originalPosition The original content position before loading ads.
-     */
-    public void setSelection(@NonNull final ListView listView, final int originalPosition) {
-        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setSelection with a null " +
-                "ListView")) {
-            return;
-        }
-
-        listView.setSelection(mStreamAdPlacer.getAdjustedPosition(originalPosition));
-    }
-
-    /**
-     * Scrolls an item in the ListView, automatically adjusting the position based on ads in the
-     * adapter.
-     *
-     * @param listView The ListView for this adapter.
-     * @param originalPosition The original content position before loading ads.
-     */
-    public void smoothScrollToPosition(@NonNull final ListView listView,
-            final int originalPosition) {
-        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.smoothScrollToPosition " +
-                "with a null ListView")) {
-            return;
-        }
-
-        listView.smoothScrollToPosition(mStreamAdPlacer.getAdjustedPosition(originalPosition));
-    }
-
-    /**
-     * Refreshes ads in the given ListView while preserving the scroll position.
-     *
-     * Call this instead of {@link #loadAds(String)} in order to preserve the scroll position in
-     * your list.
-     *
-     * @param adUnitId The ad unit ID to use when loading ads.
-     */
-    public void refreshAds(@NonNull final ListView listView, @NonNull String adUnitId) {
-        refreshAds(listView, adUnitId, null);
-    }
-
-    /**
-     * Refreshes ads in the given ListView while preserving the scroll position.
-     *
-     * Call this instead of {@link #loadAds(String, RequestParameters)} in order to preserve the
-     * scroll position in your list.
-     *
-     * @param adUnitId The ad unit ID to use when loading ads.
-     * @param requestParameters Targeting information to pass to the ad server.
-     */
-    public void refreshAds(@NonNull final ListView listView,
-            @NonNull String adUnitId, @Nullable RequestParameters requestParameters) {
-        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.refreshAds with a null " +
-                "ListView")) {
-            return;
-        }
-
-        // Get scroll offset of the first view, if it exists.
-        View firstView = listView.getChildAt(0);
-        int offsetY = (firstView == null) ? 0 : firstView.getTop();
-
-        // Find the range of positions where we should not clear ads.
-        int firstPosition = listView.getFirstVisiblePosition();
-        int startRange = Math.max(firstPosition - 1, 0);
-        while (mStreamAdPlacer.isAd(startRange) && startRange > 0) {
-            startRange--;
-        }
-        int lastPosition = listView.getLastVisiblePosition();
-        while (mStreamAdPlacer.isAd(lastPosition) && lastPosition < getCount() - 1) {
-            lastPosition++;
-        }
-        int originalStartRange = mStreamAdPlacer.getOriginalPosition(startRange);
-        int originalEndRange = mStreamAdPlacer.getOriginalCount(lastPosition + 1);
-
-        // Remove ads before and after the range.
-        int originalCount = mStreamAdPlacer.getOriginalCount(getCount());
-        mStreamAdPlacer.removeAdsInRange(originalEndRange, originalCount);
-        int numAdsRemoved = mStreamAdPlacer.removeAdsInRange(0, originalStartRange);
-
-        // Reset the scroll position, and reload ads.
-        if (numAdsRemoved > 0) {
-            listView.setSelectionFromTop(firstPosition - numAdsRemoved, offsetY);
-        }
-        loadAds(adUnitId, requestParameters);
-    }
-}
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.database.DataSetObserver;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Adapter;
+import android.widget.AdapterView;
+import android.widget.BaseAdapter;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.Preconditions.NoThrow;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
+
+import java.util.List;
+import java.util.WeakHashMap;
+
+import static android.widget.AdapterView.OnItemClickListener;
+import static android.widget.AdapterView.OnItemLongClickListener;
+import static android.widget.AdapterView.OnItemSelectedListener;
+import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
+
+/**
+ * {@code MoPubAdAdapter} facilitates placing ads into an Android {@link android.widget.ListView} or
+ * other widgets that use a {@link android.widget.ListAdapter}.
+ *
+ * For your content items, this class will call your original adapter with the original position of
+ * content before ads were loaded.
+ *
+ * This adapter uses a {@link com.mopub.nativeads.MoPubStreamAdPlacer} object internally. If you
+ * wish to avoid wrapping your original adapter, you can use {@code MoPubStreamAdPlacer} directly.
+ */
+public class MoPubAdAdapter extends BaseAdapter {
+    @NonNull private final WeakHashMap<View, Integer> mViewPositionMap;
+    @NonNull private final Adapter mOriginalAdapter;
+    @NonNull private final MoPubStreamAdPlacer mStreamAdPlacer;
+    @NonNull private final VisibilityTracker mVisibilityTracker;
+
+    @Nullable private MoPubNativeAdLoadedListener mAdLoadedListener;
+
+    /**
+     * Creates a new MoPubAdAdapter object.
+     *
+     * By default, the adapter will contact the server to determine ad positions. If you
+     * wish to hard-code positions in your app, see {@link MoPubAdAdapter(Context,
+     * MoPubClientPositioning)}.
+     *
+     * @param context The activity context.
+     * @param originalAdapter Your original adapter.
+     */
+    public MoPubAdAdapter(@NonNull final Context context, @NonNull final Adapter originalAdapter) {
+        this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
+    }
+
+    /**
+     * Creates a new MoPubAdAdapter object, using server positioning.
+     *
+     * @param context The activity context.
+     * @param originalAdapter Your original adapter.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
+     */
+    public MoPubAdAdapter(@NonNull final Context context,
+            @NonNull final Adapter originalAdapter,
+            @NonNull final MoPubServerPositioning adPositioning) {
+        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
+                new VisibilityTracker(context));
+    }
+
+    /**
+     * Creates a new MoPubAdAdapter object, using client positioning.
+     *
+     * @param context The activity context.
+     * @param originalAdapter Your original adapter.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
+     */
+    public MoPubAdAdapter(@NonNull final Context context,
+            @NonNull final Adapter originalAdapter,
+            @NonNull final MoPubClientPositioning adPositioning) {
+        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
+                new VisibilityTracker(context));
+    }
+
+    @VisibleForTesting
+    MoPubAdAdapter(@NonNull final MoPubStreamAdPlacer streamAdPlacer,
+            @NonNull final Adapter originalAdapter,
+            @NonNull final VisibilityTracker visibilityTracker) {
+        mOriginalAdapter = originalAdapter;
+        mStreamAdPlacer = streamAdPlacer;
+        mViewPositionMap = new WeakHashMap<View, Integer>();
+
+        mVisibilityTracker = visibilityTracker;
+        mVisibilityTracker.setVisibilityTrackerListener(new VisibilityTrackerListener() {
+            @Override
+            public void onVisibilityChanged(@NonNull final List<View> visibleViews,
+                    final List<View> invisibleViews) {
+                handleVisibilityChange(visibleViews);
+            }
+        });
+        mOriginalAdapter.registerDataSetObserver(new DataSetObserver() {
+            @Override
+            public void onChanged() {
+                mStreamAdPlacer.setItemCount(mOriginalAdapter.getCount());
+                notifyDataSetChanged();
+            }
+
+            @Override
+            public void onInvalidated() {
+                notifyDataSetInvalidated();
+            }
+        });
+
+        mStreamAdPlacer.setAdLoadedListener(new MoPubNativeAdLoadedListener() {
+            @Override
+            public void onAdLoaded(final int position) {
+                handleAdLoaded(position);
+            }
+
+            @Override
+            public void onAdRemoved(final int position) {
+                handleAdRemoved(position);
+            }
+
+        });
+
+        mStreamAdPlacer.setItemCount(mOriginalAdapter.getCount());
+    }
+
+    @VisibleForTesting
+    void handleAdLoaded(final int position) {
+        if (mAdLoadedListener != null) {
+            mAdLoadedListener.onAdLoaded(position);
+        }
+        notifyDataSetChanged();
+    }
+
+    @VisibleForTesting
+    void handleAdRemoved(final int position) {
+        if (mAdLoadedListener != null) {
+            mAdLoadedListener.onAdRemoved(position);
+        }
+        notifyDataSetChanged();
+    }
+
+    /**
+     * Registers a {@link MoPubNativeAdRenderer} to use when displaying ads in your stream.
+     *
+     * This renderer will automatically create and render your view when you call {@link #getView}.
+     * If you register a second renderer, it will replace the first, although this behavior is
+     * subject to change in a future SDK version.
+     *
+     * @param adRenderer The ad renderer.
+     *
+     * @deprecated in version 3.9.0, use {@link #registerViewBinder(ViewBinder)} instead.
+     */
+    @Deprecated
+    public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
+        if (!Preconditions.NoThrow.checkNotNull(
+                adRenderer, "Tried to set a null ad renderer on the placer.")) {
+            return;
+        }
+        mStreamAdPlacer.registerAdRenderer(adRenderer);
+    }
+
+    /**
+     * Registers a {@link ViewBinder} to use when displaying ads in your stream.
+     *
+     * This binder will be used automatically to create and render your view when you call
+     * {@link #getView}. If you register a second {@link ViewBinder}, it will replace the first,
+     * although this behavior is subject to change in a future SDK version.
+     *
+     * @param viewBinder The view binder
+     */
+    public final void registerViewBinder(@NonNull final ViewBinder viewBinder) {
+        if (!Preconditions.NoThrow.checkNotNull(
+                viewBinder, "Tried to set a null view binder on the placer.")) {
+            return;
+        }
+        mStreamAdPlacer.registerAdRenderer(new MoPubNativeAdRenderer(viewBinder));
+    }
+
+    /**
+     * Sets a listener that will be called after the SDK loads new ads from the server and places
+     * them into your stream.
+     *
+     * The listener will be active between when you call {@link #loadAds} and when you call {@link
+     * #destroy()}. You can also set the listener to {@code null} to remove the listener.
+     *
+     * Note that there is not a one to one correspondence between calls to {@link #loadAds} and this
+     * listener. The SDK will call the listener every time an ad loads.
+     *
+     * @param listener The listener.
+     */
+    public final void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
+        mAdLoadedListener = listener;
+    }
+
+    /**
+     * Start loading ads from the MoPub server.
+     *
+     * We recommend using {@link #loadAds(String, RequestParameters)} instead of this method, in
+     * order to pass targeting information to the server.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     */
+    public void loadAds(@NonNull final String adUnitId) {
+        mStreamAdPlacer.loadAds(adUnitId);
+    }
+
+    /**
+     * Start loading ads from the MoPub server, using the given request targeting information.
+     *
+     * When loading ads, {@link MoPubNativeAdLoadedListener#onAdLoaded(int)} will be called for each
+     * ad that is added to the stream.
+     *
+     * To refresh ads in your stream, call {@link #refreshAds(ListView, String)}. When new ads load,
+     * they will replace the current ads in your stream. If you are using {@code
+     * MoPubNativeAdLoadedListener} you will see a call to {@code onAdRemoved} for each of the old
+     * ads, followed by a calls to {@code onAdLoaded}.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     * @param requestParameters Targeting information to pass to the ad server.
+     */
+    public void loadAds(@NonNull final String adUnitId,
+            @Nullable final RequestParameters requestParameters) {
+        mStreamAdPlacer.loadAds(adUnitId, requestParameters);
+    }
+
+    /**
+     * Whether the given position is an ad.
+     *
+     * This will return {@code true} only if there is an ad loaded for this position. You can also
+     * listen for ads to load using {@link MoPubNativeAdLoadedListener#onAdLoaded(int)}.
+     *
+     * @param position The position to check for an ad, expressed in terms of the position in the
+     * stream including ads.
+     * @return Whether there is an ad at the given position.
+     */
+    public boolean isAd(final int position) {
+        return mStreamAdPlacer.isAd(position);
+    }
+
+    /**
+     * Stops loading ads, immediately clearing any ads currently in the stream.
+     *
+     * This method also stops ads from loading as the user moves through the stream. If you want to
+     * refresh ads, call {@link #refreshAds(ListView, String, RequestParameters)} instead of this
+     * method.
+     *
+     * When ads are cleared, {@link MoPubNativeAdLoadedListener#onAdRemoved} will be called for each
+     * ad that is removed from the stream.
+     */
+    public void clearAds() {
+        mStreamAdPlacer.clearAds();
+    }
+
+    /**
+     * Destroys the ad adapter, preventing it from future use.
+     *
+     * You must call this method before the hosting activity for this class is destroyed in order to
+     * avoid a memory leak. Typically you should destroy the adapter in the life-cycle method that
+     * is counterpoint to the method you used to create the adapter. For example, if you created the
+     * adapter in {@code Fragment#onCreateView} you should destroy it in {code
+     * Fragment#onDestroyView}.
+     */
+    public void destroy() {
+        mStreamAdPlacer.destroy();
+        mVisibilityTracker.destroy();
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return mOriginalAdapter instanceof ListAdapter
+                && ((ListAdapter) mOriginalAdapter).areAllItemsEnabled();
+    }
+
+    @Override
+    public boolean isEnabled(final int position) {
+        return isAd(position) || (mOriginalAdapter instanceof ListAdapter
+                && ((ListAdapter) mOriginalAdapter).isEnabled(mStreamAdPlacer.getOriginalPosition(
+                position)));
+    }
+
+    /**
+     * Returns the number of items in your stream, including ads.
+     *
+     * @return The count of items.
+     * @inheritDoc
+     */
+    @Override
+    public int getCount() {
+        return mStreamAdPlacer.getAdjustedCount(mOriginalAdapter.getCount());
+    }
+
+    /**
+     * For ad items, returns an ad data object. For non ad items, calls you original adapter using
+     * the original item position.
+     *
+     * @inheritDoc
+     */
+    @Nullable
+    @Override
+    public Object getItem(final int position) {
+        final Object ad = mStreamAdPlacer.getAdData(position);
+        if (ad != null) {
+            return ad;
+        }
+        return mOriginalAdapter.getItem(mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    /**
+     * For ad items, returns an ID representing the ad. For non ad items, calls your original
+     * adapter using the original item position.
+     *
+     * For ads, this ID will be a negative integer. If you feel that this ID might collide with your
+     * original adapter's IDs, you should return {@code false} from {@code #hasStableIds()}.
+     *
+     * @inheritDoc
+     */
+    @Override
+    public long getItemId(final int position) {
+        final Object adData = mStreamAdPlacer.getAdData(position);
+        if (adData != null) {
+            return -System.identityHashCode(adData);
+        }
+        return mOriginalAdapter.getItemId(mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    /**
+     * Returns the value returned by {@code hasStableIds()} on your original adapter.
+     *
+     * @inheritDoc
+     */
+    @Override
+    public boolean hasStableIds() {
+        return mOriginalAdapter.hasStableIds();
+    }
+
+    /**
+     * For ad items, returns an ad View for the underlying position. For non-ad items, calls your
+     * original adapter using the original ad position.
+     *
+     * @inheritDoc
+     */
+    @Nullable
+    @Override
+    public View getView(final int position, final View view, final ViewGroup viewGroup) {
+        final View resultView;
+        final View adView = mStreamAdPlacer.getAdView(position, view, viewGroup);
+        if (adView != null) {
+            resultView = adView;
+        } else {
+            resultView = mOriginalAdapter.getView(
+                    mStreamAdPlacer.getOriginalPosition(position), view, viewGroup);
+        }
+        mViewPositionMap.put(resultView, position);
+        mVisibilityTracker.addView(resultView, 0);
+
+        return resultView;
+    }
+
+    /**
+     * For ad items, returns a number greater than or equal to the view type count for your
+     * underlying adapter. For non-ad items, calls your original adapter using the original ad
+     * position.
+     *
+     * @inheritDoc
+     */
+    @Override
+    public int getItemViewType(final int position) {
+        final int viewType = mStreamAdPlacer.getAdViewType(position);
+        if (viewType != MoPubStreamAdPlacer.CONTENT_VIEW_TYPE) {
+            return viewType + mOriginalAdapter.getViewTypeCount() - 1;
+        }
+        return mOriginalAdapter.getItemViewType(mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    /**
+     * Returns the view type count of your original adapter, plus the the number of possible view
+     * types for ads. The number of possible ad view types is currently 1, but this is subject to
+     * change in future SDK versions.
+     *
+     * @inheritDoc
+     */
+    @Override
+    public int getViewTypeCount() {
+        return mOriginalAdapter.getViewTypeCount() + mStreamAdPlacer.getAdViewTypeCount();
+    }
+
+    /**
+     * Returns whether the adapter is empty, calling through to your original adapter.
+     *
+     * @inheritDoc
+     */
+    @Override
+    public boolean isEmpty() {
+        return mOriginalAdapter.isEmpty() && mStreamAdPlacer.getAdjustedCount(0) == 0;
+    }
+
+    private void handleVisibilityChange(@NonNull final List<View> visibleViews) {
+        // Loop through all visible positions in order to build a max and min range, and then
+        // place ads into that range.
+        int min = Integer.MAX_VALUE;
+        int max = 0;
+        for (final View view : visibleViews) {
+            final Integer pos = mViewPositionMap.get(view);
+            if (pos == null) {
+                continue;
+            }
+            min = Math.min(pos, min);
+            max = Math.max(pos, max);
+        }
+        mStreamAdPlacer.placeAdsInRange(min, max + 1);
+    }
+
+    /**
+     * Returns the original position of an item considering ads in the stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#getOriginalPosition(int)}
+     * @param position The adjusted position.
+     * @return The original position before placing ads.
+     */
+    public int getOriginalPosition(final int position) {
+        return mStreamAdPlacer.getOriginalPosition(position);
+    }
+
+    /**
+     * Returns the position of an item considering ads in the stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#getAdjustedPosition(int)}
+     * @param originalPosition The original position.
+     * @return The position adjusted by placing ads.
+     */
+    public int getAdjustedPosition(final int originalPosition) {
+        return mStreamAdPlacer.getAdjustedPosition(originalPosition);
+    }
+
+    /**
+     * Inserts a content row at the given position, adjusting ad positions accordingly.
+     *
+     * Use this method if you are inserting an item into your stream and want to increment ad
+     * positions based on that new item.
+     *
+     * If you do not want to increment your ad positions when inserting items, you can simply call
+     * notifyDataSetChanged on the adapter and let it reload items normally. This is typically the
+     * case when inserting items at the end of your stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#insertItem(int)}
+     * @param originalPosition The original content position at which to add an item. If you have an
+     * adjusted position, you will need to call {@link #getOriginalPosition} to get this value.
+     */
+    public void insertItem(final int originalPosition) {
+        mStreamAdPlacer.insertItem(originalPosition);
+    }
+
+    /**
+     * Removes the content row at the given position, adjusting ad positions accordingly.
+     *
+     * Use this method if you are removing an item from your stream and want to decrement ad
+     * positions based on that removed item.
+     *
+     * If you do not want to decrement your ad positions when inserting items, you can simply call
+     * notifyDataSet changed on the adapter and let it reload items normally. This is typically the
+     * case when removing items from the end of your stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#removeItem(int)}
+     * @param originalPosition The original content position at which to add an item. If you have an
+     * adjusted position, you will need to call {@link #getOriginalPosition} to get this value.
+     */
+    public void removeItem(final int originalPosition) {
+        mStreamAdPlacer.removeItem(originalPosition);
+    }
+
+    /**
+     * Sets an on click listener for the given ListView, automatically adjusting the listener
+     * callback positions based on ads in the adapter.
+     *
+     * This listener will not be called when ads are clicked.
+     *
+     * @param listView The ListView for this adapter.
+     * @param listener An on click listener.
+     */
+    public void setOnClickListener(@NonNull final ListView listView,
+            @Nullable final OnItemClickListener listener) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setOnClickListener with a" +
+                " null ListView")) {
+            return;
+        }
+        if (listener == null) {
+            listView.setOnItemClickListener(null);
+            return;
+        }
+
+        listView.setOnItemClickListener(new OnItemClickListener() {
+            @Override
+            public void onItemClick(final AdapterView<?> adapterView, final View view,
+                    final int position, final long id) {
+                if (!mStreamAdPlacer.isAd(position)) {
+                    listener.onItemClick(
+                            adapterView, view, mStreamAdPlacer.getOriginalPosition(position), id);
+                }
+            }
+        });
+    }
+
+    /**
+     * Sets an on long click listener for the given ListView, automatically adjusting the listener
+     * callback positions based on ads in the adapter.
+     *
+     * This listener will not be called when ads are long clicked.
+     *
+     * @param listView The ListView for this adapter.
+     * @param listener An an long click listener.
+     */
+    public void setOnItemLongClickListener(@NonNull final ListView listView,
+            @Nullable final OnItemLongClickListener listener) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter." +
+                "setOnItemLongClickListener with a null ListView")) {
+            return;
+        }
+        if (listener == null) {
+            listView.setOnItemLongClickListener(null);
+            return;
+        }
+
+        listView.setOnItemLongClickListener(new OnItemLongClickListener() {
+            @Override
+            public boolean onItemLongClick(final AdapterView<?> adapterView,
+                    final View view, final int position, final long id) {
+                return isAd(position) || listener.onItemLongClick(
+                        adapterView, view, mStreamAdPlacer.getOriginalPosition(position), id);
+            }
+        });
+    }
+
+    /**
+     * Sets an on item selected listener for the given ListView, automatically adjusting the
+     * listener callback positions based on ads in the adapter.
+     *
+     * @param listView The ListView for this adapter.
+     * @param listener An an item selected listener.
+     */
+    public void setOnItemSelectedListener(@NonNull final ListView listView,
+            @Nullable final OnItemSelectedListener listener) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setOnItemSelectedListener" +
+                " with a null ListView")) {
+            return;
+        }
+        if (listener == null) {
+            listView.setOnItemSelectedListener(null);
+            return;
+        }
+
+        listView.setOnItemSelectedListener(new OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(final AdapterView<?> adapterView,
+                    final View view, final int position, final long id) {
+                if (!isAd(position)) {
+                    listener.onItemSelected(adapterView, view,
+                            mStreamAdPlacer.getOriginalPosition(position), id);
+                }
+            }
+
+            @Override
+            public void onNothingSelected(final AdapterView<?> adapterView) {
+                listener.onNothingSelected(adapterView);
+            }
+        });
+    }
+
+    /**
+     * Sets the currently selected item in the ListView, automatically adjusting the position based
+     * on ads in the adapter.
+     *
+     * @param listView The ListView for this adapter.
+     * @param originalPosition The original content position before loading ads.
+     */
+    public void setSelection(@NonNull final ListView listView, final int originalPosition) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setSelection with a null " +
+                "ListView")) {
+            return;
+        }
+
+        listView.setSelection(mStreamAdPlacer.getAdjustedPosition(originalPosition));
+    }
+
+    /**
+     * Scrolls an item in the ListView, automatically adjusting the position based on ads in the
+     * adapter.
+     *
+     * @param listView The ListView for this adapter.
+     * @param originalPosition The original content position before loading ads.
+     */
+    public void smoothScrollToPosition(@NonNull final ListView listView,
+            final int originalPosition) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.smoothScrollToPosition " +
+                "with a null ListView")) {
+            return;
+        }
+
+        listView.smoothScrollToPosition(mStreamAdPlacer.getAdjustedPosition(originalPosition));
+    }
+
+    /**
+     * Refreshes ads in the given ListView while preserving the scroll position.
+     *
+     * Call this instead of {@link #loadAds(String)} in order to preserve the scroll position in
+     * your list.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     */
+    public void refreshAds(@NonNull final ListView listView, @NonNull String adUnitId) {
+        refreshAds(listView, adUnitId, null);
+    }
+
+    /**
+     * Refreshes ads in the given ListView while preserving the scroll position.
+     *
+     * Call this instead of {@link #loadAds(String, RequestParameters)} in order to preserve the
+     * scroll position in your list.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     * @param requestParameters Targeting information to pass to the ad server.
+     */
+    public void refreshAds(@NonNull final ListView listView,
+            @NonNull String adUnitId, @Nullable RequestParameters requestParameters) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.refreshAds with a null " +
+                "ListView")) {
+            return;
+        }
+
+        // Get scroll offset of the first view, if it exists.
+        View firstView = listView.getChildAt(0);
+        int offsetY = (firstView == null) ? 0 : firstView.getTop();
+
+        // Find the range of positions where we should not clear ads.
+        int firstPosition = listView.getFirstVisiblePosition();
+        int startRange = Math.max(firstPosition - 1, 0);
+        while (mStreamAdPlacer.isAd(startRange) && startRange > 0) {
+            startRange--;
+        }
+        int lastPosition = listView.getLastVisiblePosition();
+        while (mStreamAdPlacer.isAd(lastPosition) && lastPosition < getCount() - 1) {
+            lastPosition++;
+        }
+        int originalStartRange = mStreamAdPlacer.getOriginalPosition(startRange);
+        int originalEndRange = mStreamAdPlacer.getOriginalCount(lastPosition + 1);
+
+        // Remove ads before and after the range.
+        int originalCount = mStreamAdPlacer.getOriginalCount(getCount());
+        mStreamAdPlacer.removeAdsInRange(originalEndRange, originalCount);
+        int numAdsRemoved = mStreamAdPlacer.removeAdsInRange(0, originalStartRange);
+
+        // Reset the scroll position, and reload ads.
+        if (numAdsRemoved > 0) {
+            listView.setSelectionFromTop(firstPosition - numAdsRemoved, offsetY);
+        }
+        loadAds(adUnitId, requestParameters);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index b079e83d..fb3da55d 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,41 +1,42 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.view.ViewGroup;
-
-/**
- * An interface for creating ad views and rendering them using ad data.
- *
- * Normally you will use the subclass {@link com.mopub.nativeads.MoPubNativeAdRenderer} with {@link
- * com.mopub.nativeads.ViewBinder} to customize your ad view with your own layout. However, if you
- * wish to programmatically create or manage your ad view, you can implement {@code MoPubAdRenderer}
- * directly.
- *
- * @param <T> The ad payload type.
- */
-public interface MoPubAdRenderer<T> {
-    /**
-     * Creates a new view to be used as an ad.
-     *
-     * This method is called when you call {@link com.mopub.nativeads.MoPubStreamAdPlacer#getAdView}
-     * and the convertView is null. You must return a valid view.
-     *
-     * @param context The context. Useful for creating a view.
-     * @param parent The parent that the view will eventually be attached to. You might use the
-     * parent to determine layout parameters, but should return the view without attaching it to the
-     * parent.
-     * @return A new ad view.
-     */
-    View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
-
-    /**
-     * Renders a view created by {@link #createAdView} by filling it with ad data.
-     *
-     * @param view The ad {@link View}
-     * @param ad The ad data that should be bound to the view.
-     */
-    void renderAdView(@NonNull View view, @NonNull T ad);
-}
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewGroup;
+
+/**
+ * An interface for creating ad views and rendering them using ad data.
+ *
+ * Normally you will use the subclass {@link com.mopub.nativeads.MoPubNativeAdRenderer} with {@link
+ * com.mopub.nativeads.ViewBinder} to customize your ad view with your own layout. However, if you
+ * wish to programmatically create or manage your ad view, you can implement {@code MoPubAdRenderer}
+ * directly.
+ *
+ * @param <T> The ad payload type.
+ */
+public interface MoPubAdRenderer<T> {
+    /**
+     * Creates a new view to be used as an ad.
+     *
+     * This method is called when you call {@link com.mopub.nativeads.MoPubStreamAdPlacer#getAdView}
+     * and the convertView is null. You must return a valid view.
+     *
+     * @param context The context. Useful for creating a view.
+     * @param parent The parent that the view will eventually be attached to. You might use the
+     * parent to determine layout parameters, but should return the view without attaching it to the
+     * parent.
+     * @return A new ad view.
+     */
+    @NonNull
+    View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
+
+    /**
+     * Renders a view created by {@link #createAdView} by filling it with ad data.
+     *
+     * @param view The ad {@link View}
+     * @param ad The ad data that should be bound to the view.
+     */
+    void renderAdView(@NonNull View view, @NonNull T ad);
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
index 47eb1bad..cbb50af8 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
@@ -1,56 +1,57 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.VisibleForTesting;
-
-import java.util.WeakHashMap;
-
-import static android.view.View.VISIBLE;
-
-/**
- * An implementation of {@link com.mopub.nativeads.MoPubAdRenderer} for rendering native ads.
- */
-public class MoPubNativeAdRenderer implements MoPubAdRenderer<NativeResponse> {
-    @NonNull private final ViewBinder mViewBinder;
-
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    @VisibleForTesting @NonNull final WeakHashMap<View, NativeViewHolder> mViewHolderMap;
-
-    /**
-     * Constructs a native ad renderer with a view binder.
-     *
-     * @param viewBinder The view binder to use when inflating and rendering an ad.
-     */
-    public MoPubNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
-        mViewBinder = viewBinder;
-        mViewHolderMap = new WeakHashMap<View, NativeViewHolder>();
-    }
-
-    @Override
-    @NonNull
-    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
-        return LayoutInflater
-                .from(context)
-                .inflate(mViewBinder.layoutId, parent, false);
-    }
-
-    @Override
-    public void renderAdView(@NonNull final View view,
-            @NonNull final NativeResponse nativeResponse) {
-        NativeViewHolder nativeViewHolder = mViewHolderMap.get(view);
-        if (nativeViewHolder == null) {
-            nativeViewHolder = NativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, nativeViewHolder);
-        }
-        nativeViewHolder.update(nativeResponse);
-        nativeViewHolder.updateExtras(view, nativeResponse, mViewBinder);
-        view.setVisibility(VISIBLE);
-    }
-}
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.VisibleForTesting;
+
+import java.util.WeakHashMap;
+
+import static android.view.View.VISIBLE;
+
+/**
+ * An implementation of {@link com.mopub.nativeads.MoPubAdRenderer} for rendering native ads.
+ */
+public class MoPubNativeAdRenderer implements MoPubAdRenderer<NativeResponse> {
+    @NonNull private final ViewBinder mViewBinder;
+
+    // This is used instead of View.setTag, which causes a memory leak in 2.3
+    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
+    @VisibleForTesting @NonNull final WeakHashMap<View, NativeViewHolder> mViewHolderMap;
+
+    /**
+     * Constructs a native ad renderer with a view binder.
+     *
+     * @param viewBinder The view binder to use when inflating and rendering an ad.
+     */
+    public MoPubNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
+        mViewBinder = viewBinder;
+        mViewHolderMap = new WeakHashMap<View, NativeViewHolder>();
+    }
+
+    @Override
+    @NonNull
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
+        return LayoutInflater
+                .from(context)
+                .inflate(mViewBinder.layoutId, parent, false);
+    }
+
+    @Override
+    public void renderAdView(@NonNull final View view,
+            @NonNull final NativeResponse nativeResponse) {
+        NativeViewHolder nativeViewHolder = mViewHolderMap.get(view);
+        if (nativeViewHolder == null) {
+            nativeViewHolder = NativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, nativeViewHolder);
+        }
+
+        nativeViewHolder.update(nativeResponse);
+        nativeViewHolder.updateExtras(nativeResponse, mViewBinder);
+        nativeViewHolder.setViewVisibility(VISIBLE);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
new file mode 100644
index 00000000..df999462
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -0,0 +1,559 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
+
+import java.util.List;
+import java.util.WeakHashMap;
+
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.INSERT_AT_END;
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.KEEP_ADS_FIXED;
+
+
+public final class MoPubRecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+    // RecyclerView ad views will have negative types to avoid colliding with original view types.
+    static final int NATIVE_AD_VIEW_TYPE_BASE = -56;
+
+    public enum ContentChangeStrategy {
+        INSERT_AT_END, MOVE_ALL_ADS_WITH_CONTENT, KEEP_ADS_FIXED
+    }
+
+    @NonNull private final RecyclerView.AdapterDataObserver mAdapterDataObserver;
+    @Nullable private RecyclerView mRecyclerView;
+    @NonNull private final MoPubStreamAdPlacer mStreamAdPlacer;
+    @NonNull private final RecyclerView.Adapter mOriginalAdapter;
+    @NonNull private final VisibilityTracker mVisibilityTracker;
+    @NonNull private final WeakHashMap<View, Integer> mViewPositionMap;
+
+    @NonNull private ContentChangeStrategy mStrategy = INSERT_AT_END;
+    @Nullable private MoPubNativeAdLoadedListener mAdLoadedListener;
+
+    public MoPubRecyclerAdapter(@NonNull Context context,
+            @NonNull RecyclerView.Adapter originalAdapter) {
+        this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
+    }
+
+    public MoPubRecyclerAdapter(@NonNull Context context,
+            @NonNull RecyclerView.Adapter originalAdapter,
+            @NonNull MoPubServerPositioning adPositioning) {
+        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
+                new VisibilityTracker(context));
+    }
+
+    public MoPubRecyclerAdapter(@NonNull Context context,
+            @NonNull RecyclerView.Adapter originalAdapter,
+            @NonNull MoPubClientPositioning adPositioning) {
+        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
+                new VisibilityTracker(context));
+    }
+
+    @VisibleForTesting
+    MoPubRecyclerAdapter(@NonNull final MoPubStreamAdPlacer streamAdPlacer,
+            @NonNull final RecyclerView.Adapter originalAdapter,
+            @NonNull final VisibilityTracker visibilityTracker) {
+        mViewPositionMap = new WeakHashMap<>();
+        mOriginalAdapter = originalAdapter;
+        mVisibilityTracker = visibilityTracker;
+        mVisibilityTracker.setVisibilityTrackerListener(new VisibilityTracker.VisibilityTrackerListener() {
+            @Override
+            public void onVisibilityChanged(final List<View> visibleViews,
+                    final List<View> invisibleViews) {
+                handleVisibilityChanged(visibleViews, invisibleViews);
+            }
+        });
+
+        setHasStableIdsInternal(mOriginalAdapter.hasStableIds());
+
+        mStreamAdPlacer = streamAdPlacer;
+        mStreamAdPlacer.setAdLoadedListener(new MoPubNativeAdLoadedListener() {
+            @Override
+            public void onAdLoaded(final int position) {
+                handleAdLoaded(position);
+            }
+
+            @Override
+            public void onAdRemoved(final int position) {
+                handleAdRemoved(position);
+            }
+        });
+        mStreamAdPlacer.setItemCount(mOriginalAdapter.getItemCount());
+
+        mAdapterDataObserver = new RecyclerView.AdapterDataObserver() {
+            @Override
+            public void onChanged() {
+                mStreamAdPlacer.setItemCount(mOriginalAdapter.getItemCount());
+                notifyDataSetChanged();
+            }
+
+            @Override
+            public void onItemRangeChanged(final int positionStart, final int itemCount) {
+                int adjustedEndPosition = mStreamAdPlacer.getAdjustedPosition(positionStart + itemCount - 1);
+                int adjustedStartPosition = mStreamAdPlacer.getAdjustedPosition(positionStart);
+                int adjustedCount = adjustedEndPosition - adjustedStartPosition + 1;
+                notifyItemRangeChanged(adjustedStartPosition, adjustedCount);
+            }
+
+            @Override
+            public void onItemRangeInserted(final int positionStart, final int itemCount) {
+                final int adjustedStartPosition = mStreamAdPlacer.getAdjustedPosition(positionStart);
+                final int newOriginalCount = mOriginalAdapter.getItemCount();
+                mStreamAdPlacer.setItemCount(newOriginalCount);
+                final boolean addingToEnd = positionStart + itemCount >= newOriginalCount;
+                if (KEEP_ADS_FIXED == mStrategy
+                        || (INSERT_AT_END == mStrategy
+                        && addingToEnd)) {
+                    notifyDataSetChanged();
+                } else {
+                    for (int i = 0; i < itemCount; i++) {
+                        // We insert itemCount items at the original position, moving ads downstream.
+                        mStreamAdPlacer.insertItem(positionStart);
+                    }
+                    notifyItemRangeInserted(adjustedStartPosition, itemCount);
+                }
+            }
+
+            @Override
+            public void onItemRangeRemoved(final int positionStart, final int itemsRemoved) {
+                int adjustedStartPosition = mStreamAdPlacer.getAdjustedPosition(positionStart);
+                final int newOriginalCount = mOriginalAdapter.getItemCount();
+                mStreamAdPlacer.setItemCount(newOriginalCount);
+                final boolean removingFromEnd = positionStart + itemsRemoved >= newOriginalCount;
+                if (KEEP_ADS_FIXED == mStrategy
+                        || (INSERT_AT_END == mStrategy
+                        && removingFromEnd)) {
+                    notifyDataSetChanged();
+                } else {
+                    final int oldAdjustedCount = mStreamAdPlacer.getAdjustedCount(newOriginalCount + itemsRemoved);
+                    for (int i = 0; i < itemsRemoved; i++) {
+                        // We remove itemsRemoved items at the original position.
+                        mStreamAdPlacer.removeItem(positionStart);
+                    }
+
+                    final int itemsRemovedIncludingAds = oldAdjustedCount - mStreamAdPlacer.getAdjustedCount(newOriginalCount);
+                    // Need to move the start position back by the # of ads removed.
+                    adjustedStartPosition -= itemsRemovedIncludingAds - itemsRemoved;
+                    notifyItemRangeRemoved(adjustedStartPosition, itemsRemovedIncludingAds);
+                }
+            }
+
+            @Override
+            public void onItemRangeMoved(final int fromPosition, final int toPosition,
+                    final int itemCount) {
+                notifyDataSetChanged();
+            }
+        };
+
+        mOriginalAdapter.registerAdapterDataObserver(mAdapterDataObserver);
+    }
+
+    @Override
+    public void onAttachedToRecyclerView(final RecyclerView recyclerView) {
+        super.onAttachedToRecyclerView(recyclerView);
+        mRecyclerView = recyclerView;
+    }
+
+    @Override
+    public void onDetachedFromRecyclerView(final RecyclerView recyclerView) {
+        super.onDetachedFromRecyclerView(recyclerView);
+        mRecyclerView = null;
+    }
+
+    /**
+     * Sets a listener that will be called after the SDK loads new ads from the server and places
+     * them into your stream.
+     *
+     * The listener will be active between when you call {@link #loadAds} and when you call
+     * destroy(). You can also set the listener to {@code null} to remove the listener.
+     *
+     * Note that there is not a one to one correspondence between calls to {@link #loadAds} and this
+     * listener. The SDK will call the listener every time an ad loads.
+     *
+     * @param listener The listener.
+     */
+    public void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
+        mAdLoadedListener = listener;
+    }
+
+    /**
+     * Registers a view binder for rendering "static" native ads with images.
+     */
+    public void registerViewBinder(@NonNull ViewBinder viewBinder) {
+        mStreamAdPlacer.registerAdRenderer(new MoPubNativeAdRenderer(viewBinder), NATIVE_AD_VIEW_TYPE_BASE + 1);
+    }
+
+    /**
+     * Start loading ads from the MoPub server.
+     *
+     * We recommend using {@link #loadAds(String, RequestParameters)} instead of this method, in
+     * order to pass targeting information to the server.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     */
+    public void loadAds(@NonNull String adUnitId) {
+        mStreamAdPlacer.loadAds(adUnitId);
+    }
+
+    /**
+     * Start loading ads from the MoPub server, using the given request targeting information.
+     *
+     * When loading ads, {@link MoPubNativeAdLoadedListener#onAdLoaded(int)} will be called for each
+     * ad that is added to the stream.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     * @param requestParameters Targeting information to pass to the ad server.
+     */
+    public void loadAds(@NonNull String adUnitId, @Nullable RequestParameters requestParameters) {
+        mStreamAdPlacer.loadAds(adUnitId, requestParameters);
+    }
+
+    public static int computeScrollOffset(@NonNull final LinearLayoutManager linearLayoutManager,
+            @Nullable final RecyclerView.ViewHolder holder) {
+        if (holder == null) {
+            return 0;
+        }
+        final View view = holder.itemView;
+
+        int offset = 0;
+        if (linearLayoutManager.canScrollVertically()) {
+            if (linearLayoutManager.getStackFromEnd()) {
+                offset = view.getBottom();
+            } else {
+                offset = view.getTop();
+            }
+        } else if (linearLayoutManager.canScrollHorizontally()) {
+            if (linearLayoutManager.getStackFromEnd()) {
+                offset = view.getRight();
+            } else {
+                offset = view.getLeft();
+            }
+        }
+
+        return offset;
+    }
+
+    /**
+     * Refreshes ads in the adapter while preserving the scroll position.
+     *
+     * Call this instead of {@link #loadAds(String, RequestParameters)} in order to preserve the
+     * scroll position in your view. Only usable with LinearLayoutManager or GridLayoutManager.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     */
+    public void refreshAds(@NonNull String adUnitId) {
+        refreshAds(adUnitId, null);
+    }
+
+    /**
+     * Refreshes ads in the adapter while preserving the scroll position.
+     *
+     * Call this instead of {@link #loadAds(String, RequestParameters)} in order to preserve the
+     * scroll position in your view. Only usable with LinearLayoutManager or GridLayoutManager.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     * @param requestParameters Targeting information to pass to the ad server.
+     */
+    public void refreshAds(@NonNull String adUnitId,
+            @Nullable RequestParameters requestParameters) {
+        if (mRecyclerView == null) {
+            MoPubLog.w("This adapter is not attached to a RecyclerView and cannot be refreshed.");
+            return;
+        }
+
+        final RecyclerView.LayoutManager layoutManager = mRecyclerView.getLayoutManager();
+        if (layoutManager == null) {
+            MoPubLog.w("Can't refresh ads when there is no layout manager on a RecyclerView.");
+            return;
+        }
+
+        if (layoutManager instanceof LinearLayoutManager) {
+            // Includes GridLayoutManager
+
+            // Get the range & offset of scroll position.
+            LinearLayoutManager linearLayoutManager = (LinearLayoutManager) layoutManager;
+            final int firstPosition = linearLayoutManager.findFirstVisibleItemPosition();
+            RecyclerView.ViewHolder holder = mRecyclerView.findViewHolderForLayoutPosition(firstPosition);
+            final int scrollOffset = computeScrollOffset(linearLayoutManager, holder);
+
+            // Calculate the range of ads not to remove ads from.
+            int startOfRange = Math.max(0, firstPosition - 1);
+            while (mStreamAdPlacer.isAd(startOfRange) && startOfRange > 0) {
+                startOfRange--;
+            }
+
+
+            final int itemCount = getItemCount();
+            int endOfRange = linearLayoutManager.findLastVisibleItemPosition();
+            while (mStreamAdPlacer.isAd(endOfRange) && endOfRange < itemCount - 1) {
+                endOfRange++;
+            }
+
+            final int originalStartOfRange = mStreamAdPlacer.getOriginalPosition(startOfRange);
+            final int originalEndOfRange = mStreamAdPlacer.getOriginalPosition(endOfRange);
+            final int endCount = mOriginalAdapter.getItemCount();
+
+            mStreamAdPlacer.removeAdsInRange(originalEndOfRange, endCount);
+            final int numAdsRemoved = mStreamAdPlacer.removeAdsInRange(0, originalStartOfRange);
+
+            if (numAdsRemoved > 0) {
+                linearLayoutManager.scrollToPositionWithOffset(firstPosition - numAdsRemoved, scrollOffset);
+            }
+
+            loadAds(adUnitId, requestParameters);
+        } else {
+            MoPubLog.w("This LayoutManager can't be refreshed.");
+            return;
+        }
+    }
+
+    /**
+     * Stops loading ads, immediately clearing any ads currently in the stream.
+     *
+     * This method also stops ads from loading as the user moves through the stream. When ads
+     * are cleared, {@link MoPubNativeAdLoadedListener#onAdRemoved} will be called for each ad
+     * that is removed from the stream.
+     */
+    public void clearAds() {
+        mStreamAdPlacer.clearAds();
+    }
+
+    /**
+     * Whether the given position is an ad.
+     *
+     * This will return {@code true} only if there is an ad loaded for this position. You can also
+     * listen for ads to load using {@link MoPubNativeAdLoadedListener#onAdLoaded(int)}.
+     *
+     * @param position The position to check for an ad, expressed in terms of the position in the
+     * stream including ads.
+     * @return Whether there is an ad at the given position.
+     */
+    public boolean isAd(final int position) {
+        return mStreamAdPlacer.isAd(position);
+    }
+
+    /**
+     * Returns the position of an item considering ads in the stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#getAdjustedPosition(int)}
+     * @param originalPosition The original position.
+     * @return The position adjusted by placing ads.
+     */
+    public int getAdjustedPosition(final int originalPosition) {
+        return mStreamAdPlacer.getAdjustedPosition(originalPosition);
+    }
+
+    /**
+     * Returns the original position of an item considering ads in the stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#getOriginalPosition(int)}
+     * @param position The adjusted position.
+     * @return The original position before placing ads.
+     */
+    public int getOriginalPosition(final int position) {
+        return mStreamAdPlacer.getOriginalPosition(position);
+    }
+
+    /**
+     * Sets the strategy this adapter should use for moving ads when content is added or removed
+     * from the wrapped original adapter. This strategy can be set at any time to change the
+     * behavior of the adapter.
+     * <ul>
+     * <li>{@link com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy#INSERT_AT_END}
+     *     will insert ads when content is added to the end of the stream. This is the default behavior
+     *     and the recommended strategy.</li>
+     * <li>{@link com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy#MOVE_ALL_ADS_WITH_CONTENT}
+     *     will cause all ad positions after an insertion or deletion to be adjusted. New
+     *     ads will not be displayed when items are added to the end of the stream.</li>
+     * <li>{@link com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy#KEEP_ADS_FIXED}
+     *     will never adjust ad positions when items are inserted or removed.</li>
+     * </ul>
+     */
+    public void setContentChangeStrategy(@NonNull ContentChangeStrategy strategy) {
+        if (!Preconditions.NoThrow.checkNotNull(strategy)) {
+            return;
+        }
+        mStrategy = strategy;
+    }
+
+    @Override
+    public int getItemCount() {
+        return mStreamAdPlacer.getAdjustedCount(mOriginalAdapter.getItemCount());
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
+        if (viewType >= NATIVE_AD_VIEW_TYPE_BASE && viewType <= NATIVE_AD_VIEW_TYPE_BASE + mStreamAdPlacer.getAdViewTypeCount()) {
+            // Create the view and a view holder.
+            final MoPubAdRenderer adRenderer = mStreamAdPlacer.getAdRendererForViewType(viewType);
+            if (adRenderer == null) {
+                MoPubLog.w("No view binder was registered for ads in MoPubRecyclerAdapter.");
+                // This will cause a null pointer exception.
+                return null;
+            }
+            return new MoPubRecyclerViewHolder(adRenderer.createAdView(parent.getContext(), parent));
+        }
+
+        return mOriginalAdapter.onCreateViewHolder(parent, viewType);
+    }
+
+    @Override
+    public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) {
+        Object adData = mStreamAdPlacer.getAdData(position);
+        if (adData != null) {
+            mStreamAdPlacer.bindAdView((NativeAdData) adData, holder.itemView);
+            return;
+        }
+
+        mViewPositionMap.put(holder.itemView, position);
+        mVisibilityTracker.addView(holder.itemView, 0);
+
+        //noinspection unchecked
+        mOriginalAdapter.onBindViewHolder(holder, mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    @Override
+    public int getItemViewType(final int position) {
+        int type = mStreamAdPlacer.getAdViewType(position);
+        if (type != MoPubStreamAdPlacer.CONTENT_VIEW_TYPE) {
+            return NATIVE_AD_VIEW_TYPE_BASE + type;
+        }
+
+        return mOriginalAdapter.getItemViewType(mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    @Override
+    public void setHasStableIds(final boolean hasStableIds) {
+        setHasStableIdsInternal(hasStableIds);
+
+        // We can only setHasStableIds when there are no observers on the adapter.
+        mOriginalAdapter.unregisterAdapterDataObserver(mAdapterDataObserver);
+        mOriginalAdapter.setHasStableIds(hasStableIds);
+        mOriginalAdapter.registerAdapterDataObserver(mAdapterDataObserver);
+    }
+
+    public void destroy() {
+        mOriginalAdapter.unregisterAdapterDataObserver(mAdapterDataObserver);
+        mStreamAdPlacer.destroy();
+        mVisibilityTracker.destroy();
+    }
+
+    /**
+     * Returns a stable negative item ID for ad items & calls getItemId on your original adapter for
+     * non-ad items.
+     *
+     * Returns {@link android.support.v7.widget.RecyclerView#NO_ID} if your original adapter does
+     * not have stable IDs.
+     *
+     * @inheritDoc
+     */
+    @Override
+    public long getItemId(final int position) {
+        if (!mOriginalAdapter.hasStableIds()) {
+            return RecyclerView.NO_ID;
+        }
+
+        final Object adData = mStreamAdPlacer.getAdData(position);
+        if (adData != null) {
+            return -System.identityHashCode(adData);
+        }
+
+        return mOriginalAdapter.getItemId(mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    // Notification methods to forward to the original adapter.
+    @Override
+    public boolean onFailedToRecycleView(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            return super.onFailedToRecycleView(holder);
+        }
+
+        // noinspection unchecked
+        return mOriginalAdapter.onFailedToRecycleView(holder);
+    }
+
+    @Override
+    public void onViewAttachedToWindow(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            super.onViewAttachedToWindow(holder);
+            return;
+        }
+
+        // noinspection unchecked
+        mOriginalAdapter.onViewAttachedToWindow(holder);
+    }
+
+    @Override
+    public void onViewDetachedFromWindow(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            super.onViewDetachedFromWindow(holder);
+            return;
+        }
+
+        // noinspection unchecked
+        mOriginalAdapter.onViewDetachedFromWindow(holder);
+    }
+
+    @Override
+    public void onViewRecycled(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            super.onViewRecycled(holder);
+            return;
+        }
+
+        // noinspection unchecked
+        mOriginalAdapter.onViewRecycled(holder);
+    }
+    // End forwarded methods.
+
+    @VisibleForTesting
+    void handleAdLoaded(final int position) {
+        if (mAdLoadedListener != null) {
+            mAdLoadedListener.onAdLoaded(position);
+        }
+
+        notifyItemInserted(position);
+    }
+
+    @VisibleForTesting
+    void handleAdRemoved(final int position) {
+        if (mAdLoadedListener != null) {
+            mAdLoadedListener.onAdRemoved(position);
+        }
+
+        notifyItemRemoved(position);
+    }
+
+    private void handleVisibilityChanged(final List<View> visibleViews,
+            final List<View> invisibleViews) {
+        // Loop through all visible positions in order to build a max and min range, and then
+        // place ads into that range.
+        int min = Integer.MAX_VALUE;
+        int max = 0;
+        for (final View view : visibleViews) {
+            final Integer pos = mViewPositionMap.get(view);
+            if (pos == null) {
+                continue;
+            }
+            min = Math.min(pos, min);
+            max = Math.max(pos, max);
+        }
+        mStreamAdPlacer.placeAdsInRange(min, max + 1);
+    }
+
+    /**
+     * Sets the hasStableIds value on this adapter only, not also on the wrapped adapter.
+     */
+    private void setHasStableIdsInternal(final boolean hasStableIds) {
+        super.setHasStableIds(hasStableIds);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
new file mode 100644
index 00000000..963f2ce5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
@@ -0,0 +1,11 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+
+public class MoPubRecyclerViewHolder extends RecyclerView.ViewHolder {
+    public MoPubRecyclerViewHolder(@NonNull final View itemView) {
+        super(itemView);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index d818211b..8664499b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -1,730 +1,759 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.Preconditions.NoThrow;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
-import com.mopub.nativeads.PositioningSource.PositioningListener;
-
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.WeakHashMap;
-
-/**
- * {@code MoPubStreamAdPlacer} facilitates loading ads and placing them into a content stream.
- *
- * If you are inserting ads into a ListView, we recommend that you use a {@link MoPubAdAdapter}
- * instead of this class.
- *
- * To start loading ads, call {@link #loadAds}. We recommend passing targeting information to
- * increase the chance that you show ads that are relevant to your users.
- *
- * This class is not intended to be used by multiple threads. All calls should be made from the main
- * UI thread.
- */
-public class MoPubStreamAdPlacer {
-    /**
-     * Constant representing that the view type for a given position is a regular content item
-     * instead of an ad.
-     */
-    public static final int CONTENT_VIEW_TYPE = 0;
-    private final static MoPubNativeAdLoadedListener EMPTY_NATIVE_AD_LOADED_LISTENER =
-            new MoPubNativeAdLoadedListener() {
-                @Override
-                public void onAdLoaded(final int position) {
-                }
-
-                @Override
-                public void onAdRemoved(final int position) {
-                }
-            };
-
-    @NonNull private final Context mContext;
-    @NonNull private final Handler mPlacementHandler;
-    @NonNull private final Runnable mPlacementRunnable;
-    @NonNull private final PositioningSource mPositioningSource;
-    @NonNull private final NativeAdSource mAdSource;
-    @NonNull private final ImpressionTracker mImpressionTracker;
-
-    @NonNull private final HashMap<NativeResponse, WeakReference<View>> mViewMap;
-    @NonNull private final WeakHashMap<View, NativeResponse> mNativeResponseMap;
-
-    private boolean mHasReceivedPositions;
-    @NonNull private PlacementData mPendingPlacementData;
-    private boolean mHasReceivedAds;
-    private boolean mHasPlacedAds;
-    @NonNull private PlacementData mPlacementData;
-    
-    @Nullable private MoPubAdRenderer mAdRenderer;
-    @Nullable private String mAdUnitId;
-
-    @NonNull private MoPubNativeAdLoadedListener mAdLoadedListener =
-            EMPTY_NATIVE_AD_LOADED_LISTENER;
-
-    // The visible range is the range of items which we believe are visible, inclusive.
-    // Placing ads near this range makes for a smoother user experience when scrolling up
-    // or down.
-    private static final int MAX_VISIBLE_RANGE = 100;
-    private int mVisibleRangeStart;
-    private int mVisibleRangeEnd;
-
-    private int mItemCount;
-    // A buffer around the visible range where we'll place ads if possible.
-    private static final int RANGE_BUFFER = 10;
-    private boolean mNeedsPlacement;
-
-    /**
-     * Creates a new MoPubStreamAdPlacer object.
-     *
-     * By default, the StreamAdPlacer will contact the server to determine ad positions. If you
-     * wish to hard-code positions in your app, see {@link MoPubStreamAdPlacer(Context,
-     * MoPubClientPositioning)}.
-     *
-     * @param context The activity context.
-     */
-    public MoPubStreamAdPlacer(@NonNull final Context context) {
-        // MoPubClientPositioning is mutable, so we must take care not to hold a
-        // reference to it that might be subsequently modified by the caller.
-        this(context, MoPubNativeAdPositioning.serverPositioning());
-    }
-
-    /**
-     * Creates a new MoPubStreamAdPlacer object, using server positioning.
-     *
-     * @param context The activity context.
-     * @param adPositioning A positioning object for specifying where ads will be placed in your
-     * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
-     */
-    public MoPubStreamAdPlacer(@NonNull final Context context,
-            @NonNull final MoPubServerPositioning adPositioning) {
-        this(context,
-                new NativeAdSource(),
-                new ImpressionTracker(context),
-                new ServerPositioningSource(context));
-    }
-
-    /**
-     * Creates a new MoPubStreamAdPlacer object, using client positioning.
-     *
-     * @param context The activity context.
-     * @param adPositioning A positioning object for specifying where ads will be placed in your
-     * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
-     */
-    public MoPubStreamAdPlacer(@NonNull final Context context,
-            @NonNull final MoPubClientPositioning adPositioning) {
-        // MoPubClientPositioning is mutable, so we must take care not to hold a
-        // reference to it that might be subsequently modified by the caller.
-        this(context,
-                new NativeAdSource(),
-                new ImpressionTracker(context),
-                new ClientPositioningSource(adPositioning));
-    }
-
-    @VisibleForTesting
-    MoPubStreamAdPlacer(@NonNull final Context context,
-            @NonNull final NativeAdSource adSource,
-            @NonNull final ImpressionTracker impressionTracker,
-            @NonNull final PositioningSource positioningSource) {
-        Preconditions.checkNotNull(context, "context is not allowed to be null");
-        Preconditions.checkNotNull(adSource, "adSource is not allowed to be null");
-        Preconditions.checkNotNull(impressionTracker, "impressionTracker is not allowed to be " +
-                "null");
-        Preconditions.checkNotNull(positioningSource, "positioningSource is not allowed to be " +
-                "null");
-
-        mContext = context;
-        mImpressionTracker = impressionTracker;
-        mPositioningSource = positioningSource;
-        mAdSource = adSource;
-        mPlacementData = PlacementData.empty();
-
-        mNativeResponseMap = new WeakHashMap<View, NativeResponse>();
-        mViewMap = new HashMap<NativeResponse, WeakReference<View>>();
-
-        mPlacementHandler = new Handler();
-        mPlacementRunnable = new Runnable() {
-            @Override
-            public void run() {
-                if (!mNeedsPlacement) {
-                    return;
-                }
-                placeAds();
-                mNeedsPlacement = false;
-            }
-        };
-
-        mVisibleRangeStart = 0;
-        mVisibleRangeEnd = 0;
-    }
-
-    /**
-     * Registers an ad renderer to use when displaying ads in your stream.
-     *
-     * This renderer will automatically create and render your view when you call {@link
-     * #getAdView}. If you register a second renderer, it will replace the first, although this
-     * behavior is subject to change in a future SDK version.
-     *
-     * @param adRenderer The ad renderer.
-     */
-    public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
-        if (!NoThrow.checkNotNull(adRenderer, "Cannot register a null adRenderer")) {
-            return;
-        }
-        mAdRenderer = adRenderer;
-    }
-
-    /**
-     * Sets a listener that will be called after the SDK loads new ads from the server and places
-     * them into your stream.
-     *
-     * The listener will be active between when you call {@link #loadAds} and when you call {@link
-     * #destroy()}. You can also set the listener to {@code null} to remove the listener.
-     *
-     * Note that there is not a one to one correspondence between calls to {@link #loadAds} and this
-     * listener. The SDK will call the listener every time an ad loads.
-     *
-     * @param listener The listener.
-     */
-    public void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
-        mAdLoadedListener = (listener == null) ? EMPTY_NATIVE_AD_LOADED_LISTENER : listener;
-    }
-
-    /**
-     * Start loading ads from the MoPub server.
-     *
-     * We recommend using {@link #loadAds(String, RequestParameters)} instead of this method, in
-     * order to pass targeting information to the server.
-     *
-     * @param adUnitId The ad unit ID to use when loading ads.
-     */
-    public void loadAds(@NonNull final String adUnitId) {
-        loadAds(adUnitId, /* requestParameters */ null);
-    }
-
-    /**
-     * Start loading ads from the MoPub server, using the given request targeting information.
-     *
-     * When loading ads, {@link MoPubNativeAdLoadedListener#onAdLoaded(int)} will be called for
-     * each ad that is added to the stream.
-     *
-     * To refresh ads in your stream, call {@code loadAds} again. When new ads load, they will
-     * replace the current ads in your stream. If you are using {@code MoPubNativeAdLoadedListener}
-     * you will see a call to {@code onAdRemoved} for each of the old ads, followed by a calls to
-     * {@code onAdLoaded}.
-     *
-     * @param adUnitId The ad unit ID to use when loading ads.
-     * @param requestParameters Targeting information to pass to the ad server.
-     */
-    public void loadAds(@NonNull final String adUnitId,
-            @Nullable final RequestParameters requestParameters) {
-        if (!NoThrow.checkNotNull(adUnitId, "Cannot load ads with a null ad unit ID")) {
-            return;
-        }
-
-        if (mAdRenderer == null) {
-            MoPubLog.w("You must call registerAdRenderer before loading ads");
-            return;
-        }
-
-        mAdUnitId = adUnitId;
-
-        mHasPlacedAds = false;
-        mHasReceivedPositions = false;
-        mHasReceivedAds = false;
-
-        mPositioningSource.loadPositions(adUnitId, new PositioningListener() {
-            @Override
-            public void onLoad(@NonNull final MoPubClientPositioning positioning) {
-                handlePositioningLoad(positioning);
-            }
-
-            @Override
-            public void onFailed() {
-                // This will happen only if positions couldn't be loaded after several tries
-                MoPubLog.d("Unable to show ads because ad positions could not be loaded from " +
-                        "the MoPub ad server.");
-            }
-        });
-
-        mAdSource.setAdSourceListener(new NativeAdSource.AdSourceListener() {
-            @Override
-            public void onAdsAvailable() {
-                handleAdsAvailable();
-            }
-        });
-
-        mAdSource.loadAds(mContext, adUnitId, requestParameters);
-    }
-
-    @VisibleForTesting
-    void handlePositioningLoad(@NonNull final MoPubClientPositioning positioning) {
-        PlacementData placementData = PlacementData.fromAdPositioning(positioning);
-        if (mHasReceivedAds) {
-            placeInitialAds(placementData);
-        } else {
-            mPendingPlacementData = placementData;
-        }
-        mHasReceivedPositions = true;
-    }
-
-    @VisibleForTesting
-    void handleAdsAvailable() {
-        // If we've already placed ads, just notify that we need placement.
-        if (mHasPlacedAds) {
-            notifyNeedsPlacement();
-            return;
-        }
-
-        // Otherwise, we may need to place initial ads.
-        if (mHasReceivedPositions) {
-            placeInitialAds(mPendingPlacementData);
-        }
-        mHasReceivedAds = true;
-    }
-
-    private void placeInitialAds(PlacementData placementData) {
-        // Remove ads that may be present and immediately place ads again. This prevents the UI
-        // from flashing grossly.
-        removeAdsInRange(0, mItemCount);
-
-        mPlacementData = placementData;
-        placeAds();
-        mHasPlacedAds = true;
-    }
-
-    /**
-     * Inserts ads that should appear in the given range.
-     *
-     * By default, the ad placer will place ads withing the first 10 positions in your stream,
-     * according to the positions you've specified. You can use this method as your user scrolls
-     * through your stream to place ads into the currently visible range.
-     *
-     * This method takes advantage of a short-lived in memory ad cache, and will immediately place
-     * any ads from the cache. If there are no ads in the cache, this method will load additional
-     * ads from the server and place them once they are loaded. If you call {@code placeAdsInRange}
-     * again before ads are retrieved from the server, the new ads will show in the new positions
-     * rather than the old positions.
-     *
-     * You can pass any integer as a startPosition and endPosition for the range, including negative
-     * numbers or numbers greater than the current stream item count. The ad placer will only place
-     * ads between 0 and item count.
-     *
-     * @param startPosition The start of the range in which to place ads, inclusive.
-     * @param endPosition The end of the range in which to place ads, exclusive.
-     */
-    public void placeAdsInRange(final int startPosition, final int endPosition) {
-        mVisibleRangeStart = startPosition;
-        mVisibleRangeEnd = Math.min(endPosition, startPosition + MAX_VISIBLE_RANGE);
-        notifyNeedsPlacement();
-    }
-
-    /**
-     * Whether the given position is an ad.
-     *
-     * This will return {@code true} only if there is an ad loaded for this position. You can listen
-     * for ads to load using {@link MoPubNativeAdLoadedListener#onAdLoaded(int)}.
-     *
-     * @param position The position to check for an ad, expressed in terms of the position in the
-     * stream including ads.
-     * @return Whether there is an ad at the given position.
-     */
-    public boolean isAd(final int position) {
-        return mPlacementData.isPlacedAd(position);
-    }
-
-    /**
-     * Stops loading ads, immediately clearing any ads currently in the stream.
-     *
-     * This method also stops ads from loading as the user moves through the stream. If you want to
-     * just remove ads but want to continue loading them, call {@link #removeAdsInRange(int, int)}.
-     *
-     * When ads are cleared, {@link MoPubNativeAdLoadedListener#onAdRemoved} will be called for each
-     * ad that is removed from the stream.
-     */
-    public void clearAds() {
-        removeAdsInRange(0, mItemCount);
-        mAdSource.clear();
-    }
-
-    /**
-     * Destroys the ad placer, preventing it from future use.
-     *
-     * You must call this method before the hosting activity for this class is destroyed in order to
-     * avoid a memory leak. Typically you should destroy the adapter in the life-cycle method that
-     * is counterpoint to the method you used to create the adapter. For example, if you created the
-     * adapter in {@code Fragment#onCreateView} you should destroy it in {code
-     * Fragment#onDestroyView}.
-     */
-    public void destroy() {
-        mPlacementHandler.removeMessages(0);
-        mAdSource.clear();
-        mImpressionTracker.destroy();
-        mPlacementData.clearAds();
-    }
-
-    /**
-     * Returns an ad data object, or {@code null} if there is no ad at this position.
-     *
-     * This method is useful when implementing your own Adapter using {@code MoPubStreamAdPlacer}.
-     * To avoid worrying about view type, consider using {@link MoPubAdAdapter} instead of this
-     * class.
-     *
-     * @param position The position where to place an ad.
-     * @return An object representing ad data.
-     */
-    @Nullable
-    public Object getAdData(final int position) {
-        return mPlacementData.getPlacedAd(position);
-    }
-
-    /**
-     * Gets the ad at the given position, or {@code null} if there is no ad at the given position.
-     *
-     * This method will attempt to reuse the convertView if it is not {@code null}, and will
-     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Context, ViewGroup)}.
-     *
-     * @param position The position to place an ad into.
-     * @param convertView A recycled view into which to render data, or {@code null}.
-     * @param parent The parent that the view will eventually be attached to.
-     * @return The newly placed ad view.
-     */
-    @Nullable
-    public View getAdView(final int position, @Nullable final View convertView,
-            @Nullable final ViewGroup parent) {
-        final NativeAdData adData = mPlacementData.getPlacedAd(position);
-        if (adData == null) {
-            return null;
-        }
-
-        final MoPubAdRenderer adRenderer = adData.getAdRenderer();
-        final View view = (convertView != null) ?
-                convertView : adRenderer.createAdView(mContext, parent);
-
-        NativeResponse nativeResponse = adData.getAd();
-        WeakReference<View> mappedViewRef = mViewMap.get(nativeResponse);
-        View mappedView = null;
-        if (mappedViewRef != null) {
-            mappedView = mappedViewRef.get();
-        }
-        if (!view.equals(mappedView)) {
-            clearNativeResponse(mappedView);
-            clearNativeResponse(view);
-            prepareNativeResponse(nativeResponse, view);
-            //noinspection unchecked
-            adRenderer.renderAdView(view, nativeResponse);
-        }
-
-        return view;
-    }
-
-    /**
-     * Removes ads in the given range from [originalStartPosition, originalEndPosition).
-     *
-     * @param originalStartPosition The start position to clear (inclusive), expressed as the original content
-     * position before ads were inserted.
-     * @param originalEndPosition The position after end position to clear (exclusive), expressed as the
-     * original content position before ads were inserted.
-     * @return The number of ads removed.
-     */
-    public int removeAdsInRange(int originalStartPosition, int originalEndPosition) {
-        int[] positions = mPlacementData.getPlacedAdPositions();
-
-        int adjustedStartRange = mPlacementData.getAdjustedPosition(originalStartPosition);
-        int adjustedEndRange = mPlacementData.getAdjustedPosition(originalEndPosition);
-
-        ArrayList<Integer> removedPositions = new ArrayList<Integer>();
-        // Traverse in reverse order to make this less error-prone for developers who are removing
-        // views directly from their UI.
-        for (int i = positions.length - 1; i >= 0; --i) {
-            int position = positions[i];
-            if (position < adjustedStartRange || position >= adjustedEndRange) {
-                continue;
-            }
-
-            removedPositions.add(position);
-
-            // Decrement the start range for any removed ads. We don't bother to decrement the end
-            // range, as it is OK if it isn't 100% accurate.
-            if (position < mVisibleRangeStart) {
-                mVisibleRangeStart--;
-            }
-            mItemCount--;
-        }
-
-        int clearedAdsCount = mPlacementData.clearAdsInRange(adjustedStartRange, adjustedEndRange);
-        for (int position : removedPositions) {
-            mAdLoadedListener.onAdRemoved(position);
-        }
-        return clearedAdsCount;
-    }
-
-    /**
-     * Returns the number of ad view types that can be placed by this ad placer. The number of
-     * possible ad view types is currently 1, but this is subject to change in future SDK versions.
-     *
-     * @return The number of ad view types.
-     * @see #getAdViewType
-     */
-    public int getAdViewTypeCount() {
-        return 1;
-    }
-
-    /**
-     * The ad view type for this position.
-     *
-     * Returns 0 if this is a regular content item. Otherwise, returns a number between 1 and {@link
-     * #getAdViewTypeCount}.
-     *
-     * This method is useful when implementing your own Adapter using {@code MoPubStreamAdPlacer}.
-     * To avoid worrying about view type, consider using {@link MoPubAdAdapter} instead of this
-     * class.
-     *
-     * @param position The stream position.
-     * @return The ad view type.
-     */
-    public int getAdViewType(final int position) {
-        return isAd(position) ? 1 : CONTENT_VIEW_TYPE;
-    }
-
-    /**
-     * Returns the original position of an item considering ads in the stream.
-     *
-     * For example if your stream looks like:
-     *
-     * {@code Item0 Ad Item1 Item2 Ad Item3 </code>
-     *
-     * {@code getOriginalPosition(5)} will return {@code 3}.
-     *
-     * @param position The adjusted position.
-     * @return The original position before placing ads.
-     */
-    public int getOriginalPosition(final int position) {
-        return mPlacementData.getOriginalPosition(position);
-    }
-
-    /**
-     * Returns the position of an item considering ads in the stream.
-     *
-     * @param originalPosition The original position.
-     * @return The position adjusted by placing ads.
-     */
-    public int getAdjustedPosition(final int originalPosition) {
-        return mPlacementData.getAdjustedPosition(originalPosition);
-    }
-
-    /**
-     * Returns the original number of items considering ads in the stream.
-     *
-     * @param count The number of items in the stream.
-     * @return The original number of items before placing ads.
-     */
-    public int getOriginalCount(final int count) {
-        return mPlacementData.getOriginalCount(count);
-    }
-
-    /**
-     * Returns the number of items considering ads in the stream.
-     *
-     * @param originalCount The original number of items.
-     * @return The number of items adjusted by placing ads.
-     */
-    public int getAdjustedCount(final int originalCount) {
-        return mPlacementData.getAdjustedCount(originalCount);
-    }
-
-    /**
-     * Sets the original number of items in your stream.
-     *
-     * You must call this method so that the placer knows where valid positions are to place ads.
-     * After calling this method, the ad placer will call {@link
-     * MoPubNativeAdLoadedListener#onAdLoaded (int)} each time an ad is loaded in the stream.
-     *
-     * @param originalCount The original number of items.
-     */
-    public void setItemCount(final int originalCount) {
-        mItemCount = mPlacementData.getAdjustedCount(originalCount);
-
-        // If we haven't already placed ads, we'll let ads get placed by the normal loadAds call
-        if (mHasPlacedAds) {
-            notifyNeedsPlacement();
-        }
-    }
-
-    /**
-     * Inserts a content row at the given position, adjusting ad positions accordingly.
-     *
-     * Use this method if you are inserting an item into your stream and want to increment ad
-     * positions based on that new item.
-     *
-     * For example if your stream looks like:
-     *
-     * {@code Item0 Ad Item1 Item2 Ad Item3}
-     *
-     * and you insert an item at position 2, your new stream will look like:
-     *
-     * {@code Item0 Ad Item1 Item2 NewItem Ad Item3}
-     *
-     * @param originalPosition The position at which to add an item. If you have an adjusted
-     * position, you will need to call {@link #getOriginalPosition} to get this value.
-     */
-    public void insertItem(final int originalPosition) {
-        mPlacementData.insertItem(originalPosition);
-    }
-
-    /**
-     * Removes the content row at the given position, adjusting ad positions accordingly.
-     *
-     * Use this method if you are removing an item from your stream and want to decrement ad
-     * positions based on that removed item.
-     *
-     * For example if your stream looks like:
-     *
-     * {@code Item0 Ad Item1 Item2 Ad Item3}
-     *
-     * and you remove an item at position 2, your new stream will look like:
-     *
-     * {@code Item0 Ad Item1 Ad Item3}
-     *
-     * @param originalPosition The position at which to add an item. If you have an adjusted
-     * position, you will need to call {@link #getOriginalPosition} to get this value.
-     */
-    public void removeItem(final int originalPosition) {
-        mPlacementData.removeItem(originalPosition);
-    }
-
-    /**
-     * Moves the content row at the given position adjusting ad positions accordingly.
-     *
-     * Use this method if you are moving an item in your stream and want to have ad positions move
-     * as well.
-     *
-     * For example if your stream looks like:
-     *
-     * {@code Item0 Ad Item1 Item2 Ad Item3}
-     *
-     * and you move item at position 2 to position 3, your new stream will look like:
-     *
-     * {@code Item0 Ad Item1 Ad Item3 Item2}
-     *
-     * @param originalPosition The position from which to move an item. If you have an adjusted
-     * position, you will need to call {@link #getOriginalPosition} to get this value.
-     * @param newPosition The new position, also expressed in terms of the original position.
-     */
-    public void moveItem(final int originalPosition, final int newPosition) {
-        mPlacementData.moveItem(originalPosition, newPosition);
-    }
-
-    private void notifyNeedsPlacement() {
-        // Avoid posting if this method has already been called.
-        if (mNeedsPlacement) {
-            return;
-        }
-        mNeedsPlacement = true;
-
-        // Post the placement to happen on the next UI render loop.
-        mPlacementHandler.post(mPlacementRunnable);
-    }
-
-    /**
-     * Places ads using the current visible range.
-     */
-    private void placeAds() {
-        // Place ads within the visible range
-        if (!tryPlaceAdsInRange(mVisibleRangeStart, mVisibleRangeEnd)) {
-            return;
-        }
-
-        // Place ads after the visible range so that user will see an ad if they scroll down. We
-        // don't place an ad before the visible range, because we are trying to be mindful of
-        // changes that will affect scrolling.
-        tryPlaceAdsInRange(mVisibleRangeEnd, mVisibleRangeEnd + RANGE_BUFFER);
-    }
-
-    /**
-     * Attempts to place ads in the range [start, end], returning false if there is no ad available
-     * to be placed.
-     *
-     * @param start The start of the range in which to place ads, inclusive.
-     * @param end The end of the range in which to place ads, exclusive.
-     * @return false if there is no ad available to be placed.
-     */
-    private boolean tryPlaceAdsInRange(final int start, final int end) {
-        int position = start;
-        int lastPosition = end - 1;
-        while (position <= lastPosition && position != PlacementData.NOT_FOUND) {
-            if (position >= mItemCount) {
-                break;
-            }
-            if (mPlacementData.shouldPlaceAd(position)) {
-                if (!tryPlaceAd(position)) {
-                    return false;
-                }
-                lastPosition++;
-            }
-            position = mPlacementData.nextInsertionPosition(position);
-        }
-        return true;
-    }
-
-    /**
-     * Attempts to place an ad at the given position, returning false if there is no ad available to
-     * be placed.
-     *
-     * @param position The position to place the ad at.
-     * @return false if there is no ad available to be placed.
-     */
-    private boolean tryPlaceAd(final int position) {
-        final NativeResponse adResponse = mAdSource.dequeueAd();
-        if (adResponse == null) {
-            return false;
-        }
-
-        final NativeAdData adData = createAdData(position, adResponse);
-        mPlacementData.placeAd(position, adData);
-        mItemCount++;
-
-        mAdLoadedListener.onAdLoaded(position);
-        return true;
-    }
-
-    @NonNull
-    private NativeAdData createAdData(final int position, @NonNull final NativeResponse adResponse) {
-        Preconditions.checkNotNull(mAdUnitId);
-        Preconditions.checkNotNull(mAdRenderer);
-
-        //noinspection ConstantConditions
-        return new NativeAdData(mAdUnitId, mAdRenderer, adResponse);
-    }
-
-    private void clearNativeResponse(@Nullable final View view) {
-        if (view == null) {
-            return;
-        }
-        mImpressionTracker.removeView(view);
-        final NativeResponse lastNativeResponse = mNativeResponseMap.get(view);
-        if (lastNativeResponse != null) {
-            lastNativeResponse.clear(view);
-            mNativeResponseMap.remove(view);
-            mViewMap.remove(lastNativeResponse);
-        }
-    }
-
-    private void prepareNativeResponse(@NonNull final NativeResponse nativeResponse, @NonNull final View view) {
-        mViewMap.put(nativeResponse, new WeakReference<View>(view));
-        mNativeResponseMap.put(view, nativeResponse);
-        if (!nativeResponse.isOverridingImpressionTracker()) {
-            mImpressionTracker.addView(view, nativeResponse);
-        }
-        nativeResponse.prepare(view);
-    }
-}
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.Preconditions.NoThrow;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
+import com.mopub.nativeads.PositioningSource.PositioningListener;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.WeakHashMap;
+
+/**
+ * {@code MoPubStreamAdPlacer} facilitates loading ads and placing them into a content stream.
+ *
+ * If you are inserting ads into a ListView, we recommend that you use a {@link MoPubAdAdapter}
+ * instead of this class.
+ *
+ * To start loading ads, call {@link #loadAds}. We recommend passing targeting information to
+ * increase the chance that you show ads that are relevant to your users.
+ *
+ * This class is not intended to be used by multiple threads. All calls should be made from the main
+ * UI thread.
+ */
+public class MoPubStreamAdPlacer {
+    /**
+     * Constant representing that the view type for a given position is a regular content item
+     * instead of an ad.
+     */
+    public static final int CONTENT_VIEW_TYPE = 0;
+    private static final int DEFAULT_AD_VIEW_TYPE = -1;
+    private final static MoPubNativeAdLoadedListener EMPTY_NATIVE_AD_LOADED_LISTENER =
+            new MoPubNativeAdLoadedListener() {
+                @Override
+                public void onAdLoaded(final int position) {
+                }
+
+                @Override
+                public void onAdRemoved(final int position) {
+                }
+            };
+
+    @NonNull private final Context mContext;
+    @NonNull private final Handler mPlacementHandler;
+    @NonNull private final Runnable mPlacementRunnable;
+    @NonNull private final PositioningSource mPositioningSource;
+    @NonNull private final NativeAdSource mAdSource;
+    @NonNull private final ImpressionTracker mImpressionTracker;
+
+    @NonNull private final HashMap<NativeResponse, WeakReference<View>> mViewMap;
+    @NonNull private final WeakHashMap<View, NativeResponse> mNativeResponseMap;
+
+    private boolean mHasReceivedPositions;
+    @Nullable private PlacementData mPendingPlacementData;
+    private boolean mHasReceivedAds;
+    private boolean mHasPlacedAds;
+    @NonNull private PlacementData mPlacementData;
+
+    private int adViewType = DEFAULT_AD_VIEW_TYPE;
+    @Nullable private MoPubAdRenderer mAdRenderer;
+    @Nullable private String mAdUnitId;
+
+    @NonNull private MoPubNativeAdLoadedListener mAdLoadedListener =
+            EMPTY_NATIVE_AD_LOADED_LISTENER;
+
+    // The visible range is the range of items which we believe are visible, inclusive.
+    // Placing ads near this range makes for a smoother user experience when scrolling up
+    // or down.
+    private static final int MAX_VISIBLE_RANGE = 100;
+    private int mVisibleRangeStart;
+    private int mVisibleRangeEnd;
+
+    private int mItemCount;
+    // A buffer around the visible range where we'll place ads if possible.
+    private static final int RANGE_BUFFER = 10;
+    private boolean mNeedsPlacement;
+
+    /**
+     * Creates a new MoPubStreamAdPlacer object.
+     *
+     * By default, the StreamAdPlacer will contact the server to determine ad positions. If you
+     * wish to hard-code positions in your app, see {@link MoPubStreamAdPlacer(Context,
+     * MoPubClientPositioning)}.
+     *
+     * @param context The activity context.
+     */
+    public MoPubStreamAdPlacer(@NonNull final Context context) {
+        // MoPubClientPositioning is mutable, so we must take care not to hold a
+        // reference to it that might be subsequently modified by the caller.
+        this(context, MoPubNativeAdPositioning.serverPositioning());
+    }
+
+    /**
+     * Creates a new MoPubStreamAdPlacer object, using server positioning.
+     *
+     * @param context The activity context.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
+     */
+    public MoPubStreamAdPlacer(@NonNull final Context context,
+            @NonNull final MoPubServerPositioning adPositioning) {
+        this(context,
+                new NativeAdSource(),
+                new ImpressionTracker(context),
+                new ServerPositioningSource(context));
+    }
+
+    /**
+     * Creates a new MoPubStreamAdPlacer object, using client positioning.
+     *
+     * @param context The activity context.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
+     */
+    public MoPubStreamAdPlacer(@NonNull final Context context,
+            @NonNull final MoPubClientPositioning adPositioning) {
+        // MoPubClientPositioning is mutable, so we must take care not to hold a
+        // reference to it that might be subsequently modified by the caller.
+        this(context,
+                new NativeAdSource(),
+                new ImpressionTracker(context),
+                new ClientPositioningSource(adPositioning));
+    }
+
+    @VisibleForTesting
+    MoPubStreamAdPlacer(@NonNull final Context context,
+            @NonNull final NativeAdSource adSource,
+            @NonNull final ImpressionTracker impressionTracker,
+            @NonNull final PositioningSource positioningSource) {
+        Preconditions.checkNotNull(context, "context is not allowed to be null");
+        Preconditions.checkNotNull(adSource, "adSource is not allowed to be null");
+        Preconditions.checkNotNull(impressionTracker, "impressionTracker is not allowed to be " +
+                "null");
+        Preconditions.checkNotNull(positioningSource, "positioningSource is not allowed to be " +
+                "null");
+
+        mContext = context;
+        mImpressionTracker = impressionTracker;
+        mPositioningSource = positioningSource;
+        mAdSource = adSource;
+        mPlacementData = PlacementData.empty();
+
+        mNativeResponseMap = new WeakHashMap<>();
+        mViewMap = new HashMap<>();
+
+        mPlacementHandler = new Handler();
+        mPlacementRunnable = new Runnable() {
+            @Override
+            public void run() {
+                if (!mNeedsPlacement) {
+                    return;
+                }
+                placeAds();
+                mNeedsPlacement = false;
+            }
+        };
+
+        mVisibleRangeStart = 0;
+        mVisibleRangeEnd = 0;
+    }
+
+    /**
+     * Registers an ad renderer to use when displaying ads in your stream.
+     *
+     * This renderer will automatically create and render your view when you call {@link
+     * #getAdView}. If you register a second renderer, it will replace the first, although this
+     * behavior is subject to change in a future SDK version.
+     *
+     * @param adRenderer The ad renderer.
+     */
+    public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
+        registerAdRenderer(adRenderer, -1);
+    }
+
+    public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer, int viewType) {
+        if (!NoThrow.checkNotNull(adRenderer, "Cannot register a null adRenderer")) {
+            return;
+        }
+        adViewType = viewType;
+        mAdRenderer = adRenderer;
+    }
+
+    @Nullable
+    public MoPubAdRenderer getAdRendererForViewType(int viewType) {
+        if (viewType == adViewType) {
+            return mAdRenderer;
+        }
+
+        return null;
+    }
+
+    /**
+     * Sets a listener that will be called after the SDK loads new ads from the server and places
+     * them into your stream.
+     *
+     * The listener will be active between when you call {@link #loadAds} and when you call {@link
+     * #destroy()}. You can also set the listener to {@code null} to remove the listener.
+     *
+     * Note that there is not a one to one correspondence between calls to {@link #loadAds} and this
+     * listener. The SDK will call the listener every time an ad loads.
+     *
+     * @param listener The listener.
+     */
+    public void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
+        mAdLoadedListener = (listener == null) ? EMPTY_NATIVE_AD_LOADED_LISTENER : listener;
+    }
+
+    /**
+     * Start loading ads from the MoPub server.
+     *
+     * We recommend using {@link #loadAds(String, RequestParameters)} instead of this method, in
+     * order to pass targeting information to the server.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     */
+    public void loadAds(@NonNull final String adUnitId) {
+        loadAds(adUnitId, /* requestParameters */ null);
+    }
+
+    /**
+     * Start loading ads from the MoPub server, using the given request targeting information.
+     *
+     * When loading ads, {@link MoPubNativeAdLoadedListener#onAdLoaded(int)} will be called for
+     * each ad that is added to the stream.
+     *
+     * To refresh ads in your stream, call {@code loadAds} again. When new ads load, they will
+     * replace the current ads in your stream. If you are using {@code MoPubNativeAdLoadedListener}
+     * you will see a call to {@code onAdRemoved} for each of the old ads, followed by a calls to
+     * {@code onAdLoaded}.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     * @param requestParameters Targeting information to pass to the ad server.
+     */
+    public void loadAds(@NonNull final String adUnitId,
+            @Nullable final RequestParameters requestParameters) {
+        if (!NoThrow.checkNotNull(adUnitId, "Cannot load ads with a null ad unit ID")) {
+            return;
+        }
+
+        if (mAdRenderer == null) {
+            MoPubLog.w("You must call registerAdRenderer before loading ads");
+            return;
+        }
+
+        mAdUnitId = adUnitId;
+
+        mHasPlacedAds = false;
+        mHasReceivedPositions = false;
+        mHasReceivedAds = false;
+
+        mPositioningSource.loadPositions(adUnitId, new PositioningListener() {
+            @Override
+            public void onLoad(@NonNull final MoPubClientPositioning positioning) {
+                handlePositioningLoad(positioning);
+            }
+
+            @Override
+            public void onFailed() {
+                // This will happen only if positions couldn't be loaded after several tries
+                MoPubLog.d("Unable to show ads because ad positions could not be loaded from " +
+                        "the MoPub ad server.");
+            }
+        });
+
+        mAdSource.setAdSourceListener(new NativeAdSource.AdSourceListener() {
+            @Override
+            public void onAdsAvailable() {
+                handleAdsAvailable();
+            }
+        });
+
+        mAdSource.loadAds(mContext, adUnitId, requestParameters);
+    }
+
+    @VisibleForTesting
+    void handlePositioningLoad(@NonNull final MoPubClientPositioning positioning) {
+        PlacementData placementData = PlacementData.fromAdPositioning(positioning);
+        if (mHasReceivedAds) {
+            placeInitialAds(placementData);
+        } else {
+            mPendingPlacementData = placementData;
+        }
+        mHasReceivedPositions = true;
+    }
+
+    @VisibleForTesting
+    void handleAdsAvailable() {
+        // If we've already placed ads, just notify that we need placement.
+        if (mHasPlacedAds) {
+            notifyNeedsPlacement();
+            return;
+        }
+
+        // Otherwise, we may need to place initial ads.
+        if (mHasReceivedPositions) {
+            placeInitialAds(mPendingPlacementData);
+        }
+        mHasReceivedAds = true;
+    }
+
+    private void placeInitialAds(PlacementData placementData) {
+        // Remove ads that may be present and immediately place ads again. This prevents the UI
+        // from flashing grossly.
+        removeAdsInRange(0, mItemCount);
+
+        mPlacementData = placementData;
+        placeAds();
+        mHasPlacedAds = true;
+    }
+
+    /**
+     * Inserts ads that should appear in the given range.
+     *
+     * By default, the ad placer will place ads withing the first 10 positions in your stream,
+     * according to the positions you've specified. You can use this method as your user scrolls
+     * through your stream to place ads into the currently visible range.
+     *
+     * This method takes advantage of a short-lived in memory ad cache, and will immediately place
+     * any ads from the cache. If there are no ads in the cache, this method will load additional
+     * ads from the server and place them once they are loaded. If you call {@code placeAdsInRange}
+     * again before ads are retrieved from the server, the new ads will show in the new positions
+     * rather than the old positions.
+     *
+     * You can pass any integer as a startPosition and endPosition for the range, including negative
+     * numbers or numbers greater than the current stream item count. The ad placer will only place
+     * ads between 0 and item count.
+     *
+     * @param startPosition The start of the range in which to place ads, inclusive.
+     * @param endPosition The end of the range in which to place ads, exclusive.
+     */
+    public void placeAdsInRange(final int startPosition, final int endPosition) {
+        mVisibleRangeStart = startPosition;
+        mVisibleRangeEnd = Math.min(endPosition, startPosition + MAX_VISIBLE_RANGE);
+        notifyNeedsPlacement();
+    }
+
+    /**
+     * Whether the given position is an ad.
+     *
+     * This will return {@code true} only if there is an ad loaded for this position. You can listen
+     * for ads to load using {@link MoPubNativeAdLoadedListener#onAdLoaded(int)}.
+     *
+     * @param position The position to check for an ad, expressed in terms of the position in the
+     * stream including ads.
+     * @return Whether there is an ad at the given position.
+     */
+    public boolean isAd(final int position) {
+        return mPlacementData.isPlacedAd(position);
+    }
+
+    /**
+     * Stops loading ads, immediately clearing any ads currently in the stream.
+     *
+     * This method also stops ads from loading as the user moves through the stream. If you want to
+     * just remove ads but want to continue loading them, call {@link #removeAdsInRange(int, int)}.
+     *
+     * When ads are cleared, {@link MoPubNativeAdLoadedListener#onAdRemoved} will be called for each
+     * ad that is removed from the stream.
+     */
+    public void clearAds() {
+        removeAdsInRange(0, mItemCount);
+        mAdSource.clear();
+    }
+
+    /**
+     * Destroys the ad placer, preventing it from future use.
+     *
+     * You must call this method before the hosting activity for this class is destroyed in order to
+     * avoid a memory leak. Typically you should destroy the adapter in the life-cycle method that
+     * is counterpoint to the method you used to create the adapter. For example, if you created the
+     * adapter in {@code Fragment#onCreateView} you should destroy it in {code
+     * Fragment#onDestroyView}.
+     */
+    public void destroy() {
+        mPlacementHandler.removeMessages(0);
+        mAdSource.clear();
+        mImpressionTracker.destroy();
+        mPlacementData.clearAds();
+    }
+
+    /**
+     * Returns an ad data object, or {@code null} if there is no ad at this position.
+     *
+     * This method is useful when implementing your own Adapter using {@code MoPubStreamAdPlacer}.
+     * To avoid worrying about view type, consider using {@link MoPubAdAdapter} instead of this
+     * class.
+     *
+     * @param position The position where to place an ad.
+     * @return An object representing ad data.
+     */
+    @Nullable
+    public Object getAdData(final int position) {
+        return mPlacementData.getPlacedAd(position);
+    }
+
+    /**
+     * Gets the ad at the given position, or {@code null} if there is no ad at the given position.
+     *
+     * This method will attempt to reuse the convertView if it is not {@code null}, and will
+     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Context, ViewGroup)}.
+     *
+     * @param position The position to place an ad into.
+     * @param convertView A recycled view into which to render data, or {@code null}.
+     * @param parent The parent that the view will eventually be attached to.
+     * @return The newly placed ad view.
+     */
+    @Nullable
+    public View getAdView(final int position, @Nullable final View convertView,
+            @Nullable final ViewGroup parent) {
+        final NativeAdData adData = mPlacementData.getPlacedAd(position);
+        if (adData == null) {
+            return null;
+        }
+
+        final View view = (convertView != null) ?
+                convertView : adData.getAdRenderer().createAdView(mContext, parent);
+        bindAdView(adData, view);
+        return view;
+    }
+
+    /**
+     * Given an ad and a view, attaches the ad data to the view and prepares the ad for display.
+     * @param adData the ad to bind.
+     * @param adView the view to bind it to.
+     */
+    public void bindAdView(@NonNull NativeAdData adData, @NonNull View adView) {
+        NativeResponse nativeResponse = adData.getAd();
+        WeakReference<View> mappedViewRef = mViewMap.get(nativeResponse);
+        View mappedView = null;
+        if (mappedViewRef != null) {
+            mappedView = mappedViewRef.get();
+        }
+        if (!adView.equals(mappedView)) {
+            clearNativeResponse(mappedView);
+            clearNativeResponse(adView);
+            prepareNativeResponse(nativeResponse, adView);
+            //noinspection unchecked
+            adData.getAdRenderer().renderAdView(adView, nativeResponse);
+        }
+    }
+
+    /**
+     * Removes ads in the given range from [originalStartPosition, originalEndPosition).
+     *
+     * @param originalStartPosition The start position to clear (inclusive), expressed as the original content
+     * position before ads were inserted.
+     * @param originalEndPosition The position after end position to clear (exclusive), expressed as the
+     * original content position before ads were inserted.
+     * @return The number of ads removed.
+     */
+    public int removeAdsInRange(int originalStartPosition, int originalEndPosition) {
+        int[] positions = mPlacementData.getPlacedAdPositions();
+
+        int adjustedStartRange = mPlacementData.getAdjustedPosition(originalStartPosition);
+        int adjustedEndRange = mPlacementData.getAdjustedPosition(originalEndPosition);
+
+        ArrayList<Integer> removedPositions = new ArrayList<>();
+        // Traverse in reverse order to make this less error-prone for developers who are removing
+        // views directly from their UI.
+        for (int i = positions.length - 1; i >= 0; --i) {
+            int position = positions[i];
+            if (position < adjustedStartRange || position >= adjustedEndRange) {
+                continue;
+            }
+
+            removedPositions.add(position);
+
+            // Decrement the start range for any removed ads. We don't bother to decrement the end
+            // range, as it is OK if it isn't 100% accurate.
+            if (position < mVisibleRangeStart) {
+                mVisibleRangeStart--;
+            }
+            mItemCount--;
+        }
+
+        int clearedAdsCount = mPlacementData.clearAdsInRange(adjustedStartRange, adjustedEndRange);
+        for (int position : removedPositions) {
+            mAdLoadedListener.onAdRemoved(position);
+        }
+        return clearedAdsCount;
+    }
+
+    /**
+     * Returns the number of ad view types that can be placed by this ad placer. The number of
+     * possible ad view types is currently 1, but this is subject to change in future SDK versions.
+     *
+     * @return The number of ad view types.
+     * @see #getAdViewType
+     */
+    public int getAdViewTypeCount() {
+        return 1;
+    }
+
+    /**
+     * The ad view type for this position.
+     *
+     * Returns 0 if this is a regular content item. Otherwise, returns a number between 1 and {@link
+     * #getAdViewTypeCount}.
+     *
+     * This method is useful when implementing your own Adapter using {@code MoPubStreamAdPlacer}.
+     * To avoid worrying about view type, consider using {@link MoPubAdAdapter} instead of this
+     * class.
+     *
+     * @param position The stream position.
+     * @return The ad view type.
+     */
+    public int getAdViewType(final int position) {
+        return isAd(position) ? 1 : CONTENT_VIEW_TYPE;
+    }
+
+    /**
+     * Returns the original position of an item considering ads in the stream.
+     *
+     * For example if your stream looks like:
+     *
+     * {@code Item0 Ad Item1 Item2 Ad Item3 </code>
+     *
+     * {@code getOriginalPosition(5)} will return {@code 3}.
+     *
+     * @param position The adjusted position.
+     * @return The original position before placing ads.
+     */
+    public int getOriginalPosition(final int position) {
+        return mPlacementData.getOriginalPosition(position);
+    }
+
+    /**
+     * Returns the position of an item considering ads in the stream.
+     *
+     * @param originalPosition The original position.
+     * @return The position adjusted by placing ads.
+     */
+    public int getAdjustedPosition(final int originalPosition) {
+        return mPlacementData.getAdjustedPosition(originalPosition);
+    }
+
+    /**
+     * Returns the original number of items considering ads in the stream.
+     *
+     * @param count The number of items in the stream.
+     * @return The original number of items before placing ads.
+     */
+    public int getOriginalCount(final int count) {
+        return mPlacementData.getOriginalCount(count);
+    }
+
+    /**
+     * Returns the number of items considering ads in the stream.
+     *
+     * @param originalCount The original number of items.
+     * @return The number of items adjusted by placing ads.
+     */
+    public int getAdjustedCount(final int originalCount) {
+        return mPlacementData.getAdjustedCount(originalCount);
+    }
+
+    /**
+     * Sets the original number of items in your stream.
+     *
+     * You must call this method so that the placer knows where valid positions are to place ads.
+     * After calling this method, the ad placer will call {@link
+     * MoPubNativeAdLoadedListener#onAdLoaded (int)} each time an ad is loaded in the stream.
+     *
+     * @param originalCount The original number of items.
+     */
+    public void setItemCount(final int originalCount) {
+        mItemCount = mPlacementData.getAdjustedCount(originalCount);
+
+        // If we haven't already placed ads, we'll let ads get placed by the normal loadAds call
+        if (mHasPlacedAds) {
+            notifyNeedsPlacement();
+        }
+    }
+
+    /**
+     * Inserts a content row at the given position, adjusting ad positions accordingly.
+     *
+     * Use this method if you are inserting an item into your stream and want to increment ad
+     * positions based on that new item.
+     *
+     * For example if your stream looks like:
+     *
+     * {@code Item0 Ad Item1 Item2 Ad Item3}
+     *
+     * and you insert an item at position 2, your new stream will look like:
+     *
+     * {@code Item0 Ad Item1 Item2 NewItem Ad Item3}
+     *
+     * @param originalPosition The position at which to add an item. If you have an adjusted
+     * position, you will need to call {@link #getOriginalPosition} to get this value.
+     */
+    public void insertItem(final int originalPosition) {
+        mPlacementData.insertItem(originalPosition);
+    }
+
+    /**
+     * Removes the content row at the given position, adjusting ad positions accordingly.
+     *
+     * Use this method if you are removing an item from your stream and want to decrement ad
+     * positions based on that removed item.
+     *
+     * For example if your stream looks like:
+     *
+     * {@code Item0 Ad Item1 Item2 Ad Item3}
+     *
+     * and you remove an item at position 2, your new stream will look like:
+     *
+     * {@code Item0 Ad Item1 Ad Item3}
+     *
+     * @param originalPosition The position at which to add an item. If you have an adjusted
+     * position, you will need to call {@link #getOriginalPosition} to get this value.
+     */
+    public void removeItem(final int originalPosition) {
+        mPlacementData.removeItem(originalPosition);
+    }
+
+    /**
+     * Moves the content row at the given position adjusting ad positions accordingly.
+     *
+     * Use this method if you are moving an item in your stream and want to have ad positions move
+     * as well.
+     *
+     * For example if your stream looks like:
+     *
+     * {@code Item0 Ad Item1 Item2 Ad Item3}
+     *
+     * and you move item at position 2 to position 3, your new stream will look like:
+     *
+     * {@code Item0 Ad Item1 Ad Item3 Item2}
+     *
+     * @param originalPosition The position from which to move an item. If you have an adjusted
+     * position, you will need to call {@link #getOriginalPosition} to get this value.
+     * @param newPosition The new position, also expressed in terms of the original position.
+     */
+    public void moveItem(final int originalPosition, final int newPosition) {
+        mPlacementData.moveItem(originalPosition, newPosition);
+    }
+
+    private void notifyNeedsPlacement() {
+        // Avoid posting if this method has already been called.
+        if (mNeedsPlacement) {
+            return;
+        }
+        mNeedsPlacement = true;
+
+        // Post the placement to happen on the next UI render loop.
+        mPlacementHandler.post(mPlacementRunnable);
+    }
+
+    /**
+     * Places ads using the current visible range.
+     */
+    private void placeAds() {
+        // Place ads within the visible range
+        if (!tryPlaceAdsInRange(mVisibleRangeStart, mVisibleRangeEnd)) {
+            return;
+        }
+
+        // Place ads after the visible range so that user will see an ad if they scroll down. We
+        // don't place an ad before the visible range, because we are trying to be mindful of
+        // changes that will affect scrolling.
+        tryPlaceAdsInRange(mVisibleRangeEnd, mVisibleRangeEnd + RANGE_BUFFER);
+    }
+
+    /**
+     * Attempts to place ads in the range [start, end], returning false if there is no ad available
+     * to be placed.
+     *
+     * @param start The start of the range in which to place ads, inclusive.
+     * @param end The end of the range in which to place ads, exclusive.
+     * @return false if there is no ad available to be placed.
+     */
+    private boolean tryPlaceAdsInRange(final int start, final int end) {
+        int position = start;
+        int lastPosition = end - 1;
+        while (position <= lastPosition && position != PlacementData.NOT_FOUND) {
+            if (position >= mItemCount) {
+                break;
+            }
+            if (mPlacementData.shouldPlaceAd(position)) {
+                if (!tryPlaceAd(position)) {
+                    return false;
+                }
+                lastPosition++;
+            }
+            position = mPlacementData.nextInsertionPosition(position);
+        }
+        return true;
+    }
+
+    /**
+     * Attempts to place an ad at the given position, returning false if there is no ad available to
+     * be placed.
+     *
+     * @param position The position to place the ad at.
+     * @return false if there is no ad available to be placed.
+     */
+    private boolean tryPlaceAd(final int position) {
+        final NativeResponse adResponse = mAdSource.dequeueAd();
+        if (adResponse == null) {
+            return false;
+        }
+
+        final NativeAdData adData = createAdData(adResponse);
+        mPlacementData.placeAd(position, adData);
+        mItemCount++;
+
+        mAdLoadedListener.onAdLoaded(position);
+        return true;
+    }
+
+    @NonNull
+    private NativeAdData createAdData(@NonNull final NativeResponse adResponse) {
+        Preconditions.checkNotNull(mAdUnitId);
+        Preconditions.checkNotNull(mAdRenderer);
+
+        //noinspection ConstantConditions
+        return new NativeAdData(mAdUnitId, mAdRenderer, adResponse);
+    }
+
+    /**
+     * Clears any native response click trackers and impression tracking are set up for this view.
+     */
+    private void clearNativeResponse(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+        mImpressionTracker.removeView(view);
+        final NativeResponse lastNativeResponse = mNativeResponseMap.get(view);
+        if (lastNativeResponse != null) {
+            lastNativeResponse.clear(view);
+            mNativeResponseMap.remove(view);
+            mViewMap.remove(lastNativeResponse);
+        }
+    }
+
+    /**
+     * Prepares a view and nativeresponse for display by attaching click handlers
+     * and setting up impression tracking.
+     */
+    private void prepareNativeResponse(@NonNull final NativeResponse nativeResponse, @NonNull final View view) {
+        mViewMap.put(nativeResponse, new WeakReference<View>(view));
+        mNativeResponseMap.put(view, nativeResponse);
+        if (!nativeResponse.isOverridingImpressionTracker()) {
+            mImpressionTracker.addView(view, nativeResponse);
+        }
+        nativeResponse.prepare(view);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
index 5ce005d5..3e9c1bd2 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
@@ -1,89 +1,100 @@
-package com.mopub.nativeads;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-
-class NativeViewHolder {
-    @Nullable TextView titleView;
-    @Nullable TextView textView;
-    @Nullable TextView callToActionView;
-    @Nullable ImageView mainImageView;
-    @Nullable ImageView iconImageView;
-
-    @VisibleForTesting
-    static final NativeViewHolder EMPTY_VIEW_HOLDER = new NativeViewHolder();
-
-    // Use fromViewBinder instead of a constructor
-    private NativeViewHolder() {}
-
-    @NonNull
-    static NativeViewHolder fromViewBinder(@NonNull final View view, @NonNull final ViewBinder viewBinder) {
-        final NativeViewHolder nativeViewHolder = new NativeViewHolder();
-
-        try {
-            nativeViewHolder.titleView = (TextView) view.findViewById(viewBinder.titleId);
-            nativeViewHolder.textView = (TextView) view.findViewById(viewBinder.textId);
-            nativeViewHolder.callToActionView = (TextView) view.findViewById(viewBinder.callToActionId);
-            nativeViewHolder.mainImageView = (ImageView) view.findViewById(viewBinder.mainImageId);
-            nativeViewHolder.iconImageView = (ImageView) view.findViewById(viewBinder.iconImageId);
-            return nativeViewHolder;
-        } catch (ClassCastException exception) {
-            MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
-            return EMPTY_VIEW_HOLDER;
-        }
-    }
-
-    void update(@NonNull final NativeResponse nativeResponse) {
-        addTextView(titleView, nativeResponse.getTitle());
-        addTextView(textView, nativeResponse.getText());
-        addTextView(callToActionView, nativeResponse.getCallToAction());
-        nativeResponse.loadMainImage(mainImageView);
-        nativeResponse.loadIconImage(iconImageView);
-    }
-
-    void updateExtras(@NonNull final View outerView,
-                      @NonNull final NativeResponse nativeResponse,
-                      @NonNull final ViewBinder viewBinder) {
-        for (final String key : viewBinder.extras.keySet()) {
-            final int resourceId = viewBinder.extras.get(key);
-            final View view = outerView.findViewById(resourceId);
-            final Object content = nativeResponse.getExtra(key);
-
-            if (view instanceof ImageView) {
-                // Clear previous image
-                ((ImageView) view).setImageDrawable(null);
-                nativeResponse.loadExtrasImage(key, (ImageView) view);
-            } else if (view instanceof TextView) {
-                // Clear previous text value
-                ((TextView) view).setText(null);
-                if (content instanceof String) {
-                    addTextView((TextView) view, (String) content);
-                }
-            } else {
-                MoPubLog.d("View bound to " + key + " should be an instance of TextView or ImageView.");
-            }
-        }
-    }
-
-    private void addTextView(@Nullable final TextView textView, @Nullable final String contents) {
-        if (textView == null) {
-            MoPubLog.d("Attempted to add text (" + contents + ") to null TextView.");
-            return;
-        }
-
-        // Clear previous value
-        textView.setText(null);
-
-        if (contents == null) {
-            MoPubLog.d("Attempted to set TextView contents to null.");
-        } else {
-            textView.setText(contents);
-        }
-    }
-}
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+class NativeViewHolder {
+    @Nullable View mainView;
+    @Nullable TextView titleView;
+    @Nullable TextView textView;
+    @Nullable TextView callToActionView;
+    @Nullable ImageView mainImageView;
+    @Nullable ImageView iconImageView;
+
+    @VisibleForTesting
+    static final NativeViewHolder EMPTY_VIEW_HOLDER = new NativeViewHolder();
+
+    // Use fromViewBinder instead of a constructor
+    private NativeViewHolder() {}
+
+    @NonNull
+    static NativeViewHolder fromViewBinder(@NonNull final View view,
+            @NonNull final ViewBinder viewBinder) {
+        final NativeViewHolder nativeViewHolder = new NativeViewHolder();
+        nativeViewHolder.mainView = view;
+        try {
+            nativeViewHolder.titleView = (TextView) view.findViewById(viewBinder.titleId);
+            nativeViewHolder.textView = (TextView) view.findViewById(viewBinder.textId);
+            nativeViewHolder.callToActionView = (TextView) view.findViewById(viewBinder.callToActionId);
+            nativeViewHolder.mainImageView = (ImageView) view.findViewById(viewBinder.mainImageId);
+            nativeViewHolder.iconImageView = (ImageView) view.findViewById(viewBinder.iconImageId);
+            return nativeViewHolder;
+        } catch (ClassCastException exception) {
+            MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
+            return EMPTY_VIEW_HOLDER;
+        }
+    }
+
+    void update(@NonNull final NativeResponse nativeResponse) {
+        addTextView(titleView, nativeResponse.getTitle());
+        addTextView(textView, nativeResponse.getText());
+        addTextView(callToActionView, nativeResponse.getCallToAction());
+        nativeResponse.loadMainImage(mainImageView);
+        nativeResponse.loadIconImage(iconImageView);
+    }
+
+    void updateExtras(@NonNull final NativeResponse nativeResponse,
+                      @NonNull final ViewBinder viewBinder) {
+        if (mainView == null) {
+            MoPubLog.w("Attempted to bind extras on a null main view.");
+            return;
+        }
+        for (final String key : viewBinder.extras.keySet()) {
+            final int resourceId = viewBinder.extras.get(key);
+            final View view = mainView.findViewById(resourceId);
+            final Object content = nativeResponse.getExtra(key);
+
+            if (view instanceof ImageView) {
+                // Clear previous image
+                ((ImageView) view).setImageDrawable(null);
+                nativeResponse.loadExtrasImage(key, (ImageView) view);
+            } else if (view instanceof TextView) {
+                // Clear previous text value
+                ((TextView) view).setText(null);
+                if (content instanceof String) {
+                    addTextView((TextView) view, (String) content);
+                }
+            } else {
+                MoPubLog.d("View bound to " + key + " should be an instance of TextView or ImageView.");
+            }
+        }
+    }
+
+    private void addTextView(@Nullable final TextView textView, @Nullable final String contents) {
+        if (textView == null) {
+            MoPubLog.d("Attempted to add text (" + contents + ") to null TextView.");
+            return;
+        }
+
+        // Clear previous value
+        textView.setText(null);
+
+        if (contents == null) {
+            MoPubLog.d("Attempted to set TextView contents to null.");
+        } else {
+            textView.setText(contents);
+        }
+    }
+
+    public void setViewVisibility(final int visibility) {
+        if (mainView != null) {
+            mainView.setVisibility(visibility);
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
index 8a6fedbd..7ec46197 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -1,155 +1,163 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.Constants;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.DeviceUtils;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.Networking;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.Response;
-import com.mopub.volley.VolleyError;
-
-/**
- * Requests positioning information from the MoPub ad server.
- *
- * The expected JSON format contains a set of rules for fixed and repeating positions. For example:
- * {
- *   fixed: [{
- *     position: 7
- *   }, {
- *     section : 1
- *     position: 6
- *   }],
- *   repeating:  {
- *     interval: 12
- *   }
- * }
- *
- * Both fixed and repeating rules are optional. If they exist they must follow the following
- * guidelines:
- *
- * fixed - contains a set of positioning objects, each with an optional section and a required
- * position. Section is used for iOS clients only, and non-zero sections are ignored on Android.
- *
- * repeating - contains a required interval, which must be 2 or greater.
- *
- * The JSON parsing logic treats any violations to the above spec as invalid,
- * rather than trying to continue with a partially valid response.
- */
-class ServerPositioningSource implements PositioningSource {
-
-    private static final double DEFAULT_RETRY_TIME_MILLISECONDS = 1000; // 1 second
-    private static final double EXPONENTIAL_BACKOFF_FACTOR = 2;
-
-    @VisibleForTesting
-    static int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
-
-    @NonNull private final Context mContext;
-
-    // Handler and runnable for retrying after a failed response.
-    @NonNull private final Handler mRetryHandler;
-    @NonNull private final Runnable mRetryRunnable;
-    private final Response.Listener<MoPubClientPositioning> mPositioningListener;
-    private final Response.ErrorListener mErrorListener;
-
-    @Nullable private PositioningListener mListener;
-    private int mRetryCount;
-    @Nullable private String mRetryUrl;
-    @Nullable private PositioningRequest mRequest;
-
-    ServerPositioningSource(@NonNull final Context context) {
-        mContext = context.getApplicationContext();
-
-        mRetryHandler = new Handler();
-        mRetryRunnable = new Runnable() {
-            @Override
-            public void run() {
-                requestPositioningInternal();
-            }
-        };
-
-        mPositioningListener = new Response.Listener<MoPubClientPositioning>() {
-            @Override
-            public void onResponse(final MoPubClientPositioning clientPositioning) {
-                handleSuccess(clientPositioning);
-            }
-        };
-
-        mErrorListener = new Response.ErrorListener() {
-            @Override
-            public void onErrorResponse(final VolleyError error) {
-                // Don't log a stack trace when we're just warming up.
-                if (!(error instanceof MoPubNetworkError) ||
-                        ((MoPubNetworkError) error).getReason().equals(MoPubNetworkError.Reason.WARMING_UP)) {
-                    MoPubLog.e("Failed to load positioning data", error);
-                    if (error.networkResponse == null && !DeviceUtils.isNetworkAvailable(mContext)) {
-                        MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
-                    }
-                }
-
-                handleFailure();
-            }
-        };
-    }
-
-    @Override
-    public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener) {
-        // If a request is in flight, remove it.
-        if (mRequest != null) {
-            mRequest.cancel();
-            mRequest = null;
-        }
-
-        // If a retry is pending remove it.
-        if (mRetryCount > 0) {
-            mRetryHandler.removeCallbacks(mRetryRunnable);
-            mRetryCount = 0;
-        }
-
-        mListener = listener;
-        mRetryUrl = new PositioningUrlGenerator(mContext)
-                .withAdUnitId(adUnitId)
-                .generateUrlString(Constants.HOST);
-        requestPositioningInternal();
-    }
-
-    private void requestPositioningInternal() {
-        MoPubLog.d("Loading positioning from: " + mRetryUrl);
-
-        mRequest = new PositioningRequest(mRetryUrl, mPositioningListener, mErrorListener);
-        final RequestQueue requestQueue = Networking.getRequestQueue(mContext);
-        requestQueue.add(mRequest);
-    }
-
-    private void handleSuccess(@NonNull MoPubClientPositioning positioning) {
-        if (mListener != null) {
-            mListener.onLoad(positioning);
-        }
-        mListener = null;
-        mRetryCount = 0;
-    }
-
-    private void handleFailure() {
-        double multiplier = Math.pow(EXPONENTIAL_BACKOFF_FACTOR, mRetryCount + 1);
-        int delay = (int) (DEFAULT_RETRY_TIME_MILLISECONDS * multiplier);
-        if (delay >= MAXIMUM_RETRY_TIME_MILLISECONDS) {
-            MoPubLog.d("Error downloading positioning information");
-            if (mListener != null) {
-                mListener.onFailed();
-            }
-            mListener = null;
-            return;
-        }
-
-        mRetryCount++;
-        mRetryHandler.postDelayed(mRetryRunnable, delay);
-    }
-}
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Constants;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+
+/**
+ * Requests positioning information from the MoPub ad server.
+ *
+ * The expected JSON format contains a set of rules for fixed and repeating positions. For example:
+ * {
+ *   fixed: [{
+ *     position: 7
+ *   }, {
+ *     section : 1
+ *     position: 6
+ *   }],
+ *   repeating:  {
+ *     interval: 12
+ *   }
+ * }
+ *
+ * Both fixed and repeating rules are optional. If they exist they must follow the following
+ * guidelines:
+ *
+ * fixed - contains a set of positioning objects, each with an optional section and a required
+ * position. Section is used for iOS clients only, and non-zero sections are ignored on Android.
+ *
+ * repeating - contains a required interval, which must be 2 or greater.
+ *
+ * The JSON parsing logic treats any violations to the above spec as invalid,
+ * rather than trying to continue with a partially valid response.
+ */
+class ServerPositioningSource implements PositioningSource {
+
+    private static final double DEFAULT_RETRY_TIME_MILLISECONDS = 1000; // 1 second
+    private static final double EXPONENTIAL_BACKOFF_FACTOR = 2;
+
+    // We allow the retry limit to be set per-instance for testing, but it is always initialized
+    // to this default.
+    private static final int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
+    private int mMaximumRetryTimeMillis = MAXIMUM_RETRY_TIME_MILLISECONDS;
+
+    @NonNull private final Context mContext;
+
+    // Handler and runnable for retrying after a failed response.
+    @NonNull private final Handler mRetryHandler;
+    @NonNull private final Runnable mRetryRunnable;
+    private final Response.Listener<MoPubClientPositioning> mPositioningListener;
+    private final Response.ErrorListener mErrorListener;
+
+    @Nullable private PositioningListener mListener;
+    private int mRetryCount;
+    @Nullable private String mRetryUrl;
+    @Nullable private PositioningRequest mRequest;
+
+    ServerPositioningSource(@NonNull final Context context) {
+        mContext = context.getApplicationContext();
+
+        mRetryHandler = new Handler();
+        mRetryRunnable = new Runnable() {
+            @Override
+            public void run() {
+                requestPositioningInternal();
+            }
+        };
+
+        mPositioningListener = new Response.Listener<MoPubClientPositioning>() {
+            @Override
+            public void onResponse(final MoPubClientPositioning clientPositioning) {
+                handleSuccess(clientPositioning);
+            }
+        };
+
+        mErrorListener = new Response.ErrorListener() {
+            @Override
+            public void onErrorResponse(final VolleyError error) {
+                // Don't log a stack trace when we're just warming up.
+                if (!(error instanceof MoPubNetworkError) ||
+                        ((MoPubNetworkError) error).getReason().equals(MoPubNetworkError.Reason.WARMING_UP)) {
+                    MoPubLog.e("Failed to load positioning data", error);
+                    if (error.networkResponse == null && !DeviceUtils.isNetworkAvailable(mContext)) {
+                        MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
+                    }
+                }
+
+                handleFailure();
+            }
+        };
+    }
+
+    @Override
+    public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener) {
+        // If a request is in flight, remove it.
+        if (mRequest != null) {
+            mRequest.cancel();
+            mRequest = null;
+        }
+
+        // If a retry is pending remove it.
+        if (mRetryCount > 0) {
+            mRetryHandler.removeCallbacks(mRetryRunnable);
+            mRetryCount = 0;
+        }
+
+        mListener = listener;
+        mRetryUrl = new PositioningUrlGenerator(mContext)
+                .withAdUnitId(adUnitId)
+                .generateUrlString(Constants.HOST);
+        requestPositioningInternal();
+    }
+
+    private void requestPositioningInternal() {
+        MoPubLog.d("Loading positioning from: " + mRetryUrl);
+
+        mRequest = new PositioningRequest(mRetryUrl, mPositioningListener, mErrorListener);
+        final RequestQueue requestQueue = Networking.getRequestQueue(mContext);
+        requestQueue.add(mRequest);
+    }
+
+    private void handleSuccess(@NonNull MoPubClientPositioning positioning) {
+        if (mListener != null) {
+            mListener.onLoad(positioning);
+        }
+        mListener = null;
+        mRetryCount = 0;
+    }
+
+    private void handleFailure() {
+        double multiplier = Math.pow(EXPONENTIAL_BACKOFF_FACTOR, mRetryCount + 1);
+        int delay = (int) (DEFAULT_RETRY_TIME_MILLISECONDS * multiplier);
+        if (delay >= mMaximumRetryTimeMillis) {
+            MoPubLog.d("Error downloading positioning information");
+            if (mListener != null) {
+                mListener.onFailed();
+            }
+            mListener = null;
+            return;
+        }
+
+        mRetryCount++;
+        mRetryHandler.postDelayed(mRetryRunnable, delay);
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setMaximumRetryTimeMilliseconds(int millis) {
+        mMaximumRetryTimeMillis = millis;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
index 97c4ea30..7786d4b2 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
@@ -1,129 +1,166 @@
-package com.mopub.network;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.volley.DefaultRetryPolicy;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Request;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.Response;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.HttpHeaderParser;
-
-import java.util.Arrays;
-
-public class TrackingRequest extends Request<Void> {
-
-    public interface Listener extends Response.ErrorListener {
-        public void onResponse(@NonNull String url);
-    }
-
-    @Nullable private final TrackingRequest.Listener mListener;
-
-    private TrackingRequest(@NonNull final String url, @Nullable final Listener listener) {
-        super(Method.GET, url, listener);
-        mListener = listener;
-        setShouldCache(false);
-        setRetryPolicy(new DefaultRetryPolicy(
-                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
-                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
-                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
-    }
-
-    @Override
-    protected Response<Void> parseNetworkResponse(final NetworkResponse networkResponse) {
-        if (networkResponse.statusCode != 200) {
-            return Response.error(
-                    new MoPubNetworkError("Failed to log tracking request. Response code: "
-                            + networkResponse.statusCode + " for url: " + getUrl(),
-                            MoPubNetworkError.Reason.TRACKING_FAILURE));
-        }
-        return Response.success(null, HttpHeaderParser.parseCacheHeaders(networkResponse));
-    }
-
-    @Override
-    public void deliverResponse(final Void aVoid) {
-        if (mListener != null) {
-            mListener.onResponse(getUrl());
-        }
-    }
-
-    ///////////////////////////////////////////////////////////////
-    // Static helper methods that can be used as utilities:
-    //////////////////////////////////////////////////////////////
-
-    public static void makeTrackingHttpRequest(final Iterable<String> urls, final Context context) {
-        makeTrackingHttpRequest(urls, context, null, null);
-    }
-
-    public static void makeTrackingHttpRequest(final Iterable<String> urls,
-            final Context context,
-            final BaseEvent.Name name) {
-        makeTrackingHttpRequest(urls, context, null, name);
-    }
-
-    public static void makeTrackingHttpRequest(final Iterable<String> urls,
-            final Context context,
-            @Nullable final Listener listener,
-            final BaseEvent.Name name) {
-        if (urls == null || context == null) {
-            return;
-        }
-
-        final RequestQueue requestQueue = Networking.getRequestQueue(context);
-        for (final String url : urls) {
-            if (TextUtils.isEmpty(url)) {
-                continue;
-            }
-
-            final TrackingRequest.Listener internalListener = new TrackingRequest.Listener() {
-                @Override
-                public void onResponse(@NonNull String url) {
-                    MoPubLog.d("Successfully hit tracking endpoint: " + url);
-                    if (listener != null) {
-                        listener.onResponse(url);
-                    }
-                }
-
-                @Override
-                public void onErrorResponse(final VolleyError volleyError) {
-                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
-                    if (listener != null) {
-                        listener.onErrorResponse(volleyError);
-                    }
-                }
-            };
-            final TrackingRequest trackingRequest = new TrackingRequest(url, internalListener);
-            requestQueue.add(trackingRequest);
-        }
-    }
-
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context) {
-        makeTrackingHttpRequest(url, context, null, null);
-    }
-
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context, @Nullable Listener listener) {
-        makeTrackingHttpRequest(url, context, listener, null);
-    }
-
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context, final BaseEvent.Name name) {
-        makeTrackingHttpRequest(url, context, null, name);
-    }
-
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context,
-            @Nullable Listener listener,
-            final BaseEvent.Name name) {
-        if (url != null) {
-            makeTrackingHttpRequest(Arrays.asList(url), context, listener, name);
-        }
-    }
-}
+package com.mopub.network;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.event.BaseEvent;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.VastErrorCode;
+import com.mopub.mobileads.VastMacroHelper;
+import com.mopub.mobileads.VastTracker;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class TrackingRequest extends Request<Void> {
+
+    public interface Listener extends Response.ErrorListener {
+        public void onResponse(@NonNull String url);
+    }
+
+    @Nullable private final TrackingRequest.Listener mListener;
+
+    private TrackingRequest(@NonNull final String url, @Nullable final Listener listener) {
+        super(Method.GET, url, listener);
+        mListener = listener;
+        setShouldCache(false);
+        setRetryPolicy(new DefaultRetryPolicy(
+                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
+                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
+                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
+    }
+
+    @Override
+    protected Response<Void> parseNetworkResponse(final NetworkResponse networkResponse) {
+        if (networkResponse.statusCode != 200) {
+            return Response.error(
+                    new MoPubNetworkError("Failed to log tracking request. Response code: "
+                            + networkResponse.statusCode + " for url: " + getUrl(),
+                            MoPubNetworkError.Reason.TRACKING_FAILURE));
+        }
+        return Response.success(null, HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    public void deliverResponse(final Void aVoid) {
+        if (mListener != null) {
+            mListener.onResponse(getUrl());
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////
+    // Static helper methods that can be used as utilities:
+    //////////////////////////////////////////////////////////////
+
+    public static void makeVastTrackingHttpRequest(
+            @NonNull final List<VastTracker> vastTrackers,
+            @Nullable final VastErrorCode vastErrorCode,
+            @Nullable final Integer contentPlayHead,
+            @Nullable final String assetUri,
+            @Nullable final Context context) {
+        Preconditions.checkNotNull(vastTrackers);
+
+        List<String> trackers = new ArrayList<String>(vastTrackers.size());
+        for (VastTracker vastTracker : vastTrackers) {
+            if (vastTracker == null) {
+                continue;
+            }
+            if (vastTracker.isTracked() && !vastTracker.isRepeatable()) {
+                continue;
+            }
+            trackers.add(vastTracker.getTrackingUrl());
+            vastTracker.setTracked();
+        }
+
+        makeTrackingHttpRequest(
+                new VastMacroHelper(trackers)
+                        .withErrorCode(vastErrorCode)
+                        .withContentPlayHead(contentPlayHead)
+                        .withAssetUri(assetUri)
+                        .getUris(),
+                context
+        );
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context) {
+        makeTrackingHttpRequest(urls, context, null, null);
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context,
+            final BaseEvent.Name name) {
+        makeTrackingHttpRequest(urls, context, null, name);
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context,
+            @Nullable final Listener listener,
+            final BaseEvent.Name name) {
+        if (urls == null || context == null) {
+            return;
+        }
+
+        final RequestQueue requestQueue = Networking.getRequestQueue(context);
+        for (final String url : urls) {
+            if (TextUtils.isEmpty(url)) {
+                continue;
+            }
+
+            final TrackingRequest.Listener internalListener = new TrackingRequest.Listener() {
+                @Override
+                public void onResponse(@NonNull String url) {
+                    MoPubLog.d("Successfully hit tracking endpoint: " + url);
+                    if (listener != null) {
+                        listener.onResponse(url);
+                    }
+                }
+
+                @Override
+                public void onErrorResponse(final VolleyError volleyError) {
+                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
+                    if (listener != null) {
+                        listener.onErrorResponse(volleyError);
+                    }
+                }
+            };
+            final TrackingRequest trackingRequest = new TrackingRequest(url, internalListener);
+            requestQueue.add(trackingRequest);
+        }
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context) {
+        makeTrackingHttpRequest(url, context, null, null);
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context, @Nullable Listener listener) {
+        makeTrackingHttpRequest(url, context, listener, null);
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context, final BaseEvent.Name name) {
+        makeTrackingHttpRequest(url, context, null, name);
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context,
+            @Nullable Listener listener,
+            final BaseEvent.Name name) {
+        if (url != null) {
+            makeTrackingHttpRequest(Arrays.asList(url), context, listener, name);
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
new file mode 100644
index 00000000..bc18e40a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -0,0 +1,171 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.webkit.WebView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.doCallRealMethod;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class BrowserWebViewClientTest {
+
+    private final WebView MOOT_WEB_VIEW = null;
+
+    private BrowserWebViewClient subject;
+    private Context context;
+    private MoPubBrowser mockMoPubBrowser;
+    private WebView mockWebView;
+
+    @Before
+    public void setUp() {
+        mockMoPubBrowser = mock(MoPubBrowser.class);
+        context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
+        mockWebView = mock(WebView.class);
+
+        doCallRealMethod().when(mockMoPubBrowser).setWebView(mockWebView);
+        doCallRealMethod().when(mockMoPubBrowser).getWebView();
+        when(mockMoPubBrowser.getApplicationContext()).thenReturn(context);
+
+        mockMoPubBrowser.setWebView(mockWebView);
+        subject = new BrowserWebViewClient(mockMoPubBrowser);
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withHTTPUrl_shouldReturnTrue_shouldLoadUrl() {
+        final String url = "http://twitter.com";
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView).loadUrl(url);
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withTelUrl_shouldReturnTrue_shouldFinish() {
+        final String url = "tel:123456789";
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkUrl_shouldReturnTrue_shouldFinish() {
+        final String url = "twitter://timeline";
+
+        makeDeeplinkResolvable(url);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withSuccessfulPrimaryUrl_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "twitter://timeline";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
+
+        makeDeeplinkResolvable(primaryUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withHTTPFallbackUrl_shouldReturnTrue_shouldLoadFallbackUrl_shouldNotFinish() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "http://twitter.com";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView).loadUrl(fallbackUrl);
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withTelFallbackUrl_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "tel:123456789";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, times(1)).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withDeeplinkFallbackUrl_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "twitter://timeline";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        makeDeeplinkResolvable(fallbackUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, times(1)).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withEncodedQueryString_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "ebay://launch?nav=home&referrer=http%3A%2F%2Frover.ebay.com%2Frover%2F1%2F711-212056-53654-1%2F4%3Fmpt%3Dcache_buster%26ff6%3Dclick_id%26ff7%3Difa%26ff9%3Dsegment_name%26ff18%3Dcreative_name%26siteid%3D0%26ipn%3Dadmain2%26placement%3D418737%26ck%3D23932_main%26mpvc%3D";
+        final String fallbackUrl = "http://ebay.com";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        makeDeeplinkResolvable(primaryUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, times(1)).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withEmptyUrl_shouldReturnFalse_shouldDoNothing() {
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, "")).isFalse();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withNullUrl_shouldReturnFalse_shouldDoNothing() {
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, null)).isFalse();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withoutMatchingSupporedUrl_shouldReturnFalse_shouldDoNothing() {
+        final String url = "mopubscheme://close";
+        subject = new BrowserWebViewClient(mockMoPubBrowser);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isFalse();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    private void makeDeeplinkResolvable(String deeplink) {
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+                Uri.parse(deeplink)), new ResolveInfo());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
index e5228497..41e8f54c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
@@ -10,6 +10,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -23,12 +24,11 @@
 
     @Before
     public void setUp() {
-        subject = new MoPubBrowser();
+        subject = Robolectric.buildActivity(MoPubBrowser.class).create().get();
         CookieSyncManager.createInstance(subject);
 
         mockWebView = mock(WebView.class);
         subject.setWebView(mockWebView);
-        // In the Gradle testing regime we will change these to build MoPubBrowser as an activity using Robolectric.
     }
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 6002c333..962cd8c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -8,6 +8,8 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -16,15 +18,19 @@
 import org.robolectric.Robolectric;
 
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
 import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
 import static com.mopub.common.UrlAction.HANDLE_PHONE_SCHEME;
 import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
 import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
 import static com.mopub.common.UrlAction.NOOP;
+import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
 import static com.mopub.common.UrlAction.OPEN_IN_APP_BROWSER;
 import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
-import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
@@ -33,6 +39,7 @@
     private Context context;
     @Mock private UrlHandler.ResultActions mockResultActions;
     @Mock private UrlHandler.MoPubSchemeListener mockMoPubSchemeListener;
+    @Mock private MoPubRequestQueue mockRequestQueue;
 
     @Before
     public void setUp() throws Exception {
@@ -232,8 +239,7 @@ public void urlHandler_withMatchingShareUrl_shouldCallOnClickSuccess_shouldStart
     @Test
     public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldStartActivity() {
         final String deepLinkUrl = "appscheme://host";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deepLinkUrl)), new ResolveInfo());
+        makeDeeplinkResolvable(deepLinkUrl);
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(FOLLOW_DEEP_LINK)
@@ -248,6 +254,262 @@ public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldSt
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(deepLinkUrl));
     }
 
+    @Test
+    public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldStartActivity() {
+        final String primaryUrl = "twitter://timeline";
+        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
+        makeDeeplinkResolvable("twitter://timeline");
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, deeplinkPlusUrl);
+
+        verify(mockResultActions).urlHandlingSucceeded(deeplinkPlusUrl, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(startedActivity.getData()).isEqualTo(Uri.parse(primaryUrl));
+    }
+
+    @Test
+    public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withResolvableFallback_shouldCallOnClickSuccess_shouldStartActivity() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "http://twitter.com";
+        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, deeplinkPlusUrl);
+
+        verify(mockResultActions).urlHandlingSucceeded(fallbackUrl, OPEN_IN_APP_BROWSER);
+        verifyNoMoreCallbacks();
+        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo(MoPubBrowser.class.getName());
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo(fallbackUrl);
+    }
+
+    @Test
+    public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withUnresolvableFallback_shouldAttemptAsDeeplink() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "unresolvableUrl";
+        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+        makeDeeplinkResolvable(deeplinkPlusUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, FOLLOW_DEEP_LINK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, deeplinkPlusUrl);
+
+        // There should really be only one of these fired at a time, but this is such an edge-case
+        // that we're not fixing at the moment (see ADF-1700).
+        verify(mockResultActions).urlHandlingFailed(fallbackUrl, NOOP);
+        verify(mockResultActions).urlHandlingSucceeded(deeplinkPlusUrl, FOLLOW_DEEP_LINK);
+        verifyNoMoreCallbacks();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_shouldTriggerPrimaryTracker() {
+        final String primaryUrl = "twitter://timeline";
+        final String primaryTracker = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackUrl = "http://twitter.com";
+        final String fallbackTracker =
+                "http://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker);
+        makeDeeplinkResolvable(primaryUrl);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .build().handleUrl(context, url);
+
+        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker)));
+        verify(mockRequestQueue, never()).add(argThat(isUrl(fallbackTracker)));
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_shouldTriggerMultiplePrimaryTrackers() {
+        final String primaryUrl = "twitter://timeline";
+        final String primaryTracker1 = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String primaryTracker2 = "http://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker1)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker2);
+        makeDeeplinkResolvable(primaryUrl);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .build().handleUrl(context, url);
+
+        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker1)));
+        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker2)));
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerFallbackTracker() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "http://twitter.com";
+        final String primaryTracker = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackTracker =
+                "http://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
+                .build().handleUrl(context, url);
+
+        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker)));
+        verify(mockRequestQueue, never()).add(argThat(isUrl(primaryTracker)));
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerMultiplePrimaryTrackers() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "http://twitter.com";
+        final String fallbackTracker1 = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackTracker2 = "http://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker1)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker2);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
+                .build().handleUrl(context, url);
+
+        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker1)));
+        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker2)));
+    }
+
+    @Test
+    public void urlHandler_withUppercasedDeeplinkPlus_shouldBeHandled() {
+        final String primaryUrl = "twitter://timeline";
+        final String url = "DeEpLiNk+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
+        makeDeeplinkResolvable(primaryUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingSucceeded(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+    }
+
+    @Test
+    public void urlHandler_withdDeeplinkPlus_withUppercasedNavigate_shouldBeHandled() {
+        final String primaryUrl = "twitter://timeline";
+        final String url = "deeplink+://NaViGaTe?primaryUrl=" + Uri.encode(primaryUrl);
+        makeDeeplinkResolvable(primaryUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingSucceeded(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+    }
+
+    @Test
+    public void urlHandler_withoutMatchingDeeplinkPlus_shouldDoNothing() {
+        final String url = "NOTdeeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingFailed(url, NOOP);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withoutNavigate_shouldDoNothing() {
+        final String url = "deeplink+://NOTnavigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withNestedDeeplinkPlus_shouldDoNothing() {
+        final String deeplink = "deeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(deeplink);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withDeeplinkPlusAsFallback_shouldDoNothing() {
+        final String deeplink = "deeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+        final String url = "deeplink+://navigate?primaryUrl=missingApp%3A%2F%2FsomePath"
+                + "&fallbackUrl=" + Uri.encode(deeplink);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withInvalidPrimaryUrl_shouldDoNothing() {
+        final String url = "deeplink+://navigate?primaryUrl=INVALID";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withDecodedPrimaryUrl_shouldDoNothing() {
+        final String url = "deeplink+://navigate?primaryUrl=twitter://timeline";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, url);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
     @Test
     public void urlHandler_withDualMatchingUnresolvableUrlActions_shouldCallOnClickFailOnLastMatchedAction() {
         final String url = "mopub://invalid";
@@ -392,8 +654,7 @@ public void urlHandler_withoutMatchingMoPubSchemeUrlAction_shouldCallUrlHandling
     @Test
     public void urlHandler_withoutMatchingDeepLinkUrlAction_shouldCallUrlHandlingFailed() {
         final String deepLinkUrl = "appscheme://host";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deepLinkUrl)), new ResolveInfo());
+        makeDeeplinkResolvable(deepLinkUrl);
         assertCallbackWithoutMatchingSupportedUrlAction(deepLinkUrl, IGNORE_ABOUT_SCHEME,
                 HANDLE_MOPUB_SCHEME, OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER,
                 HANDLE_SHARE_TWEET);
@@ -561,8 +822,7 @@ public void urlHandler_withMatchingUnresolvableDeepLinkUrl_shouldCallUrlHandling
         final String deepLinkUrl = "appscheme://host";
         // The following code would make this url resolvable, so avoiding it to test for an
         // unresolvable url (yet included for documentation purposes).
-        //  Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-        //          Uri.parse(deepLinkUrl)), new ResolveInfo());
+        //makeDeeplinkResolvable(deepLinkUrl);
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(FOLLOW_DEEP_LINK)
@@ -606,7 +866,7 @@ private void assertCallbackWithoutMatchingUrl(@NonNull final UrlAction urlAction
     private void assertCallbackWithoutMatchingSupportedUrlAction(@NonNull final String url,
             @NonNull final UrlAction... otherTypes) {
         new UrlHandler.Builder()
-                .withSupportedUrlActions(UrlAction.NOOP, otherTypes)
+                .withSupportedUrlActions(NOOP, otherTypes)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
                 .build().handleUrl(context, url);
@@ -622,4 +882,9 @@ private void verifyNoMoreCallbacks() {
     private void verifyNoStartedActivity() {
         assertThat(Robolectric.getShadowApplication().peekNextStartedActivity()).isNull();
     }
+
+    private void makeDeeplinkResolvable(String deeplink) {
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+                Uri.parse(deeplink)), new ResolveInfo());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
index b2fefd3f..06b45148 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.common.util;
 
 import android.app.Activity;
@@ -117,3 +118,140 @@ public void lockOrientation_toPortraitWhenLandscape_shouldBeLandscape() {
         assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
     }
 }
+=======
+package com.mopub.common.util;
+
+import android.app.Activity;
+import android.content.pm.ActivityInfo;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.view.Surface;
+
+import com.mopub.common.CreativeOrientation;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.nativeads.test.support.MoPubShadowDisplay;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class DeviceUtilsTest {
+
+    private Activity testActivity;
+    private Resources testResources;
+
+    @Before
+    public void setup() {
+        testActivity = Robolectric.buildActivity(Activity.class).create().get();
+        testResources = testActivity.getResources();
+    }
+
+    @Test
+    public void getOrientation_whenReverseLandscape_shouldReturnReverseLandscape() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_270);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
+    }
+
+    @Test
+    public void getOrientation_whenLandscape_shouldReturnLandscape() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_90);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void getOrientation_whenPortrait_shouldReturnPortrait() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_0);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void getOrientation_whenAlsoPortrait_shouldReturnPortrait() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_270);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void getOrientation_whenReversePortrait_shouldReturnReversePortrait() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+    }
+
+    @Test
+    public void getOrientation_whenAlsoReversePortrait_shouldReturnReversePortrait() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_90);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+    }
+    
+    @Test
+    public void lockOrientation_toLandscapeWhenLandscape_shouldRemainTheSame() throws Exception {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_90);
+
+        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.LANDSCAPE);
+        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void lockOrientation_toLandscapeWhenReverseLandscape_shouldBeReverseLandscape() {
+
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);  // Reverse landscape
+
+        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.LANDSCAPE);
+        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
+    }
+
+    @Test
+    public void lockOrientation_toLandscapeWhenPortrait_shouldBeLandscape() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);  // Reverse portrait
+
+        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.LANDSCAPE);
+        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void lockOrientation_toPortraitWhenPortrait_shouldRemainPortrait() {
+
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_0);
+
+        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.PORTRAIT);
+        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void lockOrientation_toPortraitWhenReversePortrait_shouldRemainReversePortrait() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);
+
+        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.PORTRAIT);
+        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+    }
+
+    @Test
+    public void lockOrientation_toPortraitWhenLandscape_shouldBeLandscape() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_0);  // Reverse landscape
+
+        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.PORTRAIT);
+        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
index d875d88d..11a8170f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.common.util;
 
 import android.app.Activity;
@@ -56,4 +57,77 @@ public void parseDouble_withInvalidObjectType_shouldThrowClassCastException() th
             // pass
         }
     }
-}
\ No newline at end of file
+}
+=======
+package com.mopub.common.util;
+
+import android.app.Activity;
+
+import org.junit.Test;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+import static org.mockito.Mockito.mock;
+
+public class NumbersTest {
+    @Test
+    public void parseDouble_withNumberValue_shouldReturnDouble() throws Exception {
+        int anInt = 2;
+        assertThat(Numbers.parseDouble(anInt)).isEqualTo(anInt);
+
+        double aDouble = 2.1;
+        assertThat(Numbers.parseDouble(aDouble)).isEqualTo(aDouble);
+
+        float aFloat = 2.2f;
+        assertThat(Numbers.parseDouble(aFloat)).isEqualTo(aFloat);
+
+        double nan = Double.NaN;
+        assertThat(Numbers.parseDouble(nan)).isEqualTo(nan);
+    }
+
+    @Test
+    public void parseDouble_withStringValue_shouldReturnDouble() throws Exception {
+        assertThat(Numbers.parseDouble("0.01")).isEqualTo(0.01);
+        assertThat(Numbers.parseDouble("-1015")).isEqualTo(-1015);
+    }
+
+    @Test
+    public void parseDouble_withInvalidStringValue_shouldThrowClassCastException() throws Exception {
+        try {
+            Numbers.parseDouble("dog");
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+
+        try {
+            Numbers.parseDouble("123a");
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void parseDouble_withInvalidObjectType_shouldThrowClassCastException() throws Exception {
+        try {
+            Numbers.parseDouble(mock(Activity.class));
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void convertMillisecondsToSecondsRoundedUp_shouldReturnLongMillisecondsAsRoundedUpLongSeconds() throws Exception {
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(0)).isEqualTo(0);
+
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1)).isEqualTo(1);
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(999)).isEqualTo(1);
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1000)).isEqualTo(1);
+
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1001)).isEqualTo(2);
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(100000)).isEqualTo(100);
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
index f0017117..cc8db439 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
@@ -5,7 +5,6 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index 4d9e765a..e7577ce8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -10,7 +10,6 @@
 
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 import com.mopub.mraid.MraidVideoViewController;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
new file mode 100644
index 00000000..0b20146d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
@@ -0,0 +1,172 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastAdXmlManagerTest {
+
+    private VastAdXmlManager subject;
+
+    @Test
+    public void getInLineXmlManager_shouldReturnInLineXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inline]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/inline");
+    }
+
+    @Test
+    public void getInLineXmlManager_withMultipleInLineNodes_shouldReturnFirstInLineXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/inlineOne");
+    }
+
+    @Test
+    public void getInLineXmlManager_withNoInLineNodes_shouldReturnNull() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        assertThat(subject.getInLineXmlManager()).isNull();
+    }
+
+    @Test
+    public void getWrapperXmlManager_shouldReturnWrapperXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inline]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/wrapper");
+    }
+
+    @Test
+    public void getWrapperXmlManager_withMultipleWrapperNodes_shouldReturnFirstWrapperXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapperOne]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapperTwo]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/wrapperOne");
+    }
+
+    @Test
+    public void getWrapperXmlManager_withNoWrapperNodes_shouldReturnNull() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inline]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        assertThat(subject.getWrapperXmlManager()).isNull();
+    }
+
+    @Test
+    public void getSequence_shouldReturnSequence() throws Exception {
+        String adXml = "<Ad id=\"223626102\" sequence=\"42\">" +
+                "    <InLine>" +
+                "        <Impression id=\"DART\">" +
+                "            <![CDATA[http://impression/m/inline]]>" +
+                "        </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "        <Impression id=\"DART\">" +
+                "            <![CDATA[http://impression/m/wrapper]]>" +
+                "        </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        assertThat(subject.getSequence()).isEqualTo("42");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
new file mode 100644
index 00000000..143b211a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
@@ -0,0 +1,334 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import java.util.List;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastBaseInLineWrapperXmlManagerTest {
+
+    private VastBaseInLineWrapperXmlManager subject;
+
+    @Test
+    public void getImpressionTrackers_shouldReturnImpressionTrackers() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/close]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(VastUtils.vastTrackersToStrings(subject.getImpressionTrackers()))
+                .containsOnly("http://impression/m/inlineOne", "http://impression/m/inlineTwo");
+    }
+
+    @Test
+    public void getImpressionTrackers_withNoImpressionTrackers_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getImpressionTrackers()).isEmpty();
+    }
+
+    @Test
+    public void getLinearXmlManagers_shouldReturnLinearXmlManagers() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeOne]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                       <!-- There should only be a single Linear, CompanionAds, or NonLinearAds element per Creative -->" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/ignored]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "                 <Creative>" +
+                "                       <NonLinearAds>" +
+                "                       </NonLinearAds>" +
+                "                 </Creative>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        List<VastLinearXmlManager> linearXmlManagers = subject.getLinearXmlManagers();
+        assertThat(linearXmlManagers).hasSize(2);
+        assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(0).getVideoCloseTrackers()))
+                .containsOnly("http://tracking/m/closeOne");
+        assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(1).getVideoCloseTrackers()))
+                .containsOnly("http://tracking/m/closeTwo");
+    }
+
+    @Test
+    public void getLinearXmlManagers_withNoLinearNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <NonLinearAds>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/close]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </NonLinearAds>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getLinearXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getLinearXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_shouldReturnCompanionAdXmlManagers() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <NonLinearAds>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeOne]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </NonLinearAds>" +
+                "                 </Creative>" +
+                "                 <Creative>" +
+                "                     <CompanionAds>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                             <CompanionClickTracking>" +
+                "                                 <![CDATA[http://clicktrackingOne]]>" +
+                "                             </CompanionClickTracking>" +
+                "                         </Companion>"+
+                "                         <Companion>" +
+                "                             <CompanionClickTracking>" +
+                "                                 <![CDATA[http://clicktrackingTwo]]>" +
+                "                             </CompanionClickTracking>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                     </CompanionAds>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getCompanionAdXmlManagers()).hasSize(2);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(0).getClickTrackers()))
+                .containsOnly("http://clicktrackingOne");
+        assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(1).getClickTrackers()))
+                .containsOnly("http://clicktrackingTwo");
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCompanionNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                     <CompanionAds>" +
+                "                         <NotACompanion>" +
+                "                         </NotACompanion>"+
+                "                     </CompanionAds>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCompanionAdsNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Creatives>" +
+                "                     <CompanionAds>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                     </CompanionAds>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "                 <Creative>" +
+                "                     <CompanionAds>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                     </CompanionAds>" +
+                "                 </Creative>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdTest.java
new file mode 100644
index 00000000..1292ad5e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdTest.java
@@ -0,0 +1,93 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+public class VastCompanionAdTest {
+
+    private static final String RESOLVED_CLICKTHROUGH_URL = "http://clickthrough_url";
+    private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
+            "&primaryUrl=bogus%3A%2F%2Furl" +
+            "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
+
+    private VastCompanionAd subject;
+    private Context context;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+
+    @Before
+    public void setup() {
+        subject = new VastCompanionAd(123, 456,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                CLICKTHROUGH_URL,
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void constructor_shouldSetParamsCorrectly() throws Exception {
+        assertThat(subject.getWidth()).isEqualTo(123);
+        assertThat(subject.getHeight()).isEqualTo(456);
+        assertThat(subject.getVastResource().getResource()).isEqualTo("resource");
+        assertThat(subject.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(subject.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(subject.getClickThroughUrl()).isEqualTo(CLICKTHROUGH_URL);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
+                .containsOnly("clickTrackerOne", "clickTrackerTwo");
+        assertThat(VastUtils.vastTrackersToStrings(subject.getCreativeViewTrackers()))
+                .containsOnly("viewTrackerOne", "viewTrackerTwo");
+    }
+
+    @Test
+    public void handleImpression_shouldTrackImpression() throws Exception {
+        subject.handleImpression(context, 123);
+
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerOne")));
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerTwo")));
+    }
+
+    @Test
+    public void handleClick_shouldNotTrackClick() throws Exception {
+        subject.handleClick(context, 1, null);
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+
+    @Test
+    public void handleClick_shouldOpenMoPubBrowser() throws Exception {
+        subject.handleClick(context, 1, null);
+
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo(RESOLVED_CLICKTHROUGH_URL);
+        assertThat(startedActivity.getData()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdXmlManagerTest.java
new file mode 100644
index 00000000..440f4965
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdXmlManagerTest.java
@@ -0,0 +1,94 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastCompanionAdXmlManagerTest {
+
+    private VastCompanionAdXmlManager subject;
+    private Node companionNode;
+
+    @Before
+    public void setup() throws Exception {
+        String companionXml = "<Companion id=\"valid\" height=\"250\" width=\"300\">" +
+                "    <StaticResource creativeType=\"image/png\">http://pngimage</StaticResource>" +
+                "    <TrackingEvents>" +
+                "        <Tracking event=\"creativeView\">http://tracking/creativeView1</Tracking>" +
+                "        <Tracking event=\"creativeView\">http://tracking/creativeView2</Tracking>" +
+                "        <Tracking event=\"creativeView\">http://tracking/creativeView3</Tracking>" +
+                "    </TrackingEvents>" +
+                "    <CompanionClickThrough>http://clickthrough</CompanionClickThrough>" +
+                "    <CompanionClickThrough>http://second_clickthrough</CompanionClickThrough>" +
+                "    <CompanionClickTracking>" +
+                "        <![CDATA[http://clicktrackingOne]]>" +
+                "    </CompanionClickTracking>" +
+                "    <CompanionClickTracking>" +
+                "        <![CDATA[http://clicktrackingTwo]]>" +
+                "    </CompanionClickTracking>" +
+                "    <RandomUnusedTag>This_is_unused</RandomUnusedTag>" +
+                "</Companion>";
+
+        companionNode = createNode(companionXml);
+        subject = new VastCompanionAdXmlManager(companionNode);
+    }
+
+    @Test
+    public void getWidth_shouldReturnWidthAttributes() {
+        assertThat(subject.getWidth()).isEqualTo(300);
+    }
+
+    @Test
+    public void getWidth_withNoWidthAttribute_shouldReturnNull() throws Exception {
+        String companionXml = "<Companion id=\"valid\" height=\"250\">" +
+                "</Companion>";
+
+        companionNode = createNode(companionXml);
+        subject = new VastCompanionAdXmlManager(companionNode);
+
+        assertThat(subject.getWidth()).isNull();
+    }
+
+    @Test
+    public void getHeight_shouldReturnHeightAttributes() {
+        assertThat(subject.getHeight()).isEqualTo(250);
+    }
+
+    @Test
+    public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception {
+        String companionXml = "<Companion id=\"valid\" width=\"300\">" +
+                "</Companion>";
+
+        companionNode = createNode(companionXml);
+        subject = new VastCompanionAdXmlManager(companionNode);
+
+        assertThat(subject.getHeight()).isNull();
+    }
+
+    @Test
+    public void getResourceXmlManager_shouldReturnVastResourceXmlManager() throws Exception {
+        VastResourceXmlManager resourceXmlManager = subject.getResourceXmlManager();
+        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("http://pngimage");
+        assertThat(resourceXmlManager.getStaticResourceType()).isEqualTo("image/png");
+    }
+
+    @Test
+    public void getClickThroughUrl_shouldReturnFirstStringUrl() {
+        assertThat(subject.getClickThroughUrl()).isEqualTo("http://clickthrough");
+    }
+
+    @Test
+    public void getClickTrackers_shouldReturnAllUrls() {
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
+                .containsOnly("http://clicktrackingOne",
+                        "http://clicktrackingTwo");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconTest.java
new file mode 100644
index 00000000..ba750c6d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconTest.java
@@ -0,0 +1,102 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+public class VastIconTest {
+
+    private VastIcon subject;
+    private Context context;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+
+    @Before
+    public void setup() {
+        subject = new VastIcon(123, 456, 789, 101,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                "http://clickThroughUri",
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void constructor_shouldSetParamsCorrectly() throws Exception {
+        assertThat(subject.getWidth()).isEqualTo(123);
+        assertThat(subject.getHeight()).isEqualTo(456);
+        assertThat(subject.getOffsetMS()).isEqualTo(789);
+        assertThat(subject.getDurationMS()).isEqualTo(101);
+        assertThat(subject.getVastResource().getResource()).isEqualTo("resource");
+        assertThat(subject.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(subject.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackingUris()))
+                .containsOnly("clickTrackerOne", "clickTrackerTwo");
+        assertThat(subject.getClickThroughUri()).isEqualTo("http://clickThroughUri");
+        assertThat(VastUtils.vastTrackersToStrings(subject.getViewTrackingUris()))
+                .containsOnly("viewTrackerOne", "viewTrackerTwo");
+    }
+
+    @Test
+    public void constructor_withNullOffset_shouldSetOffsetTo0() throws Exception {
+        subject = new VastIcon(123, 456, null, 101,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                "clickThroughUri",
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+
+        assertThat(subject.getOffsetMS()).isEqualTo(0);
+    }
+
+    @Test
+    public void handleImpression_shouldTrackImpression() throws Exception {
+        subject.handleImpression(context, 123, "uri");
+
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerOne")));
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerTwo")));
+    }
+
+    @Test
+    public void handleClick_shouldNotTrackClick() throws Exception {
+        subject.handleClick(context, null);
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+
+    @Test
+    public void handleClick_shouldOpenMoPubBrowser() throws Exception {
+        subject.handleClick(context, null);
+
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo("http://clickThroughUri");
+        assertThat(startedActivity.getData()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconXmlManagerTest.java
new file mode 100644
index 00000000..aa9da867
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconXmlManagerTest.java
@@ -0,0 +1,214 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastIconXmlManagerTest {
+
+    private VastIconXmlManager subject;
+    private Node iconNode;
+
+    @Before
+    public void setup() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[imageJpeg]]>" +
+                    "</StaticResource>" +
+                    "<IconClicks>" +
+                        "<IconClickThrough>" +
+                            "<![CDATA[clickThroughUri]]>" +
+                        "</IconClickThrough>" +
+                        "<IconClickTracking>" +
+                            "<![CDATA[clickTrackingUri1]]>" +
+                        "</IconClickTracking>" +
+                        "<IconClickTracking>" +
+                            "<![CDATA[clickTrackingUri2]]>" +
+                        "</IconClickTracking>" +
+                    "</IconClicks>" +
+                    "<IconViewTracking>" +
+                        "<![CDATA[viewTrackingUri1]]>" +
+                    "</IconViewTracking>" +
+                    "<IconViewTracking>" +
+                        "<![CDATA[viewTrackingUri2]]>" +
+                    "</IconViewTracking>" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+    }
+    
+    @Test
+    public void getWidth_shouldReturnWidth() throws Exception {
+        assertThat(subject.getWidth()).isEqualTo(123);
+    }
+
+    @Test
+    public void getWidth_withNoWidth_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getWidth()).isNull();
+    }
+
+    @Test
+    public void getHeight_shouldReturnHeight() throws Exception {
+        assertThat(subject.getHeight()).isEqualTo(456);
+    }
+
+    @Test
+    public void getHeight_withNoHeight_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getHeight()).isNull();
+    }
+
+    @Test
+    public void getOffsetMS_shouldReturnOffset() throws Exception {
+        assertThat(subject.getOffsetMS()).isEqualTo(3723000);
+    }
+
+    @Test
+    public void getOffsetMS_withNoOffset_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getOffsetMS()).isNull();
+    }
+
+    @Test
+    public void getOffsetMS_withMalformedOffset_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"malformed\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getOffsetMS()).isNull();
+    }
+
+    @Test
+    public void getDurationMS_shouldReturnDuration() throws Exception {
+        assertThat(subject.getDurationMS()).isEqualTo(3723456);
+    }
+
+    @Test
+    public void getDurationMS_withNoDuration_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" >" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getDurationMS()).isNull();
+    }
+
+    @Test
+    public void getDurationMS_withMalformedDuration_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"malformed\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getDurationMS()).isNull();
+    }
+
+    @Test
+    public void getResourceXmlManager_shouldReturnVastResourceXmlManager() throws Exception {
+        VastResourceXmlManager resourceXmlManager = subject.getResourceXmlManager();
+        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("imageJpeg");
+        assertThat(resourceXmlManager.getStaticResourceType()).isEqualTo("image/jpeg");
+    }
+
+    @Test
+    public void getClickTrackingUris_shouldReturnClickTrackingUris() throws Exception {
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+    }
+
+    @Test
+    public void getClickTrackingUris_withNoClickTrackingUris_shouldReturnEmptyList() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                    "<IconClicks>" +
+                        "<IconClickThrough>" +
+                            "<![CDATA[clickThroughUri]]>" +
+                        "</IconClickThrough>" +
+                    "</IconClicks>" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getClickTrackingUris()).isEmpty();
+    }
+
+    @Test
+    public void getClickThroughUri_shouldReturnClickThroughUri() throws Exception {
+        assertThat(subject.getClickThroughUri()).isEqualTo("clickThroughUri");
+    }
+
+    @Test
+    public void getClickThroughUri_withNoClickThroughUri_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "<IconClicks>" +
+                    "<IconClickTracking>" +
+                        "<![CDATA[clickTrackingUri1]]>" +
+                    "</IconClickTracking>" +
+                    "<IconClickTracking>" +
+                        "<![CDATA[clickTrackingUri2]]>" +
+                    "</IconClickTracking>" +
+                "</IconClicks>" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getClickThroughUri()).isNull();
+    }
+
+    @Test
+    public void getViewTrackingUris_shouldReturnViewTrackingUris() throws Exception {
+        assertThat(VastUtils.vastTrackersToStrings(subject.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void getViewTrackingUris_withNoViewTrackingUris_shouldReturnEmptyList() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getViewTrackingUris()).isEmpty();
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
new file mode 100644
index 00000000..57d5625e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -0,0 +1,474 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import java.util.List;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastLinearXmlManagerTest {
+
+    private VastLinearXmlManager subject;
+    private Node linearNode;
+
+    @Before
+    public void setup() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "<Duration>00:00:58</Duration>" +
+                "<TrackingEvents>" +
+                "    <Tracking event=\"creativeView\">" +
+                "        <![CDATA[" +
+                "        http://creativeView/one" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"creativeView\">" +
+                "        <![CDATA[" +
+                "        http://creativeView/two" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"start\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"progress\" offset=\"13%\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to ambiguous offset.
+                "    <Tracking event=\"progress\" offset=\"01:01\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a too-high percentage offset.
+                "    <Tracking event=\"progress\" offset=\"113%\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a negative percentage offset.
+                "    <Tracking event=\"progress\" offset=\"-113%\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a non-number offset
+                "    <Tracking event=\"progress\" offset=\"ten seconds\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"midpoint\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"midpoint\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"firstQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"firstQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"thirdQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"thirdQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"complete\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"complete\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"close\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/close?q=ignatius" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"close\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/close?q=j3" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"closeLinear\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/closeLinear" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"skip\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/skip?q=ignatius" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"skip\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/skip?q=j3" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"mute\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"pause\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/pause?num=1" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"pause\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/pause?num=2" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"resume\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/resume?num=1" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"resume\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/resume?num=2" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"fullscreen\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"fullscreen\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "</TrackingEvents>" +
+                "<AdParameters/>" +
+                "<VideoClicks>" +
+                "    <ClickThrough>" +
+                "        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
+                "    </ClickThrough>" +
+                "    <ClickTracking id=\"DART\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+                "        ]]>" +
+                "    </ClickTracking>" +
+                "    <ClickTracking id=\"ThirdParty\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
+                "        ]]>" +
+                "    </ClickTracking>" +
+                "</VideoClicks>" +
+                "<MediaFiles>" +
+                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "    <MediaFile id=\"2\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "</MediaFiles>" +
+                "<Icons>" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource1]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource2]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "</Icons>" +
+                "</Linear>";
+
+        linearNode = createNode(linearXml);
+    }
+
+    @Test
+    public void getFractionalTrackers_shouldReturnCorrectValues() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastFractionalProgressTracker> trackers = subject.getFractionalProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(7);
+
+        VastFractionalProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker4 = trackers.get(4);
+        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker5 = trackers.get(5);
+        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker6 = trackers.get(6);
+        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(4);
+
+        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://creativeView/one");
+
+        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://creativeView/two");
+
+        VastAbsoluteProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastAbsoluteProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;" +
+                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
+                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+    }
+
+    @Test
+    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCompleteTrackers()))
+                .containsOnly("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
+                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCloseTrackers()))
+                .containsOnly("http://www.mopub.com/close?q=ignatius",
+                        "http://www.mopub.com/close?q=j3",
+                        "http://www.mopub.com/closeLinear");
+    }
+
+    @Test
+    public void getPauseTrackers_shouldReturnRepeatableVastTrackers() {
+        subject = new VastLinearXmlManager(linearNode);
+        for (VastTracker vastTracker : subject.getPauseTrackers()) {
+            assertThat(vastTracker.isRepeatable());
+        }
+        assertThat(VastUtils.vastTrackersToStrings(subject.getPauseTrackers()))
+                .containsOnly("http://www.mopub.com/pause?num=1",
+                        "http://www.mopub.com/pause?num=2");
+    }
+
+    @Test
+    public void getResumeTrackers_shouldReturnRepeatableVastTrackers() {
+        subject = new VastLinearXmlManager(linearNode);
+        for (VastTracker vastTracker : subject.getResumeTrackers()) {
+            assertThat(vastTracker.isRepeatable());
+        }
+        assertThat(VastUtils.vastTrackersToStrings(subject.getResumeTrackers()))
+                .containsOnly("http://www.mopub.com/resume?num=1",
+                        "http://www.mopub.com/resume?num=2");
+    }
+
+    @Test
+    public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoSkipTrackers()))
+                .containsOnly("http://www.mopub.com/skip?q=ignatius",
+                        "http://www.mopub.com/skip?q=j3");
+    }
+
+    @Test
+    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        String url = subject.getClickThroughUrl();
+
+        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getClickTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
+                .containsOnly("http://ad.doubleclick" +
+                                ".net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0" +
+                                "%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0" +
+                                "/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
+                        "http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google" +
+                                ".com/support/richmedia");
+    }
+
+    @Test
+    public void getSkipOffset_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        String skipOffset = subject.getSkipOffset();
+
+        assertThat(skipOffset).isEqualTo("25%");
+    }
+
+    @Test
+    public void getSkipOffset_withNoSkipOffsetAttribute_shouldReturnNull() throws Exception {
+        String linearXml = "<Linear>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getSkipOffset()).isNull();
+    }
+
+    @Test
+    public void getSkipOffset_withNoSkipOffsetAttributeValue_shouldReturnNull() throws Exception {
+        String linearXml = "<Linear skipoffset=\"\">" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getSkipOffset()).isNull();
+    }
+
+    @Test
+    public void getMediaXmlManagers_shouldReturnMediaXmlManagers() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+
+        assertThat(mediaXmlManagers.size()).isEqualTo(2);
+
+        assertThat(mediaXmlManagers.get(0).getMediaUrl()).isEqualTo("http://s3.amazonaws" +
+                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+        assertThat(mediaXmlManagers.get(1).getMediaUrl()).isEqualTo("http://s3.amazonaws" +
+                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4");
+    }
+
+    @Test
+    public void getMediaXmlManagers_withNoMediaFileNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <MediaFiles>" +
+                "    </MediaFiles>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+        assertThat(mediaXmlManagers).isEmpty();
+    }
+
+    @Test
+    public void getMediaXmlManagers_withNoMediaFilesNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+        assertThat(mediaXmlManagers).isEmpty();
+    }
+
+    @Test
+    public void getIconXmlManagers_shouldReturnIconXmlManagers() throws Exception {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastIconXmlManager> iconXmlManagers = subject.getIconXmlManagers();
+
+        assertThat(iconXmlManagers).hasSize(2);
+        assertThat(iconXmlManagers.get(0).getResourceXmlManager().getStaticResource())
+                .isEqualTo("staticResource1");
+        assertThat(iconXmlManagers.get(1).getResourceXmlManager().getStaticResource())
+                .isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getIconXmlManagers_withNoIconNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <Icons>" +
+                "    </Icons>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getIconXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getIconXmlManagers_withNoIconsNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource1]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getIconXmlManagers()).isEmpty();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
new file mode 100644
index 00000000..89005ec6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
@@ -0,0 +1,225 @@
+package com.mopub.mobileads;
+
+import android.net.Uri;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastMacroHelperTest {
+
+    private static final String ERROR_CODE = "errorcode";
+    private static final String CONTENT_PLAY_HEAD = "contentplayhead";
+    private static final String CACHE_BUSTING = "cachebusting";
+    private static final String ASSET_URI = "asseturi";
+
+    private VastMacroHelper subject;
+    private String defaultUri;
+
+    @Before
+    @SuppressWarnings("unchecked")
+    public void setup() {
+        defaultUri = "http://www.derp.com/herp?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]&cachebusting=[CACHEBUSTING]";
+        // Suppressing unchecked cast to List<String> with Collections#singletonList(Object)
+        subject = new VastMacroHelper(Collections.singletonList(defaultUri));
+    }
+
+    @Test
+    public void constructor_shouldSetCacheBusting() throws Exception {
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void constructor_shouldCreateRandomCacheBustingValues() throws Exception {
+        VastMacroHelper vastMacroHelper = new VastMacroHelper(Collections.singletonList(defaultUri));
+
+        String uriStr = subject.getUris().get(0);
+        String uriStr2 = vastMacroHelper.getUris().get(0);
+
+        Uri uri = Uri.parse(uriStr);
+        Uri uri2 = Uri.parse(uriStr2);
+
+        String cacheBusting = uri.getQueryParameter(CACHE_BUSTING);
+        String cacheBusting2 = uri2.getQueryParameter(CACHE_BUSTING);
+
+        assertThat(cacheBusting).isNotEqualTo(cacheBusting2);
+    }
+
+    @Test
+    public void withErrorCode_shouldSetErrorCode() throws Exception {
+        subject.withErrorCode(VastErrorCode.XML_PARSING_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=100&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.WRAPPER_TIMEOUT);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=301&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.NO_ADS_VAST_RESPONSE);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=303&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.GENERAL_LINEAR_AD_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=400&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.GENERAL_COMPANION_AD_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=600&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.UNDEFINED_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    public void withContentPlayHead_shouldFormatTime_shouldSetContentPlayHead() throws Exception {
+        subject.withContentPlayHead(3600000);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=01:00:00.000&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(360000000);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=100:00:00.000&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(3599999);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=00:59:59.999&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(59999);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=00:00:59.999&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(999);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=00:00:00.999&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(45296789);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=12:34:56.789&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    public void withAssetUri_shouldSetAssetUri() throws Exception {
+        final String expectedAssetUri = "http://thisIsAnAsset.Uri";
+        subject.withAssetUri(expectedAssetUri);
+
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=http%3A%2F%2FthisIsAnAsset.Uri&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withManyMacros_shouldReplaceAllOfThem() throws Exception {
+        final String multiUrl = "http://www.someurl.com/dosomething?[ERRORCODE][ERRORCODE][CONTENTPLAYHEAD][ERRORCODE][ASSETURI][CONTENTPLAYHEAD][ERRORCODE]";
+        subject = new VastMacroHelper(Collections.singletonList(multiUrl))
+                .withAssetUri("asset")
+                .withContentPlayHead(100000)
+                .withErrorCode(VastErrorCode.UNDEFINED_ERROR);
+
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.someurl.com/dosomething?90090000:01:40.000900asset00:01:40.000900");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withSpecialCharactersInAsseturi_shouldUrlEncode() {
+        final String specialUrl = "http://www.someurl.com/somedirectory/somemethod?errorcode=[ERRORCODE]&asseturi=[ASSETURI]";
+        subject = new VastMacroHelper(Collections.singletonList(specialUrl))
+                .withErrorCode(VastErrorCode.UNDEFINED_ERROR)
+                .withAssetUri(
+                        "http://aaddss.mmooppuubb.ccoomm:123/method?args=one~`!@#$%^&*()_+-[]{}|:,.<>/");
+
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.someurl.com/somedirectory/somemethod?errorcode=900&asseturi=" +
+                        "http%3A%2F%2Faaddss.mmooppuubb.ccoomm%3A123%2Fmethod%3Fargs%3Done" +
+                        "%7E%60%21%40%23%24%25%5E%26*%28%29_%2B-%5B%5D%7B%7D%7C%3A%2C.%3C%3E%2F");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withManyUrls_shouldReturnListOfUrls() {
+        final String uriWithNoCacheBusting = defaultUri.replace("&cachebusting=[CACHEBUSTING]", "");
+        final String uriWithTwoAssetUri = uriWithNoCacheBusting + "&asset2=[ASSETURI]";
+        final String uriWithTwoContentPlayHead = uriWithNoCacheBusting + "&cph2=[CONTENTPLAYHEAD]";
+        subject = new VastMacroHelper(Arrays.asList(
+                new String[]{uriWithNoCacheBusting, uriWithTwoAssetUri, uriWithTwoContentPlayHead}));
+        subject.withAssetUri("https://a.ss.et");
+        subject.withErrorCode(VastErrorCode.UNDEFINED_ERROR);
+        subject.withContentPlayHead(500);
+
+        assertThat(subject.getUris().size()).isEqualTo(3);
+        assertThat(subject.getUris().get(0)).isEqualTo(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et");
+        assertThat(subject.getUris().get(1)).isEqualTo(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&asset2=https%3A%2F%2Fa.ss.et");
+        assertThat(subject.getUris().get(2)).isEqualTo(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&cph2=00:00:00.500");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withMalformedUrl_shouldNotAttemptToUrlEncode() {
+        final String malformedUri = "htttttt:////oops [CONTENTPLAYHEAD]this [ERRORCODE]is not [ASSETURI]a url";
+        subject = new VastMacroHelper(Collections.singletonList(malformedUri));
+        subject.withAssetUri("asset").withErrorCode(
+                VastErrorCode.UNDEFINED_ERROR).withContentPlayHead(1);
+
+        assertThat(subject.getUris()).containsOnly(
+                "htttttt:////oops 00:00:00.001this 900is not asseta url");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withDeeplink_shouldNotAttemptToReformat() {
+        final String deeplink = "thisisadeeplink://reallyreallydeep";
+        subject = new VastMacroHelper(Collections.singletonList(deeplink));
+
+        assertThat(subject.getUris()).containsOnly(deeplink);
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withNormalUri_shouldReturnUnchangedUri() {
+        final String normalUri = "http://www.thisisanormal.uri/with?some=query";
+        subject = new VastMacroHelper(Collections.singletonList(normalUri));
+
+        assertThat(subject.getUris()).containsOnly(normalUri);
+    }
+
+    private String getAndCheckCachebusting(final String uriStr) {
+        Uri uri = Uri.parse(uriStr);
+        String cacheBusting = uri.getQueryParameter(CACHE_BUSTING);
+        assertThat(cacheBusting).isNotEmpty();
+        assertThat(cacheBusting.length()).isEqualTo(8);
+
+        // Will throw if not an int
+        Integer.parseInt(cacheBusting);
+
+        return cacheBusting;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
similarity index 61%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
index e13e5a5d..02875e92 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -1,13 +1,11 @@
-package com.mopub.mobileads.util.vast;
+package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.content.Context;
-import android.view.Display;
-import android.view.WindowManager;
 
 import com.mopub.common.CacheService;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.mobileads.test.support.VastUtils;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -17,23 +15,20 @@
 import org.robolectric.Robolectric;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.concurrent.Semaphore;
 
-import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
+import static com.mopub.mobileads.VastManager.VastManagerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class VastManagerTest {
     static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>http://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>http://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>http://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]></InLine></Ad></VAST>";
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>http://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>http://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[http://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>http://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough><CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking><CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[http://inLineErrorTracker]]></Error></InLine></Ad></VAST>";
     static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
 
     private VastManager subject;
@@ -64,7 +59,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     }
 
     private void prepareVastVideoConfiguration() {
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, context);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
@@ -96,9 +91,13 @@ public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCo
         assertThat(vastVideoConfiguration.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.75f);
 
         // Verify start tracker.
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(2);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds())
+                .isEqualTo(0);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1).getTrackingMilliseconds())
+                .isEqualTo(2000);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(2).getTrackingMilliseconds())
+                .isEqualTo(3100);
 
         assertThat(vastVideoConfiguration.getCompleteTrackers().size()).isEqualTo(1);
 
@@ -111,10 +110,17 @@ public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCo
         final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
         assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
         assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAd.getVastResource().getResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAd.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastCompanionAd.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
         assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(vastCompanionAd.getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+
+        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAd.getClickTrackers()))
+                .containsOnly("http://companionClickTracking1",
+                        "http://companionClickTracking2");
     }
 
     @Test
@@ -128,7 +134,8 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration
+                .class));
 
         // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
         assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
@@ -138,13 +145,16 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
         assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
         assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(13);
 
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(6);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(3100);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(3100);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(9);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(6).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(7).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(8).getTrackingMilliseconds()).isEqualTo(3100);
 
 
         assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(9);
@@ -162,14 +172,21 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
         assertThat(vastVideoConfiguration.getCloseTrackers().size()).isEqualTo(4);
         assertThat(vastVideoConfiguration.getSkipTrackers().size()).isEqualTo(4);
         assertThat(vastVideoConfiguration.getClickTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration.getErrorTrackers().size()).isEqualTo(4);
 
         final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
         assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
         assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAd.getVastResource().getResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAd.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastCompanionAd.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
         assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(vastCompanionAd.getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAd.getClickTrackers()))
+                .containsOnly("http://companionClickTracking1",
+                        "http://companionClickTracking2");
     }
 
     @Test
@@ -183,14 +200,7 @@ public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVast
         semaphore.acquire();
         verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
 
-        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4");
-
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo(null);
-        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration).isNull();
     }
 
     @Test
@@ -228,7 +238,8 @@ public void prepareVastVideoConfiguration_withExtensionsUnderWrapper_shouldConta
                                 "<MoPubForceOrientation>device</MoPubForceOrientation>" +
                             "</Extension>" +
                         "</Extensions>"),
-                vastManagerListener);
+                vastManagerListener,
+                context);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
@@ -297,7 +308,8 @@ public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInlin
                                 "<MoPubForceOrientation>device orientation</MoPubForceOrientation>" +
                             "</Extension>" +
                         "</Extensions>"),
-                vastManagerListener);
+                vastManagerListener,
+                context);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
@@ -468,7 +480,8 @@ public void prepareVastVideoConfiguration_withSkipOffsets_shouldReturnLastParsed
         // Also add a skipoffset in absolute format
         subject.prepareVastVideoConfiguration(
                 TEST_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='00:03:14'>"),
-                vastManagerListener);
+                vastManagerListener,
+                context);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
@@ -497,7 +510,8 @@ public void prepareVastVideoConfiguration_withEmptySkipOffset_shouldReturnNull()
 
     @Test
     public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING, vastManagerListener);
+        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING,
+                vastManagerListener, context);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
@@ -509,7 +523,7 @@ public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull()
 
     @Test
     public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(null, vastManagerListener);
+        subject.prepareVastVideoConfiguration(null, vastManagerListener, context);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
@@ -521,7 +535,7 @@ public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws
 
     @Test
     public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration("", vastManagerListener);
+        subject.prepareVastVideoConfiguration("", vastManagerListener, context);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
@@ -563,7 +577,7 @@ public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull(
 
         Robolectric.getBackgroundScheduler().pause();
 
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, context);
 
         subject.cancel();
 
@@ -574,319 +588,4 @@ public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull(
         verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
         assertThat(vastVideoConfiguration).isEqualTo(null);
     }
-
-    @Test
-    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaUrl_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", null);
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(null, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(0, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(-1, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Double screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(1600, 960, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Half screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url1");
-        // Portrait
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(240, 400, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url1");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnUrlWithNullDimension() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Invalid media type
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        // Null dimension
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(null, null, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800, 480, null, "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/jpeg", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, null, "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withIncompatibleMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/rubbish", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullImageUrl_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/png", null);
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullDimension_shouldReturnCompanionAd() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(null, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(0, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(-300, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
-        // Double screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(1600, 960, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
-        // Half screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(400, 240, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameArea_shouldReturnCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(400, 240, "image/png", "image_url1");
-        // Portrait
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(240, 400, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager1, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withInvalidMediaTypeAndNullDimension_shouldReturnCompanionAdWithNullDimension() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(null, null, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAdithInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(800, 480, null, "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertThat(bestCompanionAd).isEqualTo(null);
-    }
-
-    private VastXmlManager.MediaXmlManager initializeMediaXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String type,
-            final String mediaUrl) {
-        VastXmlManager.MediaXmlManager mediaXmlManager = mock(VastXmlManager.MediaXmlManager.class);
-        when(mediaXmlManager.getWidth()).thenReturn(width);
-        when(mediaXmlManager.getHeight()).thenReturn(height);
-        when(mediaXmlManager.getType()).thenReturn(type);
-        when(mediaXmlManager.getMediaUrl()).thenReturn(mediaUrl);
-        return mediaXmlManager;
-    }
-
-    private VastXmlManager.ImageCompanionAdXmlManager initializeCompanionXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String type,
-            final String imageUrl) {
-        VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = mock(VastXmlManager.ImageCompanionAdXmlManager.class);
-        when(companionXmlManager.getWidth()).thenReturn(width);
-        when(companionXmlManager.getHeight()).thenReturn(height);
-        when(companionXmlManager.getType()).thenReturn(type);
-        when(companionXmlManager.getImageUrl()).thenReturn(imageUrl);
-        return companionXmlManager;
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastXmlManager.ImageCompanionAdXmlManager imageCompanionAdXmlManager,
-            final VastCompanionAd vastCompanionAd) {
-        final VastCompanionAd vastCompanionAd1 = new VastCompanionAd(
-                imageCompanionAdXmlManager.getWidth(),
-                imageCompanionAdXmlManager.getHeight(),
-                imageCompanionAdXmlManager.getImageUrl(),
-                imageCompanionAdXmlManager.getClickThroughUrl(),
-                new ArrayList<String>(imageCompanionAdXmlManager.getClickTrackers())
-        );
-        assertCompanionAdsAreEqual(vastCompanionAd, vastCompanionAd1);
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastCompanionAd vastCompanionAd1,
-            final VastCompanionAd vastCompanionAd2) {
-        assertThat(vastCompanionAd1.getWidth()).isEqualTo(vastCompanionAd2.getWidth());
-        assertThat(vastCompanionAd1.getHeight()).isEqualTo(vastCompanionAd2.getHeight());
-        assertThat(vastCompanionAd1.getImageUrl()).isEqualTo(vastCompanionAd2.getImageUrl());
-        assertThat(vastCompanionAd1.getClickThroughUrl()).isEqualTo(vastCompanionAd2.getClickThroughUrl());
-        assertThat(vastCompanionAd1.getClickTrackers()).isEqualTo(vastCompanionAd2.getClickTrackers());
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
new file mode 100644
index 00000000..729b2ace
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
@@ -0,0 +1,114 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastMediaXmlManagerTest {
+
+    private VastMediaXmlManager subject;
+    private Node mediaNode;
+
+    @Before
+    public void setup() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+    }
+
+    @Test
+    public void getWidth_shouldReturnWidthAttribute() {
+        assertThat(subject.getWidth()).isEqualTo(300);
+    }
+
+    @Test
+    public void getWidth_withNoWidthAttribute_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getWidth()).isNull();
+    }
+
+    @Test
+    public void getHeight_shouldReturnHeightAttribute() {
+        assertThat(subject.getHeight()).isEqualTo(225);
+    }
+
+    @Test
+    public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\" width=\"300\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getHeight()).isNull();
+    }
+
+    @Test
+    public void getType_shouldReturnMediaFileType() {
+        assertThat(subject.getType()).isEqualTo("video/quicktime");
+    }
+
+    @Test
+    public void getType_withNoTypeAttribute_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" " +
+                "bitrate=\"457\" width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getType()).isNull();
+    }
+
+    @Test
+    public void getMediaUrl_shouldReturnMediaFileUrl() {
+        assertThat(subject.getMediaUrl()).isEqualTo("http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+    }
+
+    @Test
+    public void getMediaUrl_withNoMediaUrl_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\" width=\"300\" height=\"225\">" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getMediaUrl()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
new file mode 100644
index 00000000..322a98a6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
@@ -0,0 +1,200 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+
+import static com.mopub.mobileads.VastResource.fromVastResourceXmlManager;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class VastResourceTest {
+
+    private VastResource subject;
+    @Mock private VastWebView mockVastWebView;
+
+    @Before
+    public void setup() {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE,
+                VastResource.CreativeType.IMAGE, 50, 100);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withIFrameType_shouldSetIFrameResource() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource =
+                fromVastResourceXmlManager(resourceXmlManager, VastResource.Type.IFRAME_RESOURCE,
+                        50, 100);
+
+        assertThat(vastResource.getResource()).isEqualTo("IFrameResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.IFRAME_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.NONE);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withHTMLType_shouldSetHTMLResource() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource =
+                fromVastResourceXmlManager(resourceXmlManager, VastResource.Type.HTML_RESOURCE, 50,
+                        100);
+
+        assertThat(vastResource.getResource()).isEqualTo("HTMLResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.HTML_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.NONE);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withImageCreativeType_shouldSetImageCreativeType() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource = fromVastResourceXmlManager(resourceXmlManager,
+                VastResource.Type.STATIC_RESOURCE, 50, 100);
+
+        assertThat(vastResource.getResource()).isEqualTo("StaticResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withJavaScriptCreativeType_shouldSetJavascriptCreativeType() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "application/x-javascript", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource = fromVastResourceXmlManager(resourceXmlManager,
+                VastResource.Type.STATIC_RESOURCE, 50, 100);
+
+        assertThat(vastResource.getResource()).isEqualTo("StaticResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.JAVASCRIPT);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withMissingCreativeType_shouldReturnNull() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", null, "IFrameResource", "HTMLResource");
+
+        assertThat(fromVastResourceXmlManager(
+                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withInvalidCreativeType_shouldReturnNull() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "INVALID_CREATIVE_TYPE", "IFrameResource", "HTMLResource");
+
+        assertThat(fromVastResourceXmlManager(
+                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withNoResource_shouldReturnNull() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        null, null, null, null);
+
+        assertThat(fromVastResourceXmlManager(
+                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
+    }
+
+    @Test
+    public void constructor_shouldInitializeFieldsCorrectly() throws Exception {
+        assertThat(subject.getResource()).isEqualTo("resource");
+        assertThat(subject.getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(subject.getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
+    }
+
+    @Test
+    public void initializeWebView_withIFrameResource_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData(
+                "<iframe frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" " +
+                        "marginwidth=\"0\" style=\"border: 0px; margin: 0px;\" width=\"50\" " +
+                        "height=\"100\" src=\"resource\"></iframe>");
+    }
+
+    @Test
+    public void initializeWebView_withHTMLResource_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData("resource");
+    }
+
+    @Test
+    public void initializeWebView_withStaticResource_withImageCreativeType_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.IMAGE, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData("<html><head></head><body style=\"margin:0;padding:0\">" +
+                "<img src=\"resource\" width=\"100%\" style=\"max-width:100%;max-height:100%;\" />" +
+                "</body></html>");
+    }
+
+    @Test
+    public void initializeWebView_withStaticResource_withJavascriptCreativeType_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.JAVASCRIPT, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData("<script src=\"resource\"></script>");
+    }
+
+    @Test
+    public void getCorrectClickThroughUrl_shouldReturnCorrectClickThroughUrl() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.IMAGE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("xml");
+
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.JAVASCRIPT, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
+
+        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
+
+        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
+
+        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isNull();
+
+        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isNull();
+
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.IMAGE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isEqualTo("xml");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
new file mode 100644
index 00000000..78f08b22
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
@@ -0,0 +1,125 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastResourceXmlManagerTest {
+
+    private VastResourceXmlManager subject;
+    private Node resourceNode;
+
+    @Before
+    public void setup() throws Exception {
+        String resourceXml =
+                "<root>" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+    }
+
+    @Test
+    public void getStaticResource_shouldReturnStaticResource() throws Exception {
+        assertThat(subject.getStaticResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getStaticResource_withNoStaticResource_shouldReturnNull() throws Exception {
+        String iconXml = "<root>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(iconXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getStaticResource()).isNull();
+    }
+
+    @Test
+    public void getStaticResourceType_shouldReturnLowerCaseStaticResourceType() throws Exception {
+        assertThat(subject.getStaticResourceType()).isEqualTo("image/jpeg");
+    }
+
+    @Test
+    public void getStaticResourceType_withNoStaticCreativeType_shouldReturnNull() throws Exception {
+        String resourceXml = "<root>" +
+                    "<StaticResource>" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getStaticResourceType()).isNull();
+    }
+
+    @Test
+    public void getIFrameResource_shouldReturnIFrameResource() throws Exception {
+        assertThat(subject.getIFrameResource()).isEqualTo("IFrameResource");
+    }
+
+    @Test
+    public void getIFrameResource_withNoIFrameResouce_shouldReturnNull() throws Exception {
+        String resourceXml = "<root>" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getIFrameResource()).isNull();
+    }
+
+    @Test
+    public void getHTMLResource_shouldReturnHTMLResource() throws Exception {
+        assertThat(subject.getHTMLResource()).isEqualTo("HTMLResource");
+    }
+
+    @Test
+    public void getHTMLResource_withNoHTMLResource_shouldReturnNull() throws Exception {
+        String resourceXml = "<root>" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getHTMLResource()).isNull();
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ToolbarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
similarity index 73%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/ToolbarWidgetTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
index bee3c2d1..c7c825c1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ToolbarWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
-import android.view.View;
 import android.widget.ImageView;
 
 import com.mopub.common.test.support.SdkTestRunner;
@@ -23,8 +22,6 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
-import static android.view.Gravity.CENTER_VERTICAL;
-import static android.view.Gravity.RIGHT;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.eq;
@@ -34,9 +31,9 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-public class ToolbarWidgetTest {
+public class VastVideoCloseButtonWidgetTest {
     private Context context;
-    private ToolbarWidget subject;
+    private VastVideoCloseButtonWidget subject;
 
     private static final String ICON_IMAGE_URL = "iconimageurl";
 
@@ -56,63 +53,48 @@ public void setUp() throws Exception {
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
         context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    private void initializeSubject() {
-        subject = new ToolbarWidget.Builder(context)
-                .weight(1f)
-                .widgetGravity(CENTER_VERTICAL | RIGHT)
-                .defaultText("Close")
-                .drawable(new CloseButtonDrawable())
-                .visibility(View.GONE)
-                .build();
+        subject = new VastVideoCloseButtonWidget(context);
     }
 
     @Test
-    public void updateImage_imageListenerOnResponse_shouldUseImageBitmap() throws Exception {
-        initializeSubject();
-
+    public void updateCloseButtonIcon_imageListenerOnResponse_shouldUseImageBitmap() throws Exception {
         when(mockImageContainer.getBitmap()).thenReturn(mockBitmap);
 
-        subject.updateImage(ICON_IMAGE_URL);
+        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
 
         verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
         ImageLoader.ImageListener listener = imageCaptor.getValue();
         listener.onResponse(mockImageContainer, true);
-        assertThat(((BitmapDrawable) subject.getImageViewDrawable()).getBitmap()).isEqualTo(mockBitmap);
+        assertThat(((BitmapDrawable) subject.getImageView().getDrawable()).getBitmap()).isEqualTo(mockBitmap);
     }
 
     @Test
     public void updateImage_imageListenerOnResponseWhenReturnedBitMapIsNull_shouldUseDefaultCloseButtonDrawable() throws Exception {
-        initializeSubject();
-
         final ImageView imageViewSpy = spy(subject.getImageView());
         subject.setImageView(imageViewSpy);
 
         when(mockImageContainer.getBitmap()).thenReturn(null);
 
-        subject.updateImage(ICON_IMAGE_URL);
+        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
 
         verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
         ImageLoader.ImageListener listener = imageCaptor.getValue();
         listener.onResponse(mockImageContainer, true);
         verify(imageViewSpy, never()).setImageBitmap(any(Bitmap.class));
-        assertThat(subject.getImageViewDrawable()).isInstanceOf(CloseButtonDrawable.class);
+        assertThat(subject.getImageView().getDrawable()).isInstanceOf(CloseButtonDrawable.class);
     }
 
     @Test
     public void updateImage_imageListenerOnErrorResponse_shouldUseDefaultCloseButtonDrawable() throws Exception {
-        initializeSubject();
-
         final ImageView imageViewSpy = spy(subject.getImageView());
         subject.setImageView(imageViewSpy);
 
-        subject.updateImage(ICON_IMAGE_URL);
+        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
 
         verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
         ImageLoader.ImageListener listener = imageCaptor.getValue();
         listener.onErrorResponse(new VolleyError());
         verify(imageViewSpy, never()).setImageBitmap(any(Bitmap.class));
-        assertThat(subject.getImageViewDrawable()).isInstanceOf(CloseButtonDrawable.class);
+        assertThat(subject.getImageView().getDrawable()).isInstanceOf(CloseButtonDrawable.class);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigurationTest.java
new file mode 100644
index 00000000..4b5dbc2e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigurationTest.java
@@ -0,0 +1,106 @@
+<<<<<<< HEAD:mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastVideoConfigurationTest.java
+package com.mopub.mobileads.util.vast;
+
+import com.mopub.mobileads.VastAbsoluteProgressTracker;
+import com.mopub.mobileads.VastFractionalProgressTracker;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class VastVideoConfigurationTest {
+
+    @Test
+    public void testAddFractionalTrackers_multipleTimes_shouldBeSorted() throws Exception {
+        ArrayList<VastFractionalProgressTracker> testSet1 = new ArrayList<VastFractionalProgressTracker>();
+        testSet1.add(new VastFractionalProgressTracker("test1a", 0.24f));
+        testSet1.add(new VastFractionalProgressTracker("test1b", 0.5f));
+        testSet1.add(new VastFractionalProgressTracker("test1c", 0.91f));
+
+        ArrayList<VastFractionalProgressTracker> testSet2 = new ArrayList<VastFractionalProgressTracker>();
+        testSet2.add(new VastFractionalProgressTracker("test2a", 0.14f));
+        testSet2.add(new VastFractionalProgressTracker("test2b", 0.6f));
+        testSet2.add(new VastFractionalProgressTracker("test2c", 0.71f));
+
+        VastVideoConfiguration subject = new VastVideoConfiguration();
+
+        subject.addFractionalTrackers(testSet1);
+        subject.addFractionalTrackers(testSet2);
+
+        assertThat(subject.getFractionalTrackers()).isSorted();
+    }
+
+    @Test
+    public void testAddAbsoluteTrackers_multipleTimes_shouldBesSorted() throws Exception {
+        ArrayList<VastAbsoluteProgressTracker> testSet1 = new ArrayList<VastAbsoluteProgressTracker>();
+        testSet1.add(new VastAbsoluteProgressTracker("test1a", 1000));
+        testSet1.add(new VastAbsoluteProgressTracker("test1b", 10000));
+        testSet1.add(new VastAbsoluteProgressTracker("test1c", 50000));
+
+        ArrayList<VastAbsoluteProgressTracker> testSet2 = new ArrayList<VastAbsoluteProgressTracker>();
+        testSet2.add(new VastAbsoluteProgressTracker("test2a", 1100));
+        testSet2.add(new VastAbsoluteProgressTracker("test2b", 9000));
+        testSet2.add(new VastAbsoluteProgressTracker("test2c", 62000));
+
+        VastVideoConfiguration subject = new VastVideoConfiguration();
+
+        subject.addAbsoluteTrackers(testSet1);
+        subject.addAbsoluteTrackers(testSet2);
+
+        assertThat(subject.getAbsoluteTrackers()).isSorted();
+    }
+}
+=======
+package com.mopub.mobileads;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class VastVideoConfigurationTest {
+
+    @Test
+    public void testAddFractionalTrackers_multipleTimes_shouldBeSorted() throws Exception {
+        ArrayList<VastFractionalProgressTracker> testSet1 = new ArrayList<VastFractionalProgressTracker>();
+        testSet1.add(new VastFractionalProgressTracker("test1a", 0.24f));
+        testSet1.add(new VastFractionalProgressTracker("test1b", 0.5f));
+        testSet1.add(new VastFractionalProgressTracker("test1c", 0.91f));
+
+        ArrayList<VastFractionalProgressTracker> testSet2 = new ArrayList<VastFractionalProgressTracker>();
+        testSet2.add(new VastFractionalProgressTracker("test2a", 0.14f));
+        testSet2.add(new VastFractionalProgressTracker("test2b", 0.6f));
+        testSet2.add(new VastFractionalProgressTracker("test2c", 0.71f));
+
+        VastVideoConfiguration subject = new VastVideoConfiguration();
+
+        subject.addFractionalTrackers(testSet1);
+        subject.addFractionalTrackers(testSet2);
+
+        assertThat(subject.getFractionalTrackers()).isSorted();
+    }
+
+    @Test
+    public void testAddAbsoluteTrackers_multipleTimes_shouldBesSorted() throws Exception {
+        ArrayList<VastAbsoluteProgressTracker> testSet1 = new ArrayList<VastAbsoluteProgressTracker>();
+        testSet1.add(new VastAbsoluteProgressTracker("test1a", 1000));
+        testSet1.add(new VastAbsoluteProgressTracker("test1b", 10000));
+        testSet1.add(new VastAbsoluteProgressTracker("test1c", 50000));
+
+        ArrayList<VastAbsoluteProgressTracker> testSet2 = new ArrayList<VastAbsoluteProgressTracker>();
+        testSet2.add(new VastAbsoluteProgressTracker("test2a", 1100));
+        testSet2.add(new VastAbsoluteProgressTracker("test2b", 9000));
+        testSet2.add(new VastAbsoluteProgressTracker("test2c", 62000));
+
+        VastVideoConfiguration subject = new VastVideoConfiguration();
+
+        subject.addAbsoluteTrackers(testSet1);
+        subject.addAbsoluteTrackers(testSet2);
+
+        assertThat(subject.getAbsoluteTrackers()).isSorted();
+    }
+}
+>>>>>>> upstream/master:mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigurationTest.java
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
new file mode 100644
index 00000000..0da12e67
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
@@ -0,0 +1,194 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoCtaButtonWidgetTest {
+    private Context context;
+    private VastVideoCtaButtonWidget subject;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+    }
+
+    @Test
+    public void constructor_withCompanionAd_shouldNotSetLayoutParams() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, true);
+
+        assertThat(subject.getLayoutParams()).isNull();
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void constructor_withoutCompanionAd_shouldNotSetLayoutParams() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, false);
+
+        assertThat(subject.getLayoutParams()).isNull();
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    // Video is skippable, has companion ad, CTA button initially invisible
+
+    @Test
+    public void notifyVideoSkippable_withCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, true);
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, true);
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, true);
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    // Video is skippable, no companion ad, CTA button initially invisible
+
+    @Test
+    public void notifyVideoSkippable_withoutCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, false);
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withoutCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, false);
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withoutCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, false);
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    // Video is complete, has companion ad, CTA button already visible
+
+    @Test
+    public void notifyVideoComplete_withCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoComplete_withCompanionAdAndInLandscape_shouldBeGoneAndNotChangeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    @Test
+    public void notifyVideoComplete_withCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    // Video is complete, no companion ad, CTA button already visible
+
+    @Test
+    public void notifyVideoComplete_withoutCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, false);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoComplete_withoutCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, false);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoComplete_withoutCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, false);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 5ca123b1..f560cc6d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -218,3 +219,229 @@ public void onVastVideoConfigurationPrepared_withNullVastVideoConfiguration_shou
         verify(customEventInterstitialListener).onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
     }
 }
+=======
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+
+import com.mopub.common.CacheServiceTest;
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.mobileads.test.support.TestVastManagerFactory;
+import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.VastManager.VastManagerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.withSettings;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoInterstitialTest extends ResponseBodyInterstitialTest {
+    private Context context;
+    private CustomEventInterstitialListener customEventInterstitialListener;
+    private Map<String, Object> localExtras;
+    private Map<String, String> serverExtras;
+    private TestHttpResponseWithHeaders response;
+    private String expectedResponse;
+    private VastManager vastManager;
+    private String videoUrl;
+    private VastVideoDownloadTask vastVideoDownloadTask;
+    private long broadcastIdentifier;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new VastVideoInterstitial();
+
+        vastVideoDownloadTask = TestVastVideoDownloadTaskFactory.getSingletonMock();
+        vastManager = TestVastManagerFactory.getSingletonMock();
+        expectedResponse = "<VAST>hello</VAST>";
+        videoUrl = "http://www.video.com";
+
+        context = new Activity();
+        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
+
+        response = new TestHttpResponseWithHeaders(200, expectedResponse);
+
+        broadcastIdentifier = 2222;
+        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        reset(vastVideoDownloadTask);
+    }
+
+    @Test
+    public void preRenderHtml_whenCreatingVideoCache_butItHasInitializationErrors_shouldSignalOnInterstitialFailedOnError() throws Exception {
+        // context is null when loadInterstitial is not called, which causes DiskLruCache to not be created
+
+        subject.preRenderHtml(customEventInterstitialListener);
+
+        verify(customEventInterstitialListener).onInterstitialFailed(
+                eq(MoPubErrorCode.VIDEO_CACHE_ERROR));
+        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
+                any(VastManagerListener.class), any(Context.class));
+    }
+
+    @Test
+    public void loadInterstitial_shouldParseHtmlResponseBodyServerExtra() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        assertThat(((VastVideoInterstitial) subject).getVastResponse()).isEqualTo(expectedResponse);
+    }
+
+    @Test
+    public void loadInterstitial_shouldInitializeDiskCache() throws Exception {
+        Robolectric.addPendingHttpResponse(response);
+
+        CacheServiceTest.assertDiskCacheIsUninitialized();
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        CacheServiceTest.assertDiskCacheIsEmpty();
+    }
+
+    @Test
+    public void loadInterstitial_shouldCreateVastManagerAndProcessVast() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        verify(vastManager).prepareVastVideoConfiguration(eq(expectedResponse),
+                eq((VastVideoInterstitial) subject), eq(context));
+    }
+
+    @Test
+    public void loadInterstitial_whenServerExtrasDoesNotContainResponse_shouldSignalOnInterstitialFailed() throws Exception {
+        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
+
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
+        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
+                any(VastManagerListener.class), any(Context.class));
+    }
+
+    @Test
+    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialShown();
+
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialDismissed();
+    }
+
+    @Test
+    public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers() throws Exception {
+        VastCompanionAd vastCompanionAd = mock(VastCompanionAd.class, withSettings().serializable());
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl(videoUrl);
+        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker
+                ("start", 2000)));
+        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new
+                        VastFractionalProgressTracker("first", 0.25f),
+                new VastFractionalProgressTracker("mid", 0.5f),
+                new VastFractionalProgressTracker("third", 0.75f)));
+        vastVideoConfiguration.addCompleteTrackers(VastUtils.stringsToVastTrackers("complete"));
+        vastVideoConfiguration.addImpressionTrackers(VastUtils.stringsToVastTrackers("imp"));
+        vastVideoConfiguration.setClickThroughUrl("clickThrough");
+        vastVideoConfiguration.addClickTrackers(VastUtils.stringsToVastTrackers("click"));
+        vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
+
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(vastVideoConfiguration);
+
+        subject.showInterstitial();
+        BaseVideoPlayerActivityTest.assertVastVideoPlayerActivityStarted(
+                MraidVideoPlayerActivity.class,
+                vastVideoConfiguration,
+                broadcastIdentifier
+                );
+    }
+
+    @Test
+    public void onInvalidate_shouldCancelVastManager() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.onInvalidate();
+
+        verify(vastManager).cancel();
+    }
+
+    @Test
+    public void onInvalidate_whenVastManagerIsNull_shouldNotBlowUp() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        ((VastVideoInterstitial) subject).setVastManager(null);
+
+        subject.onInvalidate();
+
+        // pass
+    }
+
+    @Test
+    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.onInvalidate();
+
+        Intent intent;
+        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialShown();
+
+        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
+    }
+
+    @Test
+    public void onVastVideoConfigurationPrepared_withVastVideoConfiguration_shouldSignalOnInterstitialLoaded() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(mock(VastVideoConfiguration.class));
+
+        verify(customEventInterstitialListener).onInterstitialLoaded();
+    }
+
+    @Test
+    public void onVastVideoConfigurationPrepared_withNullVastVideoConfiguration_shouldSignalOnInterstitialFailed() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(null);
+
+        verify(customEventInterstitialListener).onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
new file mode 100644
index 00000000..9b857699
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
@@ -0,0 +1,106 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.resource.ProgressBarDrawable;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoProgressBarWidgetTest {
+    private Context context;
+    private VastVideoProgressBarWidget subject;
+    private ProgressBarDrawable progressBarDrawableSpy;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new VastVideoProgressBarWidget(context, 0);
+        progressBarDrawableSpy = spy(subject.getImageViewDrawable());
+        subject.setImageViewDrawable(progressBarDrawableSpy);
+    }
+
+    @Test
+    public void calibrateAndMakeVisible_shouldSetDurationAndSkipOffsetAndMakeVisible() throws Exception {
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.calibrateAndMakeVisible(10000, 5000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setDurationAndSkipOffset(10000, 5000);
+        assertThat(progressBarDrawableSpy.getSkipRatio()).isEqualTo(0.5f);
+    }
+
+    @Test
+    public void updateProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        subject.updateProgress(1000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(1000);
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1000);
+    }
+
+    @Test
+    public void updateProgress_whenCurrentProgressGreaterThanPreviousProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        // Set mLastProgress to 1000
+        subject.updateProgress(1000);
+        reset(progressBarDrawableSpy);
+
+        subject.updateProgress(1001);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(1001);
+        verify(progressBarDrawableSpy, never()).forceCompletion();
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1001);
+    }
+
+    @Test
+    public void updateProgress_whenCurrentProgressLessThanPreviousProgressButNotZero_shouldForceProgressCompletionAndNotChangeVisibility() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+        subject.calibrateAndMakeVisible(10000, 5000);
+
+        // Set mLastProgress to 1000
+        subject.updateProgress(1000);
+        reset(progressBarDrawableSpy);
+
+        subject.updateProgress(999);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(999);
+        verify(progressBarDrawableSpy).forceCompletion();
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(10000);
+    }
+
+    @Test
+    public void updateProgress_whenCurrentProgressLessThanPreviousProgressAndIsZero_shouldNotForceProgressCompletionAndNotChangeVisibility() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+        subject.calibrateAndMakeVisible(10000, 5000);
+
+        // Set mLastProgress to 1000
+        subject.updateProgress(1000);
+        reset(progressBarDrawableSpy);
+
+        subject.updateProgress(0);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(0);
+        verify(progressBarDrawableSpy, never()).forceCompletion();
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1000);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
new file mode 100644
index 00000000..841f5c0d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
@@ -0,0 +1,96 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.resource.RadialCountdownDrawable;
+
+import junit.framework.TestCase;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoRadialCountdownWidgetTest {
+    private Context context;
+    private VastVideoRadialCountdownWidget subject;
+    private RadialCountdownDrawable radialCountdownDrawableSpy;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new VastVideoRadialCountdownWidget(context);
+        radialCountdownDrawableSpy = spy(subject.getImageViewDrawable());
+        subject.setImageViewDrawable(radialCountdownDrawableSpy);
+    }
+
+    @Test
+    public void calibrateAndMakeVisible_shouldSetInitialCountdownAndMakeVisible() throws Exception {
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.calibrateAndMakeVisible(10000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy).setInitialCountdown(10000);
+        assertThat(radialCountdownDrawableSpy.getInitialCountdownMilliseconds()).isEqualTo(10000);
+    }
+
+    @Test
+    public void updateCountdownProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        subject.updateCountdownProgress(10000, 1000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy).updateCountdownProgress(1000);
+    }
+
+    @Test
+    public void updateCountdownProgress_whenProgressIsGreaterThanInitialCountdown_shouldHideAndNotUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        subject.updateCountdownProgress(10000, 10001);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        verify(radialCountdownDrawableSpy, never()).updateCountdownProgress(anyInt());
+    }
+
+    @Test
+    public void updateCountdownProgress_whenCurrentProgressGreaterThanPreviousProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        // Set mLastProgressMilliseconds to 1000
+        subject.updateCountdownProgress(10000, 1000);
+        reset(radialCountdownDrawableSpy);
+
+        subject.updateCountdownProgress(10000, 1001);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy).updateCountdownProgress(1001);
+    }
+
+    @Test
+    public void updateCountdownProgress_whenCurrentProgressLessThanPreviousProgress_shouldNotChangeVisibilityOrUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        // Set mLastProgressMilliseconds to 1000
+        subject.updateCountdownProgress(10000, 1000);
+        reset(radialCountdownDrawableSpy);
+
+        subject.updateCountdownProgress(10000, 999);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy, never()).updateCountdownProgress(anyInt());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
deleted file mode 100644
index 79bd874c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.view.View;
-import android.widget.TextView;
-
-import com.mopub.mobileads.resource.TextDrawable;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoToolbarTest {
-    private Context context;
-    private VastVideoToolbar subject;
-    private View.OnTouchListener onTouchListener;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastVideoToolbar(context);
-
-        onTouchListener = mock(View.OnTouchListener.class);
-    }
-
-    @Test
-    public void constructor_shouldSetOnTouchListenerThatConsumesAllTouchEvents() throws Exception {
-        final View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        assertThat(onTouchListener).isNotNull();
-        assertThat(onTouchListener.onTouch(null, null)).isTrue();
-    }
-
-    @Test
-    public void constructor_shouldAddWidgetsToToolbar() throws Exception {
-        assertThat(subject.getChildCount()).isEqualTo(4);
-
-        assertThat(subject.getDurationWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getLearnMoreWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getCountdownWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getCloseButtonWidget().getParent()).isEqualTo(subject);
-    }
-
-    @Test
-    public void constructor_shouldOnlyStartWithDurationWidgetsVisible() throws Exception {
-        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void makeInteractable_shouldHideCountdownWidgetAndShowLearnMoreAndCloseButtonWidgets() throws Exception {
-        subject.makeInteractable();
-
-        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void setCloseButtonOnTouchListener_shouldPropagateToCloseButtonWidget() throws Exception {
-        subject.setCloseButtonOnTouchListener(onTouchListener);
-
-        assertThat(shadowOf(subject.getCloseButtonWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
-    }
-
-    @Test
-    public void setLearnButtonOnTouchListener_shouldPropagateToLearnButtonWidget() throws Exception {
-        subject.setLearnMoreButtonOnTouchListener(onTouchListener);
-
-        assertThat(shadowOf(subject.getLearnMoreWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
-    }
-
-    @Test
-    public void convertMillisecondsToSecondsRoundedUp_shouldReturnLongMillisecondsAsRoundedUpLongSeconds() throws Exception {
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(0)).isEqualTo(0);
-
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1)).isEqualTo(1);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(999)).isEqualTo(1);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1000)).isEqualTo(1);
-
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1001)).isEqualTo(2);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(100000)).isEqualTo(100);
-    }
-
-    @Test
-    public void formatTime_shouldReturnLongMillisecondsAsFormattedString() {
-        assertThat(subject.formatTime(-8999)).isEqualTo("-8 seconds");
-        assertThat(subject.formatTime(-9000)).isEqualTo("-9 seconds");
-        assertThat(subject.formatTime(-9001)).isEqualTo("-9 seconds");
-        assertThat(subject.formatTime(0)).isEqualTo("0 seconds");
-
-        assertThat(subject.formatTime(1)).isEqualTo("1 second");
-        assertThat(subject.formatTime(1000)).isEqualTo("1 second");
-        assertThat(subject.formatTime(1005)).isEqualTo("2 seconds");
-
-        assertThat(subject.formatTime(59999)).isEqualTo("60 seconds");
-        assertThat(subject.formatTime(60000)).isEqualTo("60 seconds");
-        assertThat(subject.formatTime(60001)).isEqualTo("61 seconds");
-        assertThat(subject.formatTime(853437)).isEqualTo("854 seconds");
-
-        assertThat(subject.formatTime(3599999)).isEqualTo("3600 seconds");
-        assertThat(subject.formatTime(3600000)).isEqualTo("3600 seconds");
-        assertThat(subject.formatTime(3600001)).isEqualTo("3601 seconds");
-        assertThat(subject.formatTime(3660001)).isEqualTo("3661 seconds");
-        assertThat(subject.formatTime(65784693)).isEqualTo("65785 seconds");
-    }
-
-    @Test
-    public void updateCountdownWidget_shouldUpdateTextDrawablesDisplayNumber() throws Exception {
-        final TextDrawable countdownImageSpy = spy((TextDrawable) subject.getCountdownWidget().getImageViewDrawable());
-        subject.getCountdownWidget().setImageViewDrawable((Drawable) countdownImageSpy);
-
-        subject.updateCountdownWidget(1002);
-
-        verify(countdownImageSpy).updateText("2");
-    }
-
-    @Test
-    public void updateCountdownWidget_shouldHideCloseButtonAndShowCountdown() throws Exception {
-        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
-        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
-
-        subject.updateCountdownWidget(1);
-
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void updateCountdownWidget_whenRemainingTimeIsNegative_shouldNotModifyWidgetVisibility() throws Exception {
-        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
-        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
-
-        subject.updateCountdownWidget(-1);
-
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void updateDurationWidget_shouldShowWhenVideoEnds() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(100000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 100 seconds");
-
-        subject.updateDurationWidget(99000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 99 seconds");
-    }
-
-    @Test
-    public void updateDurationWidget_whenBelowThresholdForHidingVideoDuration_shouldShowThanksForWatching() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(50000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 50 seconds");
-
-        // 200ms of remaining video is the cut off for switching to "Thanks for watching"
-        subject.updateDurationWidget(200);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 1 second");
-
-        subject.updateDurationWidget(199);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Thanks for watching");
-    }
-
-    @Test
-    public void updateDurationWidget_whenRemainingTimeIsNegative_shouldDoNothing() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(-1);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-    }
-
-    private TextView getDurationWidgetTextView() {
-        final ToolbarWidget durationWidget = subject.getDurationWidget();
-        final int childCount = durationWidget.getChildCount();
-        for (int i = 0; i < childCount; i++) {
-            final View child = durationWidget.getChildAt(i);
-            if (child instanceof TextView) {
-                return (TextView) child;
-            }
-        }
-        return null;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index b36fcaf5..ed77778e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -1,18 +1,20 @@
 package com.mopub.mobileads;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
-import android.graphics.drawable.GradientDrawable;
-import android.graphics.drawable.LayerDrawable;
+import android.media.MediaMetadataRetriever;
 import android.media.MediaPlayer;
+import android.net.Uri;
 import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
 import android.view.View;
-import android.view.ViewGroup;
 import android.webkit.WebView;
 import android.widget.ImageView;
 import android.widget.VideoView;
@@ -20,12 +22,9 @@
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils.ForceOrientation;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Drawables;
 import com.mopub.mobileads.resource.CloseButtonDrawable;
 import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.util.vast.VastCompanionAd;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+import com.mopub.mobileads.test.support.VastUtils;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
@@ -40,19 +39,21 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowImageView;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.shadows.ShadowRelativeLayout;
+import org.robolectric.shadows.ShadowTextView;
 import org.robolectric.shadows.ShadowVideoView;
 import org.robolectric.tester.org.apache.http.RequestMatcher;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
 import java.io.File;
-import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static com.mopub.common.util.ResponseHeader.USER_AGENT;
@@ -63,8 +64,10 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
 import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
 import static com.mopub.mobileads.VastVideoViewController.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON;
+import static com.mopub.mobileads.VastVideoViewController.RESUMED_VAST_CONFIGURATION;
 import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
 import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -72,6 +75,7 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyLong;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -92,61 +96,97 @@
     private static final String COMPANION_CLICK_TRACKING_URL_1 = "companion_click_tracking_url_1";
     private static final String COMPANION_CLICK_TRACKING_URL_2 = "companion_click_tracking_url_2";
     private static final String COMPANION_CLICK_DESTINATION_URL = "http://companion_click_destination_url";
-    private static final String CLICKTHROUGH_URL = "http://clickthrough_url";
+    private static final String COMPANION_CREATIVE_VIEW_URL_1 = "companion_creative_view_url_1";
+    private static final String COMPANION_CREATIVE_VIEW_URL_2 = "companion_creative_view_url_2";
+    private static final String RESOLVED_CLICKTHROUGH_URL = "http://clickthrough_url";
+    private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
+            "&primaryUrl=bogus%3A%2F%2Furl" +
+            "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
+
+    /**
+     * A list of macros to include in all trackers
+     */
+    private static final String MACRO_TAGS = "?errorcode=[ERRORCODE]&asseturi=[ASSETURI]&contentplayhead=[CONTENTPLAYHEAD]";
 
     private Context context;
     private Bundle bundle;
+    private Bundle savedInstanceState;
     private long testBroadcastIdentifier;
     private VastVideoViewController subject;
-    private BaseVideoViewControllerListener baseVideoViewControllerListener;
-    private EventForwardingBroadcastReceiver broadcastReceiver;
     private int expectedBrowserRequestCode;
     private String expectedUserAgent;
 
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Mock
-    MaxWidthImageLoader mockImageLoader;
-    @Mock
-    private VideoView mockVideoView;
+    @Mock private BaseVideoViewControllerListener baseVideoViewControllerListener;
+    @Mock private EventForwardingBroadcastReceiver broadcastReceiver;
+    @Mock MoPubRequestQueue mockRequestQueue;
+    @Mock MaxWidthImageLoader mockImageLoader;
+    @Mock private VastIcon mockVastIcon;
+    @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
+    @Mock private Bitmap mockBitmap;
 
     private VastVideoViewCountdownRunnable spyCountdownRunnable;
     private VastVideoViewProgressRunnable spyProgressRunnable;
     private VideoView spyVideoView;
 
-
+    @TargetApi(VERSION_CODES.GINGERBREAD_MR1)
     @Before
     public void setUp() throws Exception {
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
         context = Robolectric.buildActivity(Activity.class).create().get();
         bundle = new Bundle();
+        savedInstanceState = new Bundle();
         testBroadcastIdentifier = 1111;
-        broadcastReceiver = mock(EventForwardingBroadcastReceiver.class);
-        baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("mid", 0.5f), new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete"));
-        vastVideoConfiguration.addCloseTrackers(Arrays.asList("close"));
-        vastVideoConfiguration.addSkipTrackers(Arrays.asList("skip"));
-        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
+        vastVideoConfiguration.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("start" + MACRO_TAGS, 2000)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f),
+                        new VastFractionalProgressTracker("mid" + MACRO_TAGS, 0.5f),
+                        new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
+        vastVideoConfiguration.addPauseTrackers(
+                Arrays.asList(new VastTracker("pause" + MACRO_TAGS, true)));
+        vastVideoConfiguration.addResumeTrackers(
+                Arrays.asList(new VastTracker("resume" + MACRO_TAGS, true)));
+        vastVideoConfiguration.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete" + MACRO_TAGS));
+        vastVideoConfiguration.addCloseTrackers(
+                VastUtils.stringsToVastTrackers("close" + MACRO_TAGS));
+        vastVideoConfiguration.addSkipTrackers(VastUtils.stringsToVastTrackers("skip" + MACRO_TAGS));
+        vastVideoConfiguration.addImpressionTrackers(
+                VastUtils.stringsToVastTrackers("imp" + MACRO_TAGS));
+        vastVideoConfiguration.addErrorTrackers(
+                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
         vastVideoConfiguration.setClickThroughUrl(CLICKTHROUGH_URL);
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
+        vastVideoConfiguration.addClickTrackers(
+                VastUtils.stringsToVastTrackers("click_1" + MACRO_TAGS, "click_2" + MACRO_TAGS));
 
         VastCompanionAd vastCompanionAd = new VastCompanionAd(
                 300,
                 250,
-                COMPANION_IMAGE_URL,
+                new VastResource(COMPANION_IMAGE_URL,
+                        VastResource.Type.STATIC_RESOURCE,
+                        VastResource.CreativeType.IMAGE, 300, 250),
                 COMPANION_CLICK_DESTINATION_URL,
-                new ArrayList<String>(Arrays.asList(COMPANION_CLICK_TRACKING_URL_1, COMPANION_CLICK_TRACKING_URL_2))
+                VastUtils.stringsToVastTrackers(COMPANION_CLICK_TRACKING_URL_1, COMPANION_CLICK_TRACKING_URL_2),
+                VastUtils.stringsToVastTrackers(COMPANION_CREATIVE_VIEW_URL_1, COMPANION_CREATIVE_VIEW_URL_2)
         );
         vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
 
+        when(mockVastIcon.getWidth()).thenReturn(40);
+        when(mockVastIcon.getHeight()).thenReturn(40);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastResource.getCreativeType()).thenReturn(VastResource.CreativeType.IMAGE);
+        when(mockVastIcon.getVastResource()).thenReturn(vastResource);
+        vastVideoConfiguration.setVastIcon(mockVastIcon);
+
+        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(mockBitmap);
+
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         expectedBrowserRequestCode = 1;
@@ -177,17 +217,88 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    public void constructor_shouldAddVastVideoToolbarToLayout() throws Exception {
+    public void constructor_shouldAddCtaButtonWidgetToLayoutAndSetInvisibleWithOnTouchListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoCtaButtonWidget ctaButtonWidget = subject.getCtaButtonWidget();
+        assertThat(ctaButtonWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(ctaButtonWidget.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView ctaButtonWidgetShadow = shadowOf(ctaButtonWidget);
+        assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isNotNull();
+        assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isEqualTo(getShadowVideoView().getOnTouchListener());
+    }
+
+    @Test
+    public void constructor_shouldAddProgressBarWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoProgressBarWidget progressBarWidget = subject.getProgressBarWidget();
+        assertThat(progressBarWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(progressBarWidget.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView progressBarWidgetShadow = shadowOf(progressBarWidget);
+        assertThat(progressBarWidgetShadow.getOnTouchListener()).isNull();
+    }
+
+    @Test
+    public void constructor_shouldAddRadialCountdownWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
+        assertThat(radialCountdownWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView radialCountdownWidgetShadow = shadowOf(radialCountdownWidget);
+        assertThat(radialCountdownWidgetShadow.getOnTouchListener()).isNull();
+    }
+
+    @Test
+    public void constructor_shouldAddCloseButtonWidgetToLayoutAndSetToGoneWithOnTouchListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoCloseButtonWidget closeButtonWidget = subject.getCloseButtonWidget();
+        assertThat(closeButtonWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(closeButtonWidget.getVisibility()).isEqualTo(View.GONE);
+
+        ShadowRelativeLayout closeButtonWidgetShadow = (ShadowRelativeLayout) shadowOf(closeButtonWidget);
+        assertThat(closeButtonWidgetShadow.getOnTouchListener()).isNull();
+
+        ShadowImageView closeButtonImageViewShadow = shadowOf(closeButtonWidget.getImageView());
+        assertThat(closeButtonImageViewShadow.getOnTouchListener()).isNotNull();
+
+        ShadowTextView closeButtonTextViewShadow = shadowOf(closeButtonWidget.getTextView());
+        assertThat(closeButtonTextViewShadow.getOnTouchListener()).isNotNull();
+    }
+
+    @Test
+    public void constructor_shouldAddTopGradientWidgetToLayoutAndSetVisibleWithNoListeners() throws Exception {
         initializeSubject();
 
-        VastVideoToolbar vastVideoToolbar = getVastVideoToolbar();
-        final ViewGroup.LayoutParams layoutParams = vastVideoToolbar.getLayoutParams();
+        VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
+        assertThat(topGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.VISIBLE);
+        ShadowImageView topGradientStripWidgetShadow = shadowOf(topGradientStripWidget);
+        assertThat(topGradientStripWidgetShadow.getOnTouchListener()).isNull();
+    }
 
-        assertThat(vastVideoToolbar.getParent()).isEqualTo(subject.getLayout());
-        assertThat(vastVideoToolbar.getVisibility()).isEqualTo(View.VISIBLE);
+    @Test
+    public void constructor_shouldAddBottomGradientWidgetToLayoutAndSetVisibleWithNoListeners() throws Exception {
+        initializeSubject();
 
-        assertThat(layoutParams.width).isEqualTo(MATCH_PARENT);
-        assertThat(layoutParams.height).isEqualTo(Dips.dipsToIntPixels(44, context));
+        VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
+        assertThat(bottomGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.VISIBLE);
+        ShadowImageView bottomGradientStripWidgetShadow = shadowOf(bottomGradientStripWidget);
+        assertThat(bottomGradientStripWidgetShadow.getOnTouchListener()).isNull();
+    }
+
+    @Test
+    public void constructor_shouldAddBlurredLastVideoFrameWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
+        initializeSubject();
+
+        ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
+        assertThat(blurredLastVideoFrameImageView.getParent()).isEqualTo(subject.getLayout());
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView blurredLastVideoFrameImageViewShadow = shadowOf(blurredLastVideoFrameImageView);
+        assertThat(blurredLastVideoFrameImageViewShadow.getOnTouchListener()).isNull();
     }
 
     @Test
@@ -208,21 +319,17 @@ public void constructor_shouldSetVideoListenersAndVideoPath() throws Exception {
     public void constructor_shouldNotChangeCloseButtonDelay() throws Exception {
         initializeSubject();
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
     }
 
+    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
-    public void constructor_shouldAddThatchedBackgroundWithGradientToLayout() throws Exception {
+    public void constructor_shouldAddBlackBackgroundToLayout() throws Exception {
         initializeSubject();
-        ViewGroup viewGroup = subject.getLayout();
-        LayerDrawable layerDrawable = (LayerDrawable) viewGroup.getBackground();
-        assertThat(layerDrawable.getDrawable(0)).isEqualTo(Drawables.THATCHED_BACKGROUND.createDrawable(
-                context));
-        assertThat(layerDrawable.getDrawable(1)).isEqualTo(
-                new GradientDrawable(
-                        GradientDrawable.Orientation.TOP_BOTTOM,
-                        new int[]{Color.argb(0, 0, 0, 0), Color.argb(255, 0, 0, 0)})
-        );
+        Drawable background = subject.getLayout().getBackground();
+        assertThat(background).isInstanceOf(ColorDrawable.class);
+        assertThat(((ColorDrawable) background).getColor()).isEqualTo(Color.BLACK);
     }
 
     @Test
@@ -255,7 +362,8 @@ public void constructor_whenCustomCtaTextNotSpecified_shouldUseDefaultCtaText()
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getLearnMoreWidget().getTextViewText()).isEqualTo("Learn More");
+        assertThat(subject.getCtaButtonWidget().getCtaText()).isEqualTo(
+                "Learn More");
     }
 
     @Test
@@ -267,7 +375,8 @@ public void constructor_whenCustomCtaTextSpecified_shouldUseCustomCtaText() thro
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getLearnMoreWidget().getTextViewText()).isEqualTo("custom CTA text");
+        assertThat(subject.getCtaButtonWidget().getCtaText()).isEqualTo(
+                "custom CTA text");
     }
 
     @Test
@@ -278,7 +387,8 @@ public void constructor_whenCustomSkipTextNotSpecified_shouldUseDefaultSkipText(
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getCloseButtonWidget().getTextViewText()).isEqualTo("Close");
+        assertThat(subject.getCloseButtonWidget().getTextView().getText().toString()).isEqualTo(
+                "");
     }
 
     @Test
@@ -290,7 +400,8 @@ public void constructor_whenCustomSkipTextSpecified_shouldUseCustomSkipText() th
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getCloseButtonWidget().getTextViewText()).isEqualTo("custom skip text");
+        assertThat(subject.getCloseButtonWidget().getTextView().getText().toString()).isEqualTo(
+                "custom skip text");
     }
 
     @Test
@@ -301,7 +412,7 @@ public void constructor_whenCustomCloseIconNotSpecified_shouldUseDefaultCloseIco
 
         initializeSubject();
 
-        Drawable imageViewDrawable = getVastVideoToolbar().getCloseButtonWidget().getImageViewDrawable();
+        Drawable imageViewDrawable = subject.getCloseButtonWidget().getImageView().getDrawable();
 
         // Default close icon is an instance of CloseButtonDrawable
         assertThat(imageViewDrawable).isInstanceOf(CloseButtonDrawable.class);
@@ -311,27 +422,55 @@ public void constructor_whenCustomCloseIconNotSpecified_shouldUseDefaultCloseIco
     public void constructor_whenCustomCloseIconSpecified_shouldUseCustomCloseIcon() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setCustomCloseIconUrl("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png");
+        vastVideoConfiguration.setCustomCloseIconUrl(
+                "http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png");
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
 
-        verify(mockImageLoader).get(eq("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png"), any(ImageListener.class));
+        verify(mockImageLoader).get(
+                eq("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png"),
+                any(ImageListener.class));
     }
 
     @Test
-    public void onCreate_withCompanionAd_shouldDownloadCompanionAd() throws Exception {
+    public void constructor_withVastConfigurationInSavedInstanceState_shouldUseThatVastConfiguration() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.setNetworkMediaFileUrl("resumed_network_media_url");
+        savedInstanceState.putSerializable(RESUMED_VAST_CONFIGURATION, vastVideoConfiguration);
+
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.getDrawable()).isNull();
+        assertThat(subject.getNetworkMediaFileUrl()).isEqualTo("resumed_network_media_url");
+    }
 
-        subject.onCreate();
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
+    @Test
+    public void constructor_withSavedVastConfiguration_shouldUseThatVastConfiguration() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.setNetworkMediaFileUrl("resumed_network_media_url");
+        savedInstanceState.putSerializable(RESUMED_VAST_CONFIGURATION, vastVideoConfiguration);
 
-        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
+        initializeSubject();
+
+        assertThat(subject.getNetworkMediaFileUrl()).isEqualTo("resumed_network_media_url");
+    }
+
+    @Test
+    public void constructor_withSavedVastConfiguration_withCurrentPositionSet_shouldResumeVideoFromCurrentPosition() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.setNetworkMediaFileUrl("resumed_network_media_url");
+        savedInstanceState.putSerializable(RESUMED_VAST_CONFIGURATION, vastVideoConfiguration);
+        savedInstanceState.putInt(CURRENT_POSITION, 123);
+
+        initializeSubject();
+        spyOnVideoView();
+
+        subject.onResume();
+
+        verify(spyVideoView).seekTo(eq(123));
     }
 
     @Test
@@ -339,7 +478,8 @@ public void onCreate_shouldFireImpressionTracker() throws Exception {
         initializeSubject();
 
         subject.onCreate();
-        verify(mockRequestQueue).add(argThat(isUrl("imp")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("imp?errorcode=&asseturi=video_url&contentplayhead=00:00:00.000")));
     }
 
     @Test
@@ -362,7 +502,8 @@ public void onCreate_whenCustomForceOrientationNotSpecified_shouldForceLandscape
         initializeSubject();
         subject.onCreate();
 
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
+                SCREEN_ORIENTATION_LANDSCAPE);
     }
 
     @Test
@@ -388,7 +529,8 @@ public void onCreate_whenCustomForceOrientationIsPortraitOrientation_shouldForce
         initializeSubject();
         subject.onCreate();
 
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(SCREEN_ORIENTATION_PORTRAIT);
+        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
+                SCREEN_ORIENTATION_PORTRAIT);
     }
 
     @Test
@@ -401,49 +543,53 @@ public void onCreate_whenCustomForceOrientationIsLandscapeOrientation_shouldForc
         initializeSubject();
         subject.onCreate();
 
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
+                SCREEN_ORIENTATION_LANDSCAPE);
     }
 
     @Test
-    public void onComplete_withNullDownloadResponse_shouldNotSetCompanionAdImageBitmap() throws Exception {
+    public void VastWebView_onVastWebViewClick_shouldCallVastCompanionAdHandleClick() throws Exception {
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.getDrawable()).isNull();
+        VastCompanionAd vastCompanionAd = mock(VastCompanionAd.class);
+        when(vastCompanionAd.getWidth()).thenReturn(300);
+        when(vastCompanionAd.getHeight()).thenReturn(240);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastCompanionAd.getVastResource()).thenReturn(vastResource);
 
-        subject.onComplete("url", null);
+        VastWebView view = (VastWebView) subject.createCompanionAdView(context, vastCompanionAd, View.INVISIBLE);
 
-        assertThat(imageView.getDrawable()).isNull();
+        view.getVastWebViewClickListener().onVastWebViewClick();
+        verify(vastCompanionAd).handleClick(any(Context.class), eq(1), anyString());
     }
 
     @Test
-    public void onClick_withCompanionAd_shouldFireCompanionAdClickTrackersAndStartMoPubBrowser() throws Exception {
+    public void createCompanionAdView_shouldLayoutAndReturnInvisibleVastIconView() throws Exception {
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.performClick()).isFalse();
-        subject.onCreate();
-
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(imageView.performClick()).isTrue();
+        VastCompanionAd vastCompanionAd = mock(VastCompanionAd.class);
+        when(vastCompanionAd.getWidth()).thenReturn(300);
+        when(vastCompanionAd.getHeight()).thenReturn(240);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastCompanionAd.getVastResource()).thenReturn(vastResource);
 
-        // This request is still made by the older http stack.
-        assertHttpRequestsMade(expectedUserAgent, COMPANION_IMAGE_URL);
+        VastWebView view = (VastWebView) subject.createCompanionAdView(context, vastCompanionAd, View.INVISIBLE);
 
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CLICK_TRACKING_URL_1)));
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CLICK_TRACKING_URL_2)));
+        assertThat(view).isNotNull();
+        assertThat(view.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(view.getVastWebViewClickListener()).isNotNull();
+        assertThat(subject.getLayout().findViewById(view.getId())).isEqualTo(view);
+    }
 
-        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(baseVideoViewControllerListener).onStartActivityForResult(
-                eq(MoPubBrowser.class),
-                eq(expectedBrowserRequestCode),
-                bundleCaptor.capture()
-        );
+    @Test
+    public void createCompanionAdView_withNullCompanionAd_shouldReturnEmptyView() throws Exception {
+        initializeSubject();
 
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo(COMPANION_CLICK_DESTINATION_URL);
+        assertThat(subject.createCompanionAdView(context, null, View.INVISIBLE)).isNotNull();
     }
 
     @Test
@@ -458,6 +604,18 @@ public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
+    @Test
+    public void onSaveInstanceState_shouldSetCurrentPosition_shouldSetVastConfiguration() throws Exception {
+        initializeSubject();
+
+        Bundle bundle = mock(Bundle.class);
+        subject.onSaveInstanceState(bundle);
+
+        verify(bundle).putInt(eq(CURRENT_POSITION), anyInt());
+        verify(bundle).putSerializable(eq(RESUMED_VAST_CONFIGURATION), any(VastVideoConfiguration
+                .class));
+    }
+
     @Test
     public void onActivityResult_shouldCallFinish() throws Exception {
         final int expectedResultCode = Activity.RESULT_OK;
@@ -509,7 +667,7 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_sho
     }
 
     @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldStartMoPubBrowser() throws Exception {
+    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldTrackClick_shouldStartMoPubBrowser() throws Exception {
         initializeSubject();
         spyOnVideoView();
         setVideoViewParams(15999, 15999);
@@ -528,7 +686,8 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shou
                 bundleCaptor.capture()
         );
 
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo(CLICKTHROUGH_URL);
+        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY))
+                .isEqualTo(RESOLVED_CLICKTHROUGH_URL);
     }
 
     @Test
@@ -568,30 +727,41 @@ public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Secon
                 bundleCaptor.capture()
         );
 
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo(CLICKTHROUGH_URL);
+        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY))
+                .isEqualTo(RESOLVED_CLICKTHROUGH_URL);
     }
 
     @Test
     public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
+        vastVideoConfiguration.addClickTrackers(
+                VastUtils.stringsToVastTrackers("click_1" + MACRO_TAGS, "click_2" + MACRO_TAGS));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
+        spyOnVideoView();
+        // Because it's almost never exactly 15 seconds
+        when(spyVideoView.getDuration()).thenReturn(15142);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
         subject.setCloseButtonVisible(true);
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        verify(mockRequestQueue).add(argThat(isUrl("click_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("click_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "click_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.142")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "click_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.142")));
     }
 
     @Test
     public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
+        vastVideoConfiguration.addClickTrackers(VastUtils.stringsToVastTrackers("click_1",
+                "click_2"));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -604,9 +774,10 @@ public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers(
 
     @Test
     public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
-        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, null);
+        subject = new VastVideoViewController(context, bundle, null, testBroadcastIdentifier, null);
 
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(
+                0, 0));
 
         // pass
 
@@ -617,7 +788,8 @@ public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnT
     public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
         initializeSubject();
 
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionDown(0, 0));
+        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionDown(
+                0, 0));
 
         assertThat(result).isTrue();
     }
@@ -641,7 +813,8 @@ public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_s
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
     }
 
     @Test
@@ -827,10 +1000,93 @@ public void onPrepared_whenSkipOffsetIsLongerThanDurationForLongVideo_shouldNotS
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
+    @Test
+    public void onPrepared_shouldCalibrateAndMakeVisibleRadialCountdownWidget() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.setSkipOffset("00:00:05");
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        initializeSubject();
+        spyOnVideoView();
+        setVideoViewParams(0, 10000);
+
+        final VastVideoRadialCountdownWidget radialCountdownWidgetSpy = spy(subject.getRadialCountdownWidget());
+        subject.setRadialCountdownWidget(radialCountdownWidgetSpy);
+
+        assertThat(subject.isCalibrationDone()).isFalse();
+        assertThat(radialCountdownWidgetSpy.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.isCalibrationDone()).isTrue();
+        assertThat(radialCountdownWidgetSpy.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownWidgetSpy).calibrateAndMakeVisible(5000);
+    }
+
+    @Test
+    public void onPrepared_shouldCalibrateAndMakeVisibleProgressBarWidget() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.setSkipOffset("00:00:05");
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        initializeSubject();
+        spyOnVideoView();
+        setVideoViewParams(0, 10000);
+
+        final VastVideoProgressBarWidget progressBarWidgetSpy = spy(subject.getProgressBarWidget());
+        subject.setProgressBarWidget(progressBarWidgetSpy);
+
+        assertThat(subject.isCalibrationDone()).isFalse();
+        assertThat(progressBarWidgetSpy.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.isCalibrationDone()).isTrue();
+        assertThat(progressBarWidgetSpy.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarWidgetSpy).calibrateAndMakeVisible(10000, 5000);
+    }
+
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD)
+    @Test
+    public void onPrepared_beforeGingerbreadMr1_shouldNotSetBlurredLastVideoFrame() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.getBlurredLastVideoFrameImageView().getDrawable()).isNull();
+
+        ShadowImageView imageView = shadowOf(subject.getBlurredLastVideoFrameImageView());
+        assertThat(imageView.getOnTouchListener()).isNull();
+    }
+
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void onPrepared_atLeastGingerbreadMr1_shouldSetBlurredLastVideoFrame() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
+        assertThat(blurredLastVideoFrameImageView.getDrawable()).isInstanceOf(BitmapDrawable.class);
+        assertThat(((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
+
+        ShadowImageView imageView = shadowOf(subject.getBlurredLastVideoFrameImageView());
+        assertThat(imageView.getOnTouchListener()).isNull();
+    }
+
     @Test
     public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
         initializeSubject();
@@ -843,31 +1099,44 @@ public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
     @Test
     public void onCompletion_whenAllTrackersTracked_whenNoPlaybackErrors_shouldPingCompletionTrackersOnlyOnce() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker("testUrl", 123);
+        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker(
+                "testUrl" + MACRO_TAGS, 123);
         vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(testTracker));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
+        vastVideoConfiguration.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1" + MACRO_TAGS,
+                        "complete_2" + MACRO_TAGS));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
         testTracker.setTracked();
+        spyOnVideoView();
+        setVideoViewParams(15000, 15000);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
 
         // Completion trackers should still only be hit once
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
     }
 
     @Test
     public void onCompletion_whenSomeTrackersRemain_shouldNotPingCompletionTrackers() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker("testUrl", 123);
+        vastVideoConfiguration.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
+        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker(
+                "testUrl" + MACRO_TAGS, 123);
         // Never track the testTracker, so completion trackers should not be fired.
         vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(testTracker));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
@@ -882,12 +1151,16 @@ public void onCompletion_whenSomeTrackersRemain_shouldNotPingCompletionTrackers(
     @Test
     public void onCompletion_whenPlaybackError_shouldNotPingCompletionTrackers() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
+        vastVideoConfiguration.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
         subject.setVideoError();
+        spyOnVideoView();
+        setVideoViewParams(12345, 15000);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
         verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
@@ -919,39 +1192,75 @@ public void onCompletion_shouldStopProgressCheckerAndCountdown() throws Exceptio
     }
 
     @Test
-    public void onCompletion_shouldDisplayCompanionAdIfAvailable() throws Exception {
+    public void onCompletion_whenCompanionAdAvailable_shouldShowCompanionAdAndHideBlurredLastVideoFrame() throws Exception {
         initializeSubject();
-        subject.onCreate();
 
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
+        final View companionView = subject.getCompanionAdView();
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void onCompletion_whenCompanionAdNotAvailable_shouldHideCompanionAdAndShowBlurredLastVideoFrame() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.setVastCompanionAd(null);
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+
+        final View companionView = subject.getCompanionAdView();
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
 
         assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
 
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getDrawable()).isInstanceOf(BitmapDrawable.class);
+        assertThat(((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
     }
 
+    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
-    public void onCompletion_shouldShowThatchedBackground() throws Exception {
+    public void onCompletion_whenCompanionAdNotAvailableAndBlurredLastVideoFrameNotPrepared_shouldShowBlackBackground() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.setVastCompanionAd(null);
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
+        final View companionView = subject.getCompanionAdView();
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
 
         assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        Drawable background = subject.getLayout().getBackground();
+        assertThat(((ColorDrawable) background).getColor()).isEqualTo(Color.BLACK);
     }
 
     @Test
@@ -1001,6 +1310,51 @@ public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayin
         file.delete();
     }
 
+    @Test
+    public void onError_shouldFireErrorTrackers() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
+        vastVideoConfiguration.addErrorTrackers(
+                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.setVideoError();
+        spyOnVideoView();
+        setVideoViewParams(12345, 15000);
+
+        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "error?errorcode=400&asseturi=video_url&contentplayhead=00:00:12.345")));
+    }
+
+    @Test
+    public void onError_withMultipleCalls_shouldRepeatedlyFireErrorTrackers() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addErrorTrackers(
+                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.setVideoError();
+        spyOnVideoView();
+        setVideoViewParams(12345, 15000);
+
+        for(int i = 0; i < 10; i++) {
+            getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+            verify(mockRequestQueue).add(argThat(isUrl(
+                    "error?errorcode=400&asseturi=video_url&contentplayhead=00:00:12.345")));
+        }
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
     @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
     public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
@@ -1079,29 +1433,12 @@ public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRe
         assertThat(subject.getVideoRetries()).isEqualTo(1);
     }
 
-    @Test
-    public void handleClick_shouldMakeRequestsToClickTrackingUrls() throws Exception {
-        initializeSubject();
-        subject.handleClick(Arrays.asList("clicktracker1", "clicktracker2"), CLICKTHROUGH_URL);
-
-        verify(mockRequestQueue).add(argThat(isUrl("clicktracker1")));
-        verify(mockRequestQueue).add(argThat(isUrl("clicktracker2")));
-    }
-
-    @Test
-    public void handleClick_withNullClickTrackers_shouldNotThrowAnException() throws Exception {
-        initializeSubject();
-        subject.handleClick(null, CLICKTHROUGH_URL);
-
-        // pass
-    }
-
     @Test
     public void handleClick_withNullClickThroughUrl_shouldNotBroadcastClickOrOpenNewActivity() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
 
         initializeSubject();
-        subject.handleClick(Arrays.asList("clicktracker"), null);
+        subject.handleClick(null);
 
         Robolectric.getUiThreadScheduler().unPause();
         verify(broadcastReceiver, never()).onReceive(any(Context.class), eq(expectedIntent));
@@ -1112,8 +1449,7 @@ public void handleClick_withNullClickThroughUrl_shouldNotBroadcastClickOrOpenNew
     public void handleClick_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser() throws Exception {
         initializeSubject();
 
-        subject.handleClick(Arrays.asList("clicktracker"),
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
+        subject.handleClick("mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getDataString()).isEqualTo("http://www.mopub.com");
@@ -1125,8 +1461,7 @@ public void handleClick_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNot
         initializeSubject();
 
         // url2 is an invalid query parameter
-        subject.handleClick(Arrays.asList("clicktracker"),
-                "mopubnativebrowser://navigate?url2=http%3A%2F%2Fwww.mopub.com");
+        subject.handleClick("mopubnativebrowser://navigate?url2=http%3A%2F%2Fwww.mopub.com");
 
         assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
     }
@@ -1135,7 +1470,7 @@ public void handleClick_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNot
     public void handleClick_withAboutBlankClickThroughUrl_shouldFailSilently() throws Exception {
         initializeSubject();
 
-        subject.handleClick(Arrays.asList("clicktracker"), "about:blank");
+        subject.handleClick("about:blank");
 
         assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
     }
@@ -1143,10 +1478,12 @@ public void handleClick_withAboutBlankClickThroughUrl_shouldFailSilently() throw
     @Test
     public void videoRunnablesRun_shouldFireOffAllProgressTrackers() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("second", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f),
+                        new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f),
+                        new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
 
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
@@ -1158,19 +1495,25 @@ public void videoRunnablesRun_shouldFireOffAllProgressTrackers() throws Exceptio
         // this runs the videoProgressChecker and countdown runnable
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
-        verify(mockRequestQueue).add(argThat(isUrl("third")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("third?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
     }
 
     @Test
     public void getUntriggeredTrackersBefore_endOfVideo_shouldReturnAllTrackers() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("second", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("1secs", 1000), new VastAbsoluteProgressTracker("10secs", 10000)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
+                        new VastFractionalProgressTracker("second", 0.5f),
+                        new VastFractionalProgressTracker("third", 0.75f)));
+        vastVideoConfiguration.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("1secs", 1000),
+                        new VastAbsoluteProgressTracker("10secs", 10000)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1207,10 +1550,13 @@ public void getUntriggeredTrackersBefore_endOfVideo_shouldReturnAllTrackers() th
     public void getUntriggeredTrackersBefore_withTriggeredTrackers_shouldNotReturnTriggered() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("second", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("5secs", 5000), new VastAbsoluteProgressTracker("10secs", 10000)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
+                        new VastFractionalProgressTracker("second", 0.5f),
+                        new VastFractionalProgressTracker("third", 0.75f)));
+        vastVideoConfiguration.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("5secs", 5000),
+                        new VastAbsoluteProgressTracker("10secs", 10000)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1248,7 +1594,8 @@ public void videoRunnablesRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls
     public void videoRunnablesRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireStartTracker() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
+        vastVideoConfiguration.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1275,9 +1622,12 @@ public void videoRunnablesRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireSta
     @Test
     public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireStartTracker() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("later", 3000)));
+        vastVideoConfiguration.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("start" + MACRO_TAGS, 2000)));
+        vastVideoConfiguration.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("later" + MACRO_TAGS, 3000)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1288,7 +1638,8 @@ public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireSta
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("start")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("start?errorcode=&asseturi=video_url&contentplayhead=00:00:02.000")));
 
         // run checker another time
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
@@ -1300,9 +1651,12 @@ public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireSta
     @Test
     public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("don't call", 0.28f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("don't call" + MACRO_TAGS, 0.28f)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1314,7 +1668,8 @@ public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirs
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.026")));
 
         // run checker another time
         Robolectric.getUiThreadScheduler().runTasks(2);
@@ -1326,9 +1681,12 @@ public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirs
     public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1340,8 +1698,10 @@ public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuart
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
 
         Robolectric.getUiThreadScheduler().runTasks(2);
 
@@ -1351,10 +1711,14 @@ public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuart
     @Test
     public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third", 0.75f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1366,9 +1730,12 @@ public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQua
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
-        verify(mockRequestQueue).add(argThat(isUrl("third")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("third?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
 
         Robolectric.getUiThreadScheduler().runTasks(2);
 
@@ -1380,10 +1747,12 @@ public void videoRunnablesRun_asVideoPlays_shouldPingAllThreeTrackersIndividuall
         //stub(mockMediaPlayer.getDuration()).toReturn(100);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third", 0.75f)));
+        vastVideoConfiguration.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
+        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
@@ -1397,19 +1766,22 @@ public void videoRunnablesRun_asVideoPlays_shouldPingAllThreeTrackersIndividuall
         seekToAndAssertRequestsMade(24);
 
         // after it hits first tracker
-        seekToAndAssertRequestsMade(26, "first");
+        seekToAndAssertRequestsMade(26,
+                "first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.026");
 
         // before mid quartile is hit
         seekToAndAssertRequestsMade(49);
 
         // after it hits mid trackers
-        seekToAndAssertRequestsMade(51, "second");
+        seekToAndAssertRequestsMade(51,
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051");
 
         // before third quartile is hit
         seekToAndAssertRequestsMade(74);
 
         // after third quartile is hit
-        seekToAndAssertRequestsMade(76, "third");
+        seekToAndAssertRequestsMade(76,
+                "third?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076");
 
         // way after third quartile is hit
         seekToAndAssertRequestsMade(99);
@@ -1498,6 +1870,15 @@ public void onPause_shouldStopRunnables() throws Exception {
         verify(spyProgressRunnable).stop();
     }
 
+    @Test
+    public void onPause_shouldFirePauseTrackers() throws Exception {
+        initializeSubject();
+
+        subject.onPause();
+        verify(mockRequestQueue).add(
+                argThat(isUrl("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:00.000")));
+    }
+
     @Test
     public void onResume_shouldStartRunnables() throws Exception {
         initializeSubject();
@@ -1552,6 +1933,28 @@ public void onResume_shouldSeekToPrePausedPosition() throws Exception {
         verify(spyVideoView).seekTo(eq(7000));
     }
 
+    @Test
+    public void onResume_multipleTimes_shouldFirePauseResumeTrackersMultipleTimes() throws Exception {
+        initializeSubject();
+        spyOnVideoView();
+
+        setVideoViewParams(7000, 10000);
+        subject.onPause();
+
+        setVideoViewParams(1000, 10000);
+        subject.onResume();
+
+        verify(mockRequestQueue).add(argThat(isUrl
+                ("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
+        verify(mockRequestQueue).add(argThat(isUrl("resume?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
+
+        subject.onPause();
+        subject.onResume();
+
+        verify(mockRequestQueue).add(argThat(isUrl("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
+        verify(mockRequestQueue).add(argThat(isUrl("resume?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
+    }
+
     @Test
     public void backButtonEnabled_shouldDefaultToFalse() throws Exception {
         initializeSubject();
@@ -1569,23 +1972,146 @@ public void backButtonEnabled_whenCloseButtonIsVisible_shouldReturnTrue() throws
     }
 
     @Test
-    public void onClickCloseButton_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
+    public void onClickCloseButtonImageView_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
         initializeSubject();
+        spyOnVideoView();
+        // Because it's almost never exactly 15 seconds
+        when(spyVideoView.getDuration()).thenReturn(15094);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
         subject.setCloseButtonVisible(true);
 
-        // We don't have direct access to the CloseButtonWidget's close event, so we manually
+        // We don't have direct access to the CloseButtonWidget icon's close event, so we manually
         // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
-        View.OnTouchListener closeButtonOnTouchListener =
-                shadowOf(getVastVideoToolbar().getCloseButtonWidget()).getOnTouchListener();
-        closeButtonOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+        View.OnTouchListener closeButtonImageViewOnTouchListener =
+                shadowOf(subject.getCloseButtonWidget().getImageView()).getOnTouchListener();
+        closeButtonImageViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        verify(mockRequestQueue).add(
+                argThat(isUrl("close?errorcode=&asseturi=video_url&contentplayhead=00:00:15.094")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("skip?errorcode=&asseturi=video_url&contentplayhead=00:00:15.094")));
+    }
+
+    @Test
+    public void onClickCloseButtonTextView_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
+        initializeSubject();
+        spyOnVideoView();
+        // Because it's almost never exactly 15 seconds
+        when(spyVideoView.getDuration()).thenReturn(15203);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        subject.setCloseButtonVisible(true);
+
+        // We don't have direct access to the CloseButtonWidget text's close event, so we manually
+        // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
+        View.OnTouchListener closeButtonTextViewOnTouchListener =
+                shadowOf(subject.getCloseButtonWidget().getTextView()).getOnTouchListener();
+        closeButtonTextViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        verify(mockRequestQueue).add(
+                argThat(isUrl("close?errorcode=&asseturi=video_url&contentplayhead=00:00:15.203")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("skip?errorcode=&asseturi=video_url&contentplayhead=00:00:15.203")));
+    }
+
+    @Test
+    public void createIconView_shouldLayoutAndReturnInvisibleVastIconView() throws Exception {
+        initializeSubject();
+
+        VastIcon vastIcon = mock(VastIcon.class);
+        when(vastIcon.getWidth()).thenReturn(40);
+        when(vastIcon.getHeight()).thenReturn(40);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastIcon.getVastResource()).thenReturn(vastResource);
+
+        VastWebView view = (VastWebView) subject.createIconView(context, vastIcon, View.INVISIBLE);
+
+        assertThat(view).isNotNull();
+        assertThat(view.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(view.getVastWebViewClickListener()).isNotNull();
+        assertThat(subject.getLayout().findViewById(view.getId())).isEqualTo(view);
+    }
+
+    @Test
+    public void createIconView_withNullVastIcon_shouldReturnEmptyView() throws Exception {
+        initializeSubject();
+
+        assertThat(subject.createIconView(context, null, View.INVISIBLE)).isNotNull();
+    }
+
+    @Test
+    public void VastWebView_onVastWebViewClick_shouldCallVastIconHandleClick() throws Exception {
+        initializeSubject();
+
+        VastIcon vastIcon = mock(VastIcon.class);
+        when(vastIcon.getWidth()).thenReturn(40);
+        when(vastIcon.getHeight()).thenReturn(40);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastIcon.getVastResource()).thenReturn(vastResource);
 
-        verify(mockRequestQueue).add(argThat(isUrl("close")));
-        verify(mockRequestQueue).add(argThat(isUrl("skip")));
+        VastWebView view = (VastWebView) subject.createIconView(context, vastIcon, View.INVISIBLE);
+
+        view.getVastWebViewClickListener().onVastWebViewClick();
+        verify(vastIcon).handleClick(any(Context.class), anyString());
+    }
+
+    @Test
+    public void handleIconDisplay_withCurrentPositionGreaterThanOffset_shouldSetIconToVisible_shouldCallHandleImpression() throws Exception {
+        initializeSubject();
+
+        when(mockVastIcon.getOffsetMS()).thenReturn(0);
+        when(mockVastIcon.getDurationMS()).thenReturn(1);
+
+        subject.handleIconDisplay(0);
+
+        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.VISIBLE);
+        verify(mockVastIcon).handleImpression(any(Context.class), eq(0), eq("video_url"));
+    }
+
+    @Test
+    public void handleIconDisplay_withCurrentPositionLessThanOffset_shouldReturn() throws Exception {
+        initializeSubject();
+
+        when(mockVastIcon.getOffsetMS()).thenReturn(1);
+
+        subject.handleIconDisplay(0);
+
+        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.INVISIBLE);
+        verify(mockVastIcon, never()).handleImpression(any(Context.class), eq(0), eq("video_url"));
+    }
+
+    @Test
+    public void handleIconDisplay_withCurrentPositionGreaterThanOffsetPlusDuration_shouldSetIconToGone() throws Exception {
+        initializeSubject();
+
+        when(mockVastIcon.getOffsetMS()).thenReturn(0);
+        when(mockVastIcon.getDurationMS()).thenReturn(1);
+
+        subject.handleIconDisplay(2);
+
+        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.GONE);
+    }
+
+    @Test
+    public void makeInteractable_shouldHideCountdownWidgetAndShowCtaAndCloseButtonWidgets() throws Exception {
+        initializeSubject();
+
+        subject.makeVideoInteractable();
+
+        assertThat(subject.getRadialCountdownWidget().getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
     }
 
     private void initializeSubject() throws IllegalAccessException {
-        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, baseVideoViewControllerListener);
+        subject = new VastVideoViewController(context, bundle, savedInstanceState, testBroadcastIdentifier, baseVideoViewControllerListener);
+        subject.setMediaMetadataRetriever(mockMediaMetadataRetriever);
         spyOnRunnables();
     }
 
@@ -1610,20 +2136,6 @@ private void setVideoViewParams(int currentPosition, int duration) throws Illega
         when(spyVideoView.getDuration()).thenReturn(duration);
     }
 
-    private VastVideoToolbar getVastVideoToolbar() {
-        final ViewGroup layout = subject.getLayout();
-
-        for (int i = 0; i < layout.getChildCount(); i++) {
-            final View child = layout.getChildAt(i);
-            if (child instanceof VastVideoToolbar) {
-                return (VastVideoToolbar) child;
-            }
-        }
-
-        fail("Unable to find VastVideoToolbar in view hierarchy.");
-        return null;
-    }
-
     private ShadowVideoView getShadowVideoView() {
         return shadowOf(subject.getVideoView());
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
index 41c78e61..7b17304c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
@@ -32,8 +32,8 @@ public void doWork_whenShouldBeInteractable_shouldCallMakeVideoInteractable() {
 
         subject.doWork();
 
+        verify(mockVideoViewController).updateCountdown();
         verify(mockVideoViewController).makeVideoInteractable();
-        verify(mockVideoViewController).updateDuration();
     }
 
     @Test
@@ -42,27 +42,7 @@ public void doWork_whenShouldNotBeInteractable_shouldNotCallMakeVideoInteractabl
 
         subject.doWork();
 
-        verify(mockVideoViewController, never()).makeVideoInteractable();
-        verify(mockVideoViewController).updateDuration();
-    }
-
-    @Test
-    public void doWork_whenShouldShowCountdown_shouldCallUpdateCountdown() {
-        when(mockVideoViewController.shouldShowCountdown()).thenReturn(true);
-
-        subject.doWork();
-
         verify(mockVideoViewController).updateCountdown();
-        verify(mockVideoViewController).updateDuration();
-    }
-
-    @Test
-    public void run_whenShouldNotShowCountdown_shouldNotCallUpdateCountdown() {
-        when(mockVideoViewController.shouldShowCountdown()).thenReturn(false);
-
-        subject.doWork();
-
-        verify(mockVideoViewController, never()).updateCountdown();
-        verify(mockVideoViewController).updateDuration();
+        verify(mockVideoViewController, never()).makeVideoInteractable();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
index b926db3c..8ba50824 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
@@ -60,6 +60,9 @@ public void doWork_whenTrackersReturned_shouldMakeTrackingRequests() {
         verify(mockVastVideoViewController).getCurrentPosition();
         verify(mockVastVideoViewController).getDuration();
         verify(mockVastVideoViewController).getContext();
+        verify(mockVastVideoViewController).getNetworkMediaFileUrl();
+        verify(mockVastVideoViewController).handleIconDisplay(eq(3000));
+        verify(mockVastVideoViewController).updateProgressBar();
 
         // Capture request queue - should get two different trackers.
         verify(mockRequestQueue, times(2)).add(requestCaptor.capture());
@@ -86,6 +89,8 @@ public void doWork_whenNoTrackersReturned_shouldNotMakeTrackingRequests() {
         verify(mockVastVideoViewController).getUntriggeredTrackersBefore(eq(3000), eq(4000));
         verify(mockVastVideoViewController).getCurrentPosition();
         verify(mockVastVideoViewController).getDuration();
+        verify(mockVastVideoViewController).handleIconDisplay(eq(3000));
+        verify(mockVastVideoViewController).updateProgressBar();
 
         verifyNoMoreInteractions(mockVastVideoViewController, mockRequestQueue);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
new file mode 100644
index 00000000..76a61509
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
@@ -0,0 +1,120 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Build;
+import android.view.View;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.GestureUtils;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowWebView;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class VastWebViewTest {
+
+    private VastWebView subject;
+    private Context context;
+    @Mock VastWebView.VastWebViewClickListener mockVastWebViewClickListener;
+    @Mock private VastResource mockResource;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new VastWebView(context);
+        subject.setVastWebViewClickListener(mockVastWebViewClickListener);
+    }
+
+    @Test
+    public void constructor_shouldSetOnTouchListener() throws Exception {
+        assertThat(Robolectric.shadowOf(subject).getOnTouchListener())
+                .isInstanceOf(VastWebView.VastWebViewOnTouchListener.class);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR2)
+    @Test
+    public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
+        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
+        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
+
+        subject.enablePlugins(false);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
+        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
+
+        subject.enablePlugins(false);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+    }
+
+    @Test
+    public void loadData_shouldCallLoadDataWithBaseURL() throws Exception {
+        String data = "some random html response";
+        subject.loadData(data);
+
+        ShadowWebView.LoadDataWithBaseURL lastLoadData
+                = shadowOf(subject).getLastLoadDataWithBaseURL();
+        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
+        assertThat(lastLoadData.data).isEqualTo(data);
+        assertThat(lastLoadData.mimeType).isEqualTo("text/html");
+        assertThat(lastLoadData.encoding).isEqualTo("utf-8");
+        assertThat(lastLoadData.historyUrl).isNull();
+    }
+
+    @Test
+    public void VastWebViewOnTouchListener_withActionDown_withActionUp_shouldCallOnVastWebViewClick() throws Exception {
+        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        onTouchListener.onTouch(subject, GestureUtils.createActionDown(0, 0));
+        onTouchListener.onTouch(subject, GestureUtils.createActionUp(0, 0));
+
+        verify(mockVastWebViewClickListener).onVastWebViewClick();
+    }
+
+    @Test
+    public void createView_shouldInitializeAndReturnView() throws Exception {
+        VastIcon vastIcon = new VastIcon(123, 456, 789, 101,
+                mockResource,
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                "clickThroughUri",
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+
+        WebView webView = subject.createView(context, vastIcon.getVastResource());
+        assertThat(webView).isNotNull();
+        verify(mockResource).initializeWebView(any(VastWebView.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
new file mode 100644
index 00000000..2d8d1aa4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
@@ -0,0 +1,45 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastWrapperXmlManagerTest {
+
+    private VastWrapperXmlManager subject;
+
+    @Test
+    public void getVastAdTagURI_shouldReturnStringURI() throws Exception {
+        String wrapperXml = "<Wrapper>" +
+                "    <Impression id=\"DART\">" +
+                "        <![CDATA[http://impression/m/wrapperOne]]>" +
+                "    </Impression>" +
+                "    <VASTAdTagURI>http://redirecturl/xml</VASTAdTagURI>" +
+                "</Wrapper>";
+
+        Node wrapperNode = createNode(wrapperXml);
+        subject = new VastWrapperXmlManager(wrapperNode);
+
+        assertThat(subject.getVastAdTagURI()).isEqualTo("http://redirecturl/xml");
+    }
+
+    @Test
+    public void getVastAdTagURI_withNoVastAdTagURI_shouldReturnNull() throws Exception {
+        String wrapperXml = "<Wrapper>" +
+                "    <Impression id=\"DART\">" +
+                "        <![CDATA[http://impression/m/wrapperOne]]>" +
+                "    </Impression>" +
+                "</Wrapper>";
+
+        Node wrapperNode = createNode(wrapperXml);
+        subject = new VastWrapperXmlManager(wrapperNode);
+
+        assertThat(subject.getVastAdTagURI()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
new file mode 100644
index 00000000..20487121
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -0,0 +1,1260 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.Point;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.common.HttpClient;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.Semaphore;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static com.mopub.mobileads.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class VastXmlManagerAggregatorTest {
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'>" +
+            "    <Ad id='empty'>" +
+            "        <InLine>" +
+            "            <Impression><![CDATA[http:emptyimpression]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative>" +
+            "                    <Linear>" +
+            "                        <MediaFiles>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "            <Error><![CDATA[http://neverCallThisError]]></Error>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "    <Ad id='62833' sequence='1'>" +
+            "        <Wrapper>" +
+            "            <AdSystem>Tapad</AdSystem>" +
+            "            <VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI>" +
+            "            <Impression>http://myTrackingURL/wrapper/impression1</Impression>" +
+            "            <Impression>http://myTrackingURL/wrapper/impression2</Impression>" +
+            "            <Creatives>" +
+            "                <Creative AdID='62833'>" +
+            "                    <Linear>" +
+            "                        <TrackingEvents>" +
+            "                            <Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking>" +
+            "                            <Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking>" +
+            "                            <Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking>" +
+            "                            <Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking>" +
+            "                            <Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking>" +
+            "                            <Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking>" +
+            "                            <Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking>" +
+            "                            <Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking>" +
+            "                            <Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking>" +
+            "                            <Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking>" +
+            "                            <Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking>" +
+            "                        </TrackingEvents>" +
+            "                        <VideoClicks>" +
+            "                            <ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking>" +
+            "                        </VideoClicks>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
+            "                                <![CDATA[http://videosInWrappersShouldNeverBePlayed]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "                <Creative AdID=\"601364-Companion\">" +
+            "                    <CompanionAds>" +
+            "                        <Companion id=\"wrappercompanion\" height=\"123\" width=\"456\">" +
+            "                            <StaticResource creativeType=\"image/jpeg\">" +
+            "                                http://wrapperCompanionAdStaticResource" +
+            "                            </StaticResource>" +
+            "                            <TrackingEvents>" +
+            "                                <Tracking event=\"creativeView\">http://firstWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">http://secondWrapperCompanionCreativeView</Tracking>" +
+            "                            </TrackingEvents>" +
+            "                            <CompanionClickThrough>http://wrapperCompanionClickThrough</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[http://wrapperCompanionClickTracking]]></CompanionClickTracking>" +
+            "                        </Companion> " +
+            "                        <Companion id=\"noresource\" height=\"123\" width=\"456\">" +
+            "                            <TrackingEvents>" +
+            "                                <Tracking event=\"creativeView\">http://firstNoResourceWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">http://secondNoResourceWrapperCompanionCreativeView</Tracking>" +
+            "                            </TrackingEvents>" +
+            "                            <CompanionClickThrough>http://noResourceWrapperCompanionClickThrough</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[http://noResourceWrapperCompanionClickTracking1]]></CompanionClickTracking>" +
+            "                        </Companion> " +
+            "                    </CompanionAds>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "            <Error><![CDATA[http://wrapperErrorOne?errorcode=[ERRORCODE]]]></Error>" +
+            "            <Error><![CDATA[http://wrapperErrorTwo?errorcode=[ERRORCODE]]]></Error>" +
+            "        </Wrapper>" +
+            "    </Ad>" +
+            "</VAST>" +
+            "<MP_TRACKING_URLS>" +
+            "    <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
+            "    <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
+            "</MP_TRACKING_URLS>";
+
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
+            "<VAST version='2.0'>" +
+            "    <Ad id='57722'>" +
+            "        <InLine>" +
+            "            <AdSystem version='1.0'>Tapad</AdSystem>" +
+            "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
+            "            <Description/>" +
+            "            <Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative sequence='1' id='57722'>" +
+            "                    <Linear>" +
+            "                       <Icons>" +
+            "                           <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+            "                           yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+            "                           duration=\"01:02:03.456\">" +
+            "                               <StaticResource creativeType=\"ImAge/JpEg\">" +
+            "                                   <![CDATA[imageJpeg]]>" +
+            "                               </StaticResource>" +
+            "                               <IconClicks>" +
+            "                                   <IconClickThrough>" +
+            "                                       <![CDATA[clickThroughUri]]>" +
+            "                                   </IconClickThrough>" +
+            "                                   <IconClickTracking>" +
+            "                                       <![CDATA[clickTrackingUri1]]>" +
+            "                                   </IconClickTracking>" +
+            "                                   <IconClickTracking>" +
+            "                                       <![CDATA[clickTrackingUri2]]>" +
+            "                                   </IconClickTracking>" +
+            "                               </IconClicks>" +
+            "                               <IconViewTracking>" +
+            "                                   <![CDATA[viewTrackingUri1]]>" +
+            "                               </IconViewTracking>" +
+            "                               <IconViewTracking>" +
+            "                                   <![CDATA[viewTrackingUri2]]>" +
+            "                               </IconViewTracking>" +
+            "                            </Icon>" +
+            "                        </Icons>" +
+            "                        <Duration>00:00:15</Duration>" +
+            "                        <VideoClicks>" +
+            "                            <ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough>" +
+            "                        </VideoClicks>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
+            "                                <![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "                <Creative AdID=\"601364-Companion\">" +
+            "                    <CompanionAds>" +
+            "                        <Companion id=\"valid\" height=\"250\" width=\"300\">" +
+            "                            <StaticResource creativeType=\"image/jpeg\">" +
+            "                                http://demo.tremormedia.com/proddev/vast/Blistex1.jpg" +
+            "                            </StaticResource>" +
+            "                            <TrackingEvents>" +
+            "                                <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                            </TrackingEvents>" +
+            "                            <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking>" +
+            "                            <CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking>" +
+            "                        </Companion>" +
+            "                    </CompanionAds>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "            <Error><![CDATA[http://nestedInLineErrorOne]]></Error>" +
+            "            <Error><![CDATA[http://nestedInLineErrorTwo]]></Error>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "</VAST>";
+
+    static final String TEST_NESTED_NO_COMPANION_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
+            "<VAST version='2.0'>" +
+            "    <Ad id='57722'>" +
+            "        <InLine>" +
+            "            <AdSystem version='1.0'>Tapad</AdSystem>" +
+            "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
+            "            <Description/>" +
+            "            <Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative sequence='1' id='57722'>" +
+            "                    <Linear>" +
+            "                        <Duration>00:00:15</Duration>" +
+            "                        <VideoClicks>" +
+            "                            <ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough>" +
+            "                        </VideoClicks>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
+            "                                <![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "</VAST>";
+
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives><Error>![CDATA[http://badNestedError]]</Error]</Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+
+    static final String TEST_JUST_ERROR_XML_STRING = "<VAST version='3.0'>" +
+            "<Error><![CDATA[http://justErrorTracking?errorcode=[ERRORCODE]]]></Error>" +
+            "</VAST>";
+
+    static final String TEST_INVALID_VAST_XML_STRING = "<VAST version='fail'>" +
+            "This is not vast." +
+            "</VAST>";
+
+    static final String TEST_INVALID_XML_STRING = "this is not xml at all<<<";
+
+    static final String TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING = "<VAST version='3.0'>" +
+            "    <Ad id='sequenceTooHigh' sequence='42'>" +
+            "        <InLine>" +
+            "            <Impression><![CDATA[http:sequenceTooHighImp]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative>" +
+            "                    <Linear>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
+            "                                <![CDATA[http://sequenceTooHighVideo]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "    <Ad id='negativeSequence' sequence='-2'>" +
+            "        <InLine>" +
+            "            <Impression><![CDATA[http://negativeSequence]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative>" +
+            "                    <Linear>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
+            "                                <![CDATA[http://negativeSequence]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "</VAST>";
+
+    private Activity context;
+    private FakeHttpLayer mFakeHttpLayer;
+    private Semaphore semaphore;
+    private VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener;
+    private VastXmlManagerAggregator subject;
+    private VastVideoConfiguration vastVideoConfiguration;
+
+    @Mock
+    MoPubRequestQueue mockRequestQueue;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        semaphore = new Semaphore(0);
+        vastXmlManagerAggregatorListener = mock(VastXmlManagerAggregatorListener.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                Object[] args = invocationOnMock.getArguments();
+                VastXmlManagerAggregatorTest.this.vastVideoConfiguration = (VastVideoConfiguration) args[0];
+                semaphore.release();
+                return null;
+            }
+        }).when(vastXmlManagerAggregatorListener).onAggregationComplete(any(VastVideoConfiguration.class));
+
+        // Always assume landscape (where width > height) since videos will always be played in this orientation
+        int screenWidth = 800;
+        int screenHeight = 480;
+        double screenAspectRatio = (double) screenWidth / screenHeight;
+        int screenArea = screenWidth * screenHeight;
+        subject = new VastXmlManagerAggregator(vastXmlManagerAggregatorListener, screenAspectRatio,
+                screenArea, context);
+    }
+
+    // NOTE most of the functionality of this class is tested through VastManagerTest
+    // through integration tests
+
+    @Test
+    public void doInBackground_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() throws Exception {
+        for(int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT; i++) {
+            mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        }
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        subject.execute(TEST_VAST_XML_STRING);
+        semaphore.acquire();
+
+        assertThat(vastVideoConfiguration).isNull();
+    }
+
+    @Test
+    public void doInBackground_shouldFollowMaxRedirectsMinusOne() throws Exception {
+        for(int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT - 1; i++) {
+            mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        }
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        subject.execute(TEST_VAST_XML_STRING);
+        semaphore.acquire();
+
+        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3" +
+                ".amazonaws.com/mopub-vast/tapad-video.mp4");
+        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev" +
+                ".tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMj" +
+                "AwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTN" +
+                "BMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxh" +
+                "JTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLa" +
+                "XQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMT" +
+                "E2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzM" +
+                "wMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlk" +
+                "PUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3" +
+                "D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad." +
+                "com");
+        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(4 *
+                VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT + 1);
+        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(3 *
+                VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT);
+    }
+
+    @Test
+    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullMediaUrl_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", null);
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullDimension_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(null, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withZeroDimension_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(0, 250,
+                "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNegativeDimension_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(-1, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
+        // Double screen size
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(1600, 960, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
+        // Half screen size
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Landscape
+        final VastMediaXmlManager mediaXmlManager1 =
+                initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url1");
+        // Portrait
+        final VastMediaXmlManager mediaXmlManager2 =
+                initializeMediaXmlManagerMock(240, 400, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url1");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnNull() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Invalid media type
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
+        // Null dimension
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(null, null, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800,
+                480, null, "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(
+                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
+                300, 250, "image_url", "image/jpeg", null, null);
+
+        final VastCompanionAd bestCompanionAd =
+                subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withInvalidVastResource_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
+                300, 250, "image_url", "image/INVALID", null, null);
+
+        final VastCompanionAd bestCompanionAd =
+                subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withNullDimension_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager =
+                initializeCompanionXmlManagerMock(null, 250, "image_url", "image/png", null, null);
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withZeroDimension_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager =
+                initializeCompanionXmlManagerMock(0, 250, "image_url", "image/png", null, null);
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withNegativeDimension_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager =
+                initializeCompanionXmlManagerMock(-300, 250, "image_url", "image/png", null, null);
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null);
+        // Double screen size
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(1600, 960, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null);
+        // Half screen size
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(400, 240, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameArea_shouldReturnCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Landscape
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 240, "image_url1", "image/png", null, null);
+        // Portrait
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(240, 400, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url1");
+    }
+
+    @Test
+    public void getBestCompanionAd_withAllThreeResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        // Static Resource
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 240, "StaticResource", "image/png", null, null);
+        // HTML Resource
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(240, 400, null, null, null, "HTMLResource");
+        // IFrame Resource
+        final VastCompanionAdXmlManager companionXmlManager3 =
+                initializeCompanionXmlManagerMock(240, 400, null, null, "IFrameResource", null);
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager3, companionXmlManager2, companionXmlManager1));
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestCompanionAd_withHTMLAndStaticResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        // Static Resource
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 240, "StaticResource", "image/png", null, null);
+        // HTML Resource
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(240, 400, null, null, null, "HTMLResource");
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager2, companionXmlManager1));
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestCompanionAd_withInvalidStaticResource_withValidHtmlResource_shouldReturnHtmlResource() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 240, "StaticResource", "INVALID",
+                        "IFrameResource", null);
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(240, 400, null, null, null, "HTMLResource");
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager2, companionXmlManager1));
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("HTMLResource");
+    }
+
+    @Test
+    public void getScaledDimensions_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(1600, 400);
+
+        assertThat(point.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(point.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(400, 960);
+
+        assertThat(point.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(point.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withWidthAndHeightSmallerThanScreen_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(800, 480);
+
+        assertThat(point.x).isEqualTo(800);
+        assertThat(point.y).isEqualTo(480);
+    }
+
+    @Test
+    public void getScaledDimensions_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(1600, 2);
+
+        assertThat(point.x).isEqualTo(1600);
+        assertThat(point.y).isEqualTo(2);
+    }
+
+    @Test
+    public void getScaledDimensions_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(2, 960);
+
+        assertThat(point.x).isEqualTo(2);
+        assertThat(point.y).isEqualTo(960);
+    }
+
+    @Test
+    public void getBestIcon_shouldReturnBestIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 50, 123, 456, "staticResource1", "image/jpeg", null, null,
+                        VastUtils.stringsToVastTrackers("clickTrackingUri1", "clickTrackingUri2"),
+                        "clickThroughUri",
+                        VastUtils.stringsToVastTrackers("viewTrackingUri1", "viewTrackingUri2"));
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getWidth()).isEqualTo(40);
+        assertThat(bestIcon.getHeight()).isEqualTo(50);
+        assertThat(bestIcon.getOffsetMS()).isEqualTo(123);
+        assertThat(bestIcon.getDurationMS()).isEqualTo(456);
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource1");
+        assertThat(bestIcon.getVastResource().getType()).isEqualTo(VastResource.Type
+                .STATIC_RESOURCE);
+        assertThat(bestIcon.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(bestIcon.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+        assertThat(bestIcon.getClickThroughUri()).isEqualTo("clickThroughUri");
+        assertThat(VastUtils.vastTrackersToStrings(bestIcon.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void getBestIcon_withMissingWidth_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(null, 50, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null,
+                        new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withNegativeWidth_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(-1, 50, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withWidthGreaterThan300dp_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(301, 50, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withMissingHeight_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, null, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withNegativeHeight_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, -1, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withHeightGreaterThan300dp_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 301, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withAllThreeResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, "IFrameResource",
+                        null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager3 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
+                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager3, iconXmlManager2,
+                iconXmlManager1));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestIcon_withHTMLAndStaticResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
+                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager2, iconXmlManager1));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestIcon_withInvalidStaticResource_withValidHtmlResource_shouldReturnHtmlResource() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "INVALID",
+                        "IFrameResource", null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
+                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIcon bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager2, iconXmlManager1));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("HTMLResource");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withStandardInline_shouldReturnValidVastVideoConfiguration() {
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_NESTED_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getImpressionTrackers()))
+                .containsOnly("http://rtb-test.dev.tapad.com:8080/creative/imp" +
+                        ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo" +
+                        "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1");
+        assertThat(vastVideoConfiguration.getFractionalTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getPauseTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getResumeTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getCompleteTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getCloseTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getSkipTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getClickTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo(
+                "http://rtb-test.dev.tapad" +
+                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo(
+                "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+        assertThat(vastVideoConfiguration.getSkipOffset()).isNull();
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getErrorTrackers()))
+                .containsOnly("http://nestedInLineErrorOne", "http://nestedInLineErrorTwo");
+
+        VastCompanionAd companionAd = vastVideoConfiguration.getVastCompanionAd();
+        assertThat(companionAd.getWidth()).isEqualTo(300);
+        assertThat(companionAd.getHeight()).isEqualTo(250);
+        assertThat(companionAd.getVastResource().getResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(companionAd.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(companionAd.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(companionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
+                .containsOnly("http://companionClickTracking1",
+                        "http://companionClickTracking2");
+        assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
+                .containsExactly("http://myTrackingURL/firstCompanionCreativeView",
+                        "http://myTrackingURL/secondCompanionCreativeView");
+
+        VastIcon vastIcon = vastVideoConfiguration.getVastIcon();
+        assertThat(vastIcon.getWidth()).isEqualTo(123);
+        assertThat(vastIcon.getHeight()).isEqualTo(234);
+        assertThat(vastIcon.getDurationMS()).isEqualTo(3723456);
+        assertThat(vastIcon.getOffsetMS()).isEqualTo(3723000);
+        assertThat(vastIcon.getVastResource().getResource()).isEqualTo("imageJpeg");
+        assertThat(vastIcon.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastIcon.getVastResource().getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(vastIcon.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+        assertThat(vastIcon.getClickThroughUri()).isEqualTo("clickThroughUri");
+        assertThat(VastUtils.vastTrackersToStrings(vastIcon.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withAWrapperToAnInline_shouldReturnValidVastVideoConfiguration() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getImpressionTrackers()))
+                .containsOnly(
+                        "http://rtb-test.dev.tapad.com:8080/creative/imp" +
+                                ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp" +
+                                "&ta_pinfo" +
+                                "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1",
+                        "http://myTrackingURL/wrapper/impression1",
+                        "http://myTrackingURL/wrapper/impression2",
+                        "http://www.mopub.com/imp1",
+                        "http://www.mopub.com/imp2");
+
+        assertThat(vastVideoConfiguration.getFractionalTrackers()).hasSize(3);
+        assertThat(
+                vastVideoConfiguration.getFractionalTrackers().get(0)).isEqualsToByComparingFields(
+                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/firstQuartile",
+                        0.25f));
+        assertThat(
+                vastVideoConfiguration.getFractionalTrackers().get(1)).isEqualsToByComparingFields(
+                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/midpoint",
+                        0.5f));
+        assertThat(
+                vastVideoConfiguration.getFractionalTrackers().get(2)).isEqualsToByComparingFields(
+                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/thirdQuartile",
+                        0.75f));
+
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(2);
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0)).isEqualsToByComparingFields(
+                new VastAbsoluteProgressTracker("http://myTrackingURL/wrapper/creativeView", 0));
+        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1)).isEqualsToByComparingFields(
+                new VastAbsoluteProgressTracker("http://myTrackingURL/wrapper/start", 2000));
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getPauseTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/pause");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getResumeTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/resume");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getCompleteTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/complete");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getErrorTrackers()))
+                .containsExactly(
+                        "http://wrapperErrorOne?errorcode=[ERRORCODE]",
+                        "http://wrapperErrorTwo?errorcode=[ERRORCODE]",
+                        "http://nestedInLineErrorOne",
+                        "http://nestedInLineErrorTwo");
+
+        assertThat(vastVideoConfiguration.getCloseTrackers()).isEmpty();
+        assertThat(vastVideoConfiguration.getSkipTrackers()).isEmpty();
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getClickTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/click");
+
+        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo(
+                "http://rtb-test.dev.tapad" +
+                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo(
+                "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+        assertThat(vastVideoConfiguration.getSkipOffset()).isNull();
+
+        VastCompanionAd companionAd = vastVideoConfiguration.getVastCompanionAd();
+        assertThat(companionAd.getWidth()).isEqualTo(300);
+        assertThat(companionAd.getHeight()).isEqualTo(250);
+        assertThat(companionAd.getVastResource().getResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(companionAd.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(companionAd.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(companionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
+                .containsOnly("http://companionClickTracking1",
+                        "http://companionClickTracking2",
+                        "http://noResourceWrapperCompanionClickTracking1");
+        assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
+                .containsExactly("http://myTrackingURL/firstCompanionCreativeView",
+                        "http://myTrackingURL/secondCompanionCreativeView",
+                        "http://firstNoResourceWrapperCompanionCreativeView",
+                        "http://secondNoResourceWrapperCompanionCreativeView");
+
+        VastIcon vastIcon = vastVideoConfiguration.getVastIcon();
+        assertThat(vastIcon.getWidth()).isEqualTo(123);
+        assertThat(vastIcon.getHeight()).isEqualTo(234);
+        assertThat(vastIcon.getDurationMS()).isEqualTo(3723456);
+        assertThat(vastIcon.getOffsetMS()).isEqualTo(3723000);
+        assertThat(vastIcon.getVastResource().getResource()).isEqualTo("imageJpeg");
+        assertThat(vastIcon.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastIcon.getVastResource().getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(vastIcon.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+        assertThat(vastIcon.getClickThroughUri()).isEqualTo("clickThroughUri");
+        assertThat(VastUtils.vastTrackersToStrings(vastIcon.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withInvalidXml_shouldReturnNullVastVideoConfiguration() {
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_BAD_NEST_URL_XML_STRING, HttpClient.getHttpClient(),
+                new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfiguration).isNull();
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withRedirectHavingNoCompanionAd_shouldReturnVastVideoConfigurationWithCompanionAdOfWrapper() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_NO_COMPANION_VAST_XML_STRING);
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        VastCompanionAd companionAd = vastVideoConfiguration.getVastCompanionAd();
+        assertThat(companionAd.getWidth()).isEqualTo(456);
+        assertThat(companionAd.getHeight()).isEqualTo(123);
+        assertThat(companionAd.getVastResource().getResource()).isEqualTo("http" +
+                "://wrapperCompanionAdStaticResource");
+        assertThat(companionAd.getClickThroughUrl()).isEqualTo("http://wrapperCompanionClickThrough");
+        assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
+                .containsOnly("http://wrapperCompanionClickTracking");
+        assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
+                .containsExactly("http://firstWrapperCompanionCreativeView",
+                        "http://secondWrapperCompanionCreativeView");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withSequenceNumbers_shouldReturnVastVideoConfigurationWithNegativeSequenceNumber() {
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING, HttpClient.getHttpClient(),
+                new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo(
+                "http://negativeSequence");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfiguration.getImpressionTrackers()))
+                .containsOnly("http://negativeSequence");
+    }
+
+    @Test
+    public void isValidSequenceNumber_withNull_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber(null)).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withNegativeInteger_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("-123")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withHighPositiveInteger_shouldReturnFalse() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("123456")).isFalse();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withDecimal_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("123.456")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withInvalidInteger_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("this should fail!")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withZero_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("0")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withOne_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("1")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withTwo_shouldReturnFalse() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("2")).isFalse();
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_JUST_ERROR_XML_STRING, HttpClient.getHttpClient(),
+                new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfiguration).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://justErrorTracking?errorcode=900")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTrackers() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_JUST_ERROR_XML_STRING);
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfiguration).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://justErrorTracking?errorcode=303")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToVastXmlError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_INVALID_VAST_XML_STRING);
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfiguration).isNull();
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToInvalidXml_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_INVALID_XML_STRING);
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfiguration).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorOne?errorcode=100")));
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorTwo?errorcode=100")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToNoHttpResponse_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        VastVideoConfiguration vastVideoConfiguration = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfiguration).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorOne?errorcode=301")));
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorTwo?errorcode=301")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    private VastMediaXmlManager initializeMediaXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final String type,
+            final String mediaUrl) {
+        VastMediaXmlManager mediaXmlManager = mock(VastMediaXmlManager.class);
+        when(mediaXmlManager.getWidth()).thenReturn(width);
+        when(mediaXmlManager.getHeight()).thenReturn(height);
+        when(mediaXmlManager.getType()).thenReturn(type);
+        when(mediaXmlManager.getMediaUrl()).thenReturn(mediaUrl);
+        return mediaXmlManager;
+    }
+
+    private VastCompanionAdXmlManager initializeCompanionXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final String staticResource,
+            final String staticResourceType,
+            final String iFrameResource,
+            final String htmlResource) {
+        VastCompanionAdXmlManager companionXmlManager = mock(VastCompanionAdXmlManager.class);
+        when(companionXmlManager.getWidth()).thenReturn(width);
+        when(companionXmlManager.getHeight()).thenReturn(height);
+
+        VastResourceXmlManager mockResourceXmlManager = initializeVastResourceXmlManagerMock(
+                staticResource,
+                staticResourceType,
+                iFrameResource,
+                htmlResource
+        );
+        when(companionXmlManager.getResourceXmlManager()).thenReturn(mockResourceXmlManager);
+
+        return companionXmlManager;
+    }
+
+    private void assertCompanionAdsAreEqual(
+            final VastCompanionAdXmlManager companionAdXmlManager,
+            final VastCompanionAd companionAd) {
+        final VastCompanionAd companionAd1 = new VastCompanionAd(
+                companionAdXmlManager.getWidth(),
+                companionAdXmlManager.getHeight(),
+                VastResource.fromVastResourceXmlManager(
+                        companionAdXmlManager.getResourceXmlManager(),
+                        companionAdXmlManager.getWidth(),
+                        companionAdXmlManager.getHeight()),
+                companionAdXmlManager.getClickThroughUrl(),
+                companionAdXmlManager.getClickTrackers(),
+                companionAdXmlManager.getCompanionCreativeViewTrackers()
+        );
+        assertCompanionAdsAreEqual(companionAd, companionAd1);
+    }
+
+    private void assertCompanionAdsAreEqual(
+            final VastCompanionAd vastCompanionAd1,
+            final VastCompanionAd vastCompanionAd2) {
+        assertThat(vastCompanionAd1.getWidth()).isEqualTo(vastCompanionAd2.getWidth());
+        assertThat(vastCompanionAd1.getHeight()).isEqualTo(vastCompanionAd2.getHeight());
+        assertThat(vastCompanionAd1.getVastResource().getResource())
+                .isEqualTo(vastCompanionAd2.getVastResource().getResource());
+        assertThat(vastCompanionAd1.getVastResource().getType())
+                .isEqualTo(vastCompanionAd2.getVastResource().getType());
+        assertThat(vastCompanionAd1.getVastResource().getCreativeType())
+                .isEqualTo(vastCompanionAd2.getVastResource().getCreativeType());
+        assertThat(vastCompanionAd1.getClickThroughUrl()).isEqualTo(vastCompanionAd2.getClickThroughUrl());
+        assertThat(vastCompanionAd1.getClickTrackers()).isEqualTo(vastCompanionAd2.getClickTrackers());
+        assertThat(vastCompanionAd1.getCreativeViewTrackers()).isEqualTo(
+                vastCompanionAd2.getCreativeViewTrackers());
+    }
+
+    private VastIconXmlManager initializeIconXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final Integer offsetMS,
+            final Integer durationMS,
+            final String staticResource,
+            final String staticResourceType,
+            final String iFrameResource,
+            final String htmlResource,
+            final List<VastTracker> clickTrackingUris,
+            final String clickThroughUri,
+            final List<VastTracker> viewTrackingUris) {
+        VastIconXmlManager iconXmlManager = mock(VastIconXmlManager.class);
+        when(iconXmlManager.getWidth()).thenReturn(width);
+        when(iconXmlManager.getHeight()).thenReturn(height);
+        when(iconXmlManager.getOffsetMS()).thenReturn(offsetMS);
+        when(iconXmlManager.getDurationMS()).thenReturn(durationMS);
+
+        VastResourceXmlManager mockResourceXmlManager = initializeVastResourceXmlManagerMock(
+                staticResource,
+                staticResourceType,
+                iFrameResource,
+                htmlResource
+        );
+        when(iconXmlManager.getResourceXmlManager()).thenReturn(mockResourceXmlManager);
+
+        when(iconXmlManager.getClickTrackingUris()).thenReturn(clickTrackingUris);
+        when(iconXmlManager.getClickThroughUri()).thenReturn(clickThroughUri);
+        when(iconXmlManager.getViewTrackingUris()).thenReturn(viewTrackingUris);
+        return iconXmlManager;
+    }
+
+    static VastResourceXmlManager initializeVastResourceXmlManagerMock(
+            final String staticResource,
+            final String staticResourceType,
+            final String iFrameResource,
+            final String htmlResource) {
+        VastResourceXmlManager mockResourceXmlManager = mock(VastResourceXmlManager.class);
+        when(mockResourceXmlManager.getStaticResource()).thenReturn(staticResource);
+        when(mockResourceXmlManager.getStaticResourceType()).thenReturn(staticResourceType);
+        when(mockResourceXmlManager.getIFrameResource()).thenReturn(iFrameResource);
+        when(mockResourceXmlManager.getHTMLResource()).thenReturn(htmlResource);
+        return mockResourceXmlManager;
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
new file mode 100644
index 00000000..4f542b85
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -0,0 +1,1311 @@
+<<<<<<< HEAD:mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
+package com.mopub.mobileads.util.vast;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.DeviceUtils.ForceOrientation;
+import com.mopub.mobileads.VastAbsoluteProgressTracker;
+import com.mopub.mobileads.VastFractionalProgressTracker;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.xml.sax.SAXException;
+
+import java.io.IOException;
+import java.util.List;
+
+import javax.xml.parsers.ParserConfigurationException;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastXmlManagerTest {
+    private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
+    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+            "            <Ad id=\"223626102\">" +
+            "                <InLine>" +
+            "                    <AdSystem version=\"2.0\">DART_DFA</AdSystem>" +
+            "                    <AdTitle>In-Stream Video</AdTitle>" +
+            "                    <Description>A test creative with a description.</Description>" +
+            "                    <Survey/>" +
+            "                    <Impression id=\"DART\">" +
+            "                        <![CDATA[" +
+            "                        http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
+            "                        ]]>" +
+            "                    </Impression>" +
+            "                    <Impression id=\"ThirdParty\">" +
+            "                        <![CDATA[" +
+            "                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
+            "                        ]]>" +
+            "                    </Impression>" +
+            "                    <VASTAdTagURI><![CDATA[ http://0.dsp.dev1.mopub.com/xml ]]></VASTAdTagURI>" +
+            "                    <Creatives>" +
+            "                        <Creative sequence=\"1\" AdID=\"\">" +
+            "                            <Linear skipoffset=\"25%\">" +
+            "                                <Duration>00:00:58</Duration>" +
+            "                                <TrackingEvents>" +
+            "                                    <Tracking event=\"start\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"progress\" offset=\"13%\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to ambiguous offset.
+            "                                    <Tracking event=\"progress\" offset=\"01:01\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a too-high percentage offset.
+            "                                    <Tracking event=\"progress\" offset=\"113%\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a negative percentage offset.
+            "                                    <Tracking event=\"progress\" offset=\"-113%\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a non-number offset
+            "                                    <Tracking event=\"progress\" offset=\"ten seconds\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"midpoint\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"midpoint\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"firstQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"firstQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"thirdQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"thirdQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"complete\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"complete\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"close\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/close?q=ignatius" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"close\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/close?q=j3" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"skip\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/skip?q=ignatius" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"skip\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/skip?q=j3" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"mute\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"pause\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"fullscreen\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"fullscreen\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                </TrackingEvents>" +
+            "                                <AdParameters/>" +
+            "                                <VideoClicks>" +
+            "                                    <ClickThrough>" +
+            "                                        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
+            "                                    </ClickThrough>" +
+            "                                    <ClickTracking id=\"DART\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+            "                                        ]]>" +
+            "                                    </ClickTracking>" +
+            "                                    <ClickTracking id=\"ThirdParty\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
+            "                                        ]]>" +
+            "                                    </ClickTracking>" +
+            "                                </VideoClicks>" +
+            "                                <MediaFiles>" +
+            "                                    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+            "                                               width=\"300\" height=\"225\">" +
+            "                                        <![CDATA[" +
+            "                                        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+            "                                        ]]>" +
+            "                                    </MediaFile>" +
+            "                                </MediaFiles>" +
+            "                            </Linear>" +
+            "                        </Creative>" +
+            "                        <Creative AdID=\"601364-Companion\">" +
+            "                            <CompanionAds>" +
+            "                               <Companion height=\"90\" width=\"728\">" +
+            "                                   <StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
+            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <BADTrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </BADTrackingEvents>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
+            "                                   <StaticResource creativeType=\"image/png\">http://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"456\">" +
+            "                                   <StaticResource creativeType=\"image/bmp\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               http://trackingUrl1.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl1.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"1011\">" +
+            "                                   <StaticResource creativeType=\"image/gif\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.gif" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl2.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"300\" height=\"60\">" +
+            "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               http://trackingUrl2.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl3.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
+            "                                   <BADStaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                           <BADTracking event=\"creativeView\">http://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
+            "                                           <Tracking BADevent=\"creativeView\">http://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"BADcreativeView\">http://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <BADCompanionClickThrough>http://www.tremormedia.com</BADCompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"9000\">" +
+            "                                   <TrackingEvents>" +
+            "                                       <ThisWillNotBeFound>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                       </ThisWillNotBeFound>" +
+            "                                   </TrackingEvents>" +
+            "                               </Companion>" +
+            "                               <BADCompanion>" +
+            "                               </BADCompanion>" +
+            "                            </CompanionAds>" +
+            "                        </Creative>" +
+            "                    </Creatives>" +
+            "                    <Extensions>" +
+            "                        <Extension type=\"DART\">" +
+            "                            <AdServingData>" +
+            "                                <DeliveryData>" +
+            "                                    <GeoData>" +
+            "                                        <![CDATA[" +
+            "                                        ct=US&st=CA&ac=415&zp=94103&bw=4&dma=197&city=13358" +
+            "                                        ]]>" +
+            "                                    </GeoData>" +
+            "                                </DeliveryData>" +
+            "                            </AdServingData>" +
+            "                        </Extension>" +
+            "                        <Extension type=\"MoPub\">" +
+            "                           <MoPubCtaText>custom CTA text</MoPubCtaText>" +
+            "                           <MoPubSkipText>skip</MoPubSkipText>" +
+            "                           <MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+            "                           <MoPubForceOrientation>device</MoPubForceOrientation>" +
+            "                        </Extension>" +
+            "                    </Extensions>" +
+            "                </InLine>" +
+            "            </Ad>" +
+            "        </VAST>" +
+            "<MP_TRACKING_URLS>" +
+            "   <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
+            "   <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
+            "</MP_TRACKING_URLS>";
+
+    private VastXmlManager mXmlManager;
+    private boolean mExceptionRaised;
+
+    @Before
+    public void setup() {
+        mXmlManager = new VastXmlManager();
+        mExceptionRaised = false;
+
+        try {
+            mXmlManager.parseVastXml(TEST_VAST_XML_STRING);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        } catch (IOException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        } catch (SAXException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        }
+    }
+
+    @Test
+    public void parseVastXml_shouldNotRaiseAnExceptionProcessingValidXml() {
+        assertThat(mExceptionRaised).isEqualTo(false);
+    }
+
+    @Test
+    public void parseVastXml_shouldNotRaiseAnExceptionProcessingXmlWithXmlHeaderTag() throws ParserConfigurationException, IOException, SAXException {
+        String xmlString = XML_HEADER_TAG + TEST_VAST_XML_STRING;
+
+        mXmlManager = new VastXmlManager();
+        mXmlManager.parseVastXml(xmlString);
+    }
+
+    @Test
+    public void getImpressionTrackers_shouldReturnTheCorrectValue() {
+        List<String> trackers = mXmlManager.getImpressionTrackers();
+
+        assertThat(trackers.size()).isEqualTo(4);
+
+        String tracker1 = trackers.get(0);
+        String tracker2 = trackers.get(1);
+        String tracker3 = trackers.get(2);
+        String tracker4 = trackers.get(3);
+
+        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif");
+        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
+        assertThat(tracker3).isEqualTo("http://www.mopub.com/imp1");
+        assertThat(tracker4).isEqualTo("http://www.mopub.com/imp2");
+    }
+
+    @Test
+    public void getAbsoluteTrackers_shouldReturnCorrectValues() {
+        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAbsoluteProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(2);
+
+        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+    }
+
+    @Test
+    public void getFractionalTrackers_shouldReturnCorrectValues() {
+        List<VastFractionalProgressTracker> trackers = mXmlManager.getFractionalProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(7);
+
+        VastFractionalProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker4 = trackers.get(4);
+        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker5 = trackers.get(5);
+        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker6 = trackers.get(6);
+        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
+        List<String> trackers = mXmlManager.getVideoCompleteTrackers();
+
+        assertThat(trackers.size()).isEqualTo(2);
+
+        String tracker1 = trackers.get(0);
+        String tracker2 = trackers.get(1);
+
+        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;");
+        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
+        List<String> trackers = mXmlManager.getVideoCloseTrackers();
+
+        assertThat(trackers).containsExactly("http://www.mopub.com/close?q=ignatius", "http://www.mopub.com/close?q=j3");
+    }
+
+    @Test
+    public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
+        List<String> trackers = mXmlManager.getVideoSkipTrackers();
+
+        assertThat(trackers).containsExactly("http://www.mopub.com/skip?q=ignatius", "http://www.mopub.com/skip?q=j3");
+    }
+
+    @Test
+    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getClickThroughUrl();
+
+        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getClickTrackers_shouldReturnTheCorrectValue() {
+        List<String> trackers = mXmlManager.getClickTrackers();
+
+        assertThat(trackers.size()).isEqualTo(2);
+
+        String tracker1 = trackers.get(0);
+        String tracker2 = trackers.get(1);
+
+        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif");
+        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
+        List<VastXmlManager.ImageCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getCompanionAdXmlManagers();
+        assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
+
+        assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
+        assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
+        assertThat(imageCompanionAdXmlManagers.get(0).getType()).isEqualTo("image/jpeg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
+        assertThat(imageCompanionAdXmlManagers.get(1).getType()).isEqualTo("image/png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(imageCompanionAdXmlManagers.get(1).getClickTrackers())
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+
+        assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
+        assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(2).getType()).isEqualTo("image/bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl()).isEqualTo("http://clickThroughUrl1.com/");
+        assertThat(imageCompanionAdXmlManagers.get(2).getClickTrackers()).containsOnly("http://trackingUrl1.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
+        assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(3).getType()).isEqualTo("image/gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo("http://clickThroughUrl2.com/");
+        assertThat(imageCompanionAdXmlManagers.get(3).getClickTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
+        assertThat(imageCompanionAdXmlManagers.get(4).getType()).isEqualTo("application/x-shockwave-flash");
+        assertThat(imageCompanionAdXmlManagers.get(4).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
+        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo("http://clickThroughUrl3.com/");
+        assertThat(imageCompanionAdXmlManagers.get(4).getClickTrackers()).containsOnly("http://trackingUrl2.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
+        assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
+        assertThat(imageCompanionAdXmlManagers.get(5).getType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getImageUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers())
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+
+        assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
+        assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getImageUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
+    }
+
+    @Test
+    public void getMediaFileUrl_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getMediaFileUrl();
+
+        assertThat(url).isEqualTo("http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+    }
+
+    @Test
+    public void getCustomCtaText_shouldReturnTheCorrectValue() {
+        String customCtaText = mXmlManager.getCustomCtaText();
+
+        assertThat(customCtaText).isEqualTo("custom CTA text");
+    }
+
+    @Test
+    public void getCustomSkipText_shouldReturnTheCorrectValue() {
+        String customSkipText = mXmlManager.getCustomSkipText();
+
+        assertThat(customSkipText).isEqualTo("skip");
+    }
+
+    @Test
+    public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
+        String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
+
+        assertThat(customCloseIconUrl).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
+    }
+
+    @Test
+    public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
+        ForceOrientation customForceOrientation = mXmlManager.getCustomForceOrientation();
+
+        assertThat(customForceOrientation).isEqualTo(ForceOrientation.DEVICE_ORIENTATION);
+    }
+
+    @Test
+    public void getSkipOffset_shouldReturnTheCorrectValue() {
+        String skipOffset = mXmlManager.getSkipOffset();
+
+        assertThat(skipOffset).isEqualTo("25%");
+    }
+
+    @Test
+    public void getVastAdTagURI_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getVastAdTagURI();
+
+        assertThat(url).isEqualTo("http://0.dsp.dev1.mopub.com/xml");
+    }
+
+    @Test
+    public void parsingMalformedXml_shouldNotCauseProblems() {
+        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
+
+        VastXmlManager badManager = new VastXmlManager();
+
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
+
+        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void parsingVastWithMalformedNodes_shouldNotCauseProblems() {
+        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
+
+        VastXmlManager badManager = new VastXmlManager();
+
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
+
+        assertThat(badManager.getMediaFileUrl()).isEqualTo(null);
+        assertThat(badManager.getFractionalProgressTrackers().size()).isEqualTo(0);
+        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
+
+        List<VastAbsoluteProgressTracker> startTrackers = badManager.getAbsoluteProgressTrackers();
+        assertThat(startTrackers.size()).isEqualTo(1);
+        assertThat(startTrackers.get(0).getTrackingUrl()).isEqualTo("good");
+    }
+}
+=======
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.DeviceUtils.ForceOrientation;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.xml.sax.SAXException;
+
+import java.io.IOException;
+import java.util.List;
+
+import javax.xml.parsers.ParserConfigurationException;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastXmlManagerTest {
+    private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
+    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+            "            <Ad id=\"223626102\">" +
+            "                <InLine>" +
+            "                    <AdSystem version=\"2.0\">DART_DFA</AdSystem>" +
+            "                    <AdTitle>In-Stream Video</AdTitle>" +
+            "                    <Description>A test creative with a description.</Description>" +
+            "                    <Survey/>" +
+            "                    <Impression id=\"DART\">" +
+            "                        <![CDATA[" +
+            "                        http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
+            "                        ]]>" +
+            "                    </Impression>" +
+            "                    <Impression id=\"ThirdParty\">" +
+            "                        <![CDATA[" +
+            "                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
+            "                        ]]>" +
+            "                    </Impression>" +
+            "                    <Creatives>" +
+            "                        <Creative sequence=\"1\" AdID=\"\">" +
+            "                            <Linear skipoffset=\"25%\">" +
+            "                                <Duration>00:00:58</Duration>" +
+            "                                <TrackingEvents>" +
+            "                                    <Tracking event=\"start\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"progress\" offset=\"13%\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to ambiguous offset.
+            "                                    <Tracking event=\"progress\" offset=\"01:01\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a too-high percentage offset.
+            "                                    <Tracking event=\"progress\" offset=\"113%\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a negative percentage offset.
+            "                                    <Tracking event=\"progress\" offset=\"-113%\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a non-number offset
+            "                                    <Tracking event=\"progress\" offset=\"ten seconds\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"midpoint\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"midpoint\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"firstQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"firstQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"thirdQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"thirdQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"complete\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"complete\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"close\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/close?q=ignatius" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"close\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/close?q=j3" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"skip\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/skip?q=ignatius" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"skip\">" +
+            "                                        <![CDATA[" +
+            "                                        http://www.mopub.com/skip?q=j3" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"mute\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"pause\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"fullscreen\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"fullscreen\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                </TrackingEvents>" +
+            "                                <AdParameters/>" +
+            "                                <VideoClicks>" +
+            "                                    <ClickThrough>" +
+            "                                        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
+            "                                    </ClickThrough>" +
+            "                                    <ClickTracking id=\"DART\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+            "                                        ]]>" +
+            "                                    </ClickTracking>" +
+            "                                    <ClickTracking id=\"ThirdParty\">" +
+            "                                        <![CDATA[" +
+            "                                        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
+            "                                        ]]>" +
+            "                                    </ClickTracking>" +
+            "                                </VideoClicks>" +
+            "                                <MediaFiles>" +
+            "                                    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+            "                                               width=\"300\" height=\"225\">" +
+            "                                        <![CDATA[" +
+            "                                        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+            "                                        ]]>" +
+            "                                    </MediaFile>" +
+            "                                </MediaFiles>" +
+            "                               <Icons>" +
+            "                                   <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+            "                                   yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+            "                                   duration=\"01:02:03.456\">" +
+            "                                       <StaticResource creativeType=\"ImAge/JpEg\">" +
+            "                                           <![CDATA[imageJpeg]]>" +
+            "                                       </StaticResource>" +
+            "                                       <IconClicks>" +
+            "                                           <IconClickThrough>" +
+            "                                               <![CDATA[clickThroughUri]]>" +
+            "                                           </IconClickThrough>" +
+            "                                           <IconClickTracking>" +
+            "                                               <![CDATA[clickTrackingUri1]]>" +
+            "                                           </IconClickTracking>" +
+            "                                           <IconClickTracking>" +
+            "                                               <![CDATA[clickTrackingUri2]]>" +
+            "                                           </IconClickTracking>" +
+            "                                       </IconClicks>" +
+            "                                       <IconViewTracking>" +
+            "                                           <![CDATA[viewTrackingUri1]]>" +
+            "                                       </IconViewTracking>" +
+            "                                       <IconViewTracking>" +
+            "                                           <![CDATA[viewTrackingUri2]]>" +
+            "                                       </IconViewTracking>" +
+            "                                    </Icon>" +
+            "                                </Icons>" +
+            "                            </Linear>" +
+            "                        </Creative>" +
+            "                        <Creative AdID=\"601364-Companion\">" +
+            "                            <CompanionAds>" +
+            "                               <Companion height=\"90\" width=\"728\">" +
+            "                                   <StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
+            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <BADTrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </BADTrackingEvents>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
+            "                                   <StaticResource creativeType=\"image/png\">http://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"456\">" +
+            "                                   <StaticResource creativeType=\"image/bmp\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               http://trackingUrl1.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl1.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"1011\">" +
+            "                                   <StaticResource creativeType=\"image/gif\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.gif" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl2.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking3]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"300\" height=\"60\">" +
+            "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               http://trackingUrl2.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl3.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking4]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
+            "                                   <BADStaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                           <BADTracking event=\"creativeView\">http://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
+            "                                           <Tracking BADevent=\"creativeView\">http://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"BADcreativeView\">http://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <BADCompanionClickThrough>http://www.tremormedia.com</BADCompanionClickThrough>" +
+            "                                   <BADCompanionClickTracking><![CDATA[http://companionClickTracking5]]></BADCompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"9000\">" +
+            "                                   <TrackingEvents>" +
+            "                                       <ThisWillNotBeFound>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                       </ThisWillNotBeFound>" +
+            "                                   </TrackingEvents>" +
+            "                               </Companion>" +
+            "                               <BADCompanion>" +
+            "                               </BADCompanion>" +
+            "                            </CompanionAds>" +
+            "                        </Creative>" +
+            "                    </Creatives>" +
+            "                    <Extensions>" +
+            "                        <Extension type=\"DART\">" +
+            "                            <AdServingData>" +
+            "                                <DeliveryData>" +
+            "                                    <GeoData>" +
+            "                                        <![CDATA[" +
+            "                                        ct=US&st=CA&ac=415&zp=94103&bw=4&dma=197&city=13358" +
+            "                                        ]]>" +
+            "                                    </GeoData>" +
+            "                                </DeliveryData>" +
+            "                            </AdServingData>" +
+            "                        </Extension>" +
+            "                        <Extension type=\"MoPub\">" +
+            "                           <MoPubCtaText>custom CTA text</MoPubCtaText>" +
+            "                           <MoPubSkipText>skip</MoPubSkipText>" +
+            "                           <MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+            "                           <MoPubForceOrientation>device</MoPubForceOrientation>" +
+            "                        </Extension>" +
+            "                    </Extensions>" +
+            "                </InLine>" +
+            "                <Wrapper>" +
+            "                   <AdSystem>Acudeo Compatible</AdSystem>" +
+            "                   <VASTAdTagURI>http://0.dsp.dev1.mopub.com/xml</VASTAdTagURI>" +
+            "                   <Impression>http://myTrackingURL/wrapper/impression</Impression>" +
+            "                   <Creatives>" +
+            "                   </Creatives>" +
+            "                </Wrapper>" +
+            "            </Ad>" +
+            "        </VAST>" +
+            "<MP_TRACKING_URLS>" +
+            "   <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
+            "   <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
+            "</MP_TRACKING_URLS>";
+
+    private VastXmlManager mXmlManager;
+    private boolean mExceptionRaised;
+
+    @Before
+    public void setup() {
+        mXmlManager = new VastXmlManager();
+        mExceptionRaised = false;
+
+        try {
+            mXmlManager.parseVastXml(TEST_VAST_XML_STRING);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        } catch (IOException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        } catch (SAXException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        }
+    }
+
+    /**
+     * UNIT TESTS
+     */
+
+    @Test
+    public void parseVastXml_shouldNotRaiseAnExceptionProcessingValidXml() {
+        assertThat(mExceptionRaised).isEqualTo(false);
+    }
+
+    @Test
+    public void parseVastXml_shouldNotRaiseAnExceptionProcessingXmlWithXmlHeaderTag() throws ParserConfigurationException, IOException, SAXException {
+        String xmlString = XML_HEADER_TAG + TEST_VAST_XML_STRING;
+
+        mXmlManager = new VastXmlManager();
+        mXmlManager.parseVastXml(xmlString);
+    }
+
+    @Test
+    public void parseVastXml_withMalformedXml_shouldNotCauseProblems() {
+        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
+
+        VastXmlManager badManager = new VastXmlManager();
+
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
+
+        assertThat(badManager.getMoPubImpressionTrackers().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void parseVastXml_withMalformedNodes_shouldNotCauseProblems() {
+        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
+
+        VastXmlManager badManager = new VastXmlManager();
+
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
+
+        assertThat(badManager.getAdXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getAdXmlManagers_shouldReturnAllAdXmlManagers() throws Exception {
+        String vastXml = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+                "    <Ad id=\"12345678\">" +
+                "        <InLine></InLine>" +
+                "    </Ad>" +
+                "    <Ad id=\"87654321\">" +
+                "        <Wrapper></Wrapper>" +
+                "    </Ad>" +
+                "</VAST>";
+
+        VastXmlManager subject = new VastXmlManager();
+        subject.parseVastXml(vastXml);
+        List<VastAdXmlManager> vastAdXmlManagers = subject.getAdXmlManagers();
+
+        assertThat(vastAdXmlManagers.size()).isEqualTo(2);
+        assertThat(vastAdXmlManagers.get(0).getInLineXmlManager()).isNotNull();
+        assertThat(vastAdXmlManagers.get(0).getWrapperXmlManager()).isNull();
+        assertThat(vastAdXmlManagers.get(1).getInLineXmlManager()).isNull();
+        assertThat(vastAdXmlManagers.get(1).getWrapperXmlManager()).isNotNull();
+    }
+
+    @Test
+    public void getMoPubImpressionTrackers_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getMoPubImpressionTrackers()))
+                .containsOnly("http://www.mopub.com/imp1", "http://www.mopub.com/imp2");
+    }
+
+    @Test
+    public void getCustomCtaText_shouldReturnTheCorrectValue() {
+        String customCtaText = mXmlManager.getCustomCtaText();
+
+        assertThat(customCtaText).isEqualTo("custom CTA text");
+    }
+
+    @Test
+    public void getCustomSkipText_shouldReturnTheCorrectValue() {
+        String customSkipText = mXmlManager.getCustomSkipText();
+
+        assertThat(customSkipText).isEqualTo("skip");
+    }
+
+    @Test
+    public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
+        String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
+
+        assertThat(customCloseIconUrl).isEqualTo("http://ton.twitter" +
+                ".com/exchange-media/images/v4/star_icon_3x.png");
+    }
+
+    @Test
+    public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
+        ForceOrientation customForceOrientation = mXmlManager.getCustomForceOrientation();
+
+        assertThat(customForceOrientation).isEqualTo(ForceOrientation.DEVICE_ORIENTATION);
+    }
+
+    /**
+     * INTEGRATION TESTS
+     */
+
+    @Test
+    public void getVastAdTagURI_withWrapperXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0).getWrapperXmlManager().getVastAdTagURI();
+
+        assertThat(url).isEqualTo("http://0.dsp.dev1.mopub.com/xml");
+    }
+
+    @Test
+    public void getImpressionTrackers_withInLineXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getImpressionTrackers()))
+                .containsOnly("http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;" +
+                                "30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn" +
+                                ".net/dot.gif",
+                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
+        List<VastCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getCompanionAdXmlManagers();
+        assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
+
+        assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
+        assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
+        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/jpeg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo(
+                "http://www.tremormedia.com");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
+        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo(
+                "http://www.tremormedia.com");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(1)
+                .getClickTrackers())).containsOnly("http://companionClickTracking1");
+
+        assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
+        assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl())
+                .isEqualTo("http://clickThroughUrl1.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
+                .getClickTrackers())).containsOnly("http://companionClickTracking2");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
+                .getCompanionCreativeViewTrackers())).containsOnly("http://trackingUrl1.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
+        assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo(
+                "http://clickThroughUrl2.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(3)
+                .getClickTrackers())).containsOnly("http://companionClickTracking3");
+        assertThat(imageCompanionAdXmlManagers.get(3).getCompanionCreativeViewTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
+        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("application/x-shockwave-flash");
+        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResource())
+                .isEqualTo(
+                        "http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
+        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo(
+                "http://clickThroughUrl3.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
+                .getClickTrackers())).containsOnly("http://companionClickTracking4");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
+                .getCompanionCreativeViewTrackers())).containsOnly("http://trackingUrl2.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
+        assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
+        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResourceType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResource()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers()).isEmpty();
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(5)
+                .getCompanionCreativeViewTrackers()))
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView",
+                        "http://myTrackingURL/secondCompanionCreativeView");
+
+        assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
+        assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResourceType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResource()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
+        assertThat(imageCompanionAdXmlManagers.get(6).getCompanionCreativeViewTrackers()).isEmpty();
+    }
+
+    @Test
+    public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
+        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getAbsoluteProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(2);
+
+        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;" +
+                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
+                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+    }
+
+    @Test
+    public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
+        List<VastFractionalProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getFractionalProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(7);
+
+        VastFractionalProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker4 = trackers.get(4);
+        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker5 = trackers.get(5);
+        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker6 = trackers.get(6);
+        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCompleteTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCompleteTrackers()))
+                .containsOnly("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;" +
+                                "pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;" +
+                                "timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
+                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;" +
+                                "ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCloseTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCloseTrackers()))
+                .containsOnly("http://www.mopub.com/close?q=ignatius",
+                        "http://www.mopub.com/close?q=j3");
+    }
+
+    @Test
+    public void getVideoSkipTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoSkipTrackers()))
+                .containsOnly("http://www.mopub.com/skip?q=ignatius",
+                        "http://www.mopub.com/skip?q=j3");
+    }
+
+    @Test
+    public void getClickThroughUrl_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getClickThroughUrl();
+
+        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getClickTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getClickTrackers()))
+                .containsOnly("http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
+                        "http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getSkipOffset_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        String skipOffset = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
+                .getLinearXmlManagers().get(0).getSkipOffset();
+
+        assertThat(skipOffset).isEqualTo("25%");
+    }
+
+    @Test
+    public void getMediaFileUrl_withMediaXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
+                .getLinearXmlManagers().get(0).getMediaXmlManagers().get(0).getMediaUrl();
+
+        assertThat(url).isEqualTo("http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+    }
+}
+>>>>>>> upstream/master:mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 04a32c07..529c4a44 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -555,10 +555,7 @@ public String build() {
                     paramIfNotEmpty("iso", countryIso) +
                     paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
-                    // Maven version
-                    "&av=1.0" +
-                    // Gradle Version
-                    //"&av=" + BuildConfig.VERSION_NAME +
+                    "&av=" + BuildConfig.VERSION_NAME +
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
                     "&mr=1" +
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
index b3af256b..9a5c29dc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
@@ -22,4 +23,30 @@ private static TestVastManagerFactory getTestFactory() {
     public VastManager internalCreate(final Context context) {
         return getTestFactory().mockVastManager;
     }
+=======
+package com.mopub.mobileads.test.support;
+
+import android.content.Context;
+
+import com.mopub.mobileads.factories.VastManagerFactory;
+import com.mopub.mobileads.VastManager;
+
+import static org.mockito.Mockito.mock;
+
+public class TestVastManagerFactory extends VastManagerFactory {
+    private VastManager mockVastManager = mock(VastManager.class);
+
+    public static VastManager getSingletonMock() {
+        return getTestFactory().mockVastManager;
+    }
+
+    private static TestVastManagerFactory getTestFactory() {
+        return (TestVastManagerFactory) instance;
+    }
+
+    @Override
+    public VastManager internalCreate(final Context context) {
+        return getTestFactory().mockVastManager;
+    }
+>>>>>>> upstream/master
 }
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
new file mode 100644
index 00000000..65eb1f81
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
@@ -0,0 +1,40 @@
+package com.mopub.mobileads.test.support;
+
+import com.mopub.mobileads.VastTracker;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.xml.sax.InputSource;
+
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+public class VastUtils {
+    public static Node createNode(String xml) throws Exception {
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setCoalescing(true);
+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
+        Document document = documentBuilder.parse(new InputSource(new StringReader(xml)));
+        return document.getFirstChild();
+    }
+
+    public static List<VastTracker> stringsToVastTrackers(String... strings) {
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>(strings.length);
+        for (int i=0; i<strings.length; i++) {
+            vastTrackers.add(new VastTracker(strings[i]));
+        }
+        return vastTrackers;
+    }
+
+    public static List<String> vastTrackersToStrings(List<VastTracker> vastTrackers) {
+        List<String> strings = new ArrayList<String>(vastTrackers.size());
+        for (VastTracker vastTracker : vastTrackers) {
+            strings.add(vastTracker.getTrackingUrl());
+        }
+        return strings;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
similarity index 92%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
index af68ea88..426819d4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
@@ -1,4 +1,4 @@
-package com.mopub.mobileads.util.vast;
+package com.mopub.mobileads.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
 
@@ -170,7 +170,18 @@ public void getMatchingChildNodes_withEmptyAttributeValues_shouldReturnNone() {
     }
 
     @Test
-    public void testGetListFromDocument() throws Exception {
+    public void getAttributeValue_shouldReturnCorrectValue() throws Exception {
+        Node child = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder");
+
+        String purchaseOrderNumber = XmlUtils.getAttributeValue(child, "aw:PurchaseOrderNumber");
+        String orderDate = XmlUtils.getAttributeValue(child, "aw:OrderDate");
+
+        assertThat(purchaseOrderNumber).isEqualTo("99503");
+        assertThat(orderDate).isEqualTo("1999-10-20");
+    }
+
+    @Test
+    public void getListFromDocument_shouldReturnCorrectValue() throws Exception {
         // Get all the "aw:PurchaseOrder" nodes. If any of them have an "aw:OrderDate" attribute, extract a Date.
         List<Date> orderDates = XmlUtils.getListFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
             DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
@@ -200,7 +211,7 @@ public Date process(final Node node) {
     }
 
     @Test
-    public void testGetFirstMatchFromDocument() throws Exception {
+    public void getFirstMatchFromDocument_shouldReturnCorrectValue() throws Exception {
         // Get the first "aw:PurchaseOrder" nodes. If it has an "aw:OrderDate" attribute, extract a Date.
         Date orderDate = XmlUtils.getFirstMatchFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
             DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
@@ -222,7 +233,7 @@ public Date process(final Node node) {
     }
 
     @Test
-    public void testGetStringDataAsList_shouldFindDeepNested() throws Exception {
+    public void getStringDataAsList_shouldFindDeepNested() throws Exception {
         final List<String> strings = XmlUtils.getStringDataAsList(testDoc, "aw:Comment", null, null);
         assertThat(strings.size()).isEqualTo(2);
         assertThat(strings.get(0)).isEqualTo("Confirm this is electric");
@@ -230,7 +241,7 @@ public void testGetStringDataAsList_shouldFindDeepNested() throws Exception {
     }
 
     @Test
-    public void testGetFirstMatchingStringData_shouldFindFirstMatch() throws Exception {
+    public void getFirstMatchingStringData_shouldFindFirstMatch() throws Exception {
         final String firstMatch = XmlUtils.getFirstMatchingStringData(testDoc, "aw:Comment", null, null);
         assertThat(firstMatch).isNotNull();
         assertThat(firstMatch).isEqualTo("Confirm this is electric");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastVideoConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastVideoConfigurationTest.java
deleted file mode 100644
index 97d33463..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastVideoConfigurationTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import com.mopub.mobileads.VastAbsoluteProgressTracker;
-import com.mopub.mobileads.VastFractionalProgressTracker;
-
-import org.junit.Test;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class VastVideoConfigurationTest {
-
-    @Test
-    public void testAddFractionalTrackers_multipleTimes_shouldBeSorted() throws Exception {
-        ArrayList<VastFractionalProgressTracker> testSet1 = new ArrayList<VastFractionalProgressTracker>();
-        testSet1.add(new VastFractionalProgressTracker("test1a", 0.24f));
-        testSet1.add(new VastFractionalProgressTracker("test1b", 0.5f));
-        testSet1.add(new VastFractionalProgressTracker("test1c", 0.91f));
-
-        ArrayList<VastFractionalProgressTracker> testSet2 = new ArrayList<VastFractionalProgressTracker>();
-        testSet2.add(new VastFractionalProgressTracker("test2a", 0.14f));
-        testSet2.add(new VastFractionalProgressTracker("test2b", 0.6f));
-        testSet2.add(new VastFractionalProgressTracker("test2c", 0.71f));
-
-        VastVideoConfiguration subject = new VastVideoConfiguration();
-
-        subject.addFractionalTrackers(testSet1);
-        subject.addFractionalTrackers(testSet2);
-
-        assertThat(subject.getFractionalTrackers()).isSorted();
-    }
-
-    @Test
-    public void testAddAbsoluteTrackers_multipleTimes_shouldBesSorted() throws Exception {
-        ArrayList<VastAbsoluteProgressTracker> testSet1 = new ArrayList<VastAbsoluteProgressTracker>();
-        testSet1.add(new VastAbsoluteProgressTracker("test1a", 1000));
-        testSet1.add(new VastAbsoluteProgressTracker("test1b", 10000));
-        testSet1.add(new VastAbsoluteProgressTracker("test1c", 50000));
-
-        ArrayList<VastAbsoluteProgressTracker> testSet2 = new ArrayList<VastAbsoluteProgressTracker>();
-        testSet2.add(new VastAbsoluteProgressTracker("test2a", 1100));
-        testSet2.add(new VastAbsoluteProgressTracker("test2b", 9000));
-        testSet2.add(new VastAbsoluteProgressTracker("test2c", 62000));
-
-        VastVideoConfiguration subject = new VastVideoConfiguration();
-
-        subject.addAbsoluteTrackers(testSet1);
-        subject.addAbsoluteTrackers(testSet2);
-
-        assertThat(subject.getAbsoluteTrackers()).isSorted();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
deleted file mode 100644
index 7dc13d48..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
+++ /dev/null
@@ -1,609 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils.ForceOrientation;
-import com.mopub.mobileads.VastAbsoluteProgressTracker;
-import com.mopub.mobileads.VastFractionalProgressTracker;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.util.List;
-
-import javax.xml.parsers.ParserConfigurationException;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class VastXmlManagerTest {
-    private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
-    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
-            "            <Ad id=\"223626102\">" +
-            "                <InLine>" +
-            "                    <AdSystem version=\"2.0\">DART_DFA</AdSystem>" +
-            "                    <AdTitle>In-Stream Video</AdTitle>" +
-            "                    <Description>A test creative with a description.</Description>" +
-            "                    <Survey/>" +
-            "                    <Impression id=\"DART\">" +
-            "                        <![CDATA[" +
-            "                        http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
-            "                        ]]>" +
-            "                    </Impression>" +
-            "                    <Impression id=\"ThirdParty\">" +
-            "                        <![CDATA[" +
-            "                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
-            "                        ]]>" +
-            "                    </Impression>" +
-            "                    <VASTAdTagURI><![CDATA[ http://0.dsp.dev1.mopub.com/xml ]]></VASTAdTagURI>" +
-            "                    <Creatives>" +
-            "                        <Creative sequence=\"1\" AdID=\"\">" +
-            "                            <Linear skipoffset=\"25%\">" +
-            "                                <Duration>00:00:58</Duration>" +
-            "                                <TrackingEvents>" +
-            "                                    <Tracking event=\"start\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"progress\" offset=\"13%\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to ambiguous offset.
-            "                                    <Tracking event=\"progress\" offset=\"01:01\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a too-high percentage offset.
-            "                                    <Tracking event=\"progress\" offset=\"113%\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a negative percentage offset.
-            "                                    <Tracking event=\"progress\" offset=\"-113%\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a non-number offset
-            "                                    <Tracking event=\"progress\" offset=\"ten seconds\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"midpoint\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"midpoint\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"firstQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"firstQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"thirdQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"thirdQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"complete\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"complete\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"close\">" +
-            "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/close?q=ignatius" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"close\">" +
-            "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/close?q=j3" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"skip\">" +
-            "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/skip?q=ignatius" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"skip\">" +
-            "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/skip?q=j3" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"mute\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"pause\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"fullscreen\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"fullscreen\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                </TrackingEvents>" +
-            "                                <AdParameters/>" +
-            "                                <VideoClicks>" +
-            "                                    <ClickThrough>" +
-            "                                        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
-            "                                    </ClickThrough>" +
-            "                                    <ClickTracking id=\"DART\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
-            "                                        ]]>" +
-            "                                    </ClickTracking>" +
-            "                                    <ClickTracking id=\"ThirdParty\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
-            "                                        ]]>" +
-            "                                    </ClickTracking>" +
-            "                                </VideoClicks>" +
-            "                                <MediaFiles>" +
-            "                                    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
-            "                                               width=\"300\" height=\"225\">" +
-            "                                        <![CDATA[" +
-            "                                        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-            "                                        ]]>" +
-            "                                    </MediaFile>" +
-            "                                </MediaFiles>" +
-            "                            </Linear>" +
-            "                        </Creative>" +
-            "                        <Creative AdID=\"601364-Companion\">" +
-            "                            <CompanionAds>" +
-            "                               <Companion height=\"90\" width=\"728\">" +
-            "                                   <StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
-            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
-            "                                   <BADTrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                   </BADTrackingEvents>" +
-            "                               </Companion>" +
-            "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
-            "                                   <StaticResource creativeType=\"image/png\">http://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion height=\"789\" width=\"456\">" +
-            "                                   <StaticResource creativeType=\"image/bmp\">" +
-            "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">" +
-            "                                           <![CDATA[" +
-            "                                               http://trackingUrl1.com/" +
-            "                                           ]]>" +
-            "                                       </Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl1.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion height=\"789\" width=\"1011\">" +
-            "                                   <StaticResource creativeType=\"image/gif\">" +
-            "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.gif" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl2.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion width=\"300\" height=\"60\">" +
-            "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
-            "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">" +
-            "                                           <![CDATA[" +
-            "                                               http://trackingUrl2.com/" +
-            "                                           ]]>" +
-            "                                       </Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl3.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
-            "                                   <BADStaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                           <BADTracking event=\"creativeView\">http://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
-            "                                           <Tracking BADevent=\"creativeView\">http://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"BADcreativeView\">http://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <BADCompanionClickThrough>http://www.tremormedia.com</BADCompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion width=\"9000\">" +
-            "                                   <TrackingEvents>" +
-            "                                       <ThisWillNotBeFound>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                       </ThisWillNotBeFound>" +
-            "                                   </TrackingEvents>" +
-            "                               </Companion>" +
-            "                               <BADCompanion>" +
-            "                               </BADCompanion>" +
-            "                            </CompanionAds>" +
-            "                        </Creative>" +
-            "                    </Creatives>" +
-            "                    <Extensions>" +
-            "                        <Extension type=\"DART\">" +
-            "                            <AdServingData>" +
-            "                                <DeliveryData>" +
-            "                                    <GeoData>" +
-            "                                        <![CDATA[" +
-            "                                        ct=US&st=CA&ac=415&zp=94103&bw=4&dma=197&city=13358" +
-            "                                        ]]>" +
-            "                                    </GeoData>" +
-            "                                </DeliveryData>" +
-            "                            </AdServingData>" +
-            "                        </Extension>" +
-            "                        <Extension type=\"MoPub\">" +
-            "                           <MoPubCtaText>custom CTA text</MoPubCtaText>" +
-            "                           <MoPubSkipText>skip</MoPubSkipText>" +
-            "                           <MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
-            "                           <MoPubForceOrientation>device</MoPubForceOrientation>" +
-            "                        </Extension>" +
-            "                    </Extensions>" +
-            "                </InLine>" +
-            "            </Ad>" +
-            "        </VAST>" +
-            "<MP_TRACKING_URLS>" +
-            "   <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
-            "   <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
-            "</MP_TRACKING_URLS>";
-
-    private VastXmlManager mXmlManager;
-    private boolean mExceptionRaised;
-
-    @Before
-    public void setup() {
-        mXmlManager = new VastXmlManager();
-        mExceptionRaised = false;
-
-        try {
-            mXmlManager.parseVastXml(TEST_VAST_XML_STRING);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        } catch (IOException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        } catch (SAXException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        }
-    }
-
-    @Test
-    public void parseVastXml_shouldNotRaiseAnExceptionProcessingValidXml() {
-        assertThat(mExceptionRaised).isEqualTo(false);
-    }
-
-    @Test
-    public void parseVastXml_shouldNotRaiseAnExceptionProcessingXmlWithXmlHeaderTag() throws ParserConfigurationException, IOException, SAXException {
-        String xmlString = XML_HEADER_TAG + TEST_VAST_XML_STRING;
-
-        mXmlManager = new VastXmlManager();
-        mXmlManager.parseVastXml(xmlString);
-    }
-
-    @Test
-    public void getImpressionTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getImpressionTrackers();
-
-        assertThat(trackers.size()).isEqualTo(4);
-
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-        String tracker3 = trackers.get(2);
-        String tracker4 = trackers.get(3);
-
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
-        assertThat(tracker3).isEqualTo("http://www.mopub.com/imp1");
-        assertThat(tracker4).isEqualTo("http://www.mopub.com/imp2");
-    }
-
-    @Test
-    public void getAbsoluteTrackers_shouldReturnCorrectValues() {
-        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAbsoluteProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-    }
-
-    @Test
-    public void getFractionalTrackers_shouldReturnCorrectValues() {
-        List<VastFractionalProgressTracker> trackers = mXmlManager.getFractionalProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(7);
-
-        VastFractionalProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker3 = trackers.get(3);
-        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker4 = trackers.get(4);
-        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker5 = trackers.get(5);
-        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker6 = trackers.get(6);
-        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoCompleteTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoCloseTrackers();
-
-        assertThat(trackers).containsExactly("http://www.mopub.com/close?q=ignatius", "http://www.mopub.com/close?q=j3");
-    }
-
-    @Test
-    public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoSkipTrackers();
-
-        assertThat(trackers).containsExactly("http://www.mopub.com/skip?q=ignatius", "http://www.mopub.com/skip?q=j3");
-    }
-
-    @Test
-    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getClickThroughUrl();
-
-        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
-    }
-
-    @Test
-    public void getClickTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getClickTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
-        List<VastXmlManager.ImageCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getCompanionAdXmlManagers();
-        assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
-
-        assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
-        assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
-        assertThat(imageCompanionAdXmlManagers.get(0).getType()).isEqualTo("image/jpeg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
-
-        assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
-        assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
-        assertThat(imageCompanionAdXmlManagers.get(1).getType()).isEqualTo("image/png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(imageCompanionAdXmlManagers.get(1).getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-
-        assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
-        assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(2).getType()).isEqualTo("image/bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl()).isEqualTo("http://clickThroughUrl1.com/");
-        assertThat(imageCompanionAdXmlManagers.get(2).getClickTrackers()).containsOnly("http://trackingUrl1.com/");
-
-        assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
-        assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(3).getType()).isEqualTo("image/gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo("http://clickThroughUrl2.com/");
-        assertThat(imageCompanionAdXmlManagers.get(3).getClickTrackers()).isEmpty();
-
-        assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
-        assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
-        assertThat(imageCompanionAdXmlManagers.get(4).getType()).isEqualTo("application/x-shockwave-flash");
-        assertThat(imageCompanionAdXmlManagers.get(4).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
-        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo("http://clickThroughUrl3.com/");
-        assertThat(imageCompanionAdXmlManagers.get(4).getClickTrackers()).containsOnly("http://trackingUrl2.com/");
-
-        assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
-        assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
-        assertThat(imageCompanionAdXmlManagers.get(5).getType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getImageUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-
-        assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
-        assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getImageUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
-    }
-
-    @Test
-    public void getMediaFileUrl_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getMediaFileUrl();
-
-        assertThat(url).isEqualTo("http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
-    }
-
-    @Test
-    public void getCustomCtaText_shouldReturnTheCorrectValue() {
-        String customCtaText = mXmlManager.getCustomCtaText();
-
-        assertThat(customCtaText).isEqualTo("custom CTA text");
-    }
-
-    @Test
-    public void getCustomSkipText_shouldReturnTheCorrectValue() {
-        String customSkipText = mXmlManager.getCustomSkipText();
-
-        assertThat(customSkipText).isEqualTo("skip");
-    }
-
-    @Test
-    public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
-        String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
-
-        assertThat(customCloseIconUrl).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
-    }
-
-    @Test
-    public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
-        ForceOrientation customForceOrientation = mXmlManager.getCustomForceOrientation();
-
-        assertThat(customForceOrientation).isEqualTo(ForceOrientation.DEVICE_ORIENTATION);
-    }
-
-    @Test
-    public void getSkipOffset_shouldReturnTheCorrectValue() {
-        String skipOffset = mXmlManager.getSkipOffset();
-
-        assertThat(skipOffset).isEqualTo("25%");
-    }
-
-    @Test
-    public void getVastAdTagURI_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getVastAdTagURI();
-
-        assertThat(url).isEqualTo("http://0.dsp.dev1.mopub.com/xml");
-    }
-
-    @Test
-    public void parsingMalformedXml_shouldNotCauseProblems() {
-        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
-
-        VastXmlManager badManager = new VastXmlManager();
-
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
-
-        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void parsingVastWithMalformedNodes_shouldNotCauseProblems() {
-        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
-
-        VastXmlManager badManager = new VastXmlManager();
-
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
-
-        assertThat(badManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(badManager.getFractionalProgressTrackers().size()).isEqualTo(0);
-        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
-
-        List<VastAbsoluteProgressTracker> startTrackers = badManager.getAbsoluteProgressTrackers();
-        assertThat(startTrackers.size()).isEqualTo(1);
-        assertThat(startTrackers.get(0).getTrackingUrl()).isEqualTo("good");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index 1aced355..0ee9e91f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.mraid;
 
 import android.app.Activity;
@@ -288,3 +289,378 @@ public void runCommand_createCalendarEvent_shouldCallListener()
                 anyMapOf(String.class, String.class));
     }
 }
+=======
+package com.mopub.mraid;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Build;
+import android.webkit.WebSettings;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mraid.MraidBridge.MraidBridgeListener;
+import com.mopub.mraid.MraidBridge.MraidWebView;
+import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Answers;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.anyMapOf;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.startsWith;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class MraidBridgeTest {
+    @Mock MraidNativeCommandHandler mockNativeCommandHandler;
+    @Mock MraidBridgeListener mockBridgeListener;
+    @Mock AdReport mockAdReport;
+    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;
+    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;
+    @Mock WebSettings mockWebSettings;
+    @Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
+
+    private Activity activity;
+    private MraidBridge subjectBanner;
+    private MraidBridge subjectInterstitial;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE, mockNativeCommandHandler);
+        subjectBanner.setMraidBridgeListener(mockBridgeListener);
+
+        subjectInterstitial = new MraidBridge(mockAdReport, PlacementType.INTERSTITIAL, mockNativeCommandHandler);
+        subjectInterstitial.setMraidBridgeListener(mockBridgeListener);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR1, emulateSdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void attachView_atLeastJellyBeanMr1_withInterstitial_shouldAutoPlayVideo() {
+        when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
+
+        subjectInterstitial.attachView(mockInterstitialWebView);
+
+        verify(mockWebSettings).setMediaPlaybackRequiresUserGesture(false);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR1, emulateSdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void attachView_atLeastJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
+        when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
+
+        subjectBanner.attachView(mockBannerWebView);
+
+        verify(mockWebSettings, never()).setMediaPlaybackRequiresUserGesture(anyBoolean());
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN, emulateSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Test
+    public void attachView_belowJellyBeanMr1_withInterstitial_shouldNotAutoPlayVideo() {
+        when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
+
+        subjectInterstitial.attachView(mockInterstitialWebView);
+
+        // Disregard setting of javascript
+        verify(mockWebSettings).setJavaScriptEnabled(anyBoolean());
+        // Ensure mockWebSettings.setMediaPlaybackRequiresUserGesture is never called
+        verifyNoMoreInteractions(mockWebSettings);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN, emulateSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Test
+    public void attachView_belowJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
+        when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
+
+        subjectBanner.attachView(mockBannerWebView);
+
+        // Disregard setting of javascript
+        verify(mockWebSettings).setJavaScriptEnabled(anyBoolean());
+        // Ensure mockWebSettings.setMediaPlaybackRequiresUserGesture is never called
+        verifyNoMoreInteractions(mockWebSettings);
+    }
+
+    @Test
+    public void attachView_thenDetach_shouldSetMRaidWebView_thenShouldClear() {
+        attachWebViews();
+        assertThat(subjectBanner.getMraidWebView()).isEqualTo(mockBannerWebView);
+
+        subjectBanner.detach();
+        assertThat(subjectBanner.getMraidWebView()).isNull();
+    }
+
+    @Test
+    public void attachView_thenOnPageFinished_shouldFireReady() {
+        attachWebViews();
+        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
+
+        verify(mockBridgeListener).onPageLoaded();
+    }
+
+    @Test
+    public void attachView_thenOnPageFinished_twice_shouldNotFireReadySecondTime() {
+        attachWebViews();
+        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
+        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url2");
+
+        verify(mockBridgeListener, times(1)).onPageLoaded();
+    }
+
+    @Test
+    public void attachView_thenSetContentHtml_shouldCallLoadDataWithBaseURL() {
+        attachWebViews();
+        subjectBanner.setContentHtml("test-html");
+
+        verify(mockBannerWebView).loadDataWithBaseURL(
+                "http://" + Constants.HOST + "/", "test-html", "text/html", "UTF-8", null);
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_invalidUrl_shouldFireErrorEvent() {
+        attachWebViews();
+        boolean result = subjectBanner.handleShouldOverrideUrl("bad bad bad");
+
+        verify(mockBannerWebView).loadUrl(startsWith(
+                "javascript:window.mraidbridge.notifyErrorEvent"));
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_mopubNonFailLoadUrl_shouldNeverLoadUrl_shouldReturnTrue() {
+        attachWebViews();
+        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://special-mopub-command");
+
+        verify(mockBannerWebView, never()).loadUrl(anyString());
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenBanner_shouldNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
+        attachWebViews();
+        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://failLoad");
+
+        verify(mockBridgeListener).onPageFailedToLoad();
+        verify(mockBannerWebView, never()).loadUrl(anyString());
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenInterstitial_shouldNotNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
+        attachWebViews();
+        boolean result = subjectInterstitial.handleShouldOverrideUrl("mopub://failLoad");
+
+        verify(mockBridgeListener, never()).onPageFailedToLoad();
+        verify(mockBannerWebView, never()).loadUrl(anyString());
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_mraidUrl_invalid_shouldFireErrorEvent_shouldReturnTrue() {
+        attachWebViews();
+        boolean result = subjectBanner.handleShouldOverrideUrl("mraid://bad-command");
+
+        verify(mockBannerWebView).loadUrl(startsWith(
+                "javascript:window.mraidbridge.notifyErrorEvent"));
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_smsUrl_notClicked_shouldReturnFalse() {
+        attachWebViews();
+        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
+
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
+        attachWebViews();
+        subjectBanner.setClicked(true);
+        reset(mockBannerWebView);
+        when(mockBannerWebView.getContext()).thenReturn(activity);
+
+        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
+
+        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedIntent).isNotNull();
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(startedIntent.getComponent()).isNull();
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
+        attachWebViews();
+        boolean result = subjectBanner.handleShouldOverrideUrl("http://www.mopub.com");
+
+        assertThat(result).isFalse();
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void runCommand_requiresClick_notClicked_shouldThrowException()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE);
+        subjectBanner.attachView(mockBannerWebView);
+        subjectBanner.setClicked(false);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
+    }
+
+    public void runCommand_requiresClick_clicked_shouldNotThrowException()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void runCommand_interstitial_requiresClick_notClicked_shouldThrowException()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectInterstitial.setClicked(false);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
+    }
+
+    @Test
+    public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowException()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectInterstitial.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("url", "http://valid-url");
+
+        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
+    }
+
+    @Test
+    public void runCommand_close_shouldCallListener()
+            throws MraidCommandException {
+        attachWebViews();
+        Map<String, String> params = new HashMap<String, String>();
+        
+        subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);
+
+        verify(mockBridgeListener).onClose();
+    }
+
+    @Test
+    public void runCommand_expand_shouldCallListener()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("shouldUseCustomClose", "true");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
+
+        verify(mockBridgeListener).onExpand(null, true);
+    }
+
+    @Test
+    public void runCommand_expand_withUrl_shouldCallListener()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("url", "http://valid-url");
+        params.put("shouldUseCustomClose", "true");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
+
+        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
+        verify(mockBridgeListener).onExpand(
+                uriCaptor.capture(), eq(true));
+        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
+    }
+
+    @Test
+    public void runCommand_playVideo_shouldCallListener()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
+
+        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
+        verify(mockBridgeListener).onPlayVideo(uriCaptor.capture());
+        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
+    }
+
+    @Test
+    public void runCommand_storePicture_shouldCallListener()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.STORE_PICTURE, params);
+
+        verify(mockNativeCommandHandler).storePicture(any(Context.class), eq("http://valid-url"),
+                any(MraidCommandFailureListener.class));
+    }
+
+    @Test
+    public void runCommand_createCalendarEvent_shouldCallListener()
+            throws MraidCommandException {
+        attachWebViews();
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("eventName", "Dinner at my house");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.CREATE_CALENDAR_EVENT, params);
+
+        verify(mockNativeCommandHandler).createCalendarEvent(any(Context.class),
+                anyMapOf(String.class, String.class));
+    }
+
+    private void attachWebViews() {
+        subjectBanner.attachView(mockBannerWebView);
+        subjectInterstitial.attachView(mockInterstitialWebView);
+
+        verify(mockBannerWebView).setWebViewClient(bannerWebViewClientCaptor.capture());
+        reset(mockBannerWebView);
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index a7385242..1ffe7e85 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -153,7 +153,7 @@ public void onErrorListener_shouldShowCloseButton() throws Exception {
     }
 
     private void initializeSubject() {
-        subject = new MraidVideoViewController(context, bundle, baseVideoViewControllerListener);
+        subject = new MraidVideoViewController(context, bundle, null, baseVideoViewControllerListener);
     }
 
     private ShadowVideoView getShadowVideoView() {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index a81aed19..06f1c83d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -51,6 +51,8 @@
     @Mock
     private RequestParameters mockRequestParameters;
     @Mock
+    private ViewBinder mockViewBinder;
+    @Mock
     private MoPubAdRenderer mockAdRenderer;
     @Mock
     private ListView mockListView;
@@ -184,6 +186,22 @@ public void registerAdRenderer_withNull_shouldNotCallAdPlacer() {
         verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
     }
 
+    @Test
+    public void registerViewBinder_shouldCallAdPlacer() {
+        subject.registerViewBinder(mockViewBinder);
+
+        final ArgumentCaptor<MoPubAdRenderer> rendererCaptor = new ArgumentCaptor<MoPubAdRenderer>();
+        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture());
+        MoPubAdRenderer renderer = rendererCaptor.getValue();
+        assertThat(renderer).isExactlyInstanceOf(MoPubNativeAdRenderer.class);
+    }
+
+    @Test
+    public void registerViewBinder_withNull_shouldNotCallAdPlacer() {
+        subject.registerViewBinder(null);
+
+        verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
+    }
 
     @Test
     public void setAdLoadedListener_handleAdLoaded_shouldCallCallback_shouldCallObserver() {
@@ -508,7 +526,7 @@ public void setSelection_shouldCallSetSelectionOnListView() {
     }
 
     @Test
-    public void smoothScrollToPosition_shouldCallSmooethScrollToPositionOnListView() {
+    public void smoothScrollToPosition_shouldCallSmoothScrollToPositionOnListView() {
         subject.smoothScrollToPosition(mockListView, AD_POSITION);
 
         // Since the original position is the ad position, the adjusted position is 1 higher
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
index 17f7dc4c..70a139c0 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
@@ -101,6 +101,8 @@ public void renderAdView_withNullNativeResponse_shouldThrowNPE() {
     }
 
     @Rule public ExpectedException exception = ExpectedException.none();
+
+    @Test
     public void renderAdView_withNullViewBinder_shouldThrowNPE() {
         subject = new MoPubNativeAdRenderer(null);
 
@@ -120,6 +122,7 @@ public void renderAdView_shouldReturnPopulatedView() {
         // not testing images due to testing complexity
     }
 
+    @Test
     public void renderAdView_withFailedViewBinder_shouldReturnEmptyViews() {
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index e04b9023..a29e19ee 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
@@ -30,7 +31,6 @@
 import java.util.List;
 import java.util.concurrent.Semaphore;
 import java.util.logging.Level;
-import java.util.logging.LogManager;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
@@ -164,7 +164,7 @@ public void onAdError_whenNotMoPubError_shouldNotifyListener() {
 
     @Test
     public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_shouldNotifyListener() {
-        LogManager.getLogManager().getLogger("com.mopub").setLevel(Level.ALL);
+        MoPubLog.setSdkHandlerLevel(Level.ALL);
 
         subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP));
 
@@ -178,7 +178,7 @@ public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_sho
 
     @Test
     public void onAdError_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldNotifyListener() {
-        LogManager.getLogManager().getLogger("com.mopub").setLevel(Level.ALL);
+        MoPubLog.setSdkHandlerLevel(Level.ALL);
         shadowOf(context).denyPermissions(INTERNET);
 
         subject.onAdError(new NoConnectionError());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
new file mode 100644
index 00000000..5bf340ed
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
@@ -0,0 +1,697 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.INSERT_AT_END;
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.KEEP_ADS_FIXED;
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.MOVE_ALL_ADS_WITH_CONTENT;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubRecyclerAdapterTest {
+    private static final int AD_POSITION_1 = 1;
+    private static final int AD_POSITION_7 = 7;
+
+    @Mock MoPubStreamAdPlacer mockStreamAdPlacer;
+    @Mock VisibilityTracker mockVisibilityTracker;
+    @Mock NativeAdData mockNativeAdData;
+    @Mock NativeAdData mockNativeAdData2;
+    @Mock MoPubAdRenderer mockAdRenderer;
+    @Mock ViewGroup mockParent;
+    @Mock View mockAdView;
+    @Mock RecyclerView.AdapterDataObserver mockObserver;
+    @Mock MoPubNativeAdLoadedListener mockAdLoadedListener;
+    MoPubRecyclerViewHolder spyViewHolder;
+    @Mock TestHolder mockTestHolder;
+    TestAdapter originalAdapter;
+
+    MoPubRecyclerAdapter subject;
+
+    @Mock RecyclerView mockRecyclerView;
+    @Mock LinearLayoutManager mockLayoutManager;
+
+    @Before
+    public void setUp() throws Exception {
+        originalAdapter = spy(new TestAdapter());
+        subject = new MoPubRecyclerAdapter(mockStreamAdPlacer, originalAdapter, mockVisibilityTracker);
+
+        spyViewHolder = spy(new MoPubRecyclerViewHolder(mockAdView));
+
+        // Reset because the constructor interacts with the stream ad placer, and we don't want
+        // to worry about verifying those changes in tests.
+        reset(mockStreamAdPlacer);
+        reset(originalAdapter);
+
+        // Mock some simple adjustment behavior for tests. This is creating an ad placer that
+        // emulates a content item followed by an ad item, then another content item.
+        when(mockStreamAdPlacer.getAdData(AD_POSITION_1)).thenReturn(mockNativeAdData);
+        when(mockStreamAdPlacer.getAdData(AD_POSITION_7)).thenReturn(mockNativeAdData2);
+        when(mockStreamAdPlacer.getAdRendererForViewType(MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE))
+                .thenReturn(mockAdRenderer);
+        when(mockAdRenderer.createAdView(any(Context.class), any(ViewGroup.class))).thenReturn(mockAdView);
+
+        when(mockStreamAdPlacer.isAd(anyInt())).thenAnswer(new Answer<Boolean>() {
+            @Override
+            public Boolean answer(final InvocationOnMock invocation) throws Throwable {
+                int position = (Integer) invocation.getArguments()[0];
+                return position == AD_POSITION_1 || position == AD_POSITION_7;
+            }
+        });
+        when(mockStreamAdPlacer.getOriginalPosition(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int adjusted = (Integer) invocation.getArguments()[0];
+                int original;
+                if (adjusted < AD_POSITION_1) {
+                    original = adjusted;
+                } else if (adjusted >= AD_POSITION_7) {
+                    original = adjusted - 2;
+                } else {
+                    original = adjusted - 1;
+                }
+                return original;
+            }
+        });
+        when(mockStreamAdPlacer.getAdjustedPosition(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int originalPosition = (Integer) invocation.getArguments()[0];
+                int adjusted;
+                if (originalPosition < AD_POSITION_1) {
+                    adjusted = originalPosition;
+                } else if (originalPosition > AD_POSITION_7) {
+                    adjusted = originalPosition + 2;
+                } else {
+                    adjusted = originalPosition + 1;
+                }
+                return adjusted;
+            }
+        });
+        when(mockStreamAdPlacer.getAdViewType(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int originalPosition = (Integer) invocation.getArguments()[0];
+                return (originalPosition == AD_POSITION_1 || originalPosition == AD_POSITION_7)
+                        ? 1 : MoPubStreamAdPlacer.CONTENT_VIEW_TYPE;
+            }
+        });
+
+        when(mockStreamAdPlacer.getAdjustedCount(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int originalItemCount = (Integer) invocation.getArguments()[0];
+                int adjusted;
+                if (originalItemCount < AD_POSITION_1) {
+                    adjusted = originalItemCount;
+                } else if (originalItemCount > AD_POSITION_7) {
+                    adjusted = originalItemCount + 2;
+                } else {
+                    adjusted = originalItemCount + 1;
+                }
+                return adjusted;
+            }
+        });
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollVerticallyNoStackFromEnd_shouldComputeTopOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(true);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(false);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(13);
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollVerticallyStackFromEnd_shouldComputeBottomOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(true);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(true);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(14);
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollHorizontallyStackFromEnd_shouldComputeLeftOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(true);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(false);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(10);
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollHorizontallyNoStackFromEnd_shouldComputeRightOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+
+        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(true);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(true);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(11);
+    }
+
+    @Test
+    public void computeScrollOffset_withCannotScroll_shouldReturnZero() {
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(0);
+    }
+
+    @Test
+    public void registerViewBinder_shouldCallRegisterAdRendererOnStreamAdPlacer() {
+        subject.registerViewBinder(new ViewBinder.Builder(1).build());
+
+        final ArgumentCaptor<MoPubAdRenderer> rendererCaptor = ArgumentCaptor.forClass(MoPubAdRenderer.class);
+        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture(), eq(-55));
+        MoPubAdRenderer renderer = rendererCaptor.getValue();
+        assertThat(renderer).isExactlyInstanceOf(MoPubNativeAdRenderer.class);
+    }
+
+    @Test
+    public void onCreateViewHolder_whenAdType_shouldInflateAdView() {
+        final RecyclerView.ViewHolder result = subject.onCreateViewHolder(mockParent, MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE);
+
+        assertThat(result).isExactlyInstanceOf(MoPubRecyclerViewHolder.class);
+
+        verify(mockStreamAdPlacer).getAdRendererForViewType(MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE);
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onCreateViewHolder_whenNotAdType_shouldCallOriginalAdapter() {
+        when(mockParent.getContext()).thenReturn(mock(Context.class));
+
+        subject.onCreateViewHolder(mockParent, 3);
+
+        verify(originalAdapter).onCreateViewHolder(mockParent, 3);
+        verify(mockStreamAdPlacer, never()).getAdRendererForViewType(anyInt());
+    }
+
+    @Test
+    public void onBindViewHolder_whenAdPosition_shouldGetAndBindAdData() {
+        subject.onBindViewHolder(spyViewHolder, AD_POSITION_1);
+
+        verify(mockStreamAdPlacer).bindAdView(mockNativeAdData, mockAdView);
+    }
+
+    @Test
+    public void onBindViewHolder_whenNotAdPosition_shouldCallOriginalAdapter() {
+        subject.onBindViewHolder(mockTestHolder, AD_POSITION_1 + 1);
+
+        // Position should be adjusted.
+        verify(originalAdapter).onBindViewHolder(mockTestHolder, AD_POSITION_1);
+    }
+
+    @Test
+    public void onViewAttached_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        subject.onViewAttachedToWindow(spyViewHolder);
+
+        verify(originalAdapter, never()).onViewAttachedToWindow(any(TestHolder.class));
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onViewAttached_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        subject.onViewAttachedToWindow(mockTestHolder);
+
+        verify(originalAdapter).onViewAttachedToWindow(mockTestHolder);
+    }
+
+    @Test
+    public void onViewDetached_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        subject.onViewDetachedFromWindow(spyViewHolder);
+
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onViewDetached_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        subject.onViewDetachedFromWindow(mockTestHolder);
+
+        verify(originalAdapter).onViewDetachedFromWindow(mockTestHolder);
+    }
+
+    @Test
+    public void onFailedToRecycleView_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        assertThat(subject.onFailedToRecycleView(spyViewHolder)).isFalse();
+
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onFailedToRecycleView_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        when(originalAdapter.onFailedToRecycleView(mockTestHolder)).thenReturn(true);
+
+        assertThat(subject.onFailedToRecycleView(mockTestHolder)).isTrue();
+
+        verify(originalAdapter).onFailedToRecycleView(mockTestHolder);
+    }
+
+    @Test
+    public void onViewRecycled_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        subject.onViewRecycled(spyViewHolder);
+
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onViewRecycled_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        subject.onViewRecycled(mockTestHolder);
+
+        verify(originalAdapter).onViewRecycled(mockTestHolder);
+    }
+
+    @Test
+    public void handleAdLoaded_withAndWithoutAdLoadedListener_shouldNotifyInsertToListener() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setAdLoadedListener(mockAdLoadedListener);
+        subject.handleAdLoaded(8);
+
+        verify(mockObserver).onItemRangeInserted(8, 1);
+        verify(mockAdLoadedListener).onAdLoaded(8);
+        reset(mockObserver, mockAdLoadedListener);
+
+        subject.setAdLoadedListener(null);
+        subject.handleAdLoaded(8);
+
+        verify(mockObserver).onItemRangeInserted(8, 1);
+        verifyZeroInteractions(mockAdLoadedListener);
+    }
+
+    @Test
+    public void handleAdRemoved_withAndWithoutAdLoadedListener_shouldNotifyDeleteToListener() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setAdLoadedListener(mockAdLoadedListener);
+        subject.handleAdRemoved(AD_POSITION_1);
+
+        verify(mockObserver).onItemRangeRemoved(AD_POSITION_1, 1);
+        verify(mockAdLoadedListener).onAdRemoved(AD_POSITION_1);
+        reset(mockObserver, mockAdLoadedListener);
+
+        subject.setAdLoadedListener(null);
+        subject.handleAdRemoved(AD_POSITION_1);
+
+        verify(mockObserver).onItemRangeRemoved(AD_POSITION_1, 1);
+        verifyZeroInteractions(mockAdLoadedListener);
+    }
+
+    @Test
+    public void loadAds_shouldCallLoadOnAdPlacer() {
+        subject.loadAds("testId");
+
+        verify(mockStreamAdPlacer).loadAds("testId");
+    }
+
+    @Test
+    public void loadAds_withParameters_shouldCallLoadOnAdPlacer() {
+        final RequestParameters mockRequestParameters = mock(RequestParameters.class);
+        subject.loadAds("testId", mockRequestParameters);
+
+        verify(mockStreamAdPlacer).loadAds("testId", mockRequestParameters);
+    }
+
+    @Test
+    public void isAd_shouldCallIsAdOnAdPlacer() {
+        boolean isAd = subject.isAd(4);
+
+        assertThat(isAd).isFalse();
+        verify(mockStreamAdPlacer).isAd(4);
+
+
+        isAd = subject.isAd(AD_POSITION_1);
+
+        assertThat(isAd).isTrue();
+        verify(mockStreamAdPlacer).isAd(AD_POSITION_1);
+    }
+
+    @Test
+    public void getAdjustedPosition_shouldCallAdPlacer() {
+        int adjustedPosition = subject.getAdjustedPosition(AD_POSITION_1);
+
+        assertThat(adjustedPosition).isEqualTo(AD_POSITION_1 + 1);
+        verify(mockStreamAdPlacer).getAdjustedPosition(AD_POSITION_1);
+    }
+
+    @Test
+    public void getOriginalPosition_shouldCallAdPlacer() {
+        int originalPosition = subject.getOriginalPosition(AD_POSITION_1 + 1);
+
+        assertThat(originalPosition).isEqualTo(AD_POSITION_1);
+        verify(mockStreamAdPlacer).getOriginalPosition(AD_POSITION_1 + 1);
+    }
+
+    @Test
+    public void getItemCount_shouldCallAdPlacer() {
+        int itemCount = subject.getItemCount();
+
+        assertThat(itemCount).isEqualTo(20);
+        verify(originalAdapter).getItemCount();
+        verify(mockStreamAdPlacer).getAdjustedCount(18);
+    }
+
+    @Test
+    public void setHasStableIds_shouldCallSetHasStableIdsOnOriginal() {
+        subject.setHasStableIds(true);
+
+        verify(originalAdapter).setHasStableIds(true);
+    }
+
+    @Test
+    public void getItemId_hasStableIds_shouldCallOriginalAdapter() {
+        subject.setHasStableIds(true);
+        when(originalAdapter.getItemId(anyInt())).thenAnswer(new Answer<Long>() {
+            @Override
+            public Long answer(final InvocationOnMock invocation) throws Throwable {
+                return Long.valueOf((Integer) invocation.getArguments()[0]);
+            }
+        });
+
+        long itemId = subject.getItemId(5);
+
+        assertThat(itemId).isEqualTo(4l);
+        verify(originalAdapter).getItemId(4); // Adjusted position.
+    }
+
+    @Test
+    public void getItemIds_hasStableIds_shouldReturnEnoughIds() {
+        originalAdapter.setItemCount(5000);
+
+        subject.setHasStableIds(true);
+
+        Set<Long> ids = new HashSet<>(7000, 1.0f);
+        for (int position = 0; position < subject.getItemCount(); position++) {
+            ids.add(subject.getItemId(position));
+        }
+
+        assertThat(ids.size()).isEqualTo(subject.getItemCount());
+        // Verify we called exactly the right # of times on the original adapter.
+        verify(originalAdapter, times(5000)).getItemId(anyInt());
+    }
+
+    @Test
+    public void getItemId_DoesNotHaveStableIds_shouldNotCallOriginalAdapter() {
+        subject.setHasStableIds(false);
+
+        assertThat(subject.getItemId(5)).isEqualTo(RecyclerView.NO_ID);
+        verify(originalAdapter).setHasStableIds(false);
+    }
+
+    @Test
+    public void onItemRangeInsertedAtEnd_withInsertAtEndStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedAtEnd_withMoveAdsStrategy_shouldNotifyItemRangeInserted() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
+
+        verify(mockObserver).onItemRangeInserted(originalItemCount + 2, 3);
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedAtEnd_withKeepAdsPlacedStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedInMiddle_withInsertAtEndStrategy_shouldNotifyItemRangeInserted() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
+
+        verify(mockObserver).onItemRangeInserted(originalItemCount - 5, 3);
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedInMiddle_withMoveAdsStrategy_shouldNotifyItemRangeInserted() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
+
+        verify(mockObserver).onItemRangeInserted(originalItemCount - 5, 3);
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedInMiddle_withKeepAdsStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withInsertAtEndStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 4);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withMoveAdsStrategy_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 2, 3);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 4);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withMoveAdsStrategyAndItemsSurroundAnAd_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+        originalAdapter.setItemCount(AD_POSITION_7 + 1);
+
+        final int originalItemCount = AD_POSITION_7 + 1;
+
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        // We remove 3 items + 1 ad
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 4, 4);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 4);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withKeepAdsStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromMiddle_withInsertAtEndStrategy_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
+
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 6, 3);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 8);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromMiddle_withMoveAdsStrategy_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
+
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 6, 3);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 8);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromMiddle_withKeepAdsStrategy_shouldNotifyChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 8);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    private class TestAdapter extends RecyclerView.Adapter<TestHolder> {
+        private int mItems = 18;
+
+        @Override
+        public TestHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
+            View view = mock(View.class);
+            return new TestHolder(view);
+        }
+
+        @Override
+        public void onBindViewHolder(final TestHolder holder, final int position) {
+            // Do nothing
+        }
+
+        @Override
+        public long getItemId(final int position) {
+            return position;
+        }
+
+        @Override
+        public int getItemCount() {
+            return mItems;
+        }
+
+        void setItemCount(int itemCount) {
+            mItems = itemCount;
+        }
+    }
+
+    private class TestHolder extends RecyclerView.ViewHolder {
+        public TestHolder(final View itemView) {
+            super(itemView);
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 7cd08ac5..724736a8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -16,7 +16,9 @@
 
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
+import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -55,6 +57,7 @@
 
     @Before
     public void setup() {
+        Networking.useHttps(false);
         context = spy(Robolectric.buildActivity(Activity.class).create().get());
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         when(context.getPackageName()).thenReturn("testBundle");
@@ -298,10 +301,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
                         TEST_SCREEN_HEIGHT +
                         "&sc_a=" +
                         TEST_DENSITY +
-                        // maven version
-                        "&ct=3&av=1.0" +
-                        // Gradle version
-                        //"&ct=3&av=" + BuildConfig.VERSION_NAME +
+                        "&ct=3&av=" + BuildConfig.VERSION_NAME +
                         "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
index fdeb2107..2ff97828 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
@@ -308,7 +308,7 @@ public void updateExtras_shouldAddValuesToViews() throws Exception {
         NativeViewHolder nativeViewHolder =
                 NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
 
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
+        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("extrastexttext");
 
@@ -343,7 +343,7 @@ public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() thr
 
         assertThat(extrasTextView.getText()).isEqualTo("previousextrastext");
 
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
+        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("");
         assertThat(extrasImageView.getDrawable()).isNull();
@@ -370,7 +370,7 @@ public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAnd
         assertThat(extrasTextView.getText()).isEqualTo("");
         assertThat(extrasImageView.getDrawable()).isNull();
 
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
+        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
 
         // Volley's imageloader will set this to a bitmapdrawable with no bitmap
         assertThat(extrasTextView.getText()).isEqualTo("extrasimageurl");
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index aa67b17c..fe43204c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -170,3 +171,219 @@ public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_s
         assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.NO_CONNECTION.toString());
     }
 }
+=======
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.os.Build.VERSION_CODES;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.PositioningSource.PositioningListener;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.NoConnectionError;
+import com.mopub.volley.Request;
+import com.mopub.volley.VolleyError;
+
+import org.apache.http.HttpStatus;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLog;
+
+import java.util.List;
+import java.util.logging.Level;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class ServerPositioningSourceTest {
+    @Mock PositioningListener mockPositioningListener;
+    @Captor ArgumentCaptor<PositioningRequest> positionRequestCaptor;
+    @Mock DownloadResponse mockValidResponse;
+    @Mock DownloadResponse mockNotFoundResponse;
+    @Mock DownloadResponse mockInvalidJsonResponse;
+    @Mock DownloadResponse mockWarmingUpJsonResponse;
+    @Mock Context mockContext;
+    @Mock ClientMetadata mockClientMetaData;
+    @Mock MoPubRequestQueue mockRequestQueue;
+
+    @Captor ArgumentCaptor<MoPubClientPositioning> positioningCaptor;
+
+    ServerPositioningSource subject;
+    private Activity spyActivity;
+
+    @Before
+    public void setUp() {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        spyActivity = spy(activity);
+
+
+
+        subject = new ServerPositioningSource(spyActivity);
+        setupClientMetadata();
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        when(mockValidResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
+        when(mockValidResponse.getByteArray()).thenReturn("{fixed: []}".getBytes());
+
+        when(mockInvalidJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
+        when(mockInvalidJsonResponse.getByteArray()).thenReturn("blah blah".getBytes());
+
+        when(mockWarmingUpJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
+        when(mockWarmingUpJsonResponse.getByteArray()).thenReturn(
+                "{\"error\":\"WARMING_UP\"}".getBytes());
+
+        when(mockNotFoundResponse.getStatusCode()).thenReturn(HttpStatus.SC_NOT_FOUND);
+    }
+
+    private void setupClientMetadata() {
+        when(mockClientMetaData.getSdkVersion()).thenReturn("sdk_version");
+        when(mockClientMetaData.getAppName()).thenReturn("app_name");
+        when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
+        when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
+        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
+        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
+        when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
+        when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
+        when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
+        when(mockClientMetaData.getDeviceOsVersion()).thenReturn("device_os_version");
+        when(mockClientMetaData.getDeviceScreenWidthDip()).thenReturn(1337);
+        when(mockClientMetaData.getDeviceScreenHeightDip()).thenReturn(70707);
+        when(mockClientMetaData.getActiveNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
+        when(mockClientMetaData.getNetworkOperator()).thenReturn("network_operator");
+        when(mockClientMetaData.getNetworkOperatorName()).thenReturn("network_operator_name");
+        when(mockClientMetaData.getIsoCountryCode()).thenReturn("network_iso_country_code");
+        when(mockClientMetaData.getSimOperator()).thenReturn("network_sim_operator");
+        when(mockClientMetaData.getSimOperatorName()).thenReturn("network_sim_operator_name");
+        when(mockClientMetaData.getSimIsoCountryCode()).thenReturn("network_sim_iso_country_code");
+        ClientMetadata.setInstance(mockClientMetaData);
+    }
+
+    @Test
+    public void loadPositions_shouldAddToRequestQueue() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockRequestQueue).add(any(Request.class));
+    }
+
+    @Test
+    public void loadPositionsTwice_shouldCancelPreviousRequest_shouldNotCallListener() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockRequestQueue, times(2)).add(any(Request.class));
+
+        verify(mockPositioningListener, never()).onFailed();
+        verify(mockPositioningListener, never()).onLoad(any(MoPubClientPositioning.class));
+    }
+
+    @Test
+    public void loadPositionsTwice_afterSuccess_shouldNotCancelPreviousRequest() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        reset(mockRequestQueue);
+
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockRequestQueue).add(any(Request.class));
+    }
+
+    @Test
+    public void loadPositions_thenComplete_withValidResponse_shouldCallOnLoadListener() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+
+        final PositioningRequest value = positionRequestCaptor.getValue();
+        final MoPubClientPositioning response = new MoPubClientPositioning().enableRepeatingPositions(3);
+        value.deliverResponse(response);
+
+        verify(mockPositioningListener).onLoad(eq(response));
+    }
+
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void loadPositions_thenComplete_withErrorResponse_shouldRetry() throws Exception {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        reset(mockRequestQueue);
+        // We get VolleyErrors for invalid JSON, 404s, 5xx, and {"error": "WARMING_UP"}
+        positionRequestCaptor.getValue().deliverError(new VolleyError("Some test error"));
+
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockRequestQueue).add(any(Request.class));
+    }
+
+
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void loadPositions_withPendingRetry_shouldNotRetry() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        reset(mockRequestQueue);
+        positionRequestCaptor.getValue().deliverError(new VolleyError("testError"));
+
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        // If a retry happened, we'd have two here.
+        verify(mockRequestQueue).add(any(Request.class));
+    }
+
+    @Test
+    public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        // Simulate failure after max time.
+        subject.setMaximumRetryTimeMilliseconds(999);
+
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        positionRequestCaptor.getValue().deliverError(new VolleyError("test error"));
+        verify(mockPositioningListener).onFailed();
+    }
+
+    @Test
+    public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldCallFailureHandler() {
+        MoPubLog.setSdkHandlerLevel(Level.ALL);
+
+        when(mockContext.checkCallingOrSelfPermission(anyString()))
+                .thenReturn(PackageManager.PERMISSION_DENIED);
+        when(spyActivity.getApplicationContext()).thenReturn(mockContext);
+        // Reinit the subject so we get our mocked context.
+        subject = new ServerPositioningSource(spyActivity);
+
+        // Simulate failure after max time.
+        subject.setMaximumRetryTimeMilliseconds(999);
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        positionRequestCaptor.getValue().deliverError(new NoConnectionError());
+
+        verify(mockPositioningListener).onFailed();
+
+        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
+        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 2);
+        // All log messages end with a newline character.
+        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.NO_CONNECTION.toString());
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 3277dfee..4085b524 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.network;
 
 import android.app.Activity;
@@ -360,3 +361,371 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
     }
 }
+=======
+package com.mopub.network;
+
+import android.app.Activity;
+import android.location.Location;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.AdType;
+import com.mopub.common.DataKeys;
+import com.mopub.common.event.BaseEvent;
+import com.mopub.common.event.EventDispatcher;
+import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+
+import org.json.JSONException;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+
+import java.nio.charset.Charset;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+import java.util.TreeMap;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class AdRequestTest {
+
+    @Mock private AdRequest.Listener mockListener;
+    @Mock private AdResponse mockAdResponse;
+    @Mock private EventDispatcher mockEventDispatcher;
+
+    private AdRequest subject;
+    private HashMap<String, String> defaultHeaders;
+    private Activity activity;
+    private String adUnitId;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        adUnitId = "testAdUnitId";
+        subject = new AdRequest("testUrl", AdFormat.NATIVE, adUnitId, activity, mockListener);
+        defaultHeaders = new HashMap<String, String>();
+        defaultHeaders.put(ResponseHeader.SCROLLABLE.getKey(), "0");
+        defaultHeaders.put(ResponseHeader.REDIRECT_URL.getKey(), "redirect");
+        defaultHeaders.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), "click_tracking");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_URL.getKey(), "impression");
+        defaultHeaders.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
+        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "30");
+
+        MoPubEvents.setEventDispatcher(mockEventDispatcher);
+    }
+
+    @After
+    public void teardown() {
+        // Reset our locale for other tests.
+        Locale.setDefault(Locale.US);
+        MoPubEvents.setEventDispatcher(null);
+    }
+
+    @Test
+    public void parseNetworkResponse_stringBody_shouldSucceed() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+    }
+
+    @Test
+    public void parseNetworkResponse_withStringBody_shouldLogScribeEvent() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        subject.parseNetworkResponse(testResponse);
+
+        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
+    }
+
+    @Test
+    public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
+        defaultHeaders.put(ResponseHeader.FULL_AD_TYPE.getKey(), "anything");
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.SCROLLABLE_KEY)).isEqualToIgnoringCase("false");
+        assertThat(serverExtras.get(DataKeys.REDIRECT_URL_KEY)).isEqualToIgnoringCase("redirect");
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+    }
+
+    @Test
+    public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isExactlyInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
+    }
+
+    @Test
+    public void parseNetworkResponse_nonJsonStringBodyForNative_shouldNotLogScribeEvent() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        subject.parseNetworkResponse(testResponse);
+
+        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
+    }
+
+    @Test
+    public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.WARMING_UP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withWarmupHeaderTrue_shouldNotLogScribeEvent() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        subject.parseNetworkResponse(testResponse);
+
+        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
+    }
+
+    @Test
+    public void parseNetworkResponse_withRefreshTime_shouldIncludeRefreshTimeInResult() {
+        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "13");
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getRefreshTimeMillis()).isEqualTo(13000);
+    }
+
+    @Test
+    public void parseNetworkResponse_withoutRefreshTime_shouldNotIncludeRefreshTime() {
+        defaultHeaders.remove(ResponseHeader.REFRESH_TIME.getKey());
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getRefreshTimeMillis()).isNull();
+    }
+    
+    @Test
+    public void parseNetworkResponse_withClearAdType_withRefreshTimeHeader_shouldErrorAndIncludeRefreshTime() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        final MoPubNetworkError moPubNetworkError = (MoPubNetworkError) response.error;
+        assertThat(moPubNetworkError.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
+        assertThat(moPubNetworkError.getRefreshTimeMillis()).isEqualTo(30000);
+    }
+
+    @Test
+    public void parseNetworkResponse_withClearAdType_withNoRefreshTimeHeader_shouldErrorAndNotIncludeRefreshTime() {
+        defaultHeaders.remove(ResponseHeader.REFRESH_TIME.getKey());
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        final MoPubNetworkError moPubNetworkError = (MoPubNetworkError) response.error;
+        assertThat(moPubNetworkError.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
+        assertThat(moPubNetworkError.getRefreshTimeMillis()).isNull();
+    }
+
+    @Test
+    public void parseNetworkResponse_withClearAdType_shouldLogScribeEvent() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        subject.parseNetworkResponse(testResponse);
+
+        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
+    }
+
+    @Test
+    public void parseNetworkResponse_withBadJSON_shouldReturnError() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        NetworkResponse badNativeNetworkResponse = new NetworkResponse(200,
+                "{[abc}".getBytes(Charset.defaultCharset()),
+                defaultHeaders, false);
+        subject = new AdRequest("testUrl", AdFormat.NATIVE, "testAdUnitId", activity, mockListener);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(badNativeNetworkResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error.getCause()).isExactlyInstanceOf(JSONException.class);
+    }
+
+    @Test
+    public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
+        subject.deliverResponse(mockAdResponse);
+        verify(mockListener).onSuccess(mockAdResponse);
+    }
+
+    @Test
+    public void getRequestId_shouldParseAndReturnRequestIdFromFailUrl() throws Exception {
+        String requestId = subject.getRequestId("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca&exclude=043fde1fe2f9470c9aa67fec262a0596&request_id=7fd6dd3bf1c84f87876b4740c1dd7baa&fail=1");
+
+        assertThat(requestId).isEqualTo("7fd6dd3bf1c84f87876b4740c1dd7baa");
+    }
+
+    @Test
+    public void getRequestId_withNullFailUrl_shouldReturnNull() throws Exception {
+        assertThat(subject.getRequestId(null)).isNull();
+    }
+
+    @Test
+    public void getRequestId_withUrlWithNoRequestIdParam_shouldReturnNull() throws Exception {
+        assertThat(subject.getRequestId("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")).isNull();
+    }
+
+    @Test
+    public void getHeaders_withDefaultLocale_shouldReturnDefaultLanguageCode() throws Exception {
+        Map<String, String> expectedHeaders = new TreeMap<String, String>();
+        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withUserPreferredLocale_shouldReturnUserPreferredLanguageCode() throws Exception {
+        Map<String, String> expectedHeaders = new TreeMap<String, String>();
+        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "fr");
+
+        // Assume user-preferred locale is fr_CA
+        activity.getResources().getConfiguration().locale = Locale.CANADA_FRENCH;
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withUserPreferredLocaleAsNull_shouldReturnDefaultLanguageCode() throws Exception {
+        Map<String, String> expectedHeaders = new TreeMap<String, String>();
+        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
+
+        // Assume user-preferred locale is null
+        activity.getResources().getConfiguration().locale = null;
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withUserPreferredLanguageAsEmptyString_shouldReturnDefaultLanguageCode() throws Exception {
+        Map<String, String> expectedHeaders = new TreeMap<String, String>();
+        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
+
+        // Assume user-preferred locale's language code is empty string after trimming
+        activity.getResources().getConfiguration().locale = new Locale(" ");
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeader() throws Exception {
+        Map<String, String> expectedHeaders = Collections.emptyMap();
+
+        // Assume default locale's language code is empty string
+        Locale.setDefault(new Locale(""));
+
+        // Assume user-preferred locale's language code is empty string after trimming
+        activity.getResources().getConfiguration().locale = new Locale(" ");
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+
+
+    }
+
+    @Test
+    public void logScribeEvent_shouldLogEvent() throws Exception {
+        AdResponse mockAdResponse = mock(AdResponse.class);
+        when(mockAdResponse.getDspCreativeId()).thenReturn("dsp_creative_id");
+        when(mockAdResponse.getAdType()).thenReturn("html");
+        when(mockAdResponse.getNetworkType()).thenReturn("network_type");
+        when(mockAdResponse.getWidth()).thenReturn(320);
+        when(mockAdResponse.getHeight()).thenReturn(50);
+        when(mockAdResponse.getRequestId()).thenReturn("ac298c522b0e412b85ff81e4b9b51f03");
+
+        NetworkResponse networkResponse = new NetworkResponse(200, null, null, false, 300);
+
+        Location mockLocation = mock(Location.class);
+        when(mockLocation.getLatitude()).thenReturn(37.7833);
+        when(mockLocation.getLongitude()).thenReturn(-122.4167);
+        when(mockLocation.getAccuracy()).thenReturn((float) 2000.0);
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                Object[] args = invocation.getArguments();
+                BaseEvent baseEvent = (BaseEvent) args[0];
+                assertThat(baseEvent.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
+                assertThat(baseEvent.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
+                assertThat(baseEvent.getSamplingRate()).isEqualTo(0.1);
+                assertThat(baseEvent.getAdUnitId()).isEqualTo(adUnitId);
+                assertThat(baseEvent.getAdCreativeId()).isEqualTo("dsp_creative_id");
+                assertThat(baseEvent.getAdType()).isEqualTo("html");
+                assertThat(baseEvent.getAdNetworkType()).isEqualTo("network_type");
+                assertThat(baseEvent.getAdWidthPx()).isEqualTo(320);
+                assertThat(baseEvent.getAdHeightPx()).isEqualTo(50);
+                assertThat(baseEvent.getGeoLat()).isEqualTo(37.7833);
+                assertThat(baseEvent.getGeoLon()).isEqualTo(-122.4167);
+                assertThat(baseEvent.getGeoAccuracy()).isEqualTo(2000.0);
+                assertThat(baseEvent.getPerformanceDurationMs()).isEqualTo(300);
+                assertThat(baseEvent.getRequestId()).isEqualTo("ac298c522b0e412b85ff81e4b9b51f03");
+                assertThat(baseEvent.getRequestStatusCode()).isEqualTo(200);
+                assertThat(baseEvent.getRequestUri()).isEqualTo("testUrl");
+                return null;
+            }
+        }).when(mockEventDispatcher).dispatch(any(BaseEvent.class));
+
+        subject.logScribeEvent(mockAdResponse, networkResponse, mockLocation);
+
+        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
index e151eb78..51a59b53 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.network;
 
 import android.app.Activity;
@@ -67,3 +68,76 @@ public void run() {
         assertThat(sUserAgent).isEqualTo("system level user agent");
     }
 }
+=======
+package com.mopub.network;
+
+import android.app.Activity;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import java.util.concurrent.Semaphore;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class NetworkingTest {
+    private Activity context;
+    static volatile String sUserAgent;
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+    }
+
+    @After
+    public void tearDown() {
+        Networking.clearForTesting();
+        sUserAgent = null;
+    }
+
+    @Test
+    public void getUserAgent_usesCachedUserAgent() {
+        Networking.setUserAgentForTesting("some cached user agent");
+        String userAgent = Networking.getUserAgent(context);
+
+        assertThat(userAgent).isEqualTo("some cached user agent");
+    }
+
+    @Test
+    public void getUserAgent_fromMainThread_shouldIncludeAndroid() throws InterruptedException {
+        context.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                String userAgent = Networking.getUserAgent(context);
+                assertThat(userAgent).containsIgnoringCase("android");
+            }
+        });
+    }
+
+    @Ignore("Flaky - setProperty + threading is unreliable in the test environment.")
+    @Test
+    public void getUserAgent_fromBackgroundThread_shouldIncludeAndroid() throws InterruptedException {
+        System.setProperty("http.agent", "system level user agent");
+
+        final Semaphore semaphore = new Semaphore(0);
+
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                sUserAgent = Networking.getUserAgent(context);
+                semaphore.release();
+            }
+        }).start();
+
+        semaphore.acquire();
+        assertThat(sUserAgent).isEqualTo("system level user agent");
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
index 13458af5..7e6d2c69 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 package com.mopub.network;
 
 import android.app.Activity;
@@ -52,3 +53,118 @@ public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpReq
         verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
     }
 }
+=======
+package com.mopub.network;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.VastErrorCode;
+import com.mopub.mobileads.VastTracker;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import java.util.Arrays;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+public class TrackingRequestTest {
+
+    @Mock
+    private MoPubRequestQueue mockRequestQueue;
+    private Context context;
+    private String url;
+
+
+    @Before
+    public void setup() {
+        context = (Context) Robolectric.buildActivity(Activity.class).create().get();
+        url = "testUrl";
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_shouldMakeTrackingHttpRequestWithWebViewUserAgent() throws Exception {
+        TrackingRequest.makeTrackingHttpRequest(url, context);
+
+        verify(mockRequestQueue).add(any(TrackingRequest.class));
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_withNullUrl_shouldNotMakeTrackingHttpRequest() throws Exception {
+        TrackingRequest.makeTrackingHttpRequest((String) null, context);
+
+        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpRequest() throws Exception {
+        TrackingRequest.makeTrackingHttpRequest(url, null);
+
+        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
+    }
+
+    @Test
+    public void makeVastTrackingHttpRequest_shouldSubstituteMacros_shouldMakeSingleRequest() throws Exception {
+        VastTracker vastTracker = new VastTracker("uri?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]");
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
+
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void makeVastTrackingHttpRequest_withRepeatableRequest_shouldMakeMultipleTrackingRequests() throws Exception {
+        VastTracker vastTracker = new VastTracker("uri?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]");
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
+
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
+    }
+}
+>>>>>>> upstream/master
diff --git a/mopub-sdk/src/test/resources/org.robolectric.Config.properties b/mopub-sdk/src/test/resources/org.robolectric.Config.properties
index dd670b09..ad8e27b6 100644
--- a/mopub-sdk/src/test/resources/org.robolectric.Config.properties
+++ b/mopub-sdk/src/test/resources/org.robolectric.Config.properties
@@ -1 +1,2 @@
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
\ No newline at end of file
+emulateSdk=18
+shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
