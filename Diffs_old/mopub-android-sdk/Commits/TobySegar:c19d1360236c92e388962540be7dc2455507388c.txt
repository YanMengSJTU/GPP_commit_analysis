diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
index 685eb498..34170781 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
@@ -100,27 +100,28 @@ public void onGameEvent(GameEvent gameEvent) {
             case PlayerConnected:
                 numOfPlayers++;
                 Helper.wtf("Number of players in game = " + numOfPlayers);
-                if (numOfPlayers > 1) interstitial.lock.lockMultiplayer();
+                if (numOfPlayers > 1) interstitial.lock.lockLocalMultiplayer();
                 break;
             case PlayerDisconnected:
                 if (numOfPlayers > 0) {
                     numOfPlayers--;
                     Helper.wtf("Number of players in game = " + numOfPlayers);
                 }
-                if (numOfPlayers == 1) interstitial.lock.unlockMultiplayer();
+                if (numOfPlayers == 1) interstitial.lock.unlockLocalMultiplayer();
                 break;
             case PlayerJoinedMultiplayer:
                 interstitial.lock.lockMultiplayer();
-                interstitial.lock.forceOneShowLock();
                 break;
             case GamePlayStart:
                 interstitial.lock.gameUnlock();
-                interstitial.show(5000);
+                interstitial.show(5000,false);
                 break;
             case LeaveLevel:
-                if (numOfPlayers > 0) numOfPlayers--;
+                numOfPlayers = 0;
+                showAfterLeftMultiplayerServer();
                 interstitial.lock.gameLock();
-                interstitial.lock.unlockMultiplayer();
+                interstitial.lock.unlockOnlineMultiplayer();
+                interstitial.lock.unlockLocalMultiplayer();
                 break;
             case StartSleepInBed:
                 interstitial.showUnityAdsVideo();
@@ -131,13 +132,30 @@ public void onGameEvent(GameEvent gameEvent) {
             case BlockChanged:
                 timesBlockChanged++;
                 if (timesBlockChanged == 3) {
-                    interstitial.show();
+                    interstitial.show(false);
                     timesBlockChanged = 0;
                 }
                 break;
         }
     }
 
+    private void showAfterLeftMultiplayerServer() {
+        boolean isOnlyMultiplayerLocked = false;
+        if(interstitial.lock.isOnlineMultiplayerLocked()){
+            //we check if only lock locked is from multiplayer.
+            interstitial.lock.unlockOnlineMultiplayer();
+            isOnlyMultiplayerLocked = !interstitial.lock.isAnyLocked();
+            interstitial.lock.lockMultiplayer();
+        }
+
+        if(isOnlyMultiplayerLocked){
+            if(interstitial.lock.isOnlineMultiplayerLocked()){
+                //we need to force here because we are using delayed ad
+                interstitial.show(5000,false);
+            }
+        }
+    }
+
     public static void kick(String text, final Activity activity) {
         if (activity != null) {
             EventBus.getDefault().post(new AppEvent(Stop));
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index 8bedfc68..1a21c9a0 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -89,16 +89,15 @@ public void run() {
         this.showRunnable = new Runnable() {
             @Override
             public void run() {
-                Helper.wtf(TAG, "run: ShowRun");
-                if (!lock.isLocked()) {
-                    show();
+                Helper.wtf("PeriodicShowRunnable", "isLocked: " + "multiplayerLocalOnline [" + lock.localMultiplayer + " "+lock.onlineMultiplayer+ "]" + " " + "internet [" + lock.internet + "]" + " " + "gap [" + lock.gap + "]" + " " + "stop [" + lock.stop + "] " + "game [" + lock.game + "]");
+                if (!lock.isAnyLocked()) {
+                    show(true);
                 }
             }
         };
         this.periodicShowRunnable = new Runnable() {
             @Override
             public void run() {
-                Helper.wtf(TAG, "run: PeriodicShowRun");
                 showRunnable.run();
                 mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
             }
@@ -259,12 +258,13 @@ public void onInterstitialClicked(MoPubInterstitial interstitial) {
 
     }
 
-    public boolean show() {
+    public boolean show(boolean isPeriodicShow) {
         boolean showSuccesful = false;
         boolean isMopubNull = mopubInterstitial == null;
-        boolean isLocked = lock.isLocked();
+        Helper.wtf("I", "isLocked: " + "multiplayerLocalOnline [" + lock.localMultiplayer + " "+lock.onlineMultiplayer+ "]" + " " + "internet [" + lock.internet + "]" + " " + "gap [" + lock.gap + "]" + " " + "stop [" + lock.stop + "] " + "game [" + lock.game + "]");
+        boolean isLocked = isPeriodicShow ? lock.isAnyLocked() : lock.isHardLocked();
         boolean isMopubReady = !isMopubNull && mopubInterstitial.isReady();
-        Helper.wtf("[isMopubNull(false) = " + isMopubNull + "] " + "[isLocked(false) = " + isLocked + "] " + "[isMopubReady(true) = " + isMopubReady + "]");
+        Helper.wtf("[isMopubNull(false) = " + isMopubNull + "] " + "[isSoftLocked(false) = " + lock.isSoftLocked() + "] " +  "[isHardLocked(false) = " + lock.isHardLocked() + "] " +"[isMopubReady(true) = " + isMopubReady + "]");
         if (!fastAdShowed && fastAd != null && !isLocked) {
             nesmrtelnost(true);
             fastAd.show();
@@ -273,15 +273,14 @@ public boolean show() {
             nesmrtelnost(true);
             showSuccesful = mopubInterstitial.show();
         }
-        lock.forceOneShowUnlock();
         return showSuccesful;
     }
 
-    public void show(int delay) {
+    public void show(int delay, final boolean isPeriodicShow) {
         mainHandler.postDelayed(new Runnable() {
             @Override
             public void run() {
-                show();
+                show(isPeriodicShow);
             }
         }, delay);
     }
@@ -349,16 +348,16 @@ public void run() {
 
 
     public void showUnityAdsVideo() {
-        if (!lock.isMultiplayerLocked()) {
+        if (!lock.isOnlineMultiplayerLocked() && !lock.isHardLocked()) {
             if (!UnityAds.isReady()) {
                 Helper.wtf(TAG, "showUnityAdsVideo: show false");
-                show();
+                show(true);
             } else {
                 gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
                 UnityAds.show(minecraftActivity);
             }
         } else {
-            Helper.wtf(TAG, "showUnityAdsVideo: show false multiplayer locked");
+            Helper.wtf(TAG, "showUnityAdsVideo: show false multiplayer locked or hard locked");
         }
     }
 
@@ -472,19 +471,28 @@ private void loadAfterDelay(long delay) {
 
     public class Lock {
         private boolean stop;
-        private boolean multiplayer;
+        private boolean onlineMultiplayer;
+        private boolean localMultiplayer;
         private boolean internet;
         private boolean gap;
         private boolean game = true;
-        private boolean forceShow;
 
-        public boolean isLocked() {
-            Helper.wtf("I", "isLocked: " + "forceOneShowLock [" + forceShow + "]" + "multiplayer [" + multiplayer + "]" + " " + "internet [" + internet + "]" + " " + "gap [" + gap + "]" + " " + "stop [" + stop + "] " + "game [" + game + "]");
-            return !forceShow && (multiplayer || internet || gap || game || stop);
+
+        public boolean isHardLocked() {
+            //we never show in these conditions
+            return gap || internet || stop || localMultiplayer;
+        }
+        public boolean isSoftLocked() {
+            //we can show in these conditions
+            return onlineMultiplayer || game;
+        }
+
+        public boolean isAnyLocked() {
+            return onlineMultiplayer || game || gap || internet || stop || localMultiplayer;
         }
 
-        public boolean isMultiplayerLocked() {
-            return multiplayer;
+        public boolean isOnlineMultiplayerLocked() {
+            return onlineMultiplayer;
         }
 
         public void unlockStop() {
@@ -503,16 +511,6 @@ public void unlockGap() {
             gap = false;
         }
 
-        public void forceOneShowLock() {
-            Helper.wtf("I", "forceOneShowLock: ");
-            forceShow = true;
-        }
-
-        public void forceOneShowUnlock() {
-            Helper.wtf("I", "forceOneShowUnlock: ");
-            forceShow = false;
-        }
-
         public void gapLock() {
             Helper.wtf("I", "gapLock: ");
             gap = true;
@@ -520,12 +518,12 @@ public void gapLock() {
 
         public void lockMultiplayer() {
             Helper.wtf("I", "lockMultiplayer: ");
-            multiplayer = true;
+            onlineMultiplayer = true;
         }
 
-        public void unlockMultiplayer() {
-            Helper.wtf("I", "unlockMultiplayer: ");
-            multiplayer = false;
+        public void unlockOnlineMultiplayer() {
+            Helper.wtf("I", "unlockOnlineMultiplayer: ");
+            onlineMultiplayer = false;
         }
 
         public void gameUnlock() {
@@ -548,5 +546,22 @@ public void internetUnlock() {
             internet = false;
         }
 
+        public void unlockLocalMultiplayer() {
+            Helper.wtf("I", "unlockLocalMultiplayer: ");
+            localMultiplayer = false;
+        }
+
+        public void lockLocalMultiplayer() {
+            Helper.wtf("I", "lockLocalMultiplayer: ");
+            localMultiplayer = true;
+        }
+
+        public boolean isLocalMultiplayerLocked() {
+            return localMultiplayer;
+        }
+
+        public boolean isGapLocked() {
+            return gap;
+        }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
new file mode 100644
index 00000000..fe830bb5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
@@ -0,0 +1,98 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.chartboost.sdk.Chartboost;
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing Chartboost interstitial ads.
+ *
+ * Certified with Chartboost 6.6.3
+ */
+class ChartboostInterstitial extends CustomEventInterstitial {
+
+    @NonNull
+    private String mLocation = ChartboostShared.LOCATION_DEFAULT;
+
+    /*
+     * Note: Chartboost recommends implementing their specific Activity lifecycle callbacks in your
+     * Activity's onStart(), onStop(), onBackPressed() methods for proper results. Please see their
+     * documentation for more information.
+     */
+
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    protected void loadInterstitial(@NonNull Context context,
+            @NonNull CustomEventInterstitialListener interstitialListener,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(interstitialListener);
+        Preconditions.checkNotNull(localExtras);
+        Preconditions.checkNotNull(serverExtras);
+
+        if (!(context instanceof Activity)) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
+            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
+            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
+        }
+
+        // If there's already a listener for this location, then another instance of
+        // CustomEventInterstitial is still active and we should fail.
+        if (ChartboostShared.getDelegate().hasInterstitialLocation(mLocation) &&
+                ChartboostShared.getDelegate().getInterstitialListener(mLocation) != interstitialListener) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        Activity activity = (Activity) context;
+        try {
+            ChartboostShared.initializeSdk(activity, serverExtras);
+            ChartboostShared.getDelegate().registerInterstitialListener(mLocation, interstitialListener);
+        } catch (NullPointerException e) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        } catch (IllegalStateException e) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        Chartboost.onCreate(activity);
+        Chartboost.onStart(activity);
+        if (Chartboost.hasInterstitial(mLocation)) {
+            ChartboostShared.getDelegate().didCacheInterstitial(mLocation);
+        } else {
+            Chartboost.cacheInterstitial(mLocation);
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        Log.d("MoPub", "Showing Chartboost interstitial ad.");
+        Chartboost.showInterstitial(mLocation);
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        ChartboostShared.getDelegate().unregisterInterstitialListener(mLocation);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
new file mode 100644
index 00000000..36df3760
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
@@ -0,0 +1,225 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.chartboost.sdk.Chartboost;
+import com.chartboost.sdk.ChartboostDelegate;
+import com.chartboost.sdk.Model.CBError;
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.TreeSet;
+
+/**
+ * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
+ *
+ * Certified with Chartboost 6.6.3
+ */
+public class ChartboostShared {
+    private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
+
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    public static final String APP_ID_KEY = "appId";
+    public static final String APP_SIGNATURE_KEY = "appSignature";
+    public static final String LOCATION_KEY = "location";
+    public static final String LOCATION_DEFAULT = "Default";
+
+    @Nullable private static String mAppId;
+    @Nullable private static String mAppSignature;
+
+    /**
+     * Initialize the Chartboost SDK for the provided application id and app signature.
+     */
+    public static synchronized boolean initializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, String> serverExtras) {
+        Preconditions.checkNotNull(launcherActivity);
+        Preconditions.checkNotNull(serverExtras);
+
+        // Validate Chartboost args
+        if (!serverExtras.containsKey(APP_ID_KEY)) {
+            throw new IllegalStateException("Chartboost rewarded video initialization" +
+                    " failed due to missing application ID.");
+        }
+
+        if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
+            throw new IllegalStateException("Chartboost rewarded video initialization" +
+                    " failed due to missing application signature.");
+        }
+
+        final String appId = serverExtras.get(APP_ID_KEY);
+        final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
+
+        if (appId.equals(mAppId) && appSignature.equals(mAppSignature)) {
+            // We don't need to reinitialize.
+            return false;
+        }
+
+        mAppId = appId;
+        mAppSignature = appSignature;
+
+        // Perform all the common SDK initialization steps including startAppWithId
+        Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
+        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
+        Chartboost.setDelegate(sDelegate);
+        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
+        Chartboost.setAutoCacheAds(false);
+        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
+
+        // Callers of this method need to call onCreate & onStart themselves.
+        return true;
+    }
+
+    @NonNull
+    public static ChartboostSingletonDelegate getDelegate() {
+        return sDelegate;
+    }
+
+    /**
+     * A {@link ChartboostDelegate} that can forward events for Chartboost interstitials
+     * and rewarded videos to the appropriate listener based on the Chartboost location used.
+     */
+    public static class ChartboostSingletonDelegate extends ChartboostDelegate
+    {
+        private static final CustomEventInterstitialListener NULL_LISTENER =
+                new CustomEventInterstitialListener() {
+                    @Override
+                    public void onInterstitialLoaded() { }
+
+                    @Override
+                    public void onInterstitialFailed(MoPubErrorCode errorCode) { }
+
+                    @Override
+                    public void onInterstitialShown() { }
+
+                    @Override
+                    public void onInterstitialClicked() { }
+
+                    @Override
+                    public void onLeaveApplication() { }
+
+                    @Override
+                    public void onInterstitialDismissed() { }
+                };
+
+        //***************
+        // Chartboost Location Management for interstitials and rewarded videos
+        //***************
+
+        private Map<String, CustomEventInterstitialListener> mInterstitialListenersForLocation
+                = Collections.synchronizedMap(new TreeMap<String, CustomEventInterstitialListener>());
+
+        private Set<String> mRewardedVideoLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
+
+        public void registerInterstitialListener(@NonNull String location,
+                @NonNull CustomEventInterstitialListener interstitialListener) {
+            Preconditions.checkNotNull(location);
+            Preconditions.checkNotNull(interstitialListener);
+            mInterstitialListenersForLocation.put(location, interstitialListener);
+        }
+
+        public void unregisterInterstitialListener(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mInterstitialListenersForLocation.remove(location);
+        }
+
+        public void registerRewardedVideoLocation(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mRewardedVideoLocationsToLoad.add(location);
+        }
+
+        public void unregisterRewardedVideoLocation(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mRewardedVideoLocationsToLoad.remove(location);
+        }
+
+        @NonNull
+        public CustomEventInterstitialListener getInterstitialListener(@NonNull String location) {
+            final CustomEventInterstitialListener listener = mInterstitialListenersForLocation.get(location);
+            return listener != null ? listener : NULL_LISTENER;
+        }
+
+        public boolean hasInterstitialLocation(@NonNull String location) {
+            return mInterstitialListenersForLocation.containsKey(location);
+        }
+
+        //******************
+        // Chartboost Delegate methods.
+        //******************
+
+        //******************
+        // Interstitials
+        //******************
+        @Override
+        public void didCacheInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial loaded successfully.");
+            getInterstitialListener(location).onInterstitialLoaded();
+        }
+
+        @Override
+        public void didFailToLoadInterstitial(String location, CBError.CBImpressionError error) {
+            String suffix = error != null ? "Error: " + error.name() : "";
+            Log.d("MoPub", "Chartboost interstitial ad failed to load." + suffix);
+            getInterstitialListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void didDismissInterstitial(String location) {
+            // Note that this method is fired before didCloseInterstitial and didClickInterstitial.
+            MoPubLog.d("Chartboost interstitial ad dismissed.");
+            getInterstitialListener(location).onInterstitialDismissed();
+        }
+
+        @Override
+        public void didCloseInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad closed.");
+        }
+
+        @Override
+        public void didClickInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad clicked.");
+            getInterstitialListener(location).onInterstitialClicked();
+        }
+
+        @Override
+        public void didDisplayInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad shown.");
+            getInterstitialListener(location).onInterstitialShown();
+        }
+
+        //******************
+        // More Apps
+        //******************
+        @Override
+        public boolean shouldRequestMoreApps(String location) {
+            return false;
+        }
+
+        @Override
+        public boolean shouldDisplayMoreApps(final String location) {
+            return false;
+        }
+    }
+
+
+    @VisibleForTesting
+    @Deprecated
+    static void reset() {
+        // Clears all the locations to load and other state.
+        sDelegate = new ChartboostSingletonDelegate();
+        mAppId = null;
+        mAppSignature = null;
+    }
+}
