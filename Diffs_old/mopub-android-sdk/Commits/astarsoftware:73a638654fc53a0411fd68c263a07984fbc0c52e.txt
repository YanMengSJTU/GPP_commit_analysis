diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
index 10b624c6..1aeac7a7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
@@ -165,6 +165,51 @@ public MultiAdResponse(@NonNull final Context appContext,
                     MoPubNetworkError.Reason.NO_FILL,
                     refreshTimeMilliseconds);
         }
+
+		try {
+			MoPubLog.d("AdConfiguration: Sending AdResponseReceivedFromMopub notification");
+
+			NotificationCenter notificationCenter = (NotificationCenter) DependencyInjector.getObjectWithGlobalId("NotificationCenter");
+
+			final List<Map<String, String>> responseMetadataList = new ArrayList<>();
+			for (int i = 0; i < adResponses.length(); i++) {
+				try {
+					JSONObject adResponseJson = adResponses.getJSONObject(i);
+					JSONObject adResponseHeaders = adResponseJson.getJSONObject(ResponseHeader.METADATA.getKey());
+
+					if(adResponseHeaders != null) {
+						Map<String, String> responseMetadata = new TreeMap<>();
+						for(Iterator<String> keyIt = adResponseHeaders.keys(); keyIt.hasNext();) {
+							String metadataKey = keyIt.next();
+							responseMetadata.put(metadataKey, adResponseHeaders.getString(metadataKey));
+						}
+						responseMetadataList.add(responseMetadata);
+					}
+
+				} catch (Exception ex) {
+					MoPubLog.w("Unexpected error parsing response item for ad tracker. " + ex.getMessage());
+				}
+			}
+
+			final String finalRequestId = requestId;
+			notificationCenter.postNotification("AdResponseReceivedFromMopub", new HashMap<String, Object>() {{
+				put("HttpHeaders", networkResponse.headers);
+				put("ResponseMetadata", responseMetadataList);
+				put("RequestId", finalRequestId);
+			}});
+
+		} catch (Throwable t) {
+			Log.e("AdConfiguration", "Error", t);
+
+			try {
+				ExceptionHandler exceptionHandler = (ExceptionHandler) DependencyInjector.getObjectWithGlobalId("ExceptionHandler");
+
+				exceptionHandler.handleException(t);
+
+			} catch (Throwable t2) {
+				Log.e("AdConfiguration", "Error2", t2);
+			}
+		}
     }
 
     @Override
@@ -216,37 +261,6 @@ protected static AdResponse parseSingleAdResponse(@NonNull final Context appCont
         final String content = jsonObject.optString(ResponseHeader.CONTENT.getKey());
         final JSONObject jsonHeaders = jsonObject.getJSONObject(ResponseHeader.METADATA.getKey());
 
-		try {
-			MoPubLog.d("AdConfiguration: Sending AdResponseReceivedFromMopub notification");
-
-			NotificationCenter notificationCenter = (NotificationCenter) DependencyInjector.getObjectWithGlobalId("NotificationCenter");
-
-			final Map<String, String> finalHeaders = new TreeMap<>(networkResponse.headers);
-			for(Iterator<String> keyIt = jsonHeaders.keys(); keyIt.hasNext();) {
-				String metadataKey = keyIt.next();
-				String finalHeadersKey = finalHeaders.containsKey(metadataKey) ? "metadata:"+metadataKey : metadataKey;
-				finalHeaders.put(finalHeadersKey, jsonHeaders.getString(metadataKey));
-			}
-
-			final String finalRequestId = requestId;
-			notificationCenter.postNotification("AdResponseReceivedFromMopub", new HashMap<String, Object>() {{
-				put("HttpHeaders", finalHeaders);
-				put("RequestId", finalRequestId);
-			}});
-
-		} catch (Throwable t) {
-			Log.e("AdConfiguration", "Error", t);
-
-			try {
-				ExceptionHandler exceptionHandler = (ExceptionHandler) DependencyInjector.getObjectWithGlobalId("ExceptionHandler");
-
-				exceptionHandler.handleException(t);
-
-			} catch (Throwable t2) {
-				Log.e("AdConfiguration", "Error2", t2);
-			}
-		}
-
         builder.setAdUnitId(adUnitId);
 
         // Response Body encoding / decoding
