diff --git a/CHANGELOG.md b/CHANGELOG.md
index 20e1b5a8..5add0cbc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,22 @@
+## Version 4.19.0 (December 11, 2017)
+- Updated Facebook Audience Network adapters to 4.26.1.
+- Updated Flurry adapters to 8.1.0.
+- Updated Millennial rewarded ads adapters to 6.6.1.
+- Fixed a potential crash for native video ads when attempting to blur the last video frame.
+- Fixed a duplicate on loaded callback for some rewarded ads.
+
+## Version 4.18.0 (November 1, 2017)
+- Updated the SDK compile version to 26. Android API 26 artifacts live in the new Google maven repository `maven { url 'https://maven.google.com' }`. See [this article](https://developer.android.com/about/versions/oreo/android-8.0-migration.html) for more information about using Android API 26.
+- Fixed MoPub in-app browser's back and forward button icons.
+- Updated AdMob adapters to 11.4.0.
+- Updated Chartboost adapters to 7.0.1.
+- Updated Facebook Audience Network adapters to 4.26.0.
+- Updated Millennial to 6.6.1.
+- Updated TapJoy adapters to 11.11.0.
+- Updated Unity Ads adapters to 2.1.1.
+- Updated Vungle adapters to 5.3.0.
+- Bug fixes.
+
 ## Version 4.17.0 (September 27, 2017)
 - Rewarded Ads can now send up optional custom data through the server completion url. See `MoPubRewardedVideos#showRewardedVideo(String, String)`.
 - Updated Facebook native adapter to ignore clicks on whitespace as per Facebook policy.
diff --git a/Jenkinsfile b/Jenkinsfile
new file mode 100644
index 00000000..0f179eab
--- /dev/null
+++ b/Jenkinsfile
@@ -0,0 +1,22 @@
+#!/usr/bin/env groovy
+pipeline {
+    agent any
+    environment {
+        ANDROID_HOME = '/Users/jenkins/Library/Android/sdk'
+    }
+    stages {
+        stage('Build') {
+            steps {
+                sh './gradlew clean build'
+            }
+        }
+    }
+    post {
+        success {
+            hipchatSend message: "${env.JOB_NAME} #${env.BUILD_NUMBER} has succeeded.", color: 'GREEN'
+        }
+        failure {
+            hipchatSend message: "Attention @here ${env.JOB_NAME} #${env.BUILD_NUMBER} has failed.", color: 'RED'
+        }
+    }
+}
diff --git a/README.md b/README.md
index 97b656d5..a262d86f 100644
--- a/README.md
+++ b/README.md
@@ -35,10 +35,11 @@ The MoPub SDK is available via:
     repositories {
         jcenter() // includes the MoPub SDK and AVID library
         maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk:4.19.0@aar') {
             transitive = true
         }
     }
@@ -53,33 +54,34 @@ The MoPub SDK is available via:
         // ... other project repositories
         jcenter() // includes the MoPub SDK and AVID library
         maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
 
     dependencies {
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.19.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.19.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.19.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.19.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.19.0@aar') {
             transitive = true
         }
     }
@@ -107,17 +109,18 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Rewarded Ads can now send up optional custom data through the server completion url. See `MoPubRewardedVideos#showRewardedVideo(String, String)`.
-- Updated Facebook native adapter to ignore clicks on whitespace as per Facebook policy.
+- Updated Facebook Audience Network adapters to 4.26.1.
+- Updated Flurry adapters to 8.1.0.
+- Updated Millennial rewarded ads adapters to 6.6.1.
 
 ## Requirements
 
 - Android 4.1 (API Version 16) and up (**Updated in 4.12.0**)
-- android-support-v4.jar, r23 (**Updated in 4.4.0**)
-- android-support-annotations.jar, r23 (**Updated in 4.4.0**)
-- android-support-v7-recyclerview.jar, r23 (**Updated in 4.4.0**)
+- android-support-v4.jar, r26 (**Updated in 4.18.0**)
+- android-support-annotations.jar, r26 (**Updated in 4.18.0**)
+- android-support-v7-recyclerview.jar, r26 (**Updated in 4.18.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
-- **Recommended** Google Play Services 9.4.0
+- **Recommended** Google Play Services 11.4.0
 
 ## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
 In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
@@ -131,7 +134,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    compile('com.mopub:mopub-sdk:4.17.0@aar') {
+    compile('com.mopub:mopub-sdk:4.18.0@aar') {
         transitive = true
     }
 }
@@ -140,7 +143,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    compile('com.mopub:mopub-sdk:4.17.0@aar') {
+    compile('com.mopub:mopub-sdk:4.19.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
index 82747718..0201a1aa 100644
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
@@ -14,7 +14,7 @@
 /**
  * A custom event for showing Chartboost interstitial ads.
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 class ChartboostInterstitial extends CustomEventInterstitial {
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
index b41dd113..bc994411 100644
--- a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
@@ -16,7 +16,7 @@
 /**
  * A custom event for showing Chartboost rewarded videos.
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
     @NonNull private static final LifecycleListener sLifecycleListener =
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index f9e958f6..d70fb7ed 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -27,7 +27,7 @@
 /**
  * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostShared {
     private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index 4d60a635..4eccbad5 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,8 +16,7 @@
 import java.util.Map;
 
 /**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 34fc4ad7..1b24c584 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,8 +11,7 @@
 import java.util.Map;
 
 /**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
index 196d3d8e..c3c4a318 100644
--- a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 /**
- * Certified with Facebook Audience Network 4.23.0
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
 
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
index 3854d3a5..38ebcd8d 100644
--- a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -11,7 +11,7 @@
 import com.flurry.android.FlurryAgentListener;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public final class FlurryAgentWrapper {
     public static final String PARAM_API_KEY = "apiKey";
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
index d8ce8a8c..8a31a9d7 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -18,7 +18,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
     private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
index 0e27c27a..c912b75a 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -17,7 +17,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
     private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index 2a52a6eb..46d18c56 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index fb7c3b23..a91ab2fc 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
index d401ea2f..e5629cba 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
@@ -21,7 +21,7 @@
 /**
  * A {@link CustomEventRewardedVideo} used to load rewarded video Google rewarded video ads.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
         RewardedVideoAdListener {
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index 4a4b0f1a..0a329984 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -1,240 +1,185 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.Gravity;
-import android.widget.LinearLayout;
-import android.widget.LinearLayout.LayoutParams;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InlineAd;
 import com.millennialmedia.InlineAd.AdSize;
 import com.millennialmedia.InlineAd.InlineAdMetadata;
 import com.millennialmedia.InlineAd.InlineErrorStatus;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.common.MoPub;
 
 import java.util.Map;
 
+
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialBanner extends CustomEventBanner {
+final class MillennialBanner extends CustomEventBanner {
 
     private static final String TAG = MillennialBanner.class.getSimpleName();
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
 
-    private InlineAd mInlineAd;
-    private CustomEventBannerListener mBannerListener;
-    private LinearLayout mInternalView;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+    private static final String AD_WIDTH_KEY = "adWidth";
+    private static final String AD_HEIGHT_KEY = "adHeight";
+
+    private InlineAd inlineAd;
+    private CustomEventBannerListener bannerListener;
+    private FrameLayout internalView;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
 
+    public CreativeInfo getCreativeInfo() {
 
+        if (inlineAd == null) {
+            return null;
+        }
+
+        return inlineAd.getCreativeInfo();
+    }
+
+    
     @Override
     protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-
-        LayoutParams lp;
-        String apid;
-        String dcn;
-        int width;
-        int height;
-        mBannerListener = customEventBannerListener;
-
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
+                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+
+        bannerListener = customEventBannerListener;
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-            width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
+        String apid = serverExtras.get(APID_KEY);
+        int width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+        int height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+
+        if (MillennialUtils.isEmpty(apid) || (width < 0) || (height < 0)) {
             Log.e(TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            bannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
         // Set DCN on the AppInfo if provided
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (dcn != null && dcn.length() > 0) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai = ai.setSiteId(null);
-            }
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.i(TAG, "Caught exception " + e.getMessage());
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
+        String dcn = serverExtras.get(DCN_KEY);
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
         }
 
-        mInternalView = new LinearLayout(context);
+        try {
 
-        lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-        lp.gravity = Gravity.CENTER_HORIZONTAL;
-        mInternalView.setLayoutParams(lp);
+            MMSDK.setAppInfo(ai);
 
-        InlineAdMetadata mInlineAdMetadata = null;
+            internalView = new FrameLayout(context);
 
-        try {
-            mInlineAd = InlineAd.createInstance(apid, mInternalView);
-            mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
-        } catch (MMException e) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
-        }
+            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+            lp.gravity = Gravity.CENTER_HORIZONTAL;
+            internalView.setLayoutParams(lp);
 
-        mInlineAd.setListener(new MillennialInlineListener());
+            inlineAd = InlineAd.createInstance(apid, internalView);
+            InlineAdMetadata mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
 
-        try {
-        /* If MoPub gets location, so do we. */
-            MMSDK.setLocationEnabled((localExtras.get("location") != null));
-        } catch (MMException e) {
-            Log.e(TAG, "MM SDK is not initialized", e);
-        }
+            inlineAd.setListener(new MillennialInlineListener());
+
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+
+            AdViewController.setShouldHonorServerDimensions(internalView);
 
-        AdViewController.setShouldHonorServerDimensions(mInternalView);
+            inlineAd.request(mInlineAdMetadata);
 
-        mInlineAd.request(mInlineAdMetadata);
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK exception occurred obtaining an inline ad unit.", e);
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
     }
 
+
     @Override
     protected void onInvalidate() {
         // Destroy any hanging references.
-        if (mInlineAd != null) {
-            mInlineAd.setListener(null);
-            mInlineAd = null;
+        if (inlineAd != null) {
+            inlineAd.destroy();
+            inlineAd = null;
         }
     }
 
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    if (context instanceof Activity) {
-                        try {
-                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
-                        } catch (Exception e) {
-                            Log.e(TAG, "Error initializing MMSDK", e);
-                            return false;
-                        }
-                    } else {
-                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
-        }
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        try {
-            // Add pos / non-null and APIDs.
-            int w = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            int h = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-            if (h < 0 || w < 0) {
-                throw new NumberFormatException();
-            }
-        } catch (Exception e) {
-            Log.e(TAG, "Width and height must exist and contain positive integers!");
-            e.printStackTrace();
-            return false;
-        }
-
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInlineListener implements InlineAd.InlineListener {
 
         @Override
         public void onAdLeftApplication(InlineAd inlineAd) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
             Log.d(TAG, "Millennial Inline Ad - Leaving application");
         }
 
+
         @Override
         public void onClicked(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Ad clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerClicked();
+
+                    bannerListener.onBannerClicked();
                 }
             });
         }
 
+
         @Override
         public void onCollapsed(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner collapsed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerCollapsed();
+
+                    bannerListener.onBannerCollapsed();
                 }
             });
 
         }
 
+
         @Override
         public void onExpanded(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner expanded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerExpanded();
+
+                    bannerListener.onBannerExpanded();
                 }
             });
         }
 
+
         @Override
         public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStatus) {
-            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " + inlineErrorStatus.getDescription());
+
+            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " +
+                    inlineErrorStatus.getDescription());
+
             MoPubErrorCode mopubErrorCode;
 
             switch (inlineErrorStatus.getErrorCode()) {
@@ -259,38 +204,51 @@ public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStat
             }
 
             final MoPubErrorCode fErrorCode = mopubErrorCode;
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerFailed(fErrorCode);
+
+                    bannerListener.onBannerFailed(fErrorCode);
                 }
             });
 
         }
 
+
         @Override
         public void onRequestSucceeded(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner request succeeded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Banner Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerLoaded(mInternalView);
+
+                    bannerListener.onBannerLoaded(internalView);
                 }
             });
         }
 
+
         @Override
         public void onResize(InlineAd inlineAd, int w, int h) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
         }
 
+
         @Override
         public void onResized(InlineAd inlineAd, int w, int h, boolean isClosed) {
-            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
-                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
-        }
+            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). " +
+                    (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
+        }
     }
-
 }
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 55eef347..cbb6c879 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -1,222 +1,188 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InterstitialAd;
 import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
 import com.millennialmedia.InterstitialAd.InterstitialListener;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.common.MoPub;
 
 import java.util.Map;
 
+
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialInterstitial extends CustomEventInterstitial {
+final class MillennialInterstitial extends CustomEventInterstitial {
 
     private static final String TAG = MillennialInterstitial.class.getSimpleName();
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+
+    private InterstitialAd millennialInterstitial;
+    private Context context;
+    private CustomEventInterstitialListener interstitialListener;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (millennialInterstitial == null) {
+            return null;
+        }
+
+        return millennialInterstitial.getCreativeInfo();
+    }
 
-    private InterstitialAd mMillennialInterstitial;
-    private Context mContext;
-    private CustomEventInterstitialListener mInterstitialListener;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
-    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-        String dcn;
-        mInterstitialListener = customEventInterstitialListener;
-        mContext = context;
+    protected void loadInterstitial(final Context context,
+                                    final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras,
+                                    final Map<String, String> serverExtras) {
 
-        final String apid;
+        interstitialListener = customEventInterstitialListener;
+        this.context = context;
 
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-        } else {
+        String apid = serverExtras.get(APID_KEY);
+
+        if (MillennialUtils.isEmpty(apid)) {
             Log.e(TAG, "Invalid extras-- Be sure you have an placement ID specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
             return;
         }
 
         // Add DCN support
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (dcn != null && dcn.length() > 0) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai.setSiteId(null);
-            }
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.i(TAG, "SDK not finished initializing-- " + e.getMessage());
-        }
+        String dcn = serverExtras.get(DCN_KEY);
 
-        try {
-        /* If MoPub gets location, so do we. */
-            MMSDK.setLocationEnabled((localExtras.get("location") != null));
-        } catch (MMException e) {
-            Log.e(TAG, "MM SDK is not initialized", e);
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
         }
 
         try {
-            mMillennialInterstitial = InterstitialAd.createInstance(apid);
+            MMSDK.setAppInfo(ai);
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+            millennialInterstitial = InterstitialAd.createInstance(apid);
+            millennialInterstitial.setListener(new MillennialInterstitialListener());
+            millennialInterstitial.load(context, null);
         } catch (MMException e) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
+            Log.e(TAG, "Exception occurred while obtaining an interstitial from MM SDK.", e);
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
-
-        mMillennialInterstitial.setListener(new MillennialInterstitialListener());
-        mMillennialInterstitial.load(context, null);
     }
 
+
     @Override
     protected void showInterstitial() {
-        if (mMillennialInterstitial.isReady()) {
+
+        if (millennialInterstitial.isReady()) {
             try {
-                mMillennialInterstitial.show(mContext);
+                millennialInterstitial.show(context);
             } catch (MMException e) {
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
+                MMLog.e(TAG, "An exception occurred while attempting to show interstitial.", e);
+                interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             }
         } else {
-            Log.w(TAG, "showInterstitial called before Millennial's ad was loaded.");
+            Log.w(TAG, "showInterstitial called but interstitial is not ready.");
         }
     }
 
+
     @Override
     protected void onInvalidate() {
-        if (mMillennialInterstitial != null) {
-            mMillennialInterstitial.setListener(null);
-            mMillennialInterstitial = null;
-        }
-    }
 
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    if (context instanceof Activity) {
-                        try {
-                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
-                        } catch (Exception e) {
-                            Log.e(TAG, "Error initializing MMSDK", e);
-                            return false;
-                        }
-                    } else {
-                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
+        if (millennialInterstitial != null) {
+            millennialInterstitial.destroy();
+            millennialInterstitial = null;
         }
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInterstitialListener implements InterstitialListener {
 
         @Override
         public void onAdLeftApplication(InterstitialAd interstitialAd) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
             Log.d(TAG, "Millennial Interstitial Ad - Leaving application");
         }
 
+
         @Override
         public void onClicked(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad was clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialClicked();
+
+                    interstitialListener.onInterstitialClicked();
                 }
             });
         }
 
+
         @Override
         public void onClosed(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad was closed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialDismissed();
+
+                    interstitialListener.onInterstitialDismissed();
                 }
             });
         }
 
+
         @Override
         public void onExpired(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad expired");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
                 }
             });
         }
 
+
         @Override
-        public void onLoadFailed(InterstitialAd interstitialAd,
-                InterstitialErrorStatus interstitialErrorStatus) {
-            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
+        public void onLoadFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
             final MoPubErrorCode moPubErrorCode;
 
             switch (interstitialErrorStatus.getErrorCode()) {
                 case InterstitialErrorStatus.ALREADY_LOADED:
                     // This will generate discrepancies, as requests will NOT be sent to Millennial.
-                    mInterstitialListener.onInterstitialLoaded();
+                    interstitialListener.onInterstitialLoaded();
                     Log.w(TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded.");
                     return;
                 case InterstitialErrorStatus.EXPIRED:
@@ -237,44 +203,62 @@ public void onLoadFailed(InterstitialAd interstitialAd,
                     moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
             }
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(moPubErrorCode);
+
+                    interstitialListener.onInterstitialFailed(moPubErrorCode);
                 }
             });
         }
 
+
         @Override
         public void onLoaded(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
-            UI_THREAD_HANDLER.post(new Runnable() {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Interstitial Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialLoaded();
+
+                    interstitialListener.onInterstitialLoaded();
                 }
             });
         }
 
+
         @Override
-        public void onShowFailed(InterstitialAd interstitialAd,
-                InterstitialErrorStatus interstitialErrorStatus) {
-            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onShowFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
                 }
             });
         }
 
+
         @Override
         public void onShown(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad shown");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialShown();
+
+                    interstitialListener.onInterstitialShown();
                 }
             });
         }
diff --git a/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java b/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
new file mode 100644
index 00000000..ca906ba1
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
@@ -0,0 +1,361 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
+import com.millennialmedia.InterstitialAd;
+import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
+import com.millennialmedia.InterstitialAd.InterstitialListener;
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
+import com.millennialmedia.MMSDK;
+import com.millennialmedia.XIncentivizedEventListener;
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+
+import java.util.Map;
+
+
+/**
+ * Compatible with version 6.6 of the Millennial Media SDK.
+ */
+
+@SuppressWarnings("unused")
+final class MillennialRewardedVideo extends CustomEventRewardedVideo {
+
+    private static final String TAG = MillennialRewardedVideo.class.getSimpleName();
+    public static final String DCN_KEY = "dcn";
+    public static final String APID_KEY = "adUnitID";
+
+    private InterstitialAd millennialInterstitial;
+    private MillennialRewardedVideoListener millennialRewardedVideoListener = new MillennialRewardedVideoListener();
+    private Context context;
+    private String apid = null;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (millennialInterstitial == null) {
+            return null;
+        }
+
+        return millennialInterstitial.getCreativeInfo();
+    }
+
+
+    @Nullable
+    @Override
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+
+        return millennialRewardedVideoListener;
+    }
+
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+
+        return new BaseLifecycleListener();
+    }
+
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+
+        return (apid == null) ? "" : apid;
+    }
+
+
+    @Override
+    protected void onInvalidate() {
+
+        if (millennialInterstitial != null) {
+            millennialInterstitial.destroy();
+            millennialInterstitial = null;
+            apid = null;
+        }
+    }
+
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+
+        if (!MillennialUtils.initSdk(launcherActivity)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+
+            return false;
+        }
+
+        return true;
+    }
+
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) throws Exception {
+
+        this.context = activity.getApplicationContext();
+        apid = serverExtras.get(APID_KEY);
+        String dcn = serverExtras.get(DCN_KEY);
+
+        if (MillennialUtils.isEmpty(apid)) {
+            Log.e(TAG, "Invalid extras-- Be sure you have a placement ID specified.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MillennialRewardedVideo.class, "",
+                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
+        // Add DCN support
+        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(dcn);
+        try {
+            MMSDK.setAppInfo(ai);
+			/* If MoPub gets location, so do we. */
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+
+            millennialInterstitial = InterstitialAd.createInstance(apid);
+            millennialInterstitial.setListener(millennialRewardedVideoListener);
+            millennialInterstitial.xSetIncentivizedListener(millennialRewardedVideoListener);
+            millennialInterstitial.load(activity, null);
+
+        } catch (MMException e) {
+            Log.e(TAG, "An exception occurred loading an InterstitialAd", e);
+            MoPubRewardedVideoManager
+                    .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, apid, MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+
+    @Override
+    protected boolean hasVideoAvailable() {
+
+        return ((millennialInterstitial != null) && millennialInterstitial.isReady());
+    }
+
+
+    @Override
+    protected void showVideo() {
+
+        if ((millennialInterstitial != null) && millennialInterstitial.isReady()) {
+            try {
+                millennialInterstitial.show(context);
+            } catch (MMException e) {
+                Log.e(TAG, "An exception occurred showing the MM SDK interstitial.", e);
+                MoPubRewardedVideoManager
+                        .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, millennialInterstitial.placementId,
+                                MoPubErrorCode.INTERNAL_ERROR);
+            }
+        } else {
+            Log.w(TAG, "showVideo called before MillennialInterstitial ad was loaded.");
+        }
+    }
+
+
+    class MillennialRewardedVideoListener
+            implements InterstitialListener, XIncentivizedEventListener, CustomEventRewardedVideoListener {
+
+        @Override
+        public void onAdLeftApplication(InterstitialAd interstitialAd) {
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
+            Log.d(TAG, "Millennial Rewarded Video Ad - Leaving application");
+        }
+
+
+        @Override
+        public void onClicked(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was clicked");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoClicked(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onClosed(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was closed");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoClosed(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onExpired(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad expired");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+                }
+            });
+        }
+
+
+        @Override
+        public void onLoadFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
+                interstitialErrorStatus) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            final MoPubErrorCode moPubErrorCode;
+
+            switch (interstitialErrorStatus.getErrorCode()) {
+                case InterstitialErrorStatus.ALREADY_LOADED:
+                    // This will generate discrepancies, as requests will NOT be sent to Millennial.
+                    MillennialUtils.postOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+
+                            MoPubRewardedVideoManager
+                                    .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
+                        }
+                    });
+                    Log.w(TAG, "Millennial Rewarded Video Ad - Attempted to load ads when ads are already loaded.");
+                    return;
+                case InterstitialErrorStatus.EXPIRED:
+                case InterstitialErrorStatus.DISPLAY_FAILED:
+                case InterstitialErrorStatus.INIT_FAILED:
+                case InterstitialErrorStatus.ADAPTER_NOT_FOUND:
+                    moPubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case InterstitialErrorStatus.NO_NETWORK:
+                    moPubErrorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case InterstitialErrorStatus.UNKNOWN:
+                    moPubErrorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+                case InterstitialErrorStatus.NOT_LOADED:
+                case InterstitialErrorStatus.LOAD_FAILED:
+                default:
+                    moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    moPubErrorCode);
+                }
+            });
+        }
+
+
+        @Override
+        public void onLoaded(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad loaded splendidly");
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Rewarded Video Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onShowFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
+                interstitialErrorStatus) {
+
+            Log.e(TAG, "Millennial Rewarded Video Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+                }
+            });
+        }
+
+
+        @Override
+        public void onShown(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad shown");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoStarted(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public boolean onVideoComplete() {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Video completed");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoCompleted(MillennialRewardedVideo.class, millennialInterstitial.placementId,
+                                    MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
+                }
+            });
+            return false;
+        }
+
+
+        @Override
+        public boolean onCustomEvent(XIncentiveEvent xIncentiveEvent) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Custom event received: " + xIncentiveEvent.eventId + ", " +
+                    xIncentiveEvent.args);
+
+            return false;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/MillennialUtils.java b/extras/src/com/mopub/mobileads/MillennialUtils.java
new file mode 100644
index 00000000..0417e7ee
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/MillennialUtils.java
@@ -0,0 +1,65 @@
+package com.mopub.mobileads;
+
+import android.app.Application;
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMSDK;
+import com.mopub.common.Preconditions;
+
+
+final public class MillennialUtils {
+    private static final String LOG_TAG = MillennialUtils.class.getSimpleName();
+
+    private static final Handler handler = new Handler(Looper.getMainLooper());
+
+    public static final String VERSION = "1.2.0";
+
+    private static volatile boolean sIsInitialized = false;
+
+    public static void postOnUiThread(Runnable runnable) {
+        handler.post(runnable);
+    }
+
+    public static boolean isEmpty(String s) {
+        return (s == null || s.trim().isEmpty());
+    }
+
+    /**
+     * @param context - application or activity context
+     * @return {@code true} successfully initialized
+     */
+    public static boolean initSdk(@NonNull Context context) {
+        if (sIsInitialized) {
+            return true;
+        }
+
+        synchronized (MillennialUtils.class) {
+            if (sIsInitialized) {
+                return true;
+            }
+            Preconditions.checkNotNull(context);
+
+            final Application application;
+            if (context instanceof Application) {
+                application = (Application) context;
+            } else {
+                application = (Application) context.getApplicationContext();
+            }
+
+            try {
+                MMSDK.initialize(application);
+            } catch (MMException e) {
+                Log.e(LOG_TAG, "Exception occurred initializing the MM SDK.", e);
+                return false;
+            }
+
+            sIsInitialized = true;
+        }
+        return true;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
index 48980569..9a87ee6a 100644
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -24,7 +24,7 @@
 
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.8.2
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
     private static final String TAG = TapjoyInterstitial.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
index b08d8f04..8613c441 100644
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -21,7 +21,7 @@
 import java.util.Hashtable;
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.8.2
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
     private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
index d9361a30..37b31b27 100644
--- a/extras/src/com/mopub/mobileads/UnityInterstitial.java
+++ b/extras/src/com/mopub/mobileads/UnityInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /**
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
 
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
index 02ab0e70..24636be9 100644
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
@@ -17,13 +17,13 @@
 /**
  * A custom event for showing Unity rewarded videos.
  *
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityRewardedVideo extends CustomEventRewardedVideo {
     private static final String GAME_ID_KEY = "gameId";
     private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
     private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-    private static String sPlacementId = "rewardedVideo";
+    private static String sPlacementId = "";
 
     @Nullable
     private Activity mLauncherActivity;
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
index 951a91c5..a7358947 100644
--- a/extras/src/com/mopub/mobileads/UnityRouter.java
+++ b/extras/src/com/mopub/mobileads/UnityRouter.java
@@ -12,7 +12,7 @@
 import java.util.Map;
 
 /**
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityRouter {
     private static String sCurrentPlacementId;
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index f7a9e5dd..ba140085 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -3,32 +3,41 @@
 import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
-import android.util.Log;
+import android.support.annotation.NonNull;
 
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
 
-/*
- * Tested with Vungle SDK 4.0.2
+/**
+ * A custom event for showing Vungle Interstitial.
+ * <p>
+ * Certified with Vungle SDK 5.3.0
  */
-public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
+public class VungleInterstitial extends CustomEventInterstitial {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String INTERSTITIAL_TAG = "Vungle Interstitial: ";
 
     /*
      * APP_ID_KEY is intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    private final VunglePub mVunglePub;
+    private static VungleRouter sVungleRouter;
     private final Handler mHandler;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private VungleInterstitialRouterListener mVungleRouterListener;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
+
 
     public VungleInterstitial() {
         mHandler = new Handler(Looper.getMainLooper());
-        mVunglePub = VunglePub.getInstance();
+        sVungleRouter = VungleRouter.getInstance();
     }
 
     @Override
@@ -37,96 +46,192 @@ protected void loadInterstitial(Context context,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
         mCustomEventInterstitialListener = customEventInterstitialListener;
+        mIsPlaying = false;
 
         if (context == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+                }
+            });
+
             return;
         }
 
-        /*
-         * You may pass the Vungle App Id in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        final String appId;
-        if (extrasAreValid(serverExtras)) {
-            appId = serverExtras.get(APP_ID_KEY);
-        } else {
-            appId = DEFAULT_VUNGLE_APP_ID;
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+
+            return;
         }
 
-        // init clears the event listener.
-        mVunglePub.init(context, appId);
-        mVunglePub.setEventListeners(this);
-        if (mVunglePub.isAdPlayable()) {
-            Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
-            mCustomEventInterstitialListener.onInterstitialLoaded();
-        } else {
-            Log.d("MoPub", "Vungle interstitial ad is not loaded.");
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        if (mVungleRouterListener == null) {
+            mVungleRouterListener = new VungleInterstitialRouterListener();
+        }
+
+        if (!sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.initVungle(context, mAppId, mPlacementIds);
         }
+
+        sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRouterListener);
     }
 
     @Override
     protected void showInterstitial() {
-        if (mVunglePub.isAdPlayable()) {
-            mVunglePub.playAd();
+        if (sVungleRouter.isAdPlayableForPlacement(mPlacementId)) {
+            sVungleRouter.playAdForPlacement(mPlacementId, null);
+            mIsPlaying = true;
         } else {
-            Log.d("MoPub", "Tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            MoPubLog.d(INTERSTITIAL_TAG + "SDK tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
     @Override
     protected void onInvalidate() {
-        mVunglePub.clearEventListeners();
+        MoPubLog.d(INTERSTITIAL_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRouterListener = null;
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APP_ID_KEY);
-    }
+    // private functions
+    private boolean validateIdsInServerExtras(Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
 
-    /*
-     * EventListener implementation
-     */
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "App ID is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoDurationMillis) {
-        final double watchedPercent = (double) watchedMillis / videoDurationMillis * 100;
-        Log.d("MoPub", String.format("%.1f%% of Vungle video watched.", watchedPercent));
-    }
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onAdStart() {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Showing Vungle interstitial ad.");
-                mCustomEventInterstitialListener.onInterstitialShown();
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
             }
-        });
-    }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Vungle interstitial ad dismissed.");
-                mCustomEventInterstitialListener.onInterstitialDismissed();
-                if (wasCallToActionClicked) {
-                    mCustomEventInterstitialListener.onInterstitialClicked();
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid : mPlacementIds) {
+                if (pid.equals(mPlacementId)) {
+                    foundInList = true;
                 }
             }
-        });
-    }
+            if (!foundInList) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
 
-    @Override
-    public void onAdUnavailable(final String s) {
-        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        return isAllDataValid;
     }
 
-    @Override
-    public void onAdPlayableChanged(final boolean playable) {
-        Log.d("MoPub", String.format("Vungle interstitial ad is %s.",
-                playable ? "playable" : "not playable"));
+
+    /*
+     * VungleRouterListener
+     */
+    private class VungleInterstitialRouterListener implements VungleRouterListener {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (wasCallToActionClicked) {
+                            mCustomEventInterstitialListener.onInterstitialClicked();
+                        }
+                        mCustomEventInterstitialListener.onInterstitialDismissed();
+                    }
+                });
+
+                sVungleRouter.removeRouterListener(mPlacementId);
+            }
+        }
+
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+                mIsPlaying = true;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialShown();
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad successfully loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialLoaded();
+                            }
+                        });
+                    } else {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad is not loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                            }
+                        });
+                    }
+                }
+            }
+        }
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index f0f283ce..6a44e429 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -5,130 +5,196 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.mopub.common.BaseLifecycleListener;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.logging.MoPubLog;
+
 import com.vungle.publisher.AdConfig;
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
 
-import java.util.Locale;
 import java.util.Map;
 
 /**
  * A custom event for showing Vungle rewarded videos.
  *
- * Certified with Vungle 4.0.2
+ * Certified with Vungle SDK 5.3.0
  */
 public class VungleRewardedVideo extends CustomEventRewardedVideo {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String REWARDED_TAG = "Vungle Rewarded: ";
 
     /*
      * These constants are intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
-    public static final String VUNGLE_AD_NETWORK_CONSTANT = "vngl_id";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    // This has to be reinitialized every time the CE loads to avoid conflict with the interstitials.
-    private static VunglePub sVunglePub;
-    private static VungleRewardedVideoListener sVungleListener;
-    private static boolean sInitialized;
-    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull final Activity activity) {
-            super.onPause(activity);
-            sVunglePub.onPause();
-        }
+    public static final String VUNGLE_NETWORK_ID_DEFAULT = "vngl_id";
+    private static final String VUNGLE_DEFAULT_APP_ID = "YOUR_APP_ID_HERE";
+    private static final String[] VUNGLE_DEFAULT_ALL_PLACEMENT_IDS = {"PLACEMENT_ID_1", "PLACEMENT_ID_2", "..."};
 
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-            sVunglePub.onResume();
-        }
-    };
+    private static VungleRouter sVungleRouter;
+    private VungleRewardedRouterListener mVungleRewardedRouterListener;
+    private static boolean sInitialized;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
 
     private String mAdUnitId;
     private String mCustomerId;
 
+
     public VungleRewardedVideo() {
-        sVungleListener = new VungleRewardedVideoListener();
-    }
+        sVungleRouter = VungleRouter.getInstance();
 
-    @Nullable
-    @Override
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sVungleListener;
+        if (mVungleRewardedRouterListener == null) {
+            mVungleRewardedRouterListener = new VungleRewardedRouterListener();
+        }
     }
 
     @Nullable
     @Override
     public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
+        return sVungleRouter.getLifecycleListener();
     }
 
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return VUNGLE_AD_NETWORK_CONSTANT;
+        return mPlacementId;
     }
 
     @Override
     protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
         synchronized (VungleRewardedVideo.class) {
-            if (!sInitialized) {
-                sVunglePub = VunglePub.getInstance();
-                String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
-                sVunglePub.init(launcherActivity, appId);
-                sInitialized = true;
-                return true;
+            if (sInitialized) {
+                return false;
+            }
+
+            if (!validateIdsInServerExtras(serverExtras)) {
+                mAppId = VUNGLE_DEFAULT_APP_ID;
+                mPlacementIds = VUNGLE_DEFAULT_ALL_PLACEMENT_IDS;
+            }
+
+            if (!sVungleRouter.isVungleInitialized()) {
+                sVungleRouter.initVungle(launcherActivity, mAppId, mPlacementIds);
             }
-            return false;
+
+            sInitialized = true;
+
+            return true;
         }
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
-        String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
-        sVunglePub.init(activity, appId);
-        sVunglePub.setEventListeners(sVungleListener);
+        mIsPlaying = false;
+
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mPlacementId = VUNGLE_NETWORK_ID_DEFAULT;
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
         Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
         if (adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
 
-        Object customerIdObject = localExtras.get(DataKeys.REWARDED_VIDEO_CUSTOMER_ID);
+        Object customerIdObject = localExtras.get(DataKeys.REWARDED_AD_CUSTOMER_ID_KEY);
         if (customerIdObject instanceof String && !TextUtils.isEmpty((String) customerIdObject)) {
             mCustomerId = (String) customerIdObject;
         }
 
-        if (sVunglePub.isAdPlayable()) {
-            MoPubLog.d("Vungle rewarded video ad successfully loaded.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
-        } else {
-            MoPubLog.d("Vungle rewarded video ad is not loaded.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+        if (sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRewardedRouterListener);
+        }
+        else {
+            MoPubLog.d(REWARDED_TAG + "There should not be this case. loadWithSdkInitialized is called before the SDK starts initialization for Placement ID: " + mPlacementId);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
     }
 
     @Override
     protected boolean hasVideoAvailable() {
-        return sVunglePub.isAdPlayable();
+        return sVungleRouter.isAdPlayableForPlacement(mPlacementId);
     }
 
     @Override
     protected void showVideo() {
         final AdConfig adConfig = new AdConfig();
-        adConfig.setIncentivized(true);
         setUpMediationSettingsForRequest(adConfig);
-        sVunglePub.playAd(adConfig);
+
+        sVungleRouter.playAdForPlacement(mPlacementId, adConfig);
+        mIsPlaying = true;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        MoPubLog.d(REWARDED_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRewardedRouterListener = null;
+    }
+
+
+    //private functions
+    private boolean validateIdsInServerExtras (Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
+
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "App ID is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid:  mPlacementIds) {
+                if(pid.equals(mPlacementId)) {
+                    foundInList = true;
+                }
+            }
+            if(!foundInList) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
+
+        return isAllDataValid;
     }
 
     private void setUpMediationSettingsForRequest(AdConfig adConfig) {
@@ -166,57 +232,83 @@ private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediation
         }
     }
 
-    @Override
-    protected void onInvalidate() {
-    }
-
-    private class VungleRewardedVideoListener implements EventListener,
-            CustomEventRewardedVideoListener {
 
+    /*
+     * VungleRewardedRouterListener
+     */
+    private class VungleRewardedRouterListener implements VungleRouterListener {
         @Override
-        public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-            if (wasSuccessfulView) {
-                // Vungle does not provide a callback when a user should be rewarded.
-                // You will need to provide your own reward logic if you receive a reward with
-                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
-                                MoPubReward.NO_REWARD_AMOUNT));
-            }
-            if (wasCallToActionClicked) {
-                MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT);
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+
+                mIsPlaying = false;
+
+                if (wasSuccessfulView) {
+                    // Vungle does not provide a callback when a user should be rewarded.
+                    // You will need to provide your own reward logic if you receive a reward with
+                    // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
+                    MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
+                            mPlacementId,
+                            MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
+                                    MoPubReward.NO_REWARD_AMOUNT));
+                }
+
+                if (wasCallToActionClicked) {
+                    MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
+                            mPlacementId);
+                }
+
+                MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
+                        mPlacementId);
+
+                sVungleRouter.removeRouterListener(mPlacementId);
             }
-            MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
         }
 
         @Override
-        public void onAdStart() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
-        }
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdStart - Placement ID: " + placementReferenceId);
 
-        @Override
-        public void onAdUnavailable(final String s) {
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+                mIsPlaying = true;
+
+                MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
+                        mPlacementId);
+            }
         }
 
         @Override
-        public void onAdPlayableChanged(final boolean playable) {
-            MoPubLog.d(String.format("Vungle rewarded video ad is %s.",
-                    playable ? "playable" : "not playable"));
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+
+                mIsPlaying = false;
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                        mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+            }
         }
 
         @Override
-        public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoMillis) {
-            MoPubLog.d(String.format(Locale.US, "%.1f%% of Vungle video watched.",
-                    (double) watchedMillis / videoMillis * 100));
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad successfully loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
+                                mPlacementId);
+                    }
+                    else {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad is not loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                                mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                }
+            }
         }
     }
 
+
     public static class VungleMediationSettings implements MediationSettings {
         @Nullable private final String userId;
         @Nullable private final String title;
diff --git a/extras/src/com/mopub/mobileads/VungleRouter.java b/extras/src/com/mopub/mobileads/VungleRouter.java
new file mode 100644
index 00000000..46a499f7
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouter.java
@@ -0,0 +1,211 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.logging.MoPubLog;
+
+import com.vungle.publisher.AdConfig;
+import com.vungle.publisher.VungleAdEventListener;
+import com.vungle.publisher.VungleInitListener;
+import com.vungle.publisher.VunglePub;
+import com.vungle.publisher.env.WrapperFramework;
+import com.vungle.publisher.inject.Injector;
+
+import java.util.HashMap;
+import java.util.Map;
+
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public class VungleRouter {
+
+    private static final String ROUTER_TAG = "Vungle Router: ";
+
+    // Version of the adapter, intended for Vungle internal use.
+    private static final String VERSION = "5.3.0";
+
+    private static VungleRouter instance = new VungleRouter();
+    private enum SDKInitState {
+        NOTINITIALIZED,
+        INITIALIZING,
+        INITIALIZED;
+    }
+
+    private static SDKInitState sInitState = SDKInitState.NOTINITIALIZED;
+    private static VunglePub sVunglePub;
+    private static Map<String, VungleRouterListener> sVungleRouterListeners = new HashMap<>();
+    private static Map<String, VungleRouterListener> sWaitingList = new HashMap<>();
+
+    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull final Activity activity) {
+            super.onPause(activity);
+            sVunglePub.onPause();
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+            sVunglePub.onResume();
+        }
+    };
+
+
+    private VungleRouter() {
+        Injector injector = Injector.getInstance();
+        injector.setWrapperFramework(WrapperFramework.mopub);
+        injector.setWrapperFrameworkVersion(VERSION.replace('.', '_'));
+
+        sVunglePub = VunglePub.getInstance();
+    }
+
+    public static VungleRouter getInstance() {
+        return instance;
+    }
+
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+
+    public void initVungle(Context context, String vungleAppId, String[] placementReferenceIds) {
+        sVunglePub.init(context, vungleAppId, placementReferenceIds, new VungleInitListener() {
+            @Override
+            public void onSuccess() {
+                MoPubLog.d(ROUTER_TAG + "SDK is initialized successfully.");
+
+                sInitState = SDKInitState.INITIALIZED;
+
+                sVunglePub.clearAndSetEventListeners(vungleDefaultListener);
+                clearWaitingList();
+            }
+
+            @Override
+            public void onFailure(Throwable throwable) {
+                MoPubLog.w(ROUTER_TAG + "Initialization is failed.");
+
+                sInitState = SDKInitState.NOTINITIALIZED;
+            }
+        });
+
+        sInitState = SDKInitState.INITIALIZING;
+    }
+
+    public boolean isVungleInitialized() {
+        if (sInitState == SDKInitState.NOTINITIALIZED) {
+            return false;
+        } else if (sInitState == SDKInitState.INITIALIZING) {
+            return true;
+        } else if (sInitState == SDKInitState.INITIALIZED) {
+            return true;
+        }
+
+        return sVunglePub.isInitialized();
+    }
+
+    public void loadAdForPlacement(String placementId, VungleRouterListener routerListener) {
+        switch (sInitState) {
+            case NOTINITIALIZED:
+                MoPubLog.w(ROUTER_TAG + "There should not be this case. loadAdForPlacement is called before initialization starts.");
+                break;
+
+            case INITIALIZING:
+                sWaitingList.put(placementId, routerListener);
+                break;
+
+            case INITIALIZED:
+                addRouterListener(placementId, routerListener);
+                sVunglePub.loadAd(placementId);
+                break;
+        }
+    }
+
+    private void addRouterListener(String placementId, VungleRouterListener routerListener) {
+        sVungleRouterListeners.put(placementId, routerListener);
+    }
+
+    public void removeRouterListener(String placementId) {
+        sVungleRouterListeners.remove(placementId);
+    }
+
+    public boolean isAdPlayableForPlacement(String placementId) {
+        return sVunglePub.isAdPlayable(placementId);
+    }
+
+    public void playAdForPlacement(String placementId, AdConfig adConfig) {
+        if (sVunglePub.isAdPlayable(placementId)) {
+            sVunglePub.playAd(placementId, adConfig);
+        }
+        else {
+            MoPubLog.w(ROUTER_TAG + "There should not be this case. playAdForPlacement is called before an ad is loaded for Placement ID: " + placementId);
+        }
+    }
+
+    private void clearWaitingList() {
+        for (Map.Entry<String, VungleRouterListener> entry : sWaitingList.entrySet()) {
+            sVunglePub.loadAd(entry.getKey());
+            sVungleRouterListeners.put(entry.getKey(),entry.getValue());
+        }
+
+        sWaitingList.clear();
+    }
+
+
+    /*
+     * VungleAdEventListener
+     */
+    private final VungleAdEventListener vungleDefaultListener = new VungleAdEventListener() {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            MoPubLog.d(ROUTER_TAG + "onAdEnd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdEnd(placementReferenceId, wasSuccessfulView, wasCallToActionClicked);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdEnd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            MoPubLog.d(ROUTER_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdStart(placementReferenceId);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdStart - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            MoPubLog.d(ROUTER_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onUnableToPlayAd(placementReferenceId, reason);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onUnableToPlayAd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            MoPubLog.d(ROUTER_TAG + "onAdAvailabilityUpdate - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdAvailabilityUpdate(placementReferenceId, isAdAvailable);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdAvailabilityUpdate - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+    };
+}
diff --git a/extras/src/com/mopub/mobileads/VungleRouterListener.java b/extras/src/com/mopub/mobileads/VungleRouterListener.java
new file mode 100644
index 00000000..057a8af4
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouterListener.java
@@ -0,0 +1,16 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public interface VungleRouterListener {
+    void onAdEnd(@NonNull String var1, boolean var2, boolean var3);
+
+    void onAdStart(@NonNull String var1);
+
+    void onUnableToPlayAd(@NonNull String var1, String var2);
+
+    void onAdAvailabilityUpdate(@NonNull String var1, boolean var2);
+}
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index 5a345081..1429555d 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -19,8 +19,7 @@
  * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
  * static and video native ads. This will automatically replace the main image view with the
  * Facebook MediaView that handles showing the main asset.
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
     private final ViewBinder mViewBinder;
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index 9c87ec96..4eb9d55f 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -25,8 +25,7 @@
  * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
  * "video_enabled" flag is set to true. The server configuration will override the local
  * configuration.
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookNative extends CustomEventNative {
     private static final String PLACEMENT_ID_KEY = "placement_id";
@@ -133,16 +132,38 @@ private static void registerChildViewsForInteraction(final View view, final Nati
             return;
         }
 
+        final List<View> clickableViews = new ArrayList<>();
+        assembleChildViewsWithLimit(view, clickableViews, 10);
+
+        if (clickableViews.size() == 1) {
+            nativeAd.registerViewForInteraction(view);
+        } else {
+            nativeAd.registerViewForInteraction(view, clickableViews);
+        }
+    }
+
+    private static void assembleChildViewsWithLimit(final View view,
+            final List<View> clickableViews, final int limit) {
+        if (view == null) {
+            MoPubLog.d("View given is null. Ignoring");
+            return;
+        }
+
+        if (limit <= 0) {
+            MoPubLog.d("Depth limit reached; adding this view regardless of its type.");
+            clickableViews.add(view);
+            return;
+        }
+
         if (view instanceof ViewGroup && ((ViewGroup) view).getChildCount() > 0) {
             final ViewGroup vg = (ViewGroup) view;
-            final List<View> clickableViews = new ArrayList<>();
             for (int i = 0; i < vg.getChildCount(); i++) {
-                clickableViews.add(vg.getChildAt(i));
+                assembleChildViewsWithLimit(vg.getChildAt(i), clickableViews, limit - 1);
             }
-            nativeAd.registerViewForInteraction(view, clickableViews);
-        } else {
-            nativeAd.registerViewForInteraction(view);
+            return;
         }
+
+        clickableViews.add(view);
     }
 
     static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener {
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
index 70e47cde..3e24799b 100644
--- a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -7,7 +7,7 @@
 import java.util.Map;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public interface FlurryBaseNativeAd {
 
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
index 5d70107f..1fd7d61f 100644
--- a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public final class FlurryCustomEventNative extends CustomEventNative {
 
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
index ea9d4ad5..4f1e362d 100644
--- a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -15,7 +15,7 @@
  * this will still use the mainImageView.
  *
  *
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public class FlurryNativeAdRenderer implements
         MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
index 0564b026..b6885793 100644
--- a/extras/src/com/mopub/nativeads/FlurryViewBinder.java
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public class FlurryViewBinder {
     ViewBinder staticViewBinder;
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
index 4d5df2dd..3887c33d 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
@@ -27,7 +27,7 @@
  * The {@link GooglePlayServicesAdRenderer} class is used to render
  * GooglePlayServicesStaticNativeAds.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesAdRenderer implements MoPubAdRenderer<GooglePlayServicesNativeAd> {
 
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
index 81d34885..7797c08c 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
@@ -22,7 +22,7 @@
 /**
  * The {@link GooglePlayServicesNative} class is used to load native Google mobile ads.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesNative extends CustomEventNative {
     protected static final String TAG = "MoPubToAdMobNative";
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 29411d97..5055e47d 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -1,18 +1,16 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.View;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
 import com.millennialmedia.NativeAd;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.mobileads.MillennialUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -21,181 +19,168 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
 public class MillennialNative extends CustomEventNative {
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
     private final static String TAG = MillennialNative.class.getSimpleName();
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
-    @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
-        String placementId;
-        String siteId;
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
-            return;
+    MillennialStaticNativeAd staticNativeAd;
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (staticNativeAd == null) {
+            return null;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(APID_KEY);
-            siteId = serverExtras.get(DCN_KEY);
-        } else {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+        return staticNativeAd.getCreativeInfo();
+    }
+
+
+    @Override
+    protected void loadNativeAd(final Context context, final CustomEventNativeListener customEventNativeListener,
+                                Map<String, Object> localExtras, Map<String, String> serverExtras) {
+
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (siteId != null && siteId.length() > 0) {
-                ai = ai.setSiteId(siteId);
-            } else {
-                ai = ai.setSiteId(null);
-            }
+        String placementId = serverExtras.get(APID_KEY);
+        String siteId = serverExtras.get(DCN_KEY);
+
+        if (MillennialUtils.isEmpty(placementId)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
 
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.w(TAG, "App info error", e);
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
             return;
         }
 
+        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(siteId);
+
         try {
+            MMSDK.setAppInfo(ai);
+
             NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
-            final MillennialStaticNativeAd millennialStaticNativeAd =
-                    new MillennialStaticNativeAd(context,
-                            nativeAd,
-                            new ImpressionTracker(context),
-                            new NativeClickHandler(context),
-                            customEventNativeListener);
-            millennialStaticNativeAd.loadAd();
+            staticNativeAd = new MillennialStaticNativeAd(context, nativeAd, new ImpressionTracker(context),
+                    new NativeClickHandler(context), customEventNativeListener);
+
+            staticNativeAd.loadAd();
+
         } catch (MMException e) {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            Log.e(TAG, "An exception occurred loading a native ad from MM SDK", e);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
         }
     }
 
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        String placementId = serverExtras.get(APID_KEY);
-        return (serverExtras.containsKey(APID_KEY) &&
-                placementId != null && placementId.length() > 0);
-    }
-
 
     static class MillennialStaticNativeAd extends StaticNativeAd implements NativeAd.NativeListener {
-        private final Context mContext;
-        private NativeAd mNativeAd;
-        private final ImpressionTracker mImpressionTracker;
-        private final NativeClickHandler mNativeClickHandler;
-        private final CustomEventNativeListener mListener;
-        private final MillennialStaticNativeAd mMillennialStaticNativeAd;
-
-        public MillennialStaticNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final ImpressionTracker impressionTracker,
-                final NativeClickHandler nativeClickHandler,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mImpressionTracker = impressionTracker;
-            mNativeClickHandler = nativeClickHandler;
-            mListener = customEventNativeListener;
-            mMillennialStaticNativeAd = this;
+
+        private final Context context;
+        private NativeAd nativeAd;
+        private final ImpressionTracker impressionTracker;
+        private final NativeClickHandler nativeClickHandler;
+        private final CustomEventNativeListener listener;
+
+
+        public MillennialStaticNativeAd(final Context context, final NativeAd nativeAd,
+                                        final ImpressionTracker impressionTracker, final NativeClickHandler nativeClickHandler,
+                                        final CustomEventNativeListener customEventNativeListener) {
+
+            this.context = context.getApplicationContext();
+            this.nativeAd = nativeAd;
+            this.impressionTracker = impressionTracker;
+            this.nativeClickHandler = nativeClickHandler;
+            listener = customEventNativeListener;
 
             nativeAd.setListener(this);
         }
 
-        void loadAd() {
+
+        void loadAd() throws MMException {
+
             Log.d(TAG, "Millennial native ad loading.");
-            try {
-                mNativeAd.load(mContext, null);
-            } catch (MMException e) {
-                Log.w(TAG, "Configuration error", e);
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mListener.onNativeAdFailed(NativeErrorCode
-                                .NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
+
+            nativeAd.load(context, null);
+        }
+
+
+        CreativeInfo getCreativeInfo() {
+
+            if (nativeAd == null) {
+                return null;
             }
+
+            return nativeAd.getCreativeInfo();
         }
 
+
         // Lifecycle Handlers
         @Override
         public void prepare(final View view) {
             // Must access these methods directly to get impressions to fire.
-            mNativeAd.getIconImage();
-            mNativeAd.getDisclaimer();
-            mImpressionTracker.addView(view, this);
-            mNativeClickHandler.setOnClickListener(view, this);
+            nativeAd.getIconImage();
+            nativeAd.getDisclaimer();
+            impressionTracker.addView(view, this);
+            nativeClickHandler.setOnClickListener(view, this);
         }
 
+
         @Override
         public void clear(final View view) {
-            mImpressionTracker.removeView(view);
-            mNativeClickHandler.clearOnClickListener(view);
+
+            impressionTracker.removeView(view);
+            nativeClickHandler.clearOnClickListener(view);
         }
 
+
         @Override
         public void destroy() {
-            mImpressionTracker.destroy();
-            mNativeAd.setListener(null);
-            mNativeAd = null;
+
+            impressionTracker.destroy();
+            nativeAd.destroy();
+            nativeAd = null;
         }
 
+
         // Event Handlers
         @Override
         public void recordImpression(final View view) {
+
             notifyAdImpressed();
+
             try {
-                mNativeAd.fireImpression();
+                nativeAd.fireImpression();
                 Log.d(TAG, "Millennial native ad impression recorded.");
-            } catch (MMException m) {
-                Log.e(TAG, "Error tracking Millennial native ad impression", m);
+            } catch (MMException e) {
+                Log.e(TAG, "Error tracking Millennial native ad impression", e);
             }
         }
 
+
         @Override
         public void handleClick(final View view) {
+
             notifyAdClicked();
-            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mNativeAd.fireCallToActionClicked();
+
+            nativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+            nativeAd.fireCallToActionClicked();
             Log.d(TAG, "Millennial native ad clicked.");
         }
 
-        // MM'S Native mListener
+
+        // MM'S Native listener
         @Override
         public void onLoaded(NativeAd nativeAd) {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+
+                MMLog.d(TAG, "Native Creative Info: " + creativeInfo);
+            }
+
             // Set assets
             String iconImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.ICON_IMAGE, 1);
             String mainImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.MAIN_IMAGE, 1);
@@ -206,13 +191,12 @@ public void onLoaded(NativeAd nativeAd) {
 
             final String clickDestinationUrl = nativeAd.getCallToActionUrl();
             if (clickDestinationUrl == null) {
-                UI_THREAD_HANDLER.post(new Runnable() {
+                MillennialUtils.postOnUiThread(new Runnable() {
                     @Override
                     public void run() {
-                        Log.d(TAG,
-                                "Millennial native ad encountered null destination url. Failing over.");
-                        mListener.onNativeAdFailed(
-                                NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+
+                        Log.d(TAG, "Millennial native ad encountered null destination url.");
+                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                     }
                 });
                 return;
@@ -230,20 +214,23 @@ public void run() {
                 urls.add(mainImageUrl);
             }
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            addExtra("disclaimer", nativeAd.getDisclaimer().getText());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
                     // This has to be run on the main thread:
-                    preCacheImages(mContext, urls, new NativeImageHelper.ImageListener() {
+                    preCacheImages(context, urls, new NativeImageHelper.ImageListener() {
                         @Override
                         public void onImagesCached() {
-                            mListener.onNativeAdLoaded(mMillennialStaticNativeAd);
+                            listener.onNativeAdLoaded(MillennialStaticNativeAd.this);
                             Log.d(TAG, "Millennial native ad loaded.");
                         }
 
+
                         @Override
                         public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                            mListener.onNativeAdFailed(errorCode);
+                            listener.onNativeAdFailed(errorCode);
                         }
                     });
 
@@ -251,8 +238,10 @@ public void onImagesFailedToCache(NativeErrorCode errorCode) {
             });
         }
 
+
         @Override
         public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
+
             final NativeErrorCode error;
             switch (nativeErrorStatus.getErrorCode()) {
                 case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
@@ -278,52 +267,37 @@ public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErr
                 default:
                     error = NativeErrorCode.NETWORK_NO_FILL;
             }
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mListener.onNativeAdFailed(error);
+
+                    listener.onNativeAdFailed(error);
                 }
             });
             Log.i(TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription());
         }
 
+
         @Override
         public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
+
             Log.d(TAG, "Millennial native ad click tracker fired.");
         }
 
+
         @Override
         public void onAdLeftApplication(NativeAd nativeAd) {
+
             Log.d(TAG, "Millennial native ad has left the application.");
 
         }
 
+
         @Override
         public void onExpired(NativeAd nativeAd) {
+
             Log.d(TAG, "Millennial native ad has expired!");
         }
 
     }
-
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    try {
-                        MMSDK.initialize((Activity) context, ActivityListenerManager.LifecycleState.RESUMED);
-                    } catch (Exception e) {
-                        Log.e(TAG, "Error initializing MMSDK", e);
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
-        }
-    }
 }
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 3b683af2..814b58ea 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="55"
-      android:versionName="4.17.0">
+      android:versionCode="57"
+      android:versionName="4.19.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="24"/>
 
@@ -17,11 +17,19 @@
                  android:networkSecurityConfig="@xml/network_security_config">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
+                android:launchMode="singleInstance"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
 	            <action android:name="android.intent.action.MAIN" />
 	            <category android:name="android.intent.category.LAUNCHER" />
 	        </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:scheme="mopub"
+                      android:host="load" />
+            </intent-filter>
 	    </activity>
         <activity android:name="com.mopub.mobileads.MoPubActivity"
                 android:configChanges="keyboardHidden|orientation|screenSize"/>
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 60c67400..a54d0f60 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -4,24 +4,25 @@ repositories {
         dirs '../libs'
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.17.0'
+project.version = '4.19.0'
 
 android {
-    compileSdkVersion 25
-    buildToolsVersion '25.0.2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 55
+        versionCode 57
         versionName version
         minSdkVersion 16
-        targetSdkVersion 25
+        targetSdkVersion 26
     }
 
     buildTypes {
@@ -56,8 +57,9 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:25.3.1'
-    compile 'com.google.android.gms:play-services-ads:9.4.0'
-    compile 'com.android.support:recyclerview-v7:25.3.1'
+    compile 'com.android.support:support-v4:26.1.0'
+    compile 'com.google.android.gms:play-services-ads:11.4.0'
+    compile 'com.google.android.gms:play-services-base:11.4.0'
+    compile 'com.android.support:recyclerview-v7:26.1.0'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
index f4ee63c9..c92575b3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -44,6 +44,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         layoutParams.height = getHeight();
         mMoPubView.setLayoutParams(layoutParams);
 
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index dbe77011..3a1b987b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -4,7 +4,9 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.support.annotation.NonNull;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
@@ -53,7 +55,10 @@ MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
     }
 
     private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit,
-                                                 final boolean isUserGenerated) {
+            final boolean isUserGenerated) {
+        deleteAllAdUnitsWithAdUnitIdAndAdType(sampleAdUnit.getAdUnitId(),
+                sampleAdUnit.getFragmentClassName());
+
         final ContentValues values = new ContentValues();
         final int userGenerated = isUserGenerated ? 1 : 0;
         values.put(COLUMN_AD_UNIT_ID, sampleAdUnit.getAdUnitId());
@@ -85,6 +90,20 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         database.close();
     }
 
+    private void deleteAllAdUnitsWithAdUnitIdAndAdType(@NonNull final String adUnitId,
+            @NonNull final String adType) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(adType);
+
+        final SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
+        final int numDeletedRows = database.delete(TABLE_AD_CONFIGURATIONS,
+                COLUMN_AD_UNIT_ID + " = '" + adUnitId +
+                "' AND " + COLUMN_USER_GENERATED + " = 1 AND " +
+                COLUMN_AD_TYPE + " = '" + adType + "'", null);
+        MoPubLog.d(numDeletedRows + " rows deleted with adUnitId: " + adUnitId);
+        database.close();
+    }
+
     List<MoPubSampleAdUnit> getAllAdUnits() {
         final List<MoPubSampleAdUnit> adConfigurations = new ArrayList<>();
         SQLiteDatabase database = mDatabaseHelper.getReadableDatabase();
@@ -94,7 +113,9 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
 
         while (!cursor.isAfterLast()) {
             final MoPubSampleAdUnit adConfiguration = cursorToAdConfiguration(cursor);
-            adConfigurations.add(adConfiguration);
+            if (adConfiguration != null) {
+                adConfigurations.add(adConfiguration);
+            }
             cursor.moveToNext();
         }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index f27ab6bb..fec98dd9 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -25,6 +25,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = adConfiguration.getAdUnitId();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index d655656c..ce6d1e79 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -3,11 +3,15 @@
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.DialogInterface;
+import android.net.Uri;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.app.ListFragment;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -20,12 +24,14 @@
 import android.widget.Toast;
 
 import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
+import static com.mopub.simpleadsdemo.Utils.logToast;
 
 
 interface TrashCanClickListener {
@@ -33,6 +39,12 @@
 }
 
 public class MoPubListFragment extends ListFragment implements TrashCanClickListener {
+
+    private static final String AD_UNIT_ID_KEY = "adUnitId";
+    private static final String FORMAT_KEY = "format";
+    static final String KEYWORDS_KEY = "keywords";
+    private static final String NAME_KEY = "name";
+
     private MoPubSampleListAdapter mAdapter;
     private AdUnitDataSource mAdUnitDataSource;
 
@@ -44,6 +56,33 @@ public void onCreate(Bundle savedInstanceState) {
         initializeAdapter();
     }
 
+    void addAdUnitViaDeeplink(@Nullable final Uri deeplinkData) {
+        if (deeplinkData == null) {
+            return;
+        }
+
+        final String adUnitId = deeplinkData.getQueryParameter(AD_UNIT_ID_KEY);
+        try {
+            Utils.validateAdUnitId(adUnitId);
+        } catch (IllegalArgumentException e) {
+            logToast(getContext(), "Ignoring invalid ad unit: " + adUnitId);
+            return;
+        }
+
+        final String format = deeplinkData.getQueryParameter(FORMAT_KEY);
+        final AdType adType = AdType.fromDeeplinkString(format);
+        if (adType == null) {
+            logToast(getContext(), "Ignoring invalid ad format: " + format);
+            return;
+        }
+
+        final String name = deeplinkData.getQueryParameter(NAME_KEY);
+        final MoPubSampleAdUnit adUnit = new MoPubSampleAdUnit.Builder(adUnitId,
+                adType).description(name == null ? "" : name).build();
+        final MoPubSampleAdUnit newAdUnit = addAdUnit(adUnit);
+        enterAdFragment(newAdUnit, deeplinkData.getQueryParameter(KEYWORDS_KEY));
+    }
+
     @Override
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
         final View view = inflater.inflate(R.layout.ad_unit_list_fragment, container, false);
@@ -67,6 +106,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
 
         final MoPubSampleAdUnit adConfiguration = mAdapter.getItem(position);
 
+        if (adConfiguration != null) {
+            enterAdFragment(adConfiguration, null);
+        }
+    }
+
+    private void enterAdFragment(@NonNull final MoPubSampleAdUnit adConfiguration,
+            @Nullable final String keywords) {
+        Preconditions.checkNotNull(adConfiguration);
+
         final FragmentTransaction fragmentTransaction =
                 getActivity().getSupportFragmentManager().beginTransaction();
 
@@ -83,7 +131,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
             return;
         }
 
-        fragment.setArguments(adConfiguration.toBundle());
+        final Bundle bundle = adConfiguration.toBundle();
+        if (!TextUtils.isEmpty(keywords)) {
+            bundle.putString(KEYWORDS_KEY, keywords);
+        }
+        fragment.setArguments(bundle);
+
+        if (getFragmentManager().getBackStackEntryCount() > 0) {
+            getFragmentManager().popBackStack();
+        }
 
         fragmentTransaction
                 .replace(R.id.fragment_container, fragment)
@@ -130,10 +186,28 @@ public void onPause() {
         super.onPause();
     }
 
-    void addAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
-        MoPubSampleAdUnit createdAdUnit = mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+    @NonNull
+    MoPubSampleAdUnit addAdUnit(@NonNull final MoPubSampleAdUnit moPubSampleAdUnit) {
+        Preconditions.checkNotNull(moPubSampleAdUnit);
+
+        final MoPubSampleAdUnit createdAdUnit =
+                mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+
+        for (int i = 0; i < mAdapter.getCount(); i++) {
+            final MoPubSampleAdUnit currentAdUnit = mAdapter.getItem(i);
+            if (currentAdUnit != null &&
+                    moPubSampleAdUnit.getAdUnitId().equals(currentAdUnit.getAdUnitId()) &&
+                    moPubSampleAdUnit.getFragmentClassName().equals(
+                            currentAdUnit.getFragmentClassName()) &&
+                    currentAdUnit.isUserDefined()) {
+                mAdapter.remove(currentAdUnit);
+                logToast(getContext(), moPubSampleAdUnit.getAdUnitId() + " replaced.");
+                break;
+            }
+        }
         mAdapter.add(createdAdUnit);
         mAdapter.sort(MoPubSampleAdUnit.COMPARATOR);
+        return createdAdUnit;
     }
 
     void deleteAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index fc175ea0..a40e9dfb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -1,11 +1,12 @@
 package com.mopub.simpleadsdemo;
 
 import android.annotation.TargetApi;
+import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPub;
@@ -37,6 +38,9 @@ private static void setWebDebugging() {
         }
     }
 
+    private MoPubListFragment mMoPubListFragment;
+    private Intent mDeeplinkIntent;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -63,17 +67,35 @@ protected void onCreate(Bundle savedInstanceState) {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.TRUNCATED);
         MoPub.setLocationPrecision(4);
 
-        if (findViewById(R.id.fragment_container) != null) {
-            final MoPubListFragment listFragment = new MoPubListFragment();
-            listFragment.setArguments(getIntent().getExtras());
-            FragmentManager fragmentManager = getSupportFragmentManager();
-            fragmentManager.beginTransaction()
-                    .add(R.id.fragment_container, listFragment)
-                    .commit();
-        }
+        createMoPubListFragment(getIntent());
 
         // Intercepts all logs including Level.FINEST so we can show a toast
         // that is not normally user-facing. This is only used for native ads.
         LoggingUtils.enableCanaryLogging(this);
     }
+
+    private void createMoPubListFragment(@NonNull final Intent intent) {
+        if (findViewById(R.id.fragment_container) != null) {
+            mMoPubListFragment = new MoPubListFragment();
+            mMoPubListFragment.setArguments(intent.getExtras());
+            getSupportFragmentManager().beginTransaction()
+                    .replace(R.id.fragment_container, mMoPubListFragment).commit();
+
+            mDeeplinkIntent = intent;
+        }
+    }
+
+    @Override
+    public void onNewIntent(@NonNull final Intent intent) {
+        mDeeplinkIntent = intent;
+    }
+
+    @Override
+    public void onPostResume() {
+        super.onPostResume();
+        if (mMoPubListFragment != null && mDeeplinkIntent != null) {
+            mMoPubListFragment.addAdUnitViaDeeplink(mDeeplinkIntent.getData());
+            mDeeplinkIntent = null;
+        }
+    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index f6573175..ea3bb0d3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -2,9 +2,11 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 
 import java.util.Comparator;
+import java.util.Locale;
 
 class MoPubSampleAdUnit implements Comparable<MoPubSampleAdUnit> {
 
@@ -51,6 +53,35 @@ static AdType fromFragmentClassName(final String fragmentClassName) {
 
             return null;
         }
+
+        @Nullable
+        static AdType fromDeeplinkString(@Nullable final String adType) {
+            if (adType == null) {
+                return null;
+            }
+            switch (adType.toLowerCase(Locale.US)) {
+                case "banner":
+                    return BANNER;
+                case "interstitial":
+                    return INTERSTITIAL;
+                case "mrect":
+                    return MRECT;
+                case "leaderboard":
+                    return LEADERBOARD;
+                case "skyscraper":
+                    return SKYSCRAPER;
+                case "rewarded":
+                    return REWARDED_VIDEO;
+                case "native":
+                    return LIST_VIEW;
+                case "nativetableplacer":
+                    return RECYCLER_VIEW;
+                case "nativecollectionplacer":
+                    return CUSTOM_NATIVE;
+                default:
+                    return null;
+            }
+        }
     }
 
     static final Comparator<MoPubSampleAdUnit> COMPARATOR =
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index b7141689..b62f18c5 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -69,6 +69,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
 
         // Set up a renderer for a static native ad.
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index b0e6cc5e..6616d4e3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -64,6 +64,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
                 android.R.layout.simple_list_item_1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index 472a5648..f9b9d095 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -80,6 +80,7 @@ public void onClick(final View v) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         viewHolder.mDescriptionView.setText(mAdConfiguration.getDescription());
         viewHolder.mAdUnitIdView.setText(adUnitId);
+        viewHolder.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final RecyclerView.Adapter originalAdapter = new DemoRecyclerAdapter();
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 09dd3818..8f66f3d2 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -50,6 +50,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         if (!sRewardedVideoInitialized) {
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
new file mode 100644
index 00000000..7649a506
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
@@ -0,0 +1,294 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewTreeObserver;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Views;
+
+import java.lang.ref.WeakReference;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+
+/**
+ * Tracks banner views to determine when they become visible, where visibility is determined by
+ * whether a minimum number of dips have been visible for a minimum duration, where both values are
+ * configured by the AdServer via headers.
+ */
+class BannerVisibilityTracker {
+    // Time interval to use for throttling visibility checks.
+    private static final int VISIBILITY_THROTTLE_MILLIS = 100;
+
+    /**
+     * Callback when visibility conditions are satisfied.
+     */
+    interface BannerVisibilityTrackerListener {
+        void onVisibilityChanged();
+    }
+
+    @NonNull @VisibleForTesting final OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting WeakReference<ViewTreeObserver> mWeakViewTreeObserver;
+
+    /**
+     * Banner view that is being tracked.
+     */
+    @NonNull private final View mTrackedView;
+
+    /**
+     * Root view of banner view being tracked.
+     */
+    @NonNull private final View mRootView;
+
+    /**
+     * Object to check actual visibility.
+     */
+    @NonNull private final BannerVisibilityChecker mVisibilityChecker;
+
+    /**
+     * Callback listener.
+     */
+    @Nullable private BannerVisibilityTrackerListener mBannerVisibilityTrackerListener;
+
+    /**
+     * Runnable to run on each visibility loop.
+     */
+    @NonNull private final BannerVisibilityRunnable mVisibilityRunnable;
+
+    /**
+     * Handler for visibility.
+     */
+    @NonNull private final Handler mVisibilityHandler;
+
+    /**
+     * Whether the visibility runnable is scheduled.
+     */
+    private boolean mIsVisibilityScheduled;
+
+    /**
+     * Whether the imp tracker has been fired already.
+     */
+    private boolean mIsImpTrackerFired;
+
+    @VisibleForTesting
+    public BannerVisibilityTracker(@NonNull final Context context,
+            @NonNull final View rootView,
+            @NonNull final View trackedView,
+            final int minVisibleDips,
+            final int minVisibleMillis) {
+        Preconditions.checkNotNull(rootView);
+        Preconditions.checkNotNull(trackedView);
+
+        mRootView = rootView;
+        mTrackedView = trackedView;
+
+        mVisibilityChecker = new BannerVisibilityChecker(minVisibleDips, minVisibleMillis);
+        mVisibilityHandler = new Handler();
+        mVisibilityRunnable = new BannerVisibilityRunnable();
+
+        mOnPreDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                scheduleVisibilityCheck();
+                return true;
+            }
+        };
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(null);
+        setViewTreeObserver(context, mTrackedView);
+    }
+
+    private void setViewTreeObserver(@Nullable final Context context, @Nullable final View view) {
+        final ViewTreeObserver originalViewTreeObserver = mWeakViewTreeObserver.get();
+        if (originalViewTreeObserver != null && originalViewTreeObserver.isAlive()) {
+            return;
+        }
+
+        final View rootView = Views.getTopmostView(context, view);
+        if (rootView == null) {
+            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            return;
+        }
+
+        final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
+        if (!viewTreeObserver.isAlive()) {
+            MoPubLog.w("Visibility Tracker was unable to track views because the"
+                    + " root view tree observer was not alive");
+            return;
+        }
+
+        mWeakViewTreeObserver = new WeakReference<>(viewTreeObserver);
+        viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityTrackerListener getBannerVisibilityTrackerListener() {
+        return mBannerVisibilityTrackerListener;
+    }
+
+    void setBannerVisibilityTrackerListener(
+            @Nullable final BannerVisibilityTrackerListener bannerVisibilityTrackerListener) {
+        mBannerVisibilityTrackerListener = bannerVisibilityTrackerListener;
+    }
+
+    /**
+     * Destroy the visibility tracker, preventing it from future use.
+     */
+    void destroy() {
+        mVisibilityHandler.removeMessages(0);
+        mIsVisibilityScheduled = false;
+        final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
+        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
+            viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
+        }
+        mWeakViewTreeObserver.clear();
+        mBannerVisibilityTrackerListener = null;
+    }
+
+    void scheduleVisibilityCheck() {
+        // Tracking this directly instead of calling hasMessages directly because we measured that
+        // this led to slightly better performance.
+        if (mIsVisibilityScheduled) {
+            return;
+        }
+
+        mIsVisibilityScheduled = true;
+        mVisibilityHandler.postDelayed(mVisibilityRunnable, VISIBILITY_THROTTLE_MILLIS);
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityChecker getBannerVisibilityChecker() {
+        return mVisibilityChecker;
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    Handler getVisibilityHandler() {
+        return mVisibilityHandler;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isVisibilityScheduled() {
+        return mIsVisibilityScheduled;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isImpTrackerFired() {
+        return mIsImpTrackerFired;
+    }
+
+    class BannerVisibilityRunnable implements Runnable {
+        @Override
+        public void run() {
+            if (mIsImpTrackerFired) {
+                return;
+            }
+
+            mIsVisibilityScheduled = false;
+
+            // If the view meets the dips count requirement for visibility, then also check the
+            // duration requirement for visibility.
+            if (mVisibilityChecker.isVisible(mRootView, mTrackedView)) {
+                // Start the timer for duration requirement if it hasn't already.
+                if (!mVisibilityChecker.hasBeenVisibleYet()) {
+                    mVisibilityChecker.setStartTimeMillis();
+                }
+
+                if (mVisibilityChecker.hasRequiredTimeElapsed()) {
+                    if (mBannerVisibilityTrackerListener != null) {
+                        mBannerVisibilityTrackerListener.onVisibilityChanged();
+                        mIsImpTrackerFired = true;
+                    }
+                }
+            }
+
+            // If visibility requirements are not met, check again later.
+            if (!mIsImpTrackerFired) {
+                scheduleVisibilityCheck();
+            }
+        }
+    }
+
+    static class BannerVisibilityChecker {
+        private int mMinVisibleDips;
+        private int mMinVisibleMillis;
+        private long mStartTimeMillis = Long.MIN_VALUE;
+
+        // A rect to use for hit testing. Create this once to avoid excess garbage collection
+        private final Rect mClipRect = new Rect();
+
+        BannerVisibilityChecker(final int minVisibleDips, final int minVisibleMillis) {
+            mMinVisibleDips = minVisibleDips;
+            mMinVisibleMillis = minVisibleMillis;
+        }
+
+        boolean hasBeenVisibleYet() {
+            return mStartTimeMillis != Long.MIN_VALUE;
+        }
+
+        void setStartTimeMillis() {
+            mStartTimeMillis = SystemClock.uptimeMillis();
+        }
+
+        /**
+         * Whether the visible time has elapsed from the start time.
+         */
+        boolean hasRequiredTimeElapsed() {
+            if (!hasBeenVisibleYet()) {
+                return false;
+            }
+
+            return SystemClock.uptimeMillis() - mStartTimeMillis >= mMinVisibleMillis;
+        }
+
+        /**
+         * Whether the visible dips count requirement is met.
+         */
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view) {
+            // ListView & GridView both call detachFromParent() for views that can be recycled for
+            // new data. This is one of the rare instances where a view will have a null parent for
+            // an extended period of time and will not be the main window.
+            // view.getGlobalVisibleRect() doesn't check that case, so if the view has visibility
+            // of View.VISIBLE but its group has no parent it is likely in the recycle bin of a
+            // ListView / GridView and not on screen.
+            if (view == null || view.getVisibility() != View.VISIBLE || rootView.getParent() == null) {
+                return false;
+            }
+
+            // If either width or height is non-positive, the view cannot be visible.
+            if (view.getWidth() <= 0 || view.getHeight() <= 0) {
+                return false;
+            }
+
+            // View completely clipped by its parents
+            if (!view.getGlobalVisibleRect(mClipRect)) {
+                return false;
+            }
+
+            // Calculate area of view not clipped by any of its parents
+            final int widthInDips = Dips.pixelsToIntDips((float) mClipRect.width(),
+                    view.getContext());
+            final int heightInDips = Dips.pixelsToIntDips((float) mClipRect.height(),
+                    view.getContext());
+            final long visibleViewAreaInDips = (long) (widthInDips * heightInDips);
+
+            return visibleViewAreaInDips >= mMinVisibleDips;
+        }
+    }
+}
+
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
index 0db1f408..be3c0062 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
@@ -37,7 +37,13 @@ protected abstract void loadBanner(Context context,
      * Called when a Custom Event is being invalidated or destroyed. Perform any final cleanup here.
      */
     protected abstract void onInvalidate();
-    
+
+    /*
+     * Fire MPX impression trackers and 3rd-party impression trackers from JS.
+     */
+    protected void trackMpxAndThirdPartyImpressions() {
+    }
+
     public interface CustomEventBannerListener {
         /*
          * Your custom event subclass must call this method when it successfully loads an ad and
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index ef72d1ba..9ae515fd 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -4,11 +4,14 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ReflectionTarget;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
@@ -38,6 +41,11 @@
     private final Runnable mTimeout;
     private boolean mStoredAutorefresh;
 
+    private int mImpressionMinVisibleDips = Integer.MIN_VALUE;
+    private int mImpressionMinVisibleMs = Integer.MIN_VALUE;
+    private boolean mIsVisibilityImpressionTrackingEnabled = false;
+    @Nullable private BannerVisibilityTracker mVisibilityTracker;
+
     public CustomEventBannerAdapter(@NonNull MoPubView moPubView,
             @NonNull String className,
             @NonNull Map<String, String> serverExtras,
@@ -68,6 +76,9 @@ public void run() {
         // Attempt to load the JSON extras into mServerExtras.
         mServerExtras = new TreeMap<String, String>(serverExtras);
 
+        // Parse banner impression tracking headers to determine if we are in visibility experiment
+        parseBannerImpressionTrackingHeaders();
+
         mLocalExtras = mMoPubView.getLocalExtras();
         if (mMoPubView.getLocation() != null) {
             mLocalExtras.put("location", mMoPubView.getLocation());
@@ -107,6 +118,13 @@ void invalidate() {
                 MoPubLog.d("Invalidating a custom event banner threw an exception", e);
             }
         }
+        if (mVisibilityTracker != null) {
+            try {
+                mVisibilityTracker.destroy();
+            } catch (Exception e) {
+                MoPubLog.d("Destroying a banner visibility tracker threw an exception", e);
+            }
+        }
         mContext = null;
         mCustomEventBanner = null;
         mLocalExtras = null;
@@ -118,6 +136,31 @@ boolean isInvalidated() {
         return mInvalidated;
     }
 
+    @Deprecated
+    @VisibleForTesting
+    int getImpressionMinVisibleDips() {
+        return mImpressionMinVisibleDips;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getImpressionMinVisibleMs() {
+        return mImpressionMinVisibleMs;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isVisibilityImpressionTrackingEnabled() {
+        return mIsVisibilityImpressionTrackingEnabled;
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityTracker getVisibilityTracker() {
+        return mVisibilityTracker;
+    }
+
     private void cancelTimeout() {
         mHandler.removeCallbacks(mTimeout);
     }
@@ -132,6 +175,34 @@ private int getTimeoutDelayMilliseconds() {
         return mMoPubView.getAdTimeoutDelay() * 1000;
     }
 
+    private void parseBannerImpressionTrackingHeaders() {
+        final String impressionMinVisibleDipsString =
+                mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+        final String impressionMinVisibleMsString =
+                mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+
+        if (!TextUtils.isEmpty(impressionMinVisibleDipsString)
+                && !TextUtils.isEmpty(impressionMinVisibleMsString)) {
+            try {
+                mImpressionMinVisibleDips = Integer.parseInt(impressionMinVisibleDipsString);
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Cannot parse integer from header "
+                        + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+            }
+
+            try {
+                mImpressionMinVisibleMs = Integer.parseInt(impressionMinVisibleMsString);
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Cannot parse integer from header "
+                        + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+            }
+
+            if (mImpressionMinVisibleDips > 0 && mImpressionMinVisibleMs >= 0) {
+                    mIsVisibilityImpressionTrackingEnabled = true;
+            }
+        }
+    }
+
     /*
      * CustomEventBanner.Listener implementation
      */
@@ -145,9 +216,36 @@ public void onBannerLoaded(View bannerView) {
 
         if (mMoPubView != null) {
             mMoPubView.nativeAdLoaded();
+
+            // If visibility impression tracking is enabled for banners, fire all impression
+            // tracking URLs (AdServer, MPX, 3rd-party) for both HTML and MRAID banner types when
+            // visibility conditions are met.
+            //
+            // Else, retain old behavior of firing AdServer impression tracking URL if and only if
+            // banner is not HTML.
+            if (mIsVisibilityImpressionTrackingEnabled) {
+                // Set up visibility tracker and listener if in experiment
+                mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
+                        mImpressionMinVisibleDips, mImpressionMinVisibleMs);
+                mVisibilityTracker.setBannerVisibilityTrackerListener(
+                        new BannerVisibilityTracker.BannerVisibilityTrackerListener() {
+                    @Override
+                    public void onVisibilityChanged() {
+                        mMoPubView.trackNativeImpression();
+                        if (mCustomEventBanner != null) {
+                            mCustomEventBanner.trackMpxAndThirdPartyImpressions();
+                        }
+                    }
+                });
+            }
+
             mMoPubView.setAdContentView(bannerView);
-            if (!(bannerView instanceof HtmlBannerWebView)) {
-                mMoPubView.trackNativeImpression();
+
+            // Old behavior
+            if (!mIsVisibilityImpressionTrackingEnabled) {
+                if (!(bannerView instanceof HtmlBannerWebView)) {
+                    mMoPubView.trackNativeImpression();
+                }
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index 6104ff90..1cf274fb 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -13,6 +13,7 @@
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
@@ -37,6 +38,7 @@ protected void loadBanner(
             redirectUrl = serverExtras.get(DataKeys.REDIRECT_URL_KEY);
             clickthroughUrl = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
             isScrollable = Boolean.valueOf(serverExtras.get(DataKeys.SCROLLABLE_KEY));
+
             try {
                 adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
             } catch (ClassCastException e) {
@@ -75,6 +77,11 @@ protected void onInvalidate() {
         }
     }
 
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        mHtmlBannerWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+    }
+
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(DataKeys.HTML_RESPONSE_BODY_KEY);
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 86526d22..5e13128f 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -18,6 +18,7 @@
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
@@ -95,15 +96,19 @@ public void onReady(final @NonNull MraidBridge.MraidWebView webView,
 
     @Override
     protected void onInvalidate() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (mMraidController != null) {
             mMraidController.setMraidListener(null);
             mMraidController.destroy();
         }
+    }
 
-        if (mExternalViewabilitySessionManager != null) {
-            mExternalViewabilitySessionManager.endDisplaySession();
-            mExternalViewabilitySessionManager = null;
-        }
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
     }
 
     private boolean extrasAreValid(@NonNull final Map<String, String> serverExtras) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
index 33d94acb..66de7413 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -8,7 +8,6 @@
 import android.webkit.WebViewClient;
 
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.util.EnumSet;
 
@@ -78,8 +77,6 @@ public void urlHandlingFailed(@NonNull String url,
     @Override
     public void onPageStarted(WebView view, String url, Bitmap favicon) {
         super.onPageStarted(view, url, favicon);
-        mMoPubBrowser.getForwardButton()
-                .setImageDrawable(UNRIGHT_ARROW.createDrawable(mMoPubBrowser));
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index be2193a9..1de41b77 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -17,9 +17,14 @@
     public static final String AD_WIDTH = "com_mopub_ad_width";
     public static final String AD_HEIGHT = "com_mopub_ad_height";
 
+    // Banner imp tracking fields
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_DIPS = "Banner-Impression-Min-Pixels";
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_MS = "Banner-Impression-Min-Ms";
+
     // Native fields
     public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
     public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
+    public static final String IMPRESSION_MIN_VISIBLE_PX = "Impression-Min-Visible-Px";
 
     // Native Video fields
     public static final String PLAY_VISIBLE_PERCENT = "Play-Visible-Percent";
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index dee2664f..e4b96b6e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -13,7 +13,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.17.0";
+    public static final String SDK_VERSION = "4.19.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 303f9539..c60702bf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -24,12 +24,14 @@
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-import static com.mopub.common.event.BaseEvent.*;
+import static com.mopub.common.event.BaseEvent.Category;
+import static com.mopub.common.event.BaseEvent.Name;
+import static com.mopub.common.event.BaseEvent.SamplingRate;
 import static com.mopub.common.util.Drawables.BACKGROUND;
 import static com.mopub.common.util.Drawables.CLOSE;
-import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.REFRESH;
-import static com.mopub.common.util.Drawables.RIGHT_ARROW;
+import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
+import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
@@ -220,8 +222,8 @@ private View getMoPubBrowserView() {
         innerLayout.setBackgroundDrawable(BACKGROUND.createDrawable(this));
         outerLayout.addView(innerLayout);
 
-        mBackButton = getButton(LEFT_ARROW.createDrawable(this));
-        mForwardButton = getButton(RIGHT_ARROW.createDrawable(this));
+        mBackButton = getButton(UNLEFT_ARROW.createDrawable(this));
+        mForwardButton = getButton(UNRIGHT_ARROW.createDrawable(this));
         mRefreshButton = getButton(REFRESH.createDrawable(this));
         mCloseButton = getButton(CLOSE.createDrawable(this));
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index ca5009e8..f9ac664f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -9,6 +9,7 @@
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -91,6 +92,14 @@ private String getRedirectLocation(@NonNull final String urlString) throws IOExc
             return resolveRedirectLocation(urlString, httpUrlConnection);
         } finally {
             if (httpUrlConnection != null) {
+                final InputStream is = httpUrlConnection.getInputStream();
+                if (is != null) {
+                    try {
+                        is.close();
+                    } catch (IOException e) {
+                        MoPubLog.d("IOException when closing httpUrlConnection. Ignoring.");
+                    }
+                }
                 httpUrlConnection.disconnect();
             }
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index 0eac6314..fb527fef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,6 +1,5 @@
 package com.mopub.common.logging;
 
-import android.annotation.SuppressLint;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
index deb8928b..15177acd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -1,10 +1,7 @@
 package com.mopub.common.util;
 
 import android.graphics.Bitmap;
-import android.os.Build;
 import android.support.annotation.NonNull;
-import android.widget.ImageView;
-
 
 public class ImageUtils {
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
new file mode 100644
index 00000000..143dc2e7
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
@@ -0,0 +1,22 @@
+package com.mopub.common.util;
+
+public enum JavaScriptWebViewCallbacks {
+    // The ad server appends these functions to the MRAID javascript to help with third party
+    // impression tracking.
+    WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
+    WEB_VIEW_DID_CLOSE("webviewDidClose();");
+
+    private String mJavascript;
+    
+    JavaScriptWebViewCallbacks(String javascript) {
+        mJavascript = javascript;
+    }
+
+    public String getJavascript() {
+        return mJavascript;
+    }
+
+    public String getUrl() {
+        return "javascript:" + mJavascript;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index e59d522a..cf94ec5b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -4,7 +4,6 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index 9c45e515..ad909dbe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -27,9 +27,14 @@
     ACCEPT_LANGUAGE("Accept-Language"),
     BROWSER_AGENT("X-Browser-Agent"),
 
+    // Banner impression tracking fields
+    BANNER_IMPRESSION_MIN_VISIBLE_DIPS("X-Banner-Impression-Min-Pixels"),
+    BANNER_IMPRESSION_MIN_VISIBLE_MS("X-Banner-Impression-Min-Ms"),
+
     // Native fields
     IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
     IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
+    IMPRESSION_MIN_VISIBLE_PX("X-Native-Impression-Min-Px"),
 
     // Native Video fields
     PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
index 0572a7cf..fabe6469 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util;
 
+import com.mopub.common.logging.MoPubLog;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
@@ -60,8 +62,9 @@ public static void closeStream(Closeable stream) {
 
         try {
             stream.close();
-        } catch (IOException e) {
+        } catch (Exception e) {
             // Unable to close the stream
+            MoPubLog.d("Unable to close stream. Ignoring.");
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index c16c0085..b65913eb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -5,6 +5,7 @@
 import android.support.annotation.Nullable;
 import android.view.MotionEvent;
 import android.view.View;
+import android.webkit.WebSettings;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
@@ -48,6 +49,24 @@ public void loadUrl(@Nullable final String url) {
         MoPubLog.d("Loading url: " + url);
     }
 
+    @Override
+    public void stopLoading() {
+        if (mIsDestroyed) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#stopLoading() called after destroy()");
+            return;
+        }
+
+        final WebSettings webSettings = getSettings();
+        if (webSettings == null) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#getSettings() returned null");
+            return;
+        }
+
+        webSettings.setJavaScriptEnabled(false);
+        super.stopLoading();
+        webSettings.setJavaScriptEnabled(true);
+    }
+
     private void disableScrollingAndZoom() {
         setHorizontalScrollBarEnabled(false);
         setHorizontalScrollbarOverlay(false);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 6bc577f0..9e31439a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -13,12 +13,13 @@
 import android.widget.VideoView;
 
 import com.mopub.common.IntentActions;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
-    private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
+    @NonNull private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
     @Nullable private Long mBroadcastIdentifier;
 
     public interface BaseVideoViewControllerListener {
@@ -30,7 +31,11 @@ void onStartActivityForResult(final Class<? extends Activity> clazz,
                 final Bundle extras);
     }
 
-    protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    protected BaseVideoViewController(final Context context,
+            @Nullable final Long broadcastIdentifier,
+            @NonNull final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        Preconditions.checkNotNull(baseVideoViewControllerListener);
+
         mContext = context;
         mBroadcastIdentifier = broadcastIdentifier;
         mBaseVideoViewControllerListener = baseVideoViewControllerListener;
@@ -61,6 +66,7 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
         // By default, the activity result is ignored
     }
 
+    @NonNull
     protected BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
         return mBaseVideoViewControllerListener;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 8bc63db5..743c4d69 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -34,8 +34,8 @@
 
     private final Context mContext;
     private final String mDspCreativeId;
-    private HtmlWebViewListener mHtmlWebViewListener;
-    private BaseHtmlWebView mHtmlWebView;
+    private final HtmlWebViewListener mHtmlWebViewListener;
+    private final BaseHtmlWebView mHtmlWebView;
     private final String mClickthroughUrl;
     private final String mRedirectUrl;
 
@@ -83,10 +83,8 @@ public void onClose() {
 
                     @Override
                     public void onFailLoad() {
-                        mHtmlWebView.getSettings().setJavaScriptEnabled(false);
                         mHtmlWebView.stopLoading();
                         mHtmlWebViewListener.onFailed(UNSPECIFIED);
-                        mHtmlWebView.getSettings().setJavaScriptEnabled(true);
                     }
                 })
                 .build().handleUrl(mContext, url, mHtmlWebView.wasClicked());
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
index 5472c971..18a3a137 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
@@ -6,7 +6,6 @@
 import com.mopub.common.Preconditions;
 import com.mopub.mobileads.util.XmlUtils;
 
-import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 
 import java.util.HashSet;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
index dcbcbba9..dbf37d7f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -3,7 +3,6 @@
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
index d4f9949d..a34b447b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
index 0bf3c15a..a7028079 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -8,9 +8,6 @@
 
 import org.w3c.dom.Node;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * This XML manager handles Wrapper nodes. Wrappers redirect to other VAST documents (which may
  * in turn redirect to more wrappers). Wrappers can also contain impression trackers,
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 0cdb4fa7..123f33e3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
-import android.graphics.Color;
 import android.graphics.Paint;
 
 public class CloseButtonDrawable extends BaseWidgetDrawable {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index 45287b98..bd4ba50e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -243,6 +243,8 @@ public Listener getListener() {
                     ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT);
             final String impressionVisibleMS = extractHeader(headers,
                     ResponseHeader.IMPRESSION_VISIBLE_MS);
+            final String impressionMinVisiblePx = extractHeader(headers,
+                    ResponseHeader.IMPRESSION_MIN_VISIBLE_PX);
             if (!TextUtils.isEmpty(impressionMinVisiblePercent)) {
                 serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
                         impressionMinVisiblePercent);
@@ -250,6 +252,9 @@ public Listener getListener() {
             if (!TextUtils.isEmpty(impressionVisibleMS)) {
                 serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, impressionVisibleMS);
             }
+            if (!TextUtils.isEmpty(impressionMinVisiblePx)) {
+                serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PX, impressionMinVisiblePx);
+            }
         }
         if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
             serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT,
@@ -289,6 +294,14 @@ public Listener getListener() {
                     extractHeader(headers, ResponseHeader.VIDEO_VIEWABILITY_TRACKERS));
         }
 
+        // Banner imp tracking
+        if (AdFormat.BANNER.equals(mAdFormat)) {
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS));
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS));
+        }
+
         // Disable viewability vendors, if any
         final String disabledViewabilityVendors = extractHeader(headers,
                 ResponseHeader.DISABLE_VIEWABILITY);
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index f5208bb0..3e4f0c17 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -18,27 +18,6 @@
 
 abstract class BaseInterstitialActivity extends Activity {
     @Nullable protected AdReport mAdReport;
-
-    enum JavaScriptWebViewCallbacks {
-        // The ad server appends these functions to the MRAID javascript to help with third party
-        // impression tracking.
-        WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
-        WEB_VIEW_DID_CLOSE("webviewDidClose();");
-
-        private String mJavascript;
-        private JavaScriptWebViewCallbacks(String javascript) {
-            mJavascript = javascript;
-        }
-
-        protected String getJavascript() {
-            return mJavascript;
-        }
-
-        protected String getUrl() {
-            return "javascript:" + mJavascript;
-        }
-    }
-
     @Nullable private CloseableLayout mCloseableLayout;
     @Nullable private Long mBroadcastIdentifier;
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 886624a9..d5f51e1f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -31,8 +31,8 @@
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
@@ -167,14 +167,14 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected void onDestroy() {
-        if (mHtmlInterstitialWebView != null) {
-            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
-            mHtmlInterstitialWebView.destroy();
-        }
         if (mExternalViewabilitySessionManager != null) {
             mExternalViewabilitySessionManager.endDisplaySession();
             mExternalViewabilitySessionManager = null;
         }
+        if (mHtmlInterstitialWebView != null) {
+            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
+            mHtmlInterstitialWebView.destroy();
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index bb9b44c4..a2bee5e7 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -34,8 +34,8 @@
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 
@@ -240,13 +240,14 @@ protected void onResume() {
 
     @Override
     protected void onDestroy() {
-        if (mMraidController != null) {
-            mMraidController.destroy();
-        }
         if (mExternalViewabilitySessionManager != null) {
             mExternalViewabilitySessionManager.endDisplaySession();
             mExternalViewabilitySessionManager = null;
         }
+        if (mMraidController != null) {
+            mMraidController.destroy();
+        }
+
         if (getBroadcastIdentifier()!= null) {
             broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
index 6f84021f..6931c414 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
@@ -8,6 +8,7 @@
  */
 public interface ImpressionInterface {
     int getImpressionMinPercentageViewed();
+    Integer getImpressionMinVisiblePx();
     int getImpressionMinTimeViewed();
     void recordImpression(View view);
     boolean isImpressionRecorded();
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d7775eab..d4989636 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -117,7 +117,8 @@ public void addView(final View view, @NonNull final ImpressionInterface impressi
         }
 
         mTrackedViews.put(view, impressionInterface);
-        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed(),
+                impressionInterface.getImpressionMinVisiblePx());
     }
 
     public void removeView(final View view) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 18ec136c..c1aaa849 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -342,7 +342,7 @@ public View getView(final int position, final View view, final ViewGroup viewGro
                     mStreamAdPlacer.getOriginalPosition(position), view, viewGroup);
         }
         mViewPositionMap.put(resultView, position);
-        mVisibilityTracker.addView(resultView, 0);
+        mVisibilityTracker.addView(resultView, 0, null);
 
         return resultView;
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index a2659c0a..5f2d1675 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -66,6 +66,16 @@ protected void loadNativeAd(@NonNull final Context context,
             }
         }
 
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_MIN_VISIBLE_PX)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinVisiblePx(Integer.parseInt(
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min visible px: " +
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX));
+            }
+        }
+
         try {
             moPubStaticNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index 21d2e3d2..7afb0337 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -316,7 +316,6 @@ public void refreshAds(@NonNull String adUnitId,
             loadAds(adUnitId, requestParameters);
         } else {
             MoPubLog.w("This LayoutManager can't be refreshed.");
-            return;
         }
     }
 
@@ -420,7 +419,7 @@ public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int pos
         }
 
         mViewPositionMap.put(holder.itemView, position);
-        mVisibilityTracker.addView(holder.itemView, 0);
+        mVisibilityTracker.addView(holder.itemView, 0, null);
 
         //noinspection unchecked
         mOriginalAdapter.onBindViewHolder(holder, mStreamAdPlacer.getOriginalPosition(position));
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
index 9fa5d9ff..ff220440 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
index d4ed19ef..a2b90337 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
@@ -35,6 +35,7 @@
     private boolean mImpressionRecorded;
     private int mImpressionMinTimeViewed;
     private int mImpressionMinPercentageViewed;
+    private Integer mImpressionMinVisiblePx;
 
     // Extras
     @NonNull private final Map<String, Object> mExtras;
@@ -42,6 +43,7 @@
     public StaticNativeAd() {
         mImpressionMinTimeViewed = DEFAULT_IMPRESSION_MIN_TIME_VIEWED_MS;
         mImpressionMinPercentageViewed = DEFAULT_IMPRESSION_MIN_PERCENTAGE_VIEWED;
+        mImpressionMinVisiblePx = null;
 
         mExtras = new HashMap<String, Object>();
     }
@@ -213,7 +215,7 @@ final public void setImpressionMinTimeViewed(final int impressionMinTimeViewed)
         if (impressionMinTimeViewed > 0) {
             mImpressionMinTimeViewed = impressionMinTimeViewed;
         } else {
-            MoPubLog.d("Ignoring non-positive impressionMinTimeViewed");
+            MoPubLog.d("Ignoring non-positive impressionMinTimeViewed: " + impressionMinTimeViewed);
         }
     }
 
@@ -227,7 +229,23 @@ final public void setImpressionMinPercentageViewed(final int impressionMinPercen
         if (impressionMinPercentageViewed >= 0 && impressionMinPercentageViewed <= 100) {
             mImpressionMinPercentageViewed = impressionMinPercentageViewed;
         } else {
-            MoPubLog.d("Ignoring impressionMinTimeViewed that's not a percent [0, 100]");
+            MoPubLog.d("Ignoring impressionMinTimeViewed that's not a percent [0, 100]: " +
+                    impressionMinPercentageViewed);
+        }
+    }
+
+    /**
+     * Sets the minimum number of pixels of the ad to be on screen before impression trackers are
+     * fired. This must be an Integer greater than 0.
+     *
+     * @param impressionMinVisiblePx Number of pixels of an ad (ignored if negative or 0).
+     */
+    final public void setImpressionMinVisiblePx(@Nullable final Integer impressionMinVisiblePx) {
+        if (impressionMinVisiblePx != null && impressionMinVisiblePx > 0) {
+            mImpressionMinVisiblePx = impressionMinVisiblePx;
+        } else {
+            MoPubLog.d("Ignoring null or non-positive impressionMinVisiblePx: " +
+                    impressionMinVisiblePx);
         }
     }
 
@@ -271,6 +289,17 @@ final public int getImpressionMinTimeViewed() {
         return mImpressionMinTimeViewed;
     }
 
+    /**
+     * Returns the minimum viewable number of pixels of the ad that must be onscreen for it to be
+     * considered visible. This value, if present and positive will override the min percentage.
+     * See {@link StaticNativeAd#getImpressionMinTimeViewed()} for additional impression
+     * tracking considerations.
+     */
+    @Override
+    final public Integer getImpressionMinVisiblePx() {
+        return mImpressionMinVisiblePx;
+    }
+
     @Override
     final public boolean isImpressionRecorded() {
         return mImpressionRecorded;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
index a13163c7..4b9df9ee 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
@@ -1,10 +1,8 @@
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
-import com.mopub.common.Preconditions.NoThrow;
 
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 7453d2c4..424e97d0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -54,6 +54,12 @@
         int mMaxInvisiblePercent;
         long mAccessOrder;
         View mRootView;
+
+        /**
+         * If this number is set, then use this as the minimum amount of the view seen before it is
+         * considered visible. This is in real pixels.
+         */
+        @Nullable Integer mMinVisiblePx;
     }
 
     // Views that are being tracked, mapped to the min viewable percentage
@@ -135,15 +141,19 @@ void setVisibilityTrackerListener(
     /**
      * Tracks the given view for visibility.
      */
-    void addView(@NonNull final View view, final int minPercentageViewed) {
-        addView(view, view, minPercentageViewed);
+    void addView(@NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(view, view, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed) {
-      addView(rootView, view, minPercentageViewed, minPercentageViewed);
+    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(rootView, view, minPercentageViewed, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
+    void addView(@NonNull View rootView, @NonNull final View view,
+            final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed,
+            @Nullable final Integer minVisiblePx) {
         setViewTreeObserver(view.getContext(), view);
 
         // Find the view if already tracked
@@ -160,6 +170,7 @@ void addView(@NonNull View rootView, @NonNull final View view, final int minVisi
         trackingInfo.mMinViewablePercent = minVisiblePercentageViewed;
         trackingInfo.mMaxInvisiblePercent = maxInvisiblePercent;
         trackingInfo.mAccessOrder = mAccessCounter;
+        trackingInfo.mMinVisiblePx = minVisiblePx;
 
         // Trim the number of tracked views to a reasonable number
         mAccessCounter++;
@@ -240,11 +251,14 @@ public void run() {
                 final View view = entry.getKey();
                 final int minPercentageViewed = entry.getValue().mMinViewablePercent;
                 final int maxInvisiblePercent = entry.getValue().mMaxInvisiblePercent;
+                final Integer minVisiblePx = entry.getValue().mMinVisiblePx;
                 final View rootView = entry.getValue().mRootView;
 
-                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed)) {
+                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed,
+                        minVisiblePx)) {
                     mVisibleViews.add(view);
-                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent)){
+                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent,
+                        null)) {
                     mInvisibleViews.add(view);
                 }
             }
@@ -271,9 +285,11 @@ boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeView
         }
 
         /**
-         * Whether the view is at least certain % visible
+         * Whether the view is at least certain amount visible. If the min pixel amount is set,
+         * use that. Otherwise, use the min percentage visible.
          */
-        boolean isVisible(@Nullable final View rootView, @Nullable final View view, final int minPercentageViewed) {
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view,
+                final int minPercentageViewed, @Nullable final Integer minVisiblePx) {
             // ListView & GridView both call detachFromParent() for views that can be recycled for
             // new data. This is one of the rare instances where a view will have a null parent for
             // an extended period of time and will not be the main window.
@@ -297,6 +313,10 @@ boolean isVisible(@Nullable final View rootView, @Nullable final View view, fina
                 return false;
             }
 
+            if (minVisiblePx != null && minVisiblePx > 0) {
+                return visibleViewArea >= minVisiblePx;
+            }
+
             return 100 * visibleViewArea >= minPercentageViewed * totalViewArea;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index dc9cefcb..ac405b11 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -42,6 +42,7 @@
 
 import static com.mopub.common.DataKeys.EVENT_DETAILS;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PX;
 import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
 import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
@@ -305,6 +306,8 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
             visibilityTrackingEvent.totalRequiredPlayTimeMs =
                     mVideoResponseHeaders.getImpressionVisibleMs();
             visibilityTrackingEvents.add(visibilityTrackingEvent);
+            visibilityTrackingEvent.minimumVisiblePx =
+                    mVideoResponseHeaders.getImpressionVisiblePx();
 
             // VAST impression trackers
             for (final VastTracker vastTracker : vastVideoConfig.getImpressionTrackers()) {
@@ -317,6 +320,8 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                 vastImpressionTrackingEvent.totalRequiredPlayTimeMs =
                         mVideoResponseHeaders.getImpressionVisibleMs();
                 visibilityTrackingEvents.add(vastImpressionTrackingEvent);
+                vastImpressionTrackingEvent.minimumVisiblePx =
+                        mVideoResponseHeaders.getImpressionVisiblePx();
             }
 
             // Visibility tracking event from http response Vast payload
@@ -435,7 +440,8 @@ public void render(@NonNull MediaLayout mediaLayout) {
             mVideoVisibleTracking.addView(mRootView,
                     mediaLayout,
                     mVideoResponseHeaders.getPlayVisiblePercent(),
-                    mVideoResponseHeaders.getPauseVisiblePercent());
+                    mVideoResponseHeaders.getPauseVisiblePercent(),
+                    mVideoResponseHeaders.getImpressionVisiblePx());
 
             mMediaLayout = mediaLayout;
             mMediaLayout.initForVideo();
@@ -905,14 +911,13 @@ public NativeVideoController createForId(final long id,
         private int mImpressionMinVisiblePercent;
         private int mImpressionVisibleMs;
         private int mMaxBufferMs;
+        private Integer mImpressionVisiblePx;
         private JSONObject mVideoTrackers;
 
         VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
             try {
                 mPlayVisiblePercent = Integer.parseInt(serverExtras.get(PLAY_VISIBLE_PERCENT));
                 mPauseVisiblePercent = Integer.parseInt(serverExtras.get(PAUSE_VISIBLE_PERCENT));
-                mImpressionMinVisiblePercent =
-                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
                 mImpressionVisibleMs = Integer.parseInt(serverExtras.get(IMPRESSION_VISIBLE_MS));
                 mMaxBufferMs = Integer.parseInt(serverExtras.get(MAX_BUFFER_MS));
                 mHeadersAreValid = true;
@@ -920,6 +925,25 @@ public NativeVideoController createForId(final long id,
                 mHeadersAreValid = false;
             }
 
+            final String impressionVisiblePxString = serverExtras.get(IMPRESSION_MIN_VISIBLE_PX);
+            if (!TextUtils.isEmpty(impressionVisiblePxString)) {
+                try {
+                    mImpressionVisiblePx = Integer.parseInt(impressionVisiblePxString);
+                } catch (NumberFormatException e) {
+                    MoPubLog.d("Unable to parse impression min visible px from server extras.");
+                }
+            }
+            try {
+                mImpressionMinVisiblePercent =
+                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Unable to parse impression min visible percent from server extras.");
+                if (mImpressionVisiblePx == null || mImpressionVisiblePx < 0) {
+                    mHeadersAreValid = false;
+                }
+            }
+
+
             final String videoTrackers = serverExtras.get(VIDEO_TRACKERS_KEY);
             if (TextUtils.isEmpty(videoTrackers)) {
                 return;
@@ -957,6 +981,11 @@ int getMaxBufferMs() {
             return mMaxBufferMs;
         }
 
+        @Nullable
+        Integer getImpressionVisiblePx() {
+            return mImpressionVisiblePx;
+        }
+
         JSONObject getVideoTrackers() {
             return mVideoTrackers;
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 0b7c6d0b..eb3a94ff 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -422,7 +422,7 @@ public void setColorFilter(ColorFilter cf) { }
         public int getOpacity() {
             return PixelFormat.UNKNOWN;
         }
-    };
+    }
 
     @Deprecated
     @VisibleForTesting
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index 63ba869e..206d606f 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -49,6 +49,7 @@
 import com.mopub.common.event.Event;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.RepeatingHandlerRunnable;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
@@ -311,6 +312,11 @@ public void onLoadingChanged(boolean isLoading) {}
     @Override
     public void onPlayerStateChanged(final boolean playWhenReady, final int newState) {
         if (newState == STATE_ENDED && mFinalFrame == null) {
+            if (mExoPlayer == null || mSurface == null || mTextureView == null) {
+                MoPubLog.w("onPlayerStateChanged called afer view has been recycled.");
+                return;
+            }
+
             mFinalFrame = new BitmapDrawable(mContext.getResources(), mTextureView.getBitmap());
             mNativeVideoProgressRunnable.requestStop();
         }
@@ -525,6 +531,7 @@ public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
         int totalRequiredPlayTimeMs;
         int totalQualifiedPlayCounter;
         boolean isTracked;
+        Integer minimumVisiblePx;
     }
 
     static class NativeVideoProgressRunnable extends RepeatingHandlerRunnable {
@@ -612,7 +619,7 @@ void checkImpressionTrackers(final boolean forceTrigger) {
                     continue;
                 }
                 if (forceTrigger || mVisibilityChecker.isVisible(mTextureView, mTextureView,
-                        event.minimumPercentageVisible)) {
+                        event.minimumPercentageVisible, event.minimumVisiblePx)) {
                     event.totalQualifiedPlayCounter += mUpdateIntervalMillis;
                     if (forceTrigger ||
                             event.totalQualifiedPlayCounter >= event.totalRequiredPlayTimeMs) {
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
index 62dd02db..7298bf8c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -25,6 +25,7 @@
     private boolean mIsLoaded;
     @Nullable private String mRewardedAdCurrencyName;
     private int mRewardedAdCurrencyAmount;
+    @Nullable protected String mAdUnitId;
 
     @Nullable
     @Override
@@ -84,6 +85,13 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                             MoPubReward.DEFAULT_REWARD_AMOUNT);
             mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
         }
+
+        final Object adUnitId = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
+        if (adUnitId instanceof String) {
+            mAdUnitId = (String) adUnitId;
+        } else {
+            MoPubLog.d("Unable to set ad unit for rewarded ad.");
+        }
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
index 6af773a2..963ec1cb 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -16,7 +16,7 @@
  */
 public class MoPubRewardedPlayable extends MoPubRewardedAd {
 
-    @NonNull private static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
+    @NonNull static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
     @Nullable private RewardedMraidInterstitial mRewardedMraidInterstitial;
 
     public MoPubRewardedPlayable() {
@@ -40,7 +40,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return MOPUB_REWARDED_PLAYABLE_ID;
+        return mAdUnitId != null ? mAdUnitId : MOPUB_REWARDED_PLAYABLE_ID;
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index e85a0e92..ca70f8b3 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -15,7 +15,7 @@
  */
 public class MoPubRewardedVideo extends MoPubRewardedAd {
 
-    @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
+    @NonNull static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
 
     @Nullable private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
 
@@ -26,7 +26,7 @@ public MoPubRewardedVideo() {
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return MOPUB_REWARDED_VIDEO_ID;
+        return mAdUnitId != null ?  mAdUnitId : MOPUB_REWARDED_VIDEO_ID;
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
index a5bf95a0..5855cc69 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -26,8 +26,8 @@
 import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class RewardedMraidActivity extends MraidActivity {
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index 930c1c76..7f6f071d 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -23,7 +23,7 @@ android.libraryVariants.all { variant ->
 
     task.dependsOn variant.javaCompile
     task.from variant.javaCompile.destinationDir
-    artifacts.add('archives', task);
+    artifacts.add('archives', task)
 }
 
 android.libraryVariants.all { variant ->
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 76fb8e0b..1da200c9 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -11,7 +11,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.17.0'
+project.version = '4.19.0'
 
 android {
     compileSdkVersion 26
@@ -20,7 +20,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 55
+        versionCode 57
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 1c5c87c1..208a5002 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.17.0+kit
+fabric-version=4.19.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
new file mode 100644
index 00000000..73423b79
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
@@ -0,0 +1,310 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.view.View;
+import android.view.ViewParent;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowSystemClock;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityChecker;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityTrackerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class BannerVisibilityTrackerTest {
+    private static final int MIN_VISIBLE_DIPS = 1;
+    private static final int MIN_VISIBLE_MILLIS = 0;
+
+    private Activity activity;
+    private BannerVisibilityTracker subject;
+    private BannerVisibilityChecker visibilityChecker;
+    private Handler visibilityHandler;
+
+    private View mockView;
+    @Mock
+    private BannerVisibilityTrackerListener visibilityTrackerListener;
+
+    @Before
+    public void setUp() throws Exception {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        subject.setBannerVisibilityTrackerListener(visibilityTrackerListener);
+
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityHandler = subject.getVisibilityHandler();
+
+        // XXX We need this to ensure that our SystemClock starts
+        ShadowSystemClock.uptimeMillis();
+    }
+
+    @Test
+    public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mOnPreDrawListener).isNotNull();
+        verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity mockActivity = mock(Activity.class);
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(mockActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(false);
+
+        subject = new BannerVisibilityTracker(mockActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+        View rootView = mock(View.class);
+
+        when(mockView.getContext()).thenReturn(activity.getApplicationContext());
+        when(mockView.getRootView()).thenReturn(rootView);
+        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), rootView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void destroy_shouldRemoveListenerFromDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        subject.destroy();
+
+        assertThat(visibilityHandler.hasMessages(0)).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+        verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+        assertThat(subject.getBannerVisibilityTrackerListener()).isNull();
+    }
+
+    // BannerVisibilityRunnable Tests
+    @Test
+    public void visibilityRunnable_run_withViewVisibleForAtLeastMinDuration_shouldCallOnVisibilityChangedCallback_shouldMarkImpTrackerAsFired_shouldNotScheduleVisibilityCheck() throws Exception {
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isTrue();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+    }
+
+    @Test
+    public void visibilityRunnable_run_withViewNotVisible_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        when(mockView.getVisibility()).thenReturn(View.INVISIBLE);
+
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    @Test
+    public void visibilityRunnable_run_witViewVisibleForLessThanMinDuration_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    // BannerVisibilityChecker Tests
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeNotSetYet_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeGreaterThanMinTimeViewed_shouldReturnTrue() throws Exception {
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 0 ms as defined by constant MIN_VISIBLE_MILLIS
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isTrue();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeLessThanMinTimeViewed_shouldReturnFalse() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 1 sec, should return false since we are checking immediately before 1 sec elapses
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasMoreVisibleDipsThanMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 2, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasExactlyMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasLessVisibleDipsThanMinVisibleDips_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
+        View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+
+        reset(view);
+        view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroWidth_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 0, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroHeight_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 0, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.isVisible(null, null)).isFalse();
+    }
+
+    static View createViewMock(final int visibility,
+            final int visibleWidth,
+            final int visibleHeight,
+            final int viewWidth,
+            final int viewHeight,
+            final boolean isParentSet,
+            final boolean isOnScreen) {
+        View view = mock(View.class);
+        when(view.getContext()).thenReturn(new Activity());
+        when(view.getVisibility()).thenReturn(visibility);
+
+        when(view.getGlobalVisibleRect(any(Rect.class)))
+                .thenAnswer(new Answer<Boolean>() {
+                    @Override
+                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
+                        Object[] args = invocationOnMock.getArguments();
+                        Rect rect = (Rect) args[0];
+                        rect.set(0, 0, visibleWidth, visibleHeight);
+                        return isOnScreen;
+                    }
+                });
+
+        when(view.getWidth()).thenReturn(viewWidth);
+        when(view.getHeight()).thenReturn(viewHeight);
+
+        if (isParentSet) {
+            when(view.getParent()).thenReturn(mock(ViewParent.class));
+        }
+
+        when(view.getViewTreeObserver()).thenCallRealMethod();
+
+        return view;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
index 89651a0a..02e3b6d9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
@@ -1,6 +1,5 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.os.Handler;
 
 import com.mopub.common.ExternalViewabilitySessionManager;
@@ -10,7 +9,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.util.Map;
