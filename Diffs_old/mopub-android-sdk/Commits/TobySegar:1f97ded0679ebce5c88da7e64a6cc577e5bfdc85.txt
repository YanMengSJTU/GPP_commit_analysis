diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 511c1786..f7d27bd8 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -5,7 +5,10 @@ repositories {
         dirs './libs'
     }
     google()
+    //maven { url 'https://s3.amazonaws.com/moat-sdk-builds'}
     maven { url "https://maven.google.com" }
+    jcenter() // includes the MoPub SDK and AVID library
+    maven { url "http://dl.bintray.com/ironsource-mobile/android-adapters"}
 }
 //FACEBOOK
 //https://mvnrepository.com/artifact/com.facebook.android/audience-network-sdk
@@ -22,16 +25,30 @@ dependencies {
 //    }
     compile('com.mopub:libAvid-mopub:3.6.4')
     //https://s3.amazonaws.com/moat-sdk-builds/com/moat/analytics/mobile/mpub/moat-mobile-app-kit/2.4.5/moat-mobile-app-kit-2.4.5.aar
-    //compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
+    //implementation 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
     //We get this locally because s3.amazonaws suck balls
-    compile project(':moat-mobile-app-kit-2.4.5')
+    //compile project(':moat-mobile-app-kit-2.4.5')
 
     compile 'com.mopub.volley:mopub-volley:2.0.0'
     compile project(':base')
     compile 'com.google.android.gms:play-services-ads:15.0.1'
     compile project(':unity-ads')
-    compile 'com.facebook.android:audience-network-sdk:4.+'
     compile 'com.flurry.android:ads:11.1.1@aar'
+
+
+
+// AppLovin
+    compile 'com.applovin:applovin-sdk:8.1.0'
+
+// ironSource
+    compile files('libs/mediationsdk-6.7.11@jar')
+
+// Facebook Audience Network
+    compile 'com.facebook.android:audience-network-sdk:5.0.0'
+
+    // flurry ads
+    compile 'com.flurry.android:ads:10.1.0@aar'
+
 }
 
 project.description = 'MoPub Android SDK - Base'
diff --git a/mopub-sdk/mopub-sdk-base/libs/applovin-sdk-8.0.2.jar b/mopub-sdk/mopub-sdk-base/libs/applovin-sdk-8.0.2.jar
deleted file mode 100644
index ef753775..00000000
Binary files a/mopub-sdk/mopub-sdk-base/libs/applovin-sdk-8.0.2.jar and /dev/null differ
diff --git a/mopub-sdk/mopub-sdk-base/libs/mediationsdk-6.7.11.jar b/mopub-sdk/mopub-sdk-base/libs/mediationsdk-6.7.11.jar
new file mode 100644
index 00000000..674d80d5
Binary files /dev/null and b/mopub-sdk/mopub-sdk-base/libs/mediationsdk-6.7.11.jar differ
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
index 5704eeb3..3c65c7c9 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
@@ -18,10 +18,9 @@
 import com.applovin.sdk.AppLovinPrivacySettings;
 import com.applovin.sdk.AppLovinSdk;
 import com.applovin.sdk.AppLovinSdkSettings;
+import com.mojang.base.Logger;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.privacy.PersonalInfoManager;
-import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
 
 import java.util.HashMap;
@@ -29,13 +28,13 @@
 import java.util.Map;
 import java.util.Queue;
 
-public class AppLovinInterstitial extends CustomEventInterstitial implements AppLovinAdLoadListener, AppLovinAdDisplayListener, AppLovinAdClickListener, AppLovinAdVideoPlaybackListener {
+public class AppLovinInterstitial extends com.mopub.mobileads.CustomEventInterstitial implements AppLovinAdLoadListener, AppLovinAdDisplayListener, AppLovinAdClickListener, AppLovinAdVideoPlaybackListener {
 
     private static final Handler UI_HANDLER = new Handler(Looper.getMainLooper());
     private static final String DEFAULT_ZONE = "";
 
-    private AppLovinSdk sdk;
-    private CustomEventInterstitialListener listener;
+    public AppLovinSdk sdk;
+    private com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener listener;
     private Context context;
 
     // A map of Zone -> Queue of `AppLovinAd`s to be shared by instances of the custom event.
@@ -51,7 +50,9 @@
     //
 
     @Override
-    public void loadInterstitial(final Context context, final CustomEventInterstitialListener listener, final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+    public void loadInterstitial(final Context context, final com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener listener, final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+
+        setAutomaticImpressionAndClickTracking(false);
 
         // Pass the user consent from the MoPub SDK to AppLovin as per GDPR
         boolean canCollectPersonalInfo = MoPub.canCollectPersonalInformation();
@@ -62,7 +63,11 @@ public void loadInterstitial(final Context context, final CustomEventInterstitia
         // SDK versions BELOW 7.2.0 require a instance of an Activity to be passed in as the context
         if (AppLovinSdk.VERSION_CODE < 720 && !(context instanceof Activity)) {
             MoPubLog.d("Unable to request AppLovin banner. Invalid context provided.");
-            listener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            if (listener != null) {
+                listener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            }
+
 
             return;
         }
@@ -107,7 +112,10 @@ public void showInterstitial() {
             interstitialAd.showAndRender(preloadedAd);
         } else {
             MoPubLog.d("Failed to show an AppLovin interstitial before one was loaded");
-            listener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+
+            if (listener != null) {
+                listener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            }
         }
     }
 
@@ -134,7 +142,9 @@ public void adReceived(final AppLovinAd ad) {
             @Override
             public void run() {
                 try {
-                    listener.onInterstitialLoaded();
+                    if (listener != null) {
+                        listener.onInterstitialLoaded();
+                    }
                 } catch (Throwable th) {
                     MoPubLog.e("Unable to notify listener of successful ad load.", th);
                 }
@@ -150,7 +160,9 @@ public void failedToReceiveAd(final int errorCode) {
             @Override
             public void run() {
                 try {
-                    listener.onInterstitialFailed(toMoPubErrorCode(errorCode));
+                    if (listener != null) {
+                        listener.onInterstitialFailed(toMoPubErrorCode(errorCode));
+                    }
                 } catch (Throwable th) {
                     MoPubLog.e("Unable to notify listener of failure to receive ad.", th);
                 }
@@ -165,13 +177,20 @@ public void run() {
     @Override
     public void adDisplayed(final AppLovinAd appLovinAd) {
         MoPubLog.d("Interstitial displayed");
-        listener.onInterstitialShown();
+
+        if (listener != null) {
+            listener.onInterstitialShown();
+            listener.onInterstitialImpression();
+        }
     }
 
     @Override
     public void adHidden(final AppLovinAd appLovinAd) {
         MoPubLog.d("Interstitial dismissed");
-        listener.onInterstitialDismissed();
+
+        if (listener != null) {
+            listener.onInterstitialDismissed();
+        }
     }
 
     //
@@ -181,7 +200,10 @@ public void adHidden(final AppLovinAd appLovinAd) {
     @Override
     public void adClicked(final AppLovinAd appLovinAd) {
         MoPubLog.d("Interstitial clicked");
-        listener.onLeaveApplication();
+
+        if (listener != null) {
+            listener.onLeaveApplication();
+        }
     }
 
     //
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
index c356071a..888fa54a 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
@@ -55,6 +55,9 @@ protected void loadInterstitial(final Context context,
                                     final CustomEventInterstitialListener customEventInterstitialListener,
                                     final Map<String, Object> localExtras,
                                     final Map<String, String> serverExtras) {
+
+        setAutomaticImpressionAndClickTracking(false);
+
         MoPubLog.d("Loading Facebook interstitial");
         mInterstitialListener = customEventInterstitialListener;
 
@@ -160,6 +163,9 @@ public void onAdClicked(final Ad ad) {
     @Override
     public void onLoggingImpression(Ad ad) {
         MoPubLog.d("Facebook interstitial ad logged impression.");
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialImpression();
+        }
     }
 
     @Override
@@ -178,10 +184,4 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
     private void cancelExpirationTimer() {
         mHandler.removeCallbacks(mAdExpiration);
     }
-
-    @Deprecated
-        // for testing
-    InterstitialAd getInterstitialAd() {
-        return mFacebookInterstitial;
-    }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryCustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryCustomEventInterstitial.java
index 9cb73ae8..ac562eae 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryCustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryCustomEventInterstitial.java
@@ -4,9 +4,11 @@
 import android.content.Context;
 import android.text.TextUtils;
 import android.util.Log;
+
 import com.flurry.android.ads.FlurryAdErrorType;
 import com.flurry.android.ads.FlurryAdInterstitial;
 import com.flurry.android.ads.FlurryAdInterstitialListener;
+import com.mopub.ads.adapters.FlurryAgentWrapper;
 
 import java.util.Map;
 
@@ -55,6 +57,8 @@ protected void loadInterstitial(Context context,
             return;
         }
 
+        setAutomaticImpressionAndClickTracking(false);
+
         mContext = context;
         mListener = listener;
 
@@ -142,7 +146,9 @@ public void onRendered(FlurryAdInterstitial adInterstitial) {
         public void onDisplay(FlurryAdInterstitial adInterstitial) {
             Log.d(LOG_TAG, "onDisplay: Flurry interstitial ad displayed");
 
-            // no-op
+            if (mListener != null) {
+                mListener.onInterstitialImpression();
+            }
         }
 
         @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/IronSourceInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/IronSourceInterstitial.java
new file mode 100644
index 00000000..0831d3d6
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/IronSourceInterstitial.java
@@ -0,0 +1,305 @@
+package com.mopub.ads.adapters;
+import android.app.Activity;
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import com.ironsource.mediationsdk.IronSource;
+import com.ironsource.mediationsdk.integration.IntegrationHelper;
+import com.ironsource.mediationsdk.logger.IronSourceError;
+import com.ironsource.mediationsdk.sdk.ISDemandOnlyInterstitialListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubLifecycleManager;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+public class IronSourceInterstitial extends CustomEventInterstitial implements ISDemandOnlyInterstitialListener {
+
+    /**
+     * private vars
+     */
+
+    // Configuration keys
+    private static final String APPLICATION_KEY = "applicationKey";
+    private static final String PLACEMENT_KEY = "placementName";
+    private static final String INSTANCE_ID_KEY = "instanceId";
+    private static final String MEDIATION_TYPE = "mopub";
+    private static final String ADAPTER_VERSION = "300";
+
+
+    // This is the instance id used inside ironSource SDK
+    private String mInstanceId = "0";
+    // This is the placement name used inside ironSource SDK
+    private String mPlacementName = null;
+    private static boolean mInitInterstitialSuccessfully;
+    private static Handler sHandler;
+
+    private static CustomEventInterstitialListener mMoPubListener;
+
+    /**
+     * Mopub API
+     */
+
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String, Object> map0, Map<String, String> serverExtras) {
+        MoPubLifecycleManager.getInstance((Activity) context).addLifecycleListener(lifecycleListener);
+        // Pass the user consent from the MoPub SDK to ironSource as per GDPR
+        boolean canCollectPersonalInfo = MoPub.canCollectPersonalInformation();
+        IronSource.setConsent(canCollectPersonalInfo);
+
+        try {
+            mMoPubListener = customEventInterstitialListener;
+            sHandler = new Handler(Looper.getMainLooper());
+
+            if (!(context instanceof Activity)) {
+                // Context not an Activity context, log the reason for failure and fail the
+                // initialization.
+                MoPubLog.d("IronSource load interstitial must be called from an Activity context");
+                sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                return;
+            }
+
+            String applicationKey = "";
+
+            if (serverExtras != null) {
+                if (serverExtras.get(APPLICATION_KEY) != null) {
+                    applicationKey = serverExtras.get(APPLICATION_KEY);
+                }
+
+                if (serverExtras.get(PLACEMENT_KEY) != null) {
+                    mPlacementName = serverExtras.get(PLACEMENT_KEY);
+                }
+
+                if (serverExtras.get(INSTANCE_ID_KEY) != null) {
+                    if (!TextUtils.isEmpty(serverExtras.get(INSTANCE_ID_KEY))) {
+                        mInstanceId = serverExtras.get(INSTANCE_ID_KEY);
+                    }
+                }
+            } else {
+                MoPubLog.d("serverExtras is null. Make sure you have entered ironSource's application and instance keys on the MoPub dashboard");
+                sendMoPubInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            }
+
+            if (!TextUtils.isEmpty(applicationKey)) {
+                initIronSourceSDK(((Activity) context), applicationKey);
+                loadInterstitial();
+            } else {
+                MoPubLog.d("IronSource initialization failed, make sure that 'applicationKey' server parameter is added");
+                sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+            }
+
+        } catch (Exception e) {
+            MoPubLog.d(e.toString());
+            sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        try {
+            if (IronSource.isISDemandOnlyInterstitialReady(mInstanceId)) {
+                if (TextUtils.isEmpty(mPlacementName)) {
+                    IronSource.showISDemandOnlyInterstitial(mInstanceId);
+                } else {
+                    IronSource.showISDemandOnlyInterstitial(mInstanceId, mPlacementName);
+                }
+            } else {
+                sendMoPubInterstitialFailed(MoPubErrorCode.NO_FILL);
+            }
+        } catch (Exception e) {
+            MoPubLog.d(e.toString());
+            sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mMoPubListener = null;
+    }
+
+    /**
+     * Class Helper Methods
+     **/
+
+    private void initIronSourceSDK(Activity activity, String appKey) {
+        IronSource.setISDemandOnlyInterstitialListener(this);
+
+        if (!mInitInterstitialSuccessfully) {
+            MoPubLog.d("IronSource initialization succeeded for Interstitial");
+            IronSource.setMediationType(MEDIATION_TYPE + ADAPTER_VERSION);
+            IronSource.initISDemandOnly(activity, appKey, IronSource.AD_UNIT.INTERSTITIAL);
+            mInitInterstitialSuccessfully = true;
+        }
+    }
+
+    private void loadInterstitial() {
+        if (IronSource.isISDemandOnlyInterstitialReady(mInstanceId)) {
+            onInterstitialAdReady(mInstanceId);
+        } else {
+            IronSource.loadISDemandOnlyInterstitial(mInstanceId);
+        }
+    }
+
+    private void sendMoPubInterstitialFailed(final MoPubErrorCode errorCode) {
+        sHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                if (mMoPubListener != null) {
+                    mMoPubListener.onInterstitialFailed(errorCode);
+                }
+            }
+        });
+    }
+
+    private MoPubErrorCode getMoPubErrorMessage(IronSourceError ironSourceError) {
+        if (ironSourceError == null) {
+            return MoPubErrorCode.INTERNAL_ERROR;
+        }
+        switch (ironSourceError.getErrorCode()) {
+            case IronSourceError.ERROR_CODE_NO_CONFIGURATION_AVAILABLE:
+            case IronSourceError.ERROR_CODE_KEY_NOT_SET:
+            case IronSourceError.ERROR_CODE_INVALID_KEY_VALUE:
+            case IronSourceError.ERROR_CODE_INIT_FAILED:
+                return MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+            case IronSourceError.ERROR_CODE_USING_CACHED_CONFIGURATION:
+                return MoPubErrorCode.VIDEO_CACHE_ERROR;
+            case IronSourceError.ERROR_CODE_NO_ADS_TO_SHOW:
+                return MoPubErrorCode.NETWORK_NO_FILL;
+            case IronSourceError.ERROR_CODE_GENERIC:
+                return MoPubErrorCode.INTERNAL_ERROR;
+            case IronSourceError.ERROR_NO_INTERNET_CONNECTION:
+                return MoPubErrorCode.NO_CONNECTION;
+            default:
+                return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+
+    /**
+     * IronSource Interstitial Listener
+     **/
+
+    @Override
+    public void onInterstitialAdReady(String instanceId) {
+        MoPubLog.d("IronSource Interstitial loaded successfully for instance " + mInstanceId);
+        if (!mInstanceId.equals(instanceId)) {
+            return;
+        }
+        sHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                if (mMoPubListener != null) {
+                    mMoPubListener.onInterstitialLoaded();
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onInterstitialAdLoadFailed(String instanceId, IronSourceError ironSourceError) {
+        MoPubLog.d("IronSource Interstitial failed to load for instance " + mInstanceId + " Error: " + ironSourceError.getErrorMessage());
+
+        if (!mInstanceId.equals(instanceId)) {
+            return;
+        }
+        sendMoPubInterstitialFailed(getMoPubErrorMessage(ironSourceError));
+    }
+
+    @Override
+    public void onInterstitialAdOpened(String instanceId) {
+        MoPubLog.d("IronSource Interstitial opened ad for instance " + instanceId);
+
+        sHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                if (mMoPubListener != null) {
+                    mMoPubListener.onInterstitialShown();
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onInterstitialAdClosed(String instanceId) {
+        MoPubLog.d("IronSource Interstitial closed ad for instance " + instanceId);
+
+        sHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                if (mMoPubListener != null) {
+                    mMoPubListener.onInterstitialDismissed();
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onInterstitialAdShowSucceeded(String instanceId) {
+        // not in use in MoPub mediation (we use the onInterstitialAdOpened for saying that the ad was shown)
+    }
+
+    @Override
+    public void onInterstitialAdShowFailed(String instanceId, IronSourceError ironSourceError) {
+        MoPubLog.d("IronSource Interstitial failed to show for instance " + instanceId);
+        sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+    }
+
+    @Override
+    public void onInterstitialAdClicked(String instanceId) {
+        MoPubLog.d("IronSource Interstitial clicked ad for instance " + instanceId);
+        sHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                if (mMoPubListener != null) {
+                    mMoPubListener.onInterstitialClicked();
+                }
+            }
+        });
+    }
+
+    private static LifecycleListener lifecycleListener = new LifecycleListener() {
+        @Override
+        public void onCreate(@NonNull Activity activity) {
+        }
+
+        @Override
+        public void onStart(@NonNull Activity activity) {
+        }
+
+        @Override
+        public void onPause(@NonNull Activity activity) {
+            IronSource.onPause(activity);
+        }
+
+        @Override
+        public void onResume(@NonNull Activity activity) {
+            IronSource.onResume(activity);
+        }
+
+        @Override
+        public void onRestart(@NonNull Activity activity) {
+        }
+
+        @Override
+        public void onStop(@NonNull Activity activity) {
+        }
+
+        @Override
+        public void onDestroy(@NonNull Activity activity) {
+        }
+
+        @Override
+        public void onBackPressed(@NonNull Activity activity) {
+        }
+    };
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 156abbc2..b0a77091 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -11,7 +11,10 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubInterstitial;
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
 
 import java.util.Map;
