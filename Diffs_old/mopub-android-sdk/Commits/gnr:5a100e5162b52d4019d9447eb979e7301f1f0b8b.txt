diff --git a/build.gradle b/build.gradle
index 6410ab25..2f295a7f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:2.1.2'
     }
 }
 
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index ed5c8637..fe5153ea 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -7,7 +7,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:2.1.2'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
     }
 }
@@ -40,8 +40,8 @@ description = '''MoPub Android SDK'''
 version = '4.7.1'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion '23.0.2'
+    compileSdkVersion 24
+    buildToolsVersion '23.0.3'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
@@ -100,7 +100,7 @@ dependencies {
     compile 'com.android.support:support-v4:23.4.0'
     compile 'com.android.support:support-annotations:23.4.0'
     compile 'com.android.support:recyclerview-v7:23.4.0'
-    compile fileTree(dir: 'libs', include: 'amazon-ads-5.6.20.jar')
+    compile fileTree(dir: 'libs', include: 'amazon-ads-5.7.2.jar')
     compile 'com.mopub.volley:mopub-volley:1.1.0'
     compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
     // anchor: additional dependencies
diff --git a/mopub-sdk/libs/amazon-ads-5.6.20.jar b/mopub-sdk/libs/amazon-ads-5.6.20.jar
deleted file mode 100644
index b9ac99d0..00000000
Binary files a/mopub-sdk/libs/amazon-ads-5.6.20.jar and /dev/null differ
diff --git a/mopub-sdk/libs/amazon-ads-5.7.2.jar b/mopub-sdk/libs/amazon-ads-5.7.2.jar
new file mode 100644
index 00000000..26f4bd89
Binary files /dev/null and b/mopub-sdk/libs/amazon-ads-5.7.2.jar differ
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AmazonBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AmazonBanner.java
index e723a541..0c2f0c59 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AmazonBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AmazonBanner.java
@@ -38,7 +38,7 @@ public void loadBanner(Activity activity, CustomEventBannerListener bannerListen
         float screenWidth = activity.getApplicationContext().getResources().getDisplayMetrics().widthPixels;
         screenWidth = screenWidth / scale;
 
-        AdSize adSize = AdSize.SIZE_300x50;
+        AdSize adSize = AdSize.SIZE_320x50;
         int adWidth = 320;
         int adHeight = 50;
 
@@ -70,8 +70,12 @@ else if(screenWidth >= 600) {
     @Override
 	public void onInvalidate() {
         Log.d("AmazonBanner", "onInvalidate()");
-//        mAmazonAd.destroy();
-//        mAmazonAd = null;
+        if(mAmazonAd != null) {
+            mAmazonAd.setListener(null);
+            mAmazonAd.destroy();
+            mAmazonAd = null;
+        }
+        mBannerListener = null;
     }
 
     /*
@@ -95,13 +99,17 @@ public void onAdFailedToLoad(Ad view, AdError error) {
 		}
 		
 		Log.d("AmazonBanner", "onAdFailedToLoad()");
-		mBannerListener.onBannerFailed(moPubCode);
+        if(mBannerListener != null) {
+            mBannerListener.onBannerFailed(moPubCode);
+        }
 	}
 
 	@Override
 	public void onAdLoaded(Ad view, AdProperties adProperties) {
         Log.d("AmazonBanner", "onAdLoaded()");
-		mBannerListener.onBannerLoaded(mAmazonAd);
+        if(mBannerListener != null) {
+            mBannerListener.onBannerLoaded(mAmazonAd);
+        }
 	}
 
 	@Override
@@ -118,4 +126,4 @@ public void onAdDismissed(Ad view) {
 	public void onAdExpanded(Ad view) {
 		Log.d("AmazonBanner", "onAdExpanded()");
 	}
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
deleted file mode 100644
index 2e021297..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
+++ /dev/null
@@ -1,308 +0,0 @@
-package com.mopub.common;
-
-
-import com.mopub.common.Preconditions.NoThrow;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class PreconditionsTest {
-
-    @Before
-    public void setUp() {
-        NoThrow.setStrictMode(false);
-    }
-    
-    @Test
-    public void checkArgument_success_shouldNotThrow() {
-        Preconditions.checkArgument(true);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void checkArgument_failure_shouldThrowIllegalArgumentException() {
-        Preconditions.checkArgument(false);
-    }
-
-    @Test
-    public void checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, null);
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkState_success_shouldNotThrow() {
-        Preconditions.checkArgument(true);
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void checkState_failure_shouldThrowIllegalStateException() {
-        Preconditions.checkState(false);
-    }
-
-    @Test
-    public void checkState_failure_withMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, null);
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkNotNull_success_shouldNotThrow() {
-        Preconditions.checkNotNull(new Object());
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void checkNotNull_failure_shouldThrowNullPointerException() {
-        Preconditions.checkNotNull(null);
-    }
-
-    @Test
-    public void checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, "message");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, null);
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkUiThread_success_shouldNotThrow() {
-        Preconditions.checkUiThread();
-    }
-
-    @Test
-    public void noThrow_checkArgument_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkArgument(true)).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkArgument_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkArgument(false)).isFalse();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void noThrow_strictMode_checkArgument_failure_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkArgument(false);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, null);
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkState_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkArgument(true)).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkState_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkState(false)).isFalse();
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void noThrow_strictMode_checkState_failure_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkState(false);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, null);
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkNotNull_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkNotNull(new Object())).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkNotNull_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkNotNull(null)).isFalse();
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void noThrow_strictMode_checkNotNull_failure_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkNotNull(null);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, "message");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, null);
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkUiThread_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkUiThread()).isTrue();
-    }
-
-    @Test
-    public void checkArgument_failure_withInvalidMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "messages: ", "message1", "message2");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("messages: ");
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
deleted file mode 100644
index 8afeb57d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.common;
-
-import android.support.annotation.Nullable;
-
-import com.mopub.volley.Request;
-
-import org.mockito.ArgumentMatcher;
-
-/**
- * A Mockito Request Matcher, used in tests to allow verifying that Volley Requests match a given
- * url.
- *
- * "verify(mock).add(argThat(VolleyRequestMatcher.isUrl("testUrl")));"
- */
-public class VolleyRequestMatcher extends ArgumentMatcher<Request> {
-
-     @Nullable private final String mUrl;
-
-     private VolleyRequestMatcher(@Nullable final String url) {
-         mUrl = url;
-     }
-
-     public static VolleyRequestMatcher isUrl(@Nullable String url) {
-         return new VolleyRequestMatcher(url);
-     }
-
-     @Override
-     public boolean matches(final Object that) {
-         return that instanceof Request
-                 && ((this.mUrl == null && ((Request) that).getUrl() == null)
-                    || ((Request) that).getUrl().equals(mUrl));
-     }
- }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
deleted file mode 100644
index 3c8af8cd..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class DrawablesTest {
-    @Test
-    public void createDrawable_shouldNotCacheDrawables() throws Exception {
-        assertThat(Drawables.BACKGROUND.createDrawable(new Activity()))
-                .isNotSameAs(Drawables.BACKGROUND.createDrawable(new Activity()));
-    }
-
-    @Test
-    public void getBitmap_shouldCacheBitmap() throws Exception {
-        assertThat(Drawables.BACKGROUND.getBitmap())
-                .isSameAs(Drawables.BACKGROUND.getBitmap());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
deleted file mode 100644
index 495e44e6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.common.util;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class StreamsTest {
-    @Test
-    public void copyStream_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
-        FileInputStream in = new FileInputStream(inFile);
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        Streams.copyContent(in, out);
-
-        assertThat(inFile.length()).isEqualTo(tempFile.length());
-    }
-
-    @Test
-    public void copyStream_withMaxBytes_belowThreshold_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
-        FileInputStream in = new FileInputStream(inFile);
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        Streams.copyContent(in, out, 1000000);
-
-        assertThat(inFile.length()).isEqualTo(tempFile.length());
-    }
-
-    @Test
-    public void copyStream_withMaxBytes_aboveThreshold_shouldThrowIOException() throws Exception {
-        InputStream in = new ByteArrayInputStream("this is a pretty long stream".getBytes());
-
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        try {
-            Streams.copyContent(in, out, 10);
-            fail("Expected IOException.");
-        } catch (IOException e) {
-            // pass
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
deleted file mode 100644
index 585c5323..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import android.os.AsyncTask;
-
-import com.mopub.common.util.AsyncTasks;
-
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-
-import java.util.Arrays;
-import java.util.List;
-
-@Implements(value = AsyncTasks.class, callThroughByDefault = false)
-public class ShadowAsyncTasks {
-    private static boolean sWasCalled;
-    private static AsyncTask<?, ?, ?> sAsyncTask;
-    private static List<?> sParams;
-
-    @Implementation
-    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params)
-            throws IllegalArgumentException, IllegalStateException {
-        sWasCalled = true;
-        sAsyncTask = asyncTask;
-        sParams = Arrays.asList(params);
-    }
-
-    public static boolean wasCalled() {
-        return sWasCalled;
-    }
-
-    public static AsyncTask<?, ?, ?> getLatestAsyncTask() {
-        return sAsyncTask;
-    }
-
-    public static List<?> getLatestParams() {
-        return sParams;
-    }
-
-    public static void reset() {
-        sWasCalled = false;
-        sAsyncTask = null;
-        sParams = null;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
deleted file mode 100644
index 154d12d3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import com.mopub.common.util.DateAndTime;
-
-import java.util.Date;
-import java.util.TimeZone;
-
-public class TestDateAndTime extends DateAndTime {
-    private TimeZone timeZone = TimeZone.getTimeZone("GMT-7");
-    private Date now = new Date(1365553573L);
-
-    public static TestDateAndTime getInstance() {
-        return (TestDateAndTime) instance;
-    }
-
-    public void setNow(Date now) {
-        this.now = now;
-    }
-
-    public void setTimeZone(TimeZone timeZone) {
-        this.timeZone = timeZone;
-    }
-
-    @Override
-    public TimeZone internalLocalTimeZone() {
-        return timeZone;
-    }
-
-    @Override
-    public Date internalNow() {
-        return now;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
deleted file mode 100644
index 49d11389..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import com.mopub.common.factories.MethodBuilderFactory;
-
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static org.mockito.Mockito.mock;
-
-public class TestMethodBuilderFactory extends MethodBuilderFactory {
-    private MethodBuilder mockMethodBuilder = mock(MethodBuilder.class);
-
-    public static MethodBuilder getSingletonMock() {
-        return getTestFactory().mockMethodBuilder;
-    }
-
-    private static TestMethodBuilderFactory getTestFactory() {
-        return ((TestMethodBuilderFactory) MethodBuilderFactory.instance);
-    }
-
-    @Override
-    public MethodBuilder internalCreate(Object object, String methodName) {
-        return mockMethodBuilder;
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
deleted file mode 100644
index e5832e88..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.mopub.mobileads;
-
-import org.junit.Ignore;
-import org.junit.Test;
-
-@Ignore
-public class ResponseBodyInterstitialTest {
-    protected ResponseBodyInterstitial subject;
-
-    @Test
-    public void onInvalidate_beforeLoadInterstitialIsCalled_shouldNotBlowUp() throws Exception {
-        // Have not called subject.loadInterstitial()
-
-        subject.onInvalidate();
-
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
deleted file mode 100644
index ddaab4e5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.util.Streams;
-
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-
-// note: keep this in test/support folder. this is not intended to be of Utility usage
-public class FileUtils {
-    public static void copyFile(String sourceFile, String destinationFile) {
-        try {
-            Streams.copyContent(new FileInputStream(sourceFile), new FileOutputStream(destinationFile));
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
deleted file mode 100644
index eeee2c93..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.view.MotionEvent;
-
-public class GestureUtils {
-    public static MotionEvent createActionMove(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, y, 0);
-    }
-
-    public static MotionEvent createActionDown(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_DOWN, x, y, 0);
-    }
-
-    public static MotionEvent createActionUp(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, x, y, 0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
deleted file mode 100644
index dae3c5f6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.util.Json;
-
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-public class JsonUtils {
-    // Assert that two shallow jsonStrings representing <String,String> maps are equal
-    public static void assertJsonStringMapsEqual(String a, String b) {
-        Map<String, String> mapA = Collections.emptyMap();
-        Map<String, String> mapB = Collections.emptyMap();
-
-        try {
-            mapA = Json.jsonStringToMap(a);
-        } catch (Exception e) {
-            fail("Unable to turn json into map: " + a);
-        }
-
-        try {
-            mapB = Json.jsonStringToMap(b);
-        } catch (Exception e) {
-            fail("Unable to turn json into map: " + b);
-        }
-
-        assertThat(mapA.size()).isEqualTo(mapB.size());
-
-        Set<String> keysA = mapA.keySet();
-        Set<String> keysB = mapB.keySet();
-        assertThat(keysA).isEqualTo(keysB);
-
-        for (final String key : keysA) {
-            assertThat(mapA.get(key)).isEqualTo(mapB.get(key));
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
deleted file mode 100644
index 7a4256e5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.telephony.TelephonyManager;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowTelephonyManager;
-
-@Implements(TelephonyManager.class)
-public class MoPubShadowTelephonyManager extends ShadowTelephonyManager {
-
-    private boolean mNeedsReadPhoneState;
-    private boolean mHasReadPhoneState;
-
-    public MoPubShadowTelephonyManager() {
-        mNeedsReadPhoneState = false;
-        mHasReadPhoneState = false;
-    }
-
-    /**
-     * Some Lenovo & other phones require READ_PHONE_STATE on getNetworkOperatorName().
-     */
-    public void setNeedsReadPhoneState(boolean needsReadPhoneState) {
-        mNeedsReadPhoneState = needsReadPhoneState;
-    }
-
-    @Override
-    public void setReadPhoneStatePermission(final boolean readPhoneStatePermission) {
-        // Robolectric hides its checkReadPhoneState method so we need to hack our own.
-        mHasReadPhoneState = readPhoneStatePermission;
-        super.setReadPhoneStatePermission(readPhoneStatePermission);
-    }
-
-    @Override
-    public String getNetworkOperatorName() {
-        if (!mNeedsReadPhoneState || mHasReadPhoneState) {
-            return super.getNetworkOperatorName();
-        } else {
-            throw new SecurityException("READ_PHONE_STATE is required.");
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
deleted file mode 100644
index 6ca5f842..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.AdViewControllerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestAdViewControllerFactory extends AdViewControllerFactory {
-    private AdViewController mockAdViewController = mock(AdViewController.class);
-
-    public static AdViewController getSingletonMock() {
-        return getTestFactory().mockAdViewController;
-    }
-
-    private static TestAdViewControllerFactory getTestFactory() {
-        return ((TestAdViewControllerFactory) instance);
-    }
-
-    @Override
-    protected AdViewController internalCreate(Context context, MoPubView moPubView) {
-        return mockAdViewController;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
deleted file mode 100644
index b6301488..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.CustomEventBannerAdapter;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
-
-import java.util.Map;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerAdapterFactory extends CustomEventBannerAdapterFactory {
-    private CustomEventBannerAdapter mockCustomEventBannerAdapter = mock(CustomEventBannerAdapter.class);
-    private MoPubView moPubView;
-    private String className;
-    private Map<String, String> classData;
-
-    public static CustomEventBannerAdapter getSingletonMock() {
-        return getTestFactory().mockCustomEventBannerAdapter;
-    }
-
-    private static TestCustomEventBannerAdapterFactory getTestFactory() {
-        return ((TestCustomEventBannerAdapterFactory) instance);
-    }
-
-    @Override
-    protected CustomEventBannerAdapter internalCreate(@NonNull final MoPubView moPubView,
-            @NonNull final String className,
-            @NonNull final Map<String, String> serverExtras,
-            final long broadcastIdentifier,
-            @NonNull final AdReport adReport) {
-        this.moPubView = moPubView;
-        this.className = className;
-        this.classData = serverExtras;
-        return mockCustomEventBannerAdapter;
-    }
-
-    public static MoPubView getLatestMoPubView() {
-        return getTestFactory().moPubView;
-    }
-
-    public static String getLatestClassName() {
-        return getTestFactory().className;
-    }
-
-    public static Map<String, String> getLatestClassData() {
-        return getTestFactory().classData;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
deleted file mode 100644
index ec88b419..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerFactory extends CustomEventBannerFactory{
-    private CustomEventBanner instance = mock(CustomEventBanner.class);
-
-    @Override
-    protected CustomEventBanner internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
deleted file mode 100644
index a392ad53..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.CustomEventInterstitialAdapter;
-import com.mopub.mobileads.MoPubInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-
-import java.util.Map;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialAdapterFactory extends CustomEventInterstitialAdapterFactory{
-    private CustomEventInterstitialAdapter mockCustomEventInterstitalAdapter = mock(CustomEventInterstitialAdapter.class);
-    private MoPubInterstitial latestMoPubInterstitial;
-    private String latestClassName;
-    private Map<String, String> latestClassData;
-
-    public static CustomEventInterstitialAdapter getSingletonMock() {
-        return getTestFactory().mockCustomEventInterstitalAdapter;
-    }
-
-    private static TestCustomEventInterstitialAdapterFactory getTestFactory() {
-        return ((TestCustomEventInterstitialAdapterFactory)instance);
-    }
-
-    public static MoPubInterstitial getLatestMoPubInterstitial() {
-        return getTestFactory().latestMoPubInterstitial;
-    }
-
-    public static String getLatestClassName() {
-        return getTestFactory().latestClassName;
-    }
-
-    public static Map<String, String> getLatestServerExtras() {
-        return getTestFactory().latestClassData;
-    }
-
-    @Override
-    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, Map<String, String> serverExtras, long broadcastIdentifier, AdReport adReport) {
-        latestMoPubInterstitial = moPubInterstitial;
-        latestClassName = className;
-        latestClassData = serverExtras;
-        return mockCustomEventInterstitalAdapter;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
deleted file mode 100644
index 2ca47147..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialFactory extends CustomEventInterstitialFactory {
-    private CustomEventInterstitial instance = mock(CustomEventInterstitial.class);
-
-    @Override
-    protected CustomEventInterstitial internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
deleted file mode 100644
index 84c91fc5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import android.webkit.WebSettings;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.HtmlBannerWebView;
-import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-public class TestHtmlBannerWebViewFactory extends HtmlBannerWebViewFactory {
-    private HtmlBannerWebView mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
-    private CustomEventBannerListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
-    private String latestClickthroughUrl;
-    private AdReport latestAdReport;
-
-    public TestHtmlBannerWebViewFactory() {
-        WebSettings webSettings = mock(WebSettings.class);
-        stub(mockHtmlBannerWebView.getSettings()).toReturn(webSettings);
-        stub(webSettings.getUserAgentString()).toReturn("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
-    }
-
-    public static HtmlBannerWebView getSingletonMock() {
-        return getTestFactory().mockHtmlBannerWebView;
-    }
-
-    private static TestHtmlBannerWebViewFactory getTestFactory() {
-        return (TestHtmlBannerWebViewFactory) instance;
-    }
-
-    @Override
-    public HtmlBannerWebView internalCreate(
-            Context context,
-            AdReport adReport,
-            CustomEventBannerListener customEventBannerListener,
-            boolean isScrollable,
-            String redirectUrl,
-            String clickthroughUrl) {
-        latestListener = customEventBannerListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
-        latestClickthroughUrl = clickthroughUrl;
-        latestAdReport = adReport;
-        return mockHtmlBannerWebView;
-    }
-
-    public static CustomEventBannerListener getLatestListener() {
-        return getTestFactory().latestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getTestFactory().latestClickthroughUrl;
-    }
-
-    public static AdReport getLatestAdReport() {
-        return getTestFactory().latestAdReport;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
deleted file mode 100644
index c9dc4c47..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.HtmlInterstitialWebView;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static org.mockito.Mockito.mock;
-
-public class TestHtmlInterstitialWebViewFactory extends HtmlInterstitialWebViewFactory {
-    private HtmlInterstitialWebView mockHtmlInterstitialWebView = mock(HtmlInterstitialWebView.class);
-
-    private CustomEventInterstitialListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
-    private String latestClickthroughUrl;
-
-    public static HtmlInterstitialWebView getSingletonMock() {
-        return getTestFactory().mockHtmlInterstitialWebView;
-    }
-
-    private static TestHtmlInterstitialWebViewFactory getTestFactory() {
-        return (TestHtmlInterstitialWebViewFactory) instance;
-    }
-
-    @Override
-    public HtmlInterstitialWebView internalCreate(Context context, AdReport adReport, CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
-        latestListener = customEventInterstitialListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
-        latestClickthroughUrl = clickthroughUrl;
-        return getTestFactory().mockHtmlInterstitialWebView;
-    }
-
-    public static CustomEventInterstitialListener getLatestListener() {
-        return getTestFactory().latestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getTestFactory().latestClickthroughUrl;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
deleted file mode 100644
index 971b61b2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.MoPubViewFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMoPubViewFactory extends MoPubViewFactory {
-    private final MoPubView mockMoPubView = mock(MoPubView.class);
-
-    public static MoPubView getSingletonMock() {
-        return getTestFactory().mockMoPubView;
-    }
-
-    private static TestMoPubViewFactory getTestFactory() {
-        return (TestMoPubViewFactory) instance;
-    }
-
-    @Override
-    protected MoPubView internalCreate(Context context) {
-        return mockMoPubView;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
deleted file mode 100644
index 511499fe..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.factories.MraidControllerFactory;
-import com.mopub.mraid.MraidController;
-import com.mopub.mraid.PlacementType;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMraidControllerFactory extends MraidControllerFactory {
-    private MraidController mockMraidController = mock(MraidController.class);
-
-    public static MraidController getSingletonMock() {
-        return getTestFactory().mockMraidController;
-    }
-
-    private static TestMraidControllerFactory getTestFactory() {
-        return ((TestMraidControllerFactory) MraidControllerFactory.instance);
-    }
-
-    @Override
-    protected MraidController internalCreate(@NonNull final Context context,
-            @NonNull AdReport adReport,
-            @NonNull final PlacementType placementType) {
-        return mockMraidController;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
deleted file mode 100644
index 5d143b2f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-// note: keep this in test/support folder. this is not intended to be of Utility usage
-public class ThreadUtils {
-    public static final long NETWORK_DELAY = 500;
-
-    public static void pause(long millis){
-        try {
-            Thread.sleep(millis);
-        } catch (InterruptedException ie){
-            // Ignore interrupts on this Thread.
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
deleted file mode 100644
index 61ac31e0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
+++ /dev/null
@@ -1,252 +0,0 @@
-package com.mopub.mobileads.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.xml.sax.InputSource;
-
-import java.io.StringReader;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class XmlUtilsTest {
-
-    // From Microsoft's sample xml documents page: https://msdn.microsoft.com/en-us/library/bb387026.aspx
-    private String testXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
-            "<aw:PurchaseOrders xmlns:aw=\"https://www.adventure-works.com\">\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99503\" aw:OrderDate=\"1999-10-20\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Ellen Adams</aw:Name>\n" +
-            "      <aw:Street>123 Maple Street</aw:Street>\n" +
-            "      <aw:City>Mill Valley</aw:City>\n" +
-            "      <aw:State>CA</aw:State>\n" +
-            "      <aw:Zip>10999</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Tai Yee</aw:Name>\n" +
-            "      <aw:Street>8 Oak Avenue</aw:Street>\n" +
-            "      <aw:City>Old Town</aw:City>\n" +
-            "      <aw:State>PA</aw:State>\n" +
-            "      <aw:Zip>95819</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:DeliveryNotes>Please leave packages in shed by driveway.</aw:DeliveryNotes>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AZ\">\n" +
-            "        <aw:ProductName>Lawnmower</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>148.95</aw:USPrice>\n" +
-            "        <aw:Comment>Confirm this is electric</aw:Comment>\n" +
-            "      </aw:Item>\n" +
-            "      <aw:Item aw:PartNumber=\"926-AA\">\n" +
-            "        <aw:ProductName>Baby Monitor</aw:ProductName>\n" +
-            "        <aw:Quantity>2</aw:Quantity>\n" +
-            "        <aw:USPrice>39.98</aw:USPrice>\n" +
-            "        <aw:ShipDate>1999-05-21</aw:ShipDate>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99505\" aw:OrderDate=\"1999-10-22\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Cristian Osorio</aw:Name>\n" +
-            "      <aw:Street>456 Main Street</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Cristian Osorio</aw:Name>\n" +
-            "      <aw:Street>456 Main Street</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:DeliveryNotes>Please notify me before shipping.</aw:DeliveryNotes>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"456-NM\">\n" +
-            "        <aw:ProductName>Power Supply</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>45.99</aw:USPrice>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99504\" aw:OrderDate=\"1999-10-22\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Jessica Arnold</aw:Name>\n" +
-            "      <aw:Street>4055 Madison Ave</aw:Street>\n" +
-            "      <aw:City>Seattle</aw:City>\n" +
-            "      <aw:State>WA</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Jessica Arnold</aw:Name>\n" +
-            "      <aw:Street>4055 Madison Ave</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AZ\">\n" +
-            "        <aw:ProductName>Computer Keyboard</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>29.99</aw:USPrice>\n" +
-            "        <aw:Comment>this thing breaks all the time</aw:Comment>\n" +
-            "      </aw:Item>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AM\">\n" +
-            "        <aw:ProductName>Wireless Mouse</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>14.99</aw:USPrice>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "</aw:PurchaseOrders>";
-    private Document testDoc;
-    private Node purchaseOrderNode;
-
-
-    @Before
-    public void setUp() throws Exception {
-        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
-        documentBuilderFactory.setCoalescing(true);
-        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
-        testDoc = documentBuilder.parse(new InputSource(new StringReader(testXml)));
-        purchaseOrderNode = testDoc.getFirstChild();
-    }
-
-    @Test
-    public void getFirstMatchingNode_shouldReturnValue() {
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder");
-        assertThat(resultNode).isNotNull();
-    }
-
-    @Test
-    public void getFirstMatchingChildNode_shouldFindNode() throws Exception {
-        ArrayList<String> testList = new ArrayList<String>();
-        testList.add("1999-10-22");
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", testList);
-        assertThat(resultNode).isNotNull();
-        assertThat(resultNode.getNodeName()).isEqualTo("aw:PurchaseOrder");
-        assertThat(resultNode.getAttributes().getNamedItem("aw:OrderDate").getNodeValue()).isEqualTo("1999-10-22");
-    }
-
-    @Test
-    public void getFirstMatchingChildNode_withUnmatchedAttribute_shouldNotFindNode() throws Exception {
-        ArrayList<String> testList = new ArrayList<String>();
-        testList.add("1999-10-");
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", testList);
-        assertThat(resultNode).isNull();
-    }
-
-    @Test
-    public void getMatchingChildNodes_withNullAttributeValues_shouldReturnMultiple() throws Exception {
-        List<Node> results = XmlUtils.getMatchingChildNodes(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", null);
-        assertThat(results.size()).isEqualTo(3);
-    }
-
-    @Test
-    public void getMatchingChildNodes_withEmptyAttributeValues_shouldReturnNone() {
-        List<Node> results = XmlUtils.getMatchingChildNodes(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", new ArrayList<String>());
-        assertThat(results).isEmpty();
-    }
-
-    @Test
-    public void getAttributeValue_shouldReturnCorrectValue() throws Exception {
-        Node child = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder");
-
-        String purchaseOrderNumber = XmlUtils.getAttributeValue(child, "aw:PurchaseOrderNumber");
-        String orderDate = XmlUtils.getAttributeValue(child, "aw:OrderDate");
-
-        assertThat(purchaseOrderNumber).isEqualTo("99503");
-        assertThat(orderDate).isEqualTo("1999-10-20");
-    }
-
-    @Test
-    public void getListFromDocument_shouldReturnCorrectValue() throws Exception {
-        // Get all the "aw:PurchaseOrder" nodes. If any of them have an "aw:OrderDate" attribute, extract a Date.
-        List<Date> orderDates = XmlUtils.getListFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
-            DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
-
-            @Override
-            public Date process(final Node node) {
-                try {
-                    return formatter.parse(node.getAttributes().getNamedItem("aw:OrderDate").getNodeValue());
-                } catch (ParseException e) {
-                    return null;
-                }
-            }
-        });
-
-        assertThat(orderDates.size()).isEqualTo(3);
-        assertThat(orderDates.get(0).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(0).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(0).getDate()).isEqualTo(20);
-
-        assertThat(orderDates.get(1).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(1).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(1).getDate()).isEqualTo(22);
-
-        assertThat(orderDates.get(2).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(2).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(2).getDate()).isEqualTo(22);
-    }
-
-    @Test
-    public void getFirstMatchFromDocument_shouldReturnCorrectValue() throws Exception {
-        // Get the first "aw:PurchaseOrder" nodes. If it has an "aw:OrderDate" attribute, extract a Date.
-        Date orderDate = XmlUtils.getFirstMatchFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
-            DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
-
-            @Override
-            public Date process(final Node node) {
-                try {
-                    return formatter.parse(node.getAttributes().getNamedItem("aw:OrderDate").getNodeValue());
-                } catch (ParseException e) {
-                    return null;
-                }
-            }
-        });
-
-        assertThat(orderDate).isNotNull();
-        assertThat(orderDate.getYear()).isEqualTo(99);
-        assertThat(orderDate.getMonth()).isEqualTo(9);
-        assertThat(orderDate.getDate()).isEqualTo(20);
-    }
-
-    @Test
-    public void getStringDataAsList_shouldFindDeepNested() throws Exception {
-        final List<String> strings = XmlUtils.getStringDataAsList(testDoc, "aw:Comment", null, null);
-        assertThat(strings.size()).isEqualTo(2);
-        assertThat(strings.get(0)).isEqualTo("Confirm this is electric");
-        assertThat(strings.get(1)).isEqualTo("this thing breaks all the time");
-    }
-
-    @Test
-    public void getFirstMatchingStringData_shouldFindFirstMatch() throws Exception {
-        final String firstMatch = XmlUtils.getFirstMatchingStringData(testDoc, "aw:Comment", null, null);
-        assertThat(firstMatch).isNotNull();
-        assertThat(firstMatch).isEqualTo("Confirm this is electric");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
deleted file mode 100644
index 63b43fc0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ /dev/null
@@ -1,434 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.graphics.Bitmap;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
-import com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
-import com.mopub.nativeads.test.support.MoPubShadowBitmap;
-import com.mopub.nativeads.test.support.MoPubShadowDisplay;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd.Parameter;
-import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
-public class MoPubStaticNativeAdTest {
-
-    private MoPubStaticNativeAd subject;
-    private JSONObject fakeJsonObject;
-    private Activity context;
-
-    @Mock private View mockView;
-    @Mock private ImpressionTracker mockImpressionTracker;
-    @Mock private NativeClickHandler mMockNativeClickHandler;
-    @Mock private CustomEventNativeListener mockCustomEventNativeListener;
-    @Mock private NativeEventListener mockNativeEventListener;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private MaxWidthImageLoader mockImageLoader;
-    @Mock private ImageLoader.ImageContainer mockImageContainer;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.setNativeEventListener(mockNativeEventListener);
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
-    }
-
-    @Test
-    public void Parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() {
-        final HashSet<String> expectedKeys = new HashSet<String>();
-        expectedKeys.add("imptracker");
-        expectedKeys.add("clktracker");
-
-        assertThat(Parameter.requiredKeys).isEqualTo(expectedKeys);
-    }
-
-    @Test
-    public void Parameter_fromString_shouldReturnParameterOnMatch() {
-        final Parameter parameter = Parameter.from("title");
-
-        assertThat(parameter).isEqualTo(Parameter.TITLE);
-    }
-
-    @Test
-    public void Parameter_fromString_shouldReturnNullOnIllegalKey() {
-        final Parameter parameter = Parameter.from("random gibberish");
-
-        assertThat(parameter).isNull();
-    }
-
-    @Test
-    public void loadAd_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() {
-        fakeJsonObject.remove("imptracker");
-
-        try {
-            subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                    mMockNativeClickHandler, mockCustomEventNativeListener);
-            subject.loadAd();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.put("imptracker", 12345);
-
-        try {
-            subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                    mMockNativeClickHandler, mockCustomEventNativeListener);
-            subject.loadAd();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void loadAd_shouldSetRequiredExpectedFields() {
-        subject.loadAd();
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-    }
-
-    @Test
-    public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
-        fakeJsonObject.put("title", "expected title");
-        fakeJsonObject.put("text", "expected text");
-        fakeJsonObject.put("mainimage", "expected mainimage");
-        fakeJsonObject.put("iconimage", "expected iconimage");
-
-        fakeJsonObject.put("clk", "expected clk");
-
-        fakeJsonObject.put("fallback", "expected fallback");
-        fakeJsonObject.put("ctatext", "expected ctatext");
-        fakeJsonObject.put("starrating", 5.0);
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getTitle()).isEqualTo("expected title");
-        assertThat(subject.getText()).isEqualTo("expected text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("expected mainimage");
-        assertThat(subject.getIconImageUrl()).isEqualTo("expected iconimage");
-
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-    }
-
-    @Test
-    public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", 3);
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isEqualTo(3.0);
-    }
-
-    @Test
-    public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", "2.3");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isEqualTo(2.3);
-    }
-
-    @Test
-    public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", "this is not a number");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isNull();
-    }
-
-    @Test
-    public void loadAd_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", new Activity());
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isNull();
-    }
-
-    @Test
-    public void loadAd_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
-        /**
-         * At this level of abstraction, we don't actually care that these Strings resolve to valid
-         * URLs. We just want to ensure that loadAd does not throw an exception.
-         */
-        final JSONArray impressionTrackers = new JSONArray();
-        impressionTrackers.put("url1");
-        impressionTrackers.put(JSONObject.NULL);
-        impressionTrackers.put(2.12);
-        fakeJsonObject.put("imptracker", impressionTrackers);
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
-    }
-
-    @Test
-    public void loadAd_shouldSetExtraFields() throws Exception {
-        List<Object> array = new ArrayList<Object>();
-        array.add("index1");
-        array.add(-10);
-
-        Map<String, Object> map = new HashMap<String, Object>();
-        map.put("one", "a");
-        map.put("two", "b");
-
-        fakeJsonObject.put("key1", "yay json");
-        fakeJsonObject.put("key2", 5);
-        fakeJsonObject.put("key3", new JSONArray(array));
-        fakeJsonObject.put("key4", new JSONObject(map));
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtra("key1")).isEqualTo("yay json");
-        assertThat(subject.getExtra("key2")).isEqualTo(5);
-        assertThat((JSONArray) subject.getExtra("key3")).isEqualsToByComparingFields(new JSONArray(array));
-        assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
-    }
-
-    @Test
-    public void loadAd_shouldDownloadImages_shouldNotifyListenerOfOnNativeAdLoaded() throws Exception {
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
-                        listener.onResponse(mockImageContainer, false);
-                        return null;
-                    }
-                });
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        verify(mockImageLoader).get(eq("mainimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("iconimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("extraimageurl"), any(ImageListener.class));
-
-        verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
-        verify(mockCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-    }
-
-    @Test
-    public void loadAd_withFailedImageDownload_shouldNotDownloadImages_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
-                        listener.onErrorResponse(new VolleyError());
-                        return null;
-                    }
-                });
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(subject);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-    }
-
-    @Test
-    public void loadAd_shouldParseSingleClickTracker() {
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        final Set<String> clickTrackers = subject.getClickTrackers();
-        assertThat(clickTrackers.size()).isEqualTo(1);
-        assertThat(clickTrackers.contains("expected clicktracker")).isTrue();
-    }
-
-    @Test
-    public void loadAd_shouldParseMultipleClickTrackers() throws Exception {
-        fakeJsonObject.remove("clktracker");
-        fakeJsonObject.put("clktracker", new JSONArray("[\"clicktracker1\",\"clicktracker2\"]"));
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        final Set<String> clickTrackers = subject.getClickTrackers();
-        assertThat(clickTrackers.size()).isEqualTo(2);
-        assertThat(clickTrackers.contains("clicktracker1")).isTrue();
-        assertThat(clickTrackers.contains("clicktracker2")).isTrue();
-    }
-
-    @Test
-    public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("test_image", "image_url_1");
-        fakeJsonObject.put("filler", "ignored");
-        fakeJsonObject.put("otherIMAGE", "image_url_2");
-        fakeJsonObject.put("more filler", "ignored");
-        fakeJsonObject.put("lastimage", "image_url_3");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
-    }
-
-
-    @Test
-    public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmptyList() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("imageAtFront", "ignored");
-        fakeJsonObject.put("middle_image_in_key", "ignored");
-        fakeJsonObject.put("other", "ignored");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtrasImageUrls()).isEmpty();
-    }
-
-    @Test
-    public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllUrls() throws Exception {
-        fakeJsonObject.put("mainimage", "mainImageUrl");
-        fakeJsonObject.put("iconimage", "iconImageUrl");
-        fakeJsonObject.put("extraimage", "extraImageUrl");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getAllImageUrls()).containsOnly(
-                "mainImageUrl",
-                "iconImageUrl",
-                "extraImageUrl"
-        );
-    }
-
-    @Test
-    public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
-        fakeJsonObject.put("extra1_image", "expected extra1_image");
-        fakeJsonObject.put("extra2_image", "expected extra2_image");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
-    }
-
-    @Test
-    public void prepare_shouldAddViewToImpressionTracker_shouldSetOnClickListener() {
-        subject.prepare(mockView);
-
-        verify(mockImpressionTracker).addView(mockView, subject);
-        verify(mMockNativeClickHandler).setOnClickListener(mockView, subject);
-    }
-
-    @Test
-    public void clear_shouldRemoveViewFromImpressionTracker_shouldClearOnClickListener() {
-        subject.clear(mockView);
-
-        verify(mockImpressionTracker).removeView(mockView);
-        verify(mMockNativeClickHandler).clearOnClickListener(mockView);
-    }
-
-    @Test
-    public void destroy_shouldDestroyImpressionTracker() {
-        subject.destroy();
-
-        verify(mockImpressionTracker).destroy();
-    }
-
-    @Test
-    public void recordImpression_shouldNotifyAdImpressed_shouldTrackImpression() throws Exception {
-        subject.addImpressionTrackers(new JSONArray("[\"impressionUrl\"]"));
-        subject.recordImpression(mockView);
-
-        verify(mockNativeEventListener).onAdImpressed();
-    }
-
-    @Test
-    public void handleClick_shouldNotifyAdClicked_shouldOpenClickDestinationUrl() {
-        subject.setClickDestinationUrl("clickDestinationUrl");
-        subject.handleClick(mockView);
-
-        verify(mockNativeEventListener).onAdClicked();
-        verify(mMockNativeClickHandler).openClickDestinationUrl("clickDestinationUrl", mockView);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
deleted file mode 100644
index 22a34c85..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
+++ /dev/null
@@ -1,133 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class StaticNativeAdTest {
-
-    private StaticNativeAd subject;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new StaticNativeAd() {};
-
-        subject.setTitle("title");
-        subject.setText("text");
-        subject.setMainImageUrl("mainImageUrl");
-        subject.setIconImageUrl("iconImageUrl");
-        subject.setClickDestinationUrl("clickDestinationUrl");
-        subject.setCallToAction("callToAction");
-        subject.setStarRating(5.0);
-        subject.setPrivacyInformationIconClickThroughUrl("privacyInformationIconClickThroughUrl");
-        subject.setPrivacyInformationIconImageUrl("privacyInformationIconImageUrl");
-        subject.addExtra("extra", "extraValue");
-        subject.addExtra("extraImage", "extraImageUrl");
-        subject.addImpressionTracker("impressionUrl");
-        subject.setImpressionMinTimeViewed(500);
-    }
-
-    @Test
-    public void getters_shouldReturnCorrectValues() throws Exception {
-        assertThat(subject.getTitle()).isEqualTo("title");
-        assertThat(subject.getText()).isEqualTo("text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
-        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
-        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
-                "privacyInformationIconClickThroughUrl");
-        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo
-                ("privacyInformationIconImageUrl");
-        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
-        assertThat(subject.getExtra("extraImage")).isEqualTo("extraImageUrl");
-        assertThat(subject.getExtras()).hasSize(2);
-        assertThat(subject.getImpressionTrackers()).containsOnly("impressionUrl");
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
-        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
-    }
-
-    @Test
-    public void setImpressionMinTimeViewed_whenTimeIsGreaterThan0_shouldSetTime() throws Exception {
-        subject.setImpressionMinTimeViewed(250);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-    }
-
-    @Test
-    public void setImpressionMinTimeViewed_whenTimeIsLessThan0_shouldNotSetTime() throws Exception {
-        subject.setImpressionMinTimeViewed(250);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-
-        subject.setImpressionMinTimeViewed(-1);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-    }
-
-    @Test
-    public void setStarRating_withinValidRange_shouldSetStarRating() throws Exception {
-        subject.setStarRating(0.0);
-        assertThat(subject.getStarRating()).isEqualTo(0.0);
-
-        subject.setStarRating(5.0);
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-
-        subject.setStarRating(2.5);
-        assertThat(subject.getStarRating()).isEqualTo(2.5);
-    }
-
-    @Test
-    public void setStarRating_withNull_shouldSetStarRatingToNull() throws Exception {
-        // Setting star rating to 0 before each case, so we can detect when it gets set to null
-        final double initialStarRating = 0.0;
-
-        subject.setStarRating(initialStarRating);
-        subject.setStarRating(null);
-        assertThat(subject.getStarRating()).isEqualTo(null);
-    }
-
-    @Test
-    public void setStarRating_withNanOrInf_shouldNotSetStarRating() throws Exception {
-        // First, set star rating to a valid value
-        final double initialStarRating = 3.75;
-        subject.setStarRating(initialStarRating);
-
-        subject.setStarRating(Double.NaN);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(Double.POSITIVE_INFINITY);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(Double.NEGATIVE_INFINITY);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-    }
-
-    @Test
-    public void setStarRating_withValuesOutsideOfValidRange_shouldNotSetStarRating() throws Exception {
-        // First, set star rating to a valid value
-        final double initialStarRating = 4.9;
-        subject.setStarRating(initialStarRating);
-
-        subject.setStarRating(5.0001);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(-0.001);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-    }
-
-    @Test
-    public void isImpressionRecorded_withRecordedImpression_shouldReturnTrue() throws Exception {
-        assertThat(subject.isImpressionRecorded()).isFalse();
-
-        subject.setImpressionRecorded();
-
-        assertThat(subject.isImpressionRecorded()).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
deleted file mode 100644
index 614254fc..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.graphics.Bitmap;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowBitmap;
-
-// XXX the config for a newly created ShadowBitmap is never set so we need to set it ourselves
-// https://github.com/robolectric/robolectric/issues/876
-@Implements(Bitmap.class)
-public class MoPubShadowBitmap extends ShadowBitmap {
-
-    public MoPubShadowBitmap() {
-        // can also be some other config value
-        setConfig(Bitmap.Config.ARGB_8888);
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
deleted file mode 100644
index f8122bb9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.nativeads.CustomEventNative;
-import com.mopub.nativeads.factories.CustomEventNativeFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventNativeFactory extends CustomEventNativeFactory {
-    private CustomEventNative instance = mock(CustomEventNative.class);
-
-    public static CustomEventNative getSingletonMock() {
-        return getTestFactory().instance;
-    }
-
-    private static TestCustomEventNativeFactory getTestFactory() {
-        return ((TestCustomEventNativeFactory) CustomEventNativeFactory.instance);
-    }
-
-    @Override
-    protected CustomEventNative internalCreate(@NonNull final Class<? extends CustomEventNative> nativeClass) {
-        return instance;
-    }
-}
