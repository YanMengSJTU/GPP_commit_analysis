diff --git a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
index eebf33cc..1fcce5c1 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
@@ -55,7 +55,7 @@
     private final CounterView counterView;
 
     public Interstitial(final Activity activity, String interstitialId, final long minimalAdGapMills, double disableTouchChance,
-                         List<String> highECPMcountries, double fingerAdChanceLow, double fingerAdChanceHigh, final double periodicMillsLow, final double periodicMillsHigh) {
+                        List<String> highECPMcountries, double fingerAdChanceLow, double fingerAdChanceHigh, final double periodicMillsLow, final double periodicMillsHigh) {
         this.activity = activity;
         this.interstitialId = interstitialId;
         this.minimalAdGapMills = minimalAdGapMills;
@@ -72,7 +72,7 @@ public Interstitial(final Activity activity, String interstitialId, final long m
             public void run() {
                 show();
             }
-        },Screen.instance);
+        }, Screen.instance);
 
         this.reloadRunnable = new Runnable() {
             @Override
@@ -91,7 +91,7 @@ public void run() {
             @Override
             public void run() {
                 Helper.wtf(TAG, "run: ShowRun");
-                if(!lock.isLocked()) {
+                if (!lock.isLocked()) {
                     counterView.show();
                 }
             }
@@ -157,12 +157,18 @@ public void onInterstitialClicked(MoPubInterstitial interstitial) {
     }
 
     public boolean show() {
-            Helper.wtf("I","show");
-            if (mopubInterstitial == null || lock.isLocked() || !mopubInterstitial.isReady() || freePeriod || !mopubInterstitial.show()) { //show has to be last
-                Helper.wtf(TAG, "show Failed: null ready locked ");
-                return false;
-            }
-            return true;
+        Helper.wtf("I", "showing ad...");
+        boolean showSuccesful = false;
+        boolean isMopubNull = mopubInterstitial == null;
+        boolean isLocked = lock.isLocked();
+        boolean isMopubReady = mopubInterstitial.isReady();
+        boolean isFreePeriod = freePeriod;
+        Helper.wtf("[isMopubNull(false) = " + isMopubNull + "] " + "[isLocked(false) = " + isLocked + "] " + "[isMopubReady(true) = " + isMopubReady + "] [isFreePeriod(false) = " + isFreePeriod + "]");
+        if(!isMopubNull && !isLocked && isMopubReady && !isFreePeriod){
+            showSuccesful = mopubInterstitial.show();
+            Helper.wtf("Called mopub show with result = " +showSuccesful);
+        }
+        return showSuccesful;
     }
 
     public void showDelayed(int mills) {
@@ -176,7 +182,7 @@ public void run() {
                 show();
                 runnable.run();
             }
-        },mills);
+        }, mills);
     }
 
 
@@ -208,9 +214,9 @@ public void showFastDelayed(int mills) {
         mainHandler.postDelayed(new Runnable() {
             @Override
             public void run() {
-                if(mopubInterstitial != null){
+                if (mopubInterstitial != null) {
                     mopubInterstitial.show();
-                }else if (lock.isLocked() || fastAd == null || !fastAd.show()) {
+                } else if (lock.isLocked() || fastAd == null || !fastAd.show()) {
                     _initDelayed();
                 }
             }
@@ -218,14 +224,14 @@ public void run() {
     }
 
     public void showUnityAdsVideo() {
-        if(!lock.isMultiplayerLocked()) {
+        if (!lock.isMultiplayerLocked()) {
             if (!UnityAds.isReady()) {
                 Helper.wtf(TAG, "showUnityAdsVideo: show false");
                 show();
-            }else {
+            } else {
                 UnityAds.show(activity);
             }
-        }else {
+        } else {
             Helper.wtf(TAG, "showUnityAdsVideo: show false multiplayer locked");
         }
     }
@@ -233,12 +239,11 @@ public void showUnityAdsVideo() {
 
     public void schedulePeriodicShows() {
         if (!periodicScheduled && Data.hasMinecraft) {
-            Helper.wtf(TAG, "schedulePeriodicShows: Scheduled ");
-            Helper.wtf(TAG, String.valueOf(periodicMills));
+            Helper.wtf("schedulePeriodicShows: Scheduled za " + String.valueOf(periodicMills));
             mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
             periodicScheduled = true;
-        }else{
-            Helper.wtf("Not scheduling periodic cause he is victim");
+        } else {
+            Helper.wtf("Not scheduling periodic cause he is victim or already scheduled");
         }
     }
 
@@ -252,7 +257,6 @@ public void unschedulePeriodicShows() {
     }
 
 
-
     private void _initDelayed() {
         Helper.wtf("Initing Mopub in 4 sec...");
         mainHandler.postDelayed(new Runnable() {
@@ -341,62 +345,62 @@ private void loadAfterDelay(long delay) {
         private boolean game;
 
         public boolean isLocked() {
-            Helper.wtf("I","isLocked: " + "multiplayer [" + multiplayer + "]" + " " + "internet [" + internet + "]" + " " + "gap [" + gap + "]" + " " + "stop [" + stop + "] "+ "game [" + game + "]");
+            Helper.wtf("I", "isLocked: " + "multiplayer [" + multiplayer + "]" + " " + "internet [" + internet + "]" + " " + "gap [" + gap + "]" + " " + "stop [" + stop + "] " + "game [" + game + "]");
             return multiplayer || internet || gap || game || stop;
         }
 
-        public boolean isMultiplayerLocked(){
+        public boolean isMultiplayerLocked() {
             return multiplayer;
         }
 
         public void unlockStop() {
-            Helper.wtf("I","unlockStop: ");
+            Helper.wtf("I", "unlockStop: ");
             stop = false;
         }
 
         public void stopLock() {
-            Helper.wtf("I","stopLock: ");
+            Helper.wtf("I", "stopLock: ");
             stop = true;
         }
 
 
         public void unlockGap() {
-            Helper.wtf("I","unlockGap: ");
+            Helper.wtf("I", "unlockGap: ");
             gap = false;
         }
 
         public void gapLock() {
-            Helper.wtf("I","gapLock: ");
+            Helper.wtf("I", "gapLock: ");
             gap = true;
         }
 
         public void lockMultiplayer() {
-            Helper.wtf("I","lockMultiplayer: ");
+            Helper.wtf("I", "lockMultiplayer: ");
             multiplayer = true;
         }
 
         public void unlockMultiplayer() {
-            Helper.wtf("I","unlockMultiplayer: ");
+            Helper.wtf("I", "unlockMultiplayer: ");
             multiplayer = false;
         }
 
         public void gameUnlock() {
-            Helper.wtf("I","gameUnlock: ");
+            Helper.wtf("I", "gameUnlock: ");
             game = false;
         }
 
         public void gameLock() {
-            Helper.wtf("I","gameLock: ");
+            Helper.wtf("I", "gameLock: ");
             game = true;
         }
 
         public void internetLock() {
-            Helper.wtf("I","internetLock: ");
+            Helper.wtf("I", "internetLock: ");
             internet = true;
         }
 
         public void internetUnlock() {
-            Helper.wtf("I","internetUnlock: ");
+            Helper.wtf("I", "internetUnlock: ");
             internet = false;
         }
     }
