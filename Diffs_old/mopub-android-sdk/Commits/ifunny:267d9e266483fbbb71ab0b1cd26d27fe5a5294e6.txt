diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8d5ab52e..5939f5d5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,15 @@
-## Version 4.4.1 (February 23, 2016)
+## Version 4.6.0 (April 21, 2016)
+- Certified Chartboost version 6.4.1
+- Certified Tapjoy version 11.5.1
+
+#### Version 4.5.1 (March 31, 2016)
+- Updated ExoPlayer dependency from r1.4.2 to r1.5.6; courtesy @talklittle. Removed references to READ_EXTERNAL_STORAGE permission.
+
+## Version 4.5.0 (March 24, 2016)
+- Rewarded video support from the MoPub Marketplace (Beta)
+- Miscellaneous bug fixes.
+
+#### Version 4.4.1 (February 23, 2016)
 - Fixed deeplink bug where host must be present in URL.
 
 ## Version 4.4.0 (February 11, 2016) 
diff --git a/README.md b/README.md
index 327238f6..e1235582 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.4.1@aar') {
+        compile('com.mopub:mopub-sdk:4.5.1@aar') {
             transitive = true
         }
     }
@@ -62,7 +62,8 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Enhancements and bug fixes for VAST video ads.
+- Certified Chartboost version 6.4.1
+- Certified Tapjoy version 11.5.1
 
 ## Requirements
 
@@ -76,6 +77,10 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 ## Upgrading from 3.2.0 and Prior
 In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
 
+## Important Message About Upgrading to MoPub SDK 4.4.0+
+
+Version 4.4.0 of the MoPub SDK fixes a security issue identified by Google. Note that only publishers who received a message from Google are affected. While not all publishers are impacted, we recommend you upgrade to SDK 4.4.0+ ahead of Google's deadline (July 11, 2016) to avoid any issues submitting updates to your apps after the date. More information can be found in [Google's support article](https://support.google.com/faqs/answer/6345928).
+
 ## Working with Android 6.0 Runtime Permissions
 If your app's target SDK is 23 or higher _**and**_ the user's device is running Android 6.0 or higher, you are responsible for supporting [runtime permissions](http://developer.android.com/training/permissions/requesting.html), one of the [changes](http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html) introduced in Android 6.0 (API level 23). In addition to listing any dangerous permissions your app needs in the manifest, your app also has to explicitly request the dangerous permission(s) during runtime by calling method `requestPermissions()` in the [`ActivityCompat`](http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html) class.
 
@@ -83,7 +88,6 @@ If your app's target SDK is 23 or higher _**and**_ the user's device is running
 - Dangerous permission [`ACCESS_COARSE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_COARSE_LOCATION) is needed to pass network location data to MoPub.
 - Dangerous permission [`ACCESS_FINE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_FINE_LOCATION) is needed to pass GPS location data to MoPub.
     - Granting `ACCESS_FINE_LOCATION` also allows network location data to be passed to MoPub without the need to also grant `ACCESS_COARSE_LOCATION`.
-- Dangerous permission [`READ_EXTERNAL_STORAGE`](http://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE) is needed for exoplayer to play native video.
 - Dangerous permission [`WRITE_EXTERNAL_STORAGE`](http://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE) is needed for MRAID 2.
 - _**Note:** The user can deny granting any dangerous permissions during runtime, so please make sure your app can handle this properly._
 - _**Note:** The user can revoke any permissions granted previously by going to your app's Settings screen, so please make sure your app can handle this properly._
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
index 2862ebcf..ace44241 100644
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
@@ -14,7 +14,7 @@
 /**
  * A custom event for showing Chartboost interstitial ads.
  *
- * Certified with Chartboost 5.3.0
+ * Certified with Chartboost 6.4.1
  */
 class ChartboostInterstitial extends CustomEventInterstitial {
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
index 619271b8..08f90ca8 100644
--- a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
@@ -16,7 +16,7 @@
 /**
  * A custom event for showing Chartboost rewarded videos.
  *
- * Certified with Chartboost 5.3.0
+ * Certified with Chartboost 6.4.1
  */
 public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
     @NonNull private static final LifecycleListener sLifecycleListener =
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index e146f15a..a3bb1780 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -8,6 +8,7 @@
 import com.chartboost.sdk.Chartboost;
 import com.chartboost.sdk.ChartboostDelegate;
 import com.chartboost.sdk.Model.CBError;
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -26,7 +27,7 @@
 /**
  * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
  *
- * Certified with Chartboost 5.3.0
+ * Certified with Chartboost 6.4.1
  */
 public class ChartboostShared {
     private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
@@ -75,7 +76,7 @@ public static synchronized boolean initializeSdk(@NonNull Activity launcherActiv
         // Perform all the common SDK initialization steps including startAppWithId
         Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
         Chartboost.setImpressionsUseActivities(false);
-        Chartboost.setFramework(Chartboost.CBFramework.CBFrameworkMoPub);
+        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
         Chartboost.setDelegate(sDelegate);
         Chartboost.setShouldRequestInterstitialsInFirstSession(true);
         Chartboost.setAutoCacheAds(false);
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index ef4bb874..24d19317 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -49,6 +49,11 @@ protected void showInterstitial() {
             mFacebookInterstitial.show();
         } else {
             Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
+            if (mInterstitialListener != null) {
+                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
+            } else {
+                Log.d("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
+            }
         }
     }
 
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
index c20b64e5..029592dc 100644
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -1,6 +1,8 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
 import android.text.TextUtils;
 
 import com.mopub.common.logging.MoPubLog;
@@ -8,13 +10,23 @@
 import com.tapjoy.TJError;
 import com.tapjoy.TJPlacement;
 import com.tapjoy.TJPlacementListener;
+import com.tapjoy.TapjoyLog;
 
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.1.0
+// Tested with Tapjoy SDK 11.5.1
 public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
+    private static final String TAG = TapjoyInterstitial.class.getSimpleName();
+    private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+
     private TJPlacement tjPlacement;
     private CustomEventInterstitialListener mInterstitialListener;
+    private Handler mHandler;
+
+    static {
+        TapjoyLog.i(TAG, "Class initialized with network adapter version " + TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+    }
 
     @Override
     protected void loadInterstitial(Context context,
@@ -24,12 +36,15 @@ protected void loadInterstitial(Context context,
         MoPubLog.d("Requesting Tapjoy interstitial");
 
         mInterstitialListener = customEventInterstitialListener;
+        mHandler = new Handler(Looper.getMainLooper());
 
         String name = serverExtras.get("name");
         if (TextUtils.isEmpty(name)) {
             MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
         }
         tjPlacement = new TJPlacement(context, name, this);
+        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
+        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
         tjPlacement.requestContent();
     }
 
@@ -47,32 +62,55 @@ protected void showInterstitial() {
     // Tapjoy
 
     @Override
-    public void onRequestSuccess(TJPlacement placement) {
-        if (placement.isContentAvailable()) {
-            MoPubLog.d("Tapjoy interstitial request successful");
-            mInterstitialListener.onInterstitialLoaded();
-        } else {
-            MoPubLog.d("No Tapjoy interstitials available");
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
+    public void onRequestSuccess(final TJPlacement placement) {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                if (placement.isContentAvailable()) {
+                    MoPubLog.d("Tapjoy interstitial request successful");
+                    mInterstitialListener.onInterstitialLoaded();
+                } else {
+                    MoPubLog.d("No Tapjoy interstitials available");
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                }
+            }
+        });
     }
 
     @Override
     public void onRequestFailure(TJPlacement placement, TJError error) {
         MoPubLog.d("Tapjoy interstitial request failed");
-        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            }
+        });
     }
 
     @Override
     public void onContentShow(TJPlacement placement) {
         MoPubLog.d("Tapjoy interstitial shown");
-        mInterstitialListener.onInterstitialShown();
+
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mInterstitialListener.onInterstitialShown();
+            }
+        });
     }
 
     @Override
     public void onContentDismiss(TJPlacement placement) {
         MoPubLog.d("Tapjoy interstitial dismissed");
-        mInterstitialListener.onInterstitialDismissed();
+
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        });
     }
 
     @Override
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
index 5b989a17..d0f81000 100644
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -2,24 +2,41 @@
 
 import android.app.Activity;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
 import com.mopub.common.logging.MoPubLog;
 import com.tapjoy.TJActionRequest;
+import com.tapjoy.TJConnectListener;
 import com.tapjoy.TJError;
 import com.tapjoy.TJPlacement;
 import com.tapjoy.TJPlacementListener;
+import com.tapjoy.TJVideoListener;
+import com.tapjoy.Tapjoy;
+import com.tapjoy.TapjoyLog;
 
+import java.util.Hashtable;
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.1.0
+// Tested with Tapjoy SDK 11.5.1
 public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
+    private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
+    private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
     private static final String TAPJOY_AD_NETWORK_CONSTANT = "tapjoy_id";
+
+    private String sdkKey;
+    private Hashtable<String, Object> connectFlags;
     private TJPlacement tjPlacement;
     private static TapjoyRewardedVideoListener sTapjoyListener = new TapjoyRewardedVideoListener();
 
+    static {
+        TapjoyLog.i(TAG, "Class initialized with network adapter version " + TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+    }
+
     @Override
     protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
         return sTapjoyListener;
@@ -44,7 +61,29 @@ protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
             @NonNull Map<String, Object> localExtras,
             @NonNull Map<String, String> serverExtras)
             throws Exception {
-        // Always return false, no special initialization steps to be done from here
+
+        if (!Tapjoy.isConnected()) {
+            if (checkAndInitMediationSettings()) {
+                MoPubLog.d("Request to connect to Tapjoy");
+
+                Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
+                    @Override
+                    public void onConnectSuccess() {
+                        MoPubLog.d("Tapjoy connected successfully");
+                    }
+
+                    @Override
+                    public void onConnectFailure() {
+                        MoPubLog.e("Tapjoy connect failed");
+                    }
+                });
+
+                return true;
+            } else {
+                MoPubLog.d("Cannot connect to Tapjoy -- missing 'sdkkey' declaration via TapjoyMediationSettings");
+            }
+        }
+
         return false;
     }
 
@@ -60,6 +99,8 @@ protected void loadWithSdkInitialized(@NonNull Activity activity,
             MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
         }
         tjPlacement = new TJPlacement(activity, name, sTapjoyListener);
+        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
+        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
         tjPlacement.requestContent();
     }
 
@@ -79,10 +120,33 @@ protected void showVideo() {
 
     }
 
-    private static class TapjoyRewardedVideoListener implements TJPlacementListener, CustomEventRewardedVideoListener {
+    private boolean checkAndInitMediationSettings() {
+        MoPubLog.d("Initializing Tapjoy mediation settings");
+
+        final TapjoyMediationSettings globalMediationSettings =
+                MoPubRewardedVideoManager.getGlobalMediationSettings(TapjoyMediationSettings.class);
+
+        if (globalMediationSettings != null) {
+            if (!TextUtils.isEmpty(globalMediationSettings.getSdkKey())) {
+                sdkKey = globalMediationSettings.getSdkKey();
+            } else {
+                return false;
+            }
+
+            if (globalMediationSettings.getConnectFlags() != null) {
+                connectFlags = globalMediationSettings.getConnectFlags();
+            }
+
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    private static class TapjoyRewardedVideoListener implements TJPlacementListener, CustomEventRewardedVideoListener, TJVideoListener {
         @Override
         public void onRequestSuccess(TJPlacement placement) {
-            if (!placement.isContentAvailable()) {
+            if (!placement.isContentAvailable()){
                 MoPubLog.d("No Tapjoy rewarded videos available");
                 MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
             }
@@ -102,12 +166,14 @@ public void onRequestFailure(TJPlacement placement, TJError error) {
 
         @Override
         public void onContentShow(TJPlacement placement) {
+            Tapjoy.setVideoListener(this);
             MoPubLog.d("Tapjoy rewarded video content shown");
             MoPubRewardedVideoManager.onRewardedVideoStarted(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
         }
 
         @Override
         public void onContentDismiss(TJPlacement placement) {
+            Tapjoy.setVideoListener(null);
             MoPubLog.d("Tapjoy rewarded video content dismissed");
             MoPubRewardedVideoManager.onRewardedVideoClosed(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
         }
@@ -121,11 +187,46 @@ public void onPurchaseRequest(TJPlacement placement, TJActionRequest request,
         public void onRewardRequest(TJPlacement placement, TJActionRequest request, String itemId,
                 int quantity) {
         }
+
+        @Override
+        public void onVideoStart() {
+
+        }
+
+        @Override
+        public void onVideoError(int statusCode) {
+        }
+
+        @Override
+        public void onVideoComplete() {
+            MoPubLog.d("Tapjoy rewarded video completed");
+            MoPubRewardedVideoManager.onRewardedVideoCompleted(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
+        }
     }
 
     public static final class TapjoyMediationSettings implements MediationSettings {
-        public TapjoyMediationSettings() {
+        @Nullable
+        private final String mSdkKey;
+        @Nullable
+        Hashtable<String, Object> mConnectFlags;
+
+        public TapjoyMediationSettings(String sdkKey) {
+            this.mSdkKey = sdkKey;
+        }
+
+        public TapjoyMediationSettings(String sdkKey, Hashtable<String, Object> connectFlags) {
+            this.mSdkKey = sdkKey;
+            this.mConnectFlags = connectFlags;
+        }
+
+        @NonNull
+        public String getSdkKey() {
+            return mSdkKey;
+        }
 
+        @NonNull
+        public Hashtable<String, Object> getConnectFlags() {
+            return mConnectFlags;
         }
     }
 
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 5813e005..17fd0392 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="36"
-      android:versionName="4.4.1">
+      android:versionCode="39"
+      android:versionName="4.6.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
@@ -10,10 +10,6 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
-    <!-- This is added as a workaround for the manifest merger duplicating exoplayer
-         and play services permissions. -->
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
-
     <!-- For MRAID 2 -->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 677c46b4..6f6feae8 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'com.android.application'
 
 group = 'com.mopub'
 description = '''MoPub Sample App'''
-version = '4.4.1'
+version = '4.6.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 36
+        versionCode 39
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 6ad5526f..9aacc186 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -2,6 +2,7 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -22,8 +23,11 @@
 
 public class RewardedVideoDetailFragment extends Fragment implements MoPubRewardedVideoListener {
 
-    private Button mShowButton;
-    private static boolean rewardedVideoInitialized;
+    private static boolean sRewardedVideoInitialized;
+
+    @Nullable private Button mShowButton;
+    @Nullable private String mAdUnitId;
+
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         super.onCreateView(inflater, container, savedInstanceState);
@@ -33,21 +37,26 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
         hideSoftKeyboard(views.mKeywordsField);
 
-        if (!rewardedVideoInitialized) {
+        if (!sRewardedVideoInitialized) {
             MoPub.initializeRewardedVideo(getActivity());
-            rewardedVideoInitialized = true;
+            sRewardedVideoInitialized = true;
         }
         MoPub.setRewardedVideoListener(this);
 
-        final String adUnitId = adConfiguration.getAdUnitId();
+        mAdUnitId = adConfiguration.getAdUnitId();
         views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
+        views.mAdUnitIdView.setText(mAdUnitId);
         views.mLoadButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                MoPub.loadRewardedVideo(adUnitId,
+                if (mAdUnitId == null) {
+                    return;
+                }
+                MoPub.loadRewardedVideo(mAdUnitId,
                         new RequestParameters(views.mKeywordsField.getText().toString()));
-                mShowButton.setEnabled(false);
+                if (mShowButton != null) {
+                    mShowButton.setEnabled(false);
+                }
             }
         });
         mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
@@ -55,7 +64,10 @@ public void onClick(View view) {
         mShowButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                MoPub.showRewardedVideo(adUnitId);
+                if (mAdUnitId == null) {
+                    return;
+                }
+                MoPub.showRewardedVideo(mAdUnitId);
             }
         });
 
@@ -70,40 +82,65 @@ public void onDestroyView() {
     // MoPubRewardedVideoListener implementation
     @Override
     public void onRewardedVideoLoadSuccess(@NonNull final String adUnitId) {
-        mShowButton.setEnabled(true);
-        logToast(getActivity(), "Rewarded video loaded.");
+        if (adUnitId.equals(mAdUnitId)) {
+            if (mShowButton != null) {
+                mShowButton.setEnabled(true);
+            }
+            logToast(getActivity(), "Rewarded video loaded.");
+        }
     }
 
     @Override
     public void onRewardedVideoLoadFailure(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
-        mShowButton.setEnabled(false);
-        logToast(getActivity(), String.format(Locale.US, "Rewarded video failed to load: %s", errorCode.toString()));
+        if (adUnitId.equals(mAdUnitId)) {
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+            logToast(getActivity(), String.format(Locale.US, "Rewarded video failed to load: %s",
+                    errorCode.toString()));
+        }
     }
 
     @Override
     public void onRewardedVideoStarted(@NonNull final String adUnitId) {
-        logToast(getActivity(), "Rewarded video started.");
-        mShowButton.setEnabled(false);
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), "Rewarded video started.");
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+        }
     }
 
     @Override
     public void onRewardedVideoPlaybackError(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
-        logToast(getActivity(), String.format(Locale.US, "Rewarded video playback error: %s", errorCode.toString()));
-        mShowButton.setEnabled(false);
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), String.format(Locale.US, "Rewarded video playback error: %s",
+                    errorCode.toString()));
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+        }
     }
 
     @Override
     public void onRewardedVideoClosed(@NonNull final String adUnitId) {
-        logToast(getActivity(), "Rewarded video closed.");
-        mShowButton.setEnabled(false);
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), "Rewarded video closed.");
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+        }
     }
 
     @Override
-    public void onRewardedVideoCompleted(@NonNull final Set<String> adUnitIds, @NonNull final MoPubReward reward) {
-        logToast(getActivity(),
-                String.format(Locale.US,
-                        "Rewarded video completed with reward  \"%d %s\"",
-                        reward.getAmount(),
-                        reward.getLabel()));
+    public void onRewardedVideoCompleted(@NonNull final Set<String> adUnitIds,
+            @NonNull final MoPubReward reward) {
+        if (adUnitIds.contains(mAdUnitId)) {
+            logToast(getActivity(),
+                    String.format(Locale.US,
+                            "Rewarded video completed with reward  \"%d %s\"",
+                            reward.getAmount(),
+                            reward.getLabel()));
+        }
     }
 }
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 9861e836..96fe059d 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -34,17 +34,16 @@ task wrapper(type: Wrapper) {
 
 group = 'com.mopub'
 description = '''MoPub Android SDK'''
-version = '4.4.1'
+version = '4.6.0'
 
 android {
 	compileSdkVersion 23
-	buildToolsVersion '23.0.2'
-
+	buildToolsVersion '23.0.3'
 	lintOptions { abortOnError false }
 	useLibrary 'org.apache.http.legacy'
 
 	defaultConfig {
-		versionCode 36
+		versionCode 39
 		versionName version
 		minSdkVersion 9
 		targetSdkVersion 23
@@ -101,14 +100,15 @@ android {
 
 
 dependencies {
+
 	compile 'com.android.support:support-v4:23.1.1'
 	compile 'com.android.support:support-annotations:23.1.1'
 	compile 'com.android.support:recyclerview-v7:23.1.1'
 	compile 'com.mopub.volley:mopub-volley:1.1.0'
-	compile 'com.google.android.exoplayer:exoplayer:r1.4.2'
+	compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
 	// anchor: additional dependencies
 
-	javadocDeps 'com.google.android.exoplayer:exoplayer:r1.4.2:sources'
+	javadocDeps 'com.google.android.exoplayer:exoplayer:r1.5.6:sources'
 	javadocDeps 'com.mopub.volley:mopub-volley:1.1.0:sources'
 	javadocDeps 'com.android.support:support-v4:23.1.1:sources'
 	javadocDeps 'com.android.support:support-annotations:23.1.1:sources'
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index e9a03d34..011a3234 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -47,7 +47,7 @@
         <dependency>
             <groupId>com.google.android.exoplayer</groupId>
             <artifactId>exoplayer</artifactId>
-            <version>r1.4.2</version>
+            <version>r1.5.6</version>
             <type>aar</type>
         </dependency>
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/src/main/java/com/mopub/common/AdType.java
index 607adbd2..38f7c2ba 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdType.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdType.java
@@ -10,6 +10,7 @@
     public static final String INTERSTITIAL = "interstitial";
     public static final String STATIC_NATIVE = "json";
     public static final String VIDEO_NATIVE = "json_video";
+    public static final String REWARDED_VIDEO = "rewarded_video";
     public static final String CUSTOM = "custom";
     public static final String CLEAR = "clear";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
index 75cf02bb..bbd4fc80 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
@@ -24,4 +24,8 @@
     public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
     public static final String MAX_BUFFER_MS = "Max-Buffer-Ms";
     public static final String EVENT_DETAILS = "Event-Details";
+
+    // Rewarded Video fields
+    public static final String REWARDED_VIDEO_CURRENCY_NAME_KEY = "Rewarded-Video-Currency-Name";
+    public static final String REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Video-Currency-Value-String";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java b/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java
new file mode 100644
index 00000000..cec3a306
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java
@@ -0,0 +1,9 @@
+package com.mopub.common;
+
+/**
+ * Valid values for the "X-Fulladtype" header from the MoPub ad server. The value of this header
+ * controls the custom event loading behavior.
+ */
+public class FullAdType {
+    public final static String VAST = "vast";
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index c4b61b6a..1616eca6 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -9,7 +9,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.4.1";
+    public static final String SDK_VERSION = "4.6.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
index 85f0f3c2..0c2b0ce3 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
@@ -6,8 +6,23 @@
  * Represents a reward to the user for completing a rewarded task like watching a video.
  */
 public final class MoPubReward {
+    /**
+     * This should be used if there is no reward label specified.
+     */
     public static final String NO_REWARD_LABEL = "";
+
+    /**
+     * Legacy amount for certain custom events that don't take a reward amount. Try not to use this
+     * for any future custom events.
+     */
     public static final int NO_REWARD_AMOUNT = -123;
+
+    /**
+     * The default amount if nothing or an invalid amount is specified. This also is applicable for
+     * custom events that do not require a reward amount.
+     */
+    public static final int DEFAULT_REWARD_AMOUNT = 0;
+
     private final boolean mSuccess;
     private final @NonNull String mLabel;
     private final int mAmount;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
index 3d77a7e3..e93b9086 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -33,6 +33,10 @@
     IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
     MAX_BUFFER_MS("X-Max-Buffer-Ms"),
 
+    // Rewarded Video fields
+    REWARDED_VIDEO_CURRENCY_NAME("X-Rewarded-Video-Currency-Name"),
+    REWARDED_VIDEO_CURRENCY_AMOUNT("X-Rewarded-Video-Currency-Amount"),
+
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
     private final String key;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 36878ac2..7cdeb29e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -27,6 +27,7 @@
         VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
         MOPUB_NATIVE("mopub_native", "com.mopub.nativeads.MoPubCustomEventNative"),
         MOPUB_VIDEO_NATIVE("mopub_video_native", "com.mopub.nativeads.MoPubCustomEventVideoNative"),
+        MOPUB_REWARDED_VIDEO("rewarded_video", "com.mopub.mobileads.MoPubRewardedVideo"),
 
         UNSPECIFIED("", null);
 
@@ -70,8 +71,10 @@ public static String getCustomEventName(@NonNull AdFormat adFormat,
             return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
         } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)){
             return CustomEventType.MOPUB_NATIVE.toString();
-        } else if (AdType.VIDEO_NATIVE.equalsIgnoreCase(adType)){
+        } else if (AdType.VIDEO_NATIVE.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_VIDEO_NATIVE.toString();
+        } else if (AdType.REWARDED_VIDEO.equalsIgnoreCase(adType)) {
+            return CustomEventType.MOPUB_REWARDED_VIDEO.toString();
         } else if (AdType.HTML.equalsIgnoreCase(adType) || AdType.MRAID.equalsIgnoreCase(adType)) {
             return (AdFormat.INTERSTITIAL.equals(adFormat)
                     ? CustomEventType.fromString(adType + INTERSTITIAL_SUFFIX)
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
new file mode 100644
index 00000000..9b2e04e4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
@@ -0,0 +1,58 @@
+package com.mopub.mobileads;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.Preconditions;
+
+public abstract class BaseBroadcastReceiver extends BroadcastReceiver {
+    private final long mBroadcastIdentifier;
+    @Nullable private Context mContext;
+
+    public BaseBroadcastReceiver(final long broadcastIdentifier) {
+        mBroadcastIdentifier = broadcastIdentifier;
+    }
+
+    static void broadcastAction(@NonNull final Context context, final long broadcastIdentifier,
+            @NonNull final String action) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        Preconditions.checkNotNull(action, "action cannot be null");
+        Intent intent = new Intent(action);
+        intent.putExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(intent);
+    }
+
+    @NonNull
+    public abstract IntentFilter getIntentFilter();
+
+    public void register(final @NonNull BroadcastReceiver broadcastReceiver, Context context) {
+        mContext = context;
+        LocalBroadcastManager.getInstance(mContext).registerReceiver(broadcastReceiver,
+                getIntentFilter());
+    }
+
+    public void unregister(final @Nullable BroadcastReceiver broadcastReceiver) {
+        if (mContext != null && broadcastReceiver != null) {
+            LocalBroadcastManager.getInstance(mContext).unregisterReceiver(broadcastReceiver);
+            mContext = null;
+        }
+    }
+
+    /**
+     * Only consume this broadcast if the identifier on the received Intent and this broadcast
+     * match up. This allows us to target broadcasts to the ad that spawned them. We include
+     * this here because there is no appropriate IntentFilter condition that can recreate this
+     * behavior.
+     */
+    public boolean shouldConsumeBroadcast(@NonNull final Intent intent) {
+        Preconditions.checkNotNull(intent, "intent cannot be null");
+        final long receivedIdentifier = intent.getLongExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, -1);
+        return mBroadcastIdentifier == receivedIdentifier;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 9cae4baf..d1504467 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -90,9 +90,9 @@ protected void videoCompleted(boolean shouldFinish) {
 
     void broadcastAction(final String action) {
         if (mBroadcastIdentifier != null) {
-            EventForwardingBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
+            BaseBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
         } else {
-            MoPubLog.w("Tried to broadcast a video event without a braodcast identifier to send to.");
+            MoPubLog.w("Tried to broadcast a video event without a broadcast identifier to send to.");
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
index 24f41d80..9e1c961b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -4,6 +4,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubLifecycleManager;
 import com.mopub.common.VisibleForTesting;
@@ -15,6 +16,7 @@
  *
  */
 public abstract class CustomEventRewardedVideo {
+
     /**
      * This marker interface is used to indicate that an object is a listener for a 3rd party SDKs
      * rewarded video system.
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index d5561d92..0e19182f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -1,20 +1,16 @@
 package com.mopub.mobileads;
 
-import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.mopub.common.DataKeys;
+import android.support.annotation.NonNull;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
-public class EventForwardingBroadcastReceiver extends BroadcastReceiver {
+public class EventForwardingBroadcastReceiver extends BaseBroadcastReceiver {
     private final CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private final long mBroadcastIdentifier;
-    private Context mContext;
+
 
     public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
     public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
@@ -24,18 +20,13 @@
 
 
     public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEventInterstitialListener, final long broadcastIdentifier) {
+        super(broadcastIdentifier);
         mCustomEventInterstitialListener = customEventInterstitialListener;
-        mBroadcastIdentifier = broadcastIdentifier;
-        sIntentFilter = getHtmlInterstitialIntentFilter();
+        getIntentFilter();
     }
 
-    static void broadcastAction(final Context context, final long broadcastIdentifier, final String action) {
-        Intent intent = new Intent(action);
-        intent.putExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(intent);
-    }
-
-    public static IntentFilter getHtmlInterstitialIntentFilter() {
+    @NonNull
+    public IntentFilter getIntentFilter() {
         if (sIntentFilter == null) {
             sIntentFilter = new IntentFilter();
             sIntentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
@@ -52,14 +43,7 @@ public void onReceive(Context context, Intent intent) {
             return;
         }
 
-        /**
-         * Only consume this broadcast if the identifier on the received Intent and this broadcast
-         * match up. This allows us to target broadcasts to the ad that spawned them. We include
-         * this here because there is no appropriate IntentFilter condition that can recreate this
-         * behavior.
-         */
-        final long receivedIdentifier = intent.getLongExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, -1);
-        if (mBroadcastIdentifier != receivedIdentifier) {
+        if (!shouldConsumeBroadcast(intent)) {
             return;
         }
 
@@ -70,22 +54,10 @@ public void onReceive(Context context, Intent intent) {
             mCustomEventInterstitialListener.onInterstitialShown();
         } else if (ACTION_INTERSTITIAL_DISMISS.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialDismissed();
-            unregister();
+            unregister(this);
         } else if (ACTION_INTERSTITIAL_CLICK.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialClicked();
         }
 
     }
-
-    public void register(Context context) {
-        mContext = context;
-        LocalBroadcastManager.getInstance(mContext).registerReceiver(this, sIntentFilter);
-    }
-
-    public void unregister() {
-        if (mContext != null) {
-            LocalBroadcastManager.getInstance(mContext).unregisterReceiver(this);
-            mContext = null;
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
new file mode 100644
index 00000000..9715fdb0
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -0,0 +1,211 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing MoPub rewarded videos.
+ */
+public class MoPubRewardedVideo extends CustomEventRewardedVideo {
+
+    @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
+
+    @NonNull private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
+    @Nullable private String mRewardedVideoCurrencyName;
+    private int mRewardedVideoCurrencyAmount;
+    private boolean mIsLoaded;
+
+    public MoPubRewardedVideo() {
+        mRewardedVastVideoInterstitial = new RewardedVastVideoInterstitial();
+    }
+
+    @Nullable
+    @Override
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        // Since MoPub is the SDK, there is no reason to get the SDK video listener
+        // since we have direct access.
+        return null;
+    }
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        // RewardedVastVideoInterstitial will handle all lifecycle events.
+        return null;
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return MOPUB_REWARDED_VIDEO_ID;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mRewardedVastVideoInterstitial.onInvalidate();
+        mIsLoaded = false;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        // No additional initialization is necessary.
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        Preconditions.checkNotNull(activity, "activity cannot be null");
+        Preconditions.checkNotNull(localExtras, "localExtras cannot be null");
+        Preconditions.checkNotNull(serverExtras, "serverExtras cannot be null");
+
+        final Object rewardedVideoCurrencyName = localExtras.get(
+                DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY);
+        if (rewardedVideoCurrencyName instanceof String) {
+            mRewardedVideoCurrencyName = (String) rewardedVideoCurrencyName;
+        } else {
+            MoPubLog.d("No currency name specified for rewarded video. Using the default name.");
+            mRewardedVideoCurrencyName = MoPubReward.NO_REWARD_LABEL;
+        }
+
+        final Object rewardedVideoCurrencyAmount = localExtras.get(
+                DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY);
+        if (rewardedVideoCurrencyAmount instanceof String) {
+            try {
+                mRewardedVideoCurrencyAmount = Integer.parseInt(
+                        (String) rewardedVideoCurrencyAmount);
+            } catch (NumberFormatException e) {
+                MoPubLog.d(
+                        "Unable to convert currency amount: " + rewardedVideoCurrencyAmount +
+                                ". Using the default reward amount: " +
+                                MoPubReward.DEFAULT_REWARD_AMOUNT);
+                mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+            }
+        } else {
+            MoPubLog.d(
+                    "No currency amount specified for rewarded video. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+
+        if (mRewardedVideoCurrencyAmount < 0) {
+            MoPubLog.d(
+                    "Negative currency amount specified for rewarded video. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+
+        mRewardedVastVideoInterstitial.loadInterstitial(activity, new MoPubRewardedVideoListener(),
+                localExtras, serverExtras);
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return mIsLoaded;
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            MoPubLog.d("Showing MoPub rewarded video.");
+            mRewardedVastVideoInterstitial.showInterstitial();
+        } else {
+            MoPubLog.d("Unable to show MoPub rewarded video");
+        }
+    }
+
+    private class MoPubRewardedVideoListener implements CustomEventInterstitial.CustomEventInterstitialListener, RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener {
+        @Override
+        public void onInterstitialLoaded() {
+            mIsLoaded = true;
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onInterstitialFailed(final MoPubErrorCode errorCode) {
+            switch (errorCode) {
+                case VIDEO_PLAYBACK_ERROR:
+                    MoPubRewardedVideoManager.onRewardedVideoPlaybackError(MoPubRewardedVideo.class,
+                            MOPUB_REWARDED_VIDEO_ID, errorCode);
+                    break;
+                default:
+                    MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MoPubRewardedVideo.class,
+                            MOPUB_REWARDED_VIDEO_ID, errorCode);
+            }
+        }
+
+        @Override
+        public void onInterstitialShown() {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onInterstitialClicked() {
+            MoPubRewardedVideoManager.onRewardedVideoClicked(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onLeaveApplication() {
+        }
+
+        @Override
+        public void onInterstitialDismissed() {
+            MoPubRewardedVideoManager.onRewardedVideoClosed(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onVideoComplete() {
+            if (mRewardedVideoCurrencyName == null) {
+                MoPubLog.d("No rewarded video was loaded, so no reward is possible");
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(MoPubRewardedVideo.class,
+                        MOPUB_REWARDED_VIDEO_ID,
+                        MoPubReward.success(mRewardedVideoCurrencyName,
+                                mRewardedVideoCurrencyAmount));
+            }
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setRewardedVastVideoInterstitial(
+            @NonNull final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
+        mRewardedVastVideoInterstitial = rewardedVastVideoInterstitial;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    String getRewardedVideoCurrencyName() {
+        return mRewardedVideoCurrencyName;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getRewardedVideoCurrencyAmount() {
+        return mRewardedVideoCurrencyAmount;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setIsLoaded(final boolean isLoaded) {
+        mIsLoaded = isLoaded;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 0dfbc4c7..8d96cf35 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -7,17 +7,22 @@
 import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 
 import com.mopub.common.AdFormat;
+import com.mopub.common.AdReport;
 import com.mopub.common.AdUrlGenerator;
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 import com.mopub.common.DataKeys;
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.MoPubCollections;
 import com.mopub.common.util.Reflection;
+import com.mopub.common.util.Utils;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubNetworkError;
@@ -48,6 +53,7 @@
     @NonNull private final AdRequestStatusMapping mAdRequestStatus;
     @NonNull private final RewardedVideoData mRewardedVideoData;
     @Nullable private MoPubRewardedVideoListener mVideoListener;
+    private final long mBroadcastIdentifier;
     
     @NonNull private final Set<MediationSettings> mGlobalMediationSettings;
     @NonNull private final Map<String, Set<MediationSettings>> mInstanceMediationSettings;
@@ -100,6 +106,7 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
         mInstanceMediationSettings = new HashMap<String, Set<MediationSettings>>();
         mCustomEventTimeoutHandler = new Handler();
         mTimeoutMap = new HashMap<String, Runnable>();
+        mBroadcastIdentifier = Utils.generateUniqueId();
         
         mAdRequestStatus = new AdRequestStatusMapping();
     }
@@ -263,6 +270,10 @@ public static void showVideo(@NonNull String adUnitId) {
         if (sInstance != null) {
             final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
             if (isPlayable(adUnitId, customEvent)) {
+                sInstance.mRewardedVideoData.updateCustomEventLastShownRewardMapping(
+                        customEvent.getClass(),
+                        sInstance.mRewardedVideoData.getMoPubReward(adUnitId));
+                sInstance.mRewardedVideoData.setCurrentAdUnitId(adUnitId);
                 sInstance.mAdRequestStatus.markPlayed(adUnitId);
                 customEvent.showVideo();
             } else {
@@ -293,12 +304,21 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
         }
 
         final String customEventClassName = adResponse.getCustomEventClassName();
+
         if (customEventClassName == null) {
             MoPubLog.e("Couldn't create custom event, class name was null.");
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
+        // We only allow one rewarded video to be loaded at a time for each ad unit. This should
+        // clear out the old rewarded video if there already was one loaded and not played.
+        final CustomEventRewardedVideo oldRewardedVideo = mRewardedVideoData.getCustomEvent(
+                adUnitId);
+        if (oldRewardedVideo != null) {
+            oldRewardedVideo.onInvalidate();
+        }
+
         try {
             // Instantiate a custom event
             final CustomEventRewardedVideo customEvent =
@@ -309,6 +329,16 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             // Put important data into localExtras...
             final Map<String, Object> localExtras = new TreeMap<String, Object>();
             localExtras.put(DataKeys.AD_UNIT_ID_KEY, adUnitId);
+            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY,
+                    adResponse.getRewardedVideoCurrencyName());
+            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY,
+                    adResponse.getRewardedVideoCurrencyAmount());
+            localExtras.put(DataKeys.AD_REPORT_KEY,
+                    new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
+            localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, mBroadcastIdentifier);
+            mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
+                    adResponse.getRewardedVideoCurrencyName(),
+                    adResponse.getRewardedVideoCurrencyAmount());
 
             Activity mainActivity = mMainActivity.get();
             if (mainActivity == null) {
@@ -423,56 +453,116 @@ protected void forEach(@NonNull final String moPubId) {
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoStarted(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoStarted(moPubId);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoStartedAction(moPubId);
                 }
-                TrackingRequest.makeTrackingHttpRequest(
-                        sInstance.mAdRequestStatus.getImpressionTrackerUrlString(moPubId),
-                        sInstance.mContext);
-                sInstance.mAdRequestStatus.clearImpressionUrl(moPubId);
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoStartedAction(currentAdUnitId);
+                }
+            });
+        }
+    }
+
+    private static void onRewardedVideoStartedAction(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoStarted(adUnitId);
+        }
+        TrackingRequest.makeTrackingHttpRequest(
+                sInstance.mAdRequestStatus.getImpressionTrackerUrlString(adUnitId),
+                sInstance.mContext);
+        sInstance.mAdRequestStatus.clearImpressionUrl(adUnitId);
     }
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoPlaybackError(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoPlaybackError(moPubId, errorCode);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoPlaybackErrorAction(moPubId, errorCode);
                 }
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoPlaybackErrorAction(currentAdUnitId, errorCode);
+                }
+            });
+        }
+    }
 
+    private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(errorCode);
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoPlaybackError(adUnitId, errorCode);
+        }
     }
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClicked(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                TrackingRequest.makeTrackingHttpRequest(
-                        sInstance.mAdRequestStatus.getClickTrackerUrlString(moPubId),
-                        sInstance.mContext);
-                sInstance.mAdRequestStatus.clearClickUrl(moPubId);
-            }
-        });
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoClickedAction(moPubId);
+                }
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoClickedAction(currentAdUnitId);
+                }
+            });
+        }
+    }
+
+    private static void onRewardedVideoClickedAction(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+        TrackingRequest.makeTrackingHttpRequest(
+                sInstance.mAdRequestStatus.getClickTrackerUrlString(adUnitId),
+                sInstance.mContext);
+        sInstance.mAdRequestStatus.clearClickUrl(adUnitId);
     }
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClosed(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoClosed(moPubId);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoClosedAction(moPubId);
                 }
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoClosedAction(currentAdUnitId);
+                }
+            });
+        }
+    }
+
+    private static void onRewardedVideoClosedAction(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoClosed(adUnitId);
+        }
     }
 
     public static <T extends CustomEventRewardedVideo>
@@ -481,15 +571,27 @@ void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final St
         postToInstance(new Runnable() {
             @Override
             public void run() {
+                final MoPubReward chosenReward = chooseReward(
+                        sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
+                        moPubReward);
                 final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
                 Set<String> rewarded = new HashSet<String>(moPubIds);
                 if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, moPubReward);
+                    sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
                 }
             }
         });
     }
 
+    @VisibleForTesting
+    static MoPubReward chooseReward(@Nullable final MoPubReward moPubReward, @NonNull final MoPubReward networkReward) {
+        if (!networkReward.isSuccessful()) {
+            return networkReward;
+        }
+
+        return moPubReward != null ? moPubReward : networkReward;
+    }
+
     /**
      * Posts the runnable to the static instance's handler. Does nothing if sInstance is null.
      * Useful for ensuring that all event callbacks run on the main thread.
@@ -534,4 +636,14 @@ public void run() {
             }
         }
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    static RewardedVideoData getRewardedVideoData() {
+        if (sInstance != null) {
+            return sInstance.mRewardedVideoData;
+        }
+        return null;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index a6b3c625..aa84f691 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -56,7 +56,7 @@ public void loadInterstitial(
 
         mBroadcastReceiver = new EventForwardingBroadcastReceiver(customEventInterstitialListener,
                 mBroadcastIdentifier);
-        mBroadcastReceiver.register(context);
+        mBroadcastReceiver.register(mBroadcastReceiver, context);
 
         preRenderHtml(customEventInterstitialListener);
     }
@@ -64,7 +64,7 @@ public void loadInterstitial(
     @Override
     public void onInvalidate() {
         if (mBroadcastReceiver != null) {
-            mBroadcastReceiver.unregister();
+            mBroadcastReceiver.unregister(mBroadcastReceiver);
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
new file mode 100644
index 00000000..3e1b6c7d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.VisibleForTesting;
+
+import java.util.Map;
+
+class RewardedVastVideoInterstitial extends VastVideoInterstitial {
+
+    interface CustomEventRewardedVideoInterstitialListener extends CustomEventInterstitialListener {
+        void onVideoComplete();
+    }
+
+    @Nullable private RewardedVideoBroadcastReceiver mRewardedVideoBroadcastReceiver;
+
+    public RewardedVastVideoInterstitial() {
+        super();
+    }
+
+    @Override
+    public void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        if (customEventInterstitialListener instanceof CustomEventRewardedVideoInterstitialListener) {
+            mRewardedVideoBroadcastReceiver = new RewardedVideoBroadcastReceiver(
+                    (CustomEventRewardedVideoInterstitialListener) customEventInterstitialListener,
+                    mBroadcastIdentifier);
+            mRewardedVideoBroadcastReceiver.register(mRewardedVideoBroadcastReceiver, context);
+        }
+    }
+
+    @Override
+    public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConfig) {
+        if (vastVideoConfig != null) {
+            vastVideoConfig.setIsRewardedVideo(true);
+        }
+        super.onVastVideoConfigurationPrepared(vastVideoConfig);
+    }
+
+    @Override
+    public void onInvalidate() {
+        super.onInvalidate();
+        if (mRewardedVideoBroadcastReceiver != null) {
+            mRewardedVideoBroadcastReceiver.unregister(mRewardedVideoBroadcastReceiver);
+        }
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    @Nullable
+    RewardedVideoBroadcastReceiver getRewardedVideoBroadcastReceiver() {
+        return mRewardedVideoBroadcastReceiver;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
new file mode 100644
index 00000000..e53712e2
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -0,0 +1,50 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+public class RewardedVideoBroadcastReceiver extends BaseBroadcastReceiver {
+
+    public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
+    private static IntentFilter sIntentFilter;
+
+    @Nullable
+    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener mRewardedVideoListener;
+
+    public RewardedVideoBroadcastReceiver(
+            @Nullable RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener rewardedVideoListener,
+            final long broadcastIdentifier) {
+        super(broadcastIdentifier);
+        mRewardedVideoListener = rewardedVideoListener;
+        getIntentFilter();
+    }
+
+    @NonNull
+    public IntentFilter getIntentFilter() {
+        if (sIntentFilter == null) {
+            sIntentFilter = new IntentFilter();
+            sIntentFilter.addAction(ACTION_REWARDED_VIDEO_COMPLETE);
+        }
+        return sIntentFilter;
+    }
+
+    @Override
+    public void onReceive(@NonNull final Context context, @NonNull final Intent intent) {
+        if (mRewardedVideoListener == null) {
+            return;
+        }
+
+        if (!shouldConsumeBroadcast(intent)) {
+            return;
+        }
+
+        final String action = intent.getAction();
+        if (ACTION_REWARDED_VIDEO_COMPLETE.equals(action)) {
+            mRewardedVideoListener.onVideoComplete();
+            unregister(this);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
index c3d45cec..6ee1c8e6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
@@ -4,6 +4,9 @@
 import android.support.annotation.Nullable;
 import android.util.Pair;
 
+import com.mopub.common.MoPubReward;
+import com.mopub.common.Preconditions;
+
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -19,12 +22,20 @@
     @NonNull
     private final Map<String, CustomEventRewardedVideo> mAdUnitToCustomEventMap;
     @NonNull
+    private final Map<String, MoPubReward> mAdUnitToRewardMap;
+    @NonNull
+    private final Map<Class<? extends CustomEventRewardedVideo>, MoPubReward> mCustomEventToRewardMap;
+    @NonNull
     private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
     @NonNull
     private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
+    @Nullable
+    private String mCurrentAdUnitId;
 
     RewardedVideoData() {
         mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedVideo>();
+        mAdUnitToRewardMap = new TreeMap<String, MoPubReward>();
+        mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedVideo>, MoPubReward>();
         mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
         mAdNetworkListeners = new HashSet<CustomEventRewardedVideo.CustomEventRewardedVideoListener>();
     }
@@ -34,6 +45,16 @@ CustomEventRewardedVideo getCustomEvent(@NonNull String moPubId) {
         return mAdUnitToCustomEventMap.get(moPubId);
     }
 
+    @Nullable
+    MoPubReward getMoPubReward(@Nullable String moPubId) {
+        return mAdUnitToRewardMap.get(moPubId);
+    }
+
+    @Nullable
+    MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedVideo> customEventClass) {
+        return mCustomEventToRewardMap.get(customEventClass);
+    }
+
     @NonNull
     Set<String> getMoPubIdsForAdNetwork(
             @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
@@ -65,6 +86,47 @@ void updateAdUnitCustomEventMapping(
         associateCustomEventWithMoPubId(customEvent.getClass(), adNetworkId, moPubId);
     }
 
+    void updateAdUnitRewardMapping(
+            @NonNull String moPubId,
+            @Nullable String currencyName,
+            @Nullable String currencyAmount) {
+        Preconditions.checkNotNull(moPubId);
+        if (currencyName == null || currencyAmount == null) {
+            // If we get here it means that the reward was not set on the frontend ad unit
+            mAdUnitToRewardMap.remove(moPubId);
+            return;
+        }
+
+        int intCurrencyAmount;
+        try {
+            intCurrencyAmount = Integer.parseInt(currencyAmount);
+        } catch(NumberFormatException e) {
+            return;
+        }
+
+        if (intCurrencyAmount < 0) {
+            return;
+        }
+
+        mAdUnitToRewardMap.put(moPubId, MoPubReward.success(currencyName, intCurrencyAmount));
+    }
+
+    /**
+     * This method should be called right before the rewarded video is shown in order to store the
+     * reward associated with the custom event class. If called earlier in the rewarded lifecycle,
+     * it's possible that this mapping will be overridden by another reward value before the video
+     * is shown.
+     *
+     * @param customEventClass the rewarded video custom event class
+     * @param moPubReward the reward from teh MoPub ad server returned in HTTP headers
+     */
+    void updateCustomEventLastShownRewardMapping(
+            @NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+            @Nullable final MoPubReward moPubReward) {
+        Preconditions.checkNotNull(customEventClass);
+        mCustomEventToRewardMap.put(customEventClass, moPubReward);
+    }
+
     void associateCustomEventWithMoPubId(
             @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
             @NonNull String adNetworkId,
@@ -100,6 +162,15 @@ void associateCustomEventWithMoPubId(
         moPubIds.add(moPubId);
     }
 
+    void setCurrentAdUnitId(@Nullable final String currentAdUnitId) {
+        mCurrentAdUnitId = currentAdUnitId;
+    }
+
+    @Nullable
+    String getCurrentAdUnitId() {
+        return mCurrentAdUnitId;
+    }
+
     private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
         @NonNull
         final Class<? extends CustomEventRewardedVideo> customEventClass;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index 79c7a519..9f53d535 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -50,6 +50,7 @@
     @Nullable private VastCompanionAdConfig mPortraitVastCompanionAdConfig;
     @NonNull private Map<String, VastCompanionAdConfig> mSocialActionsCompanionAds;
     @Nullable private VastIconConfig mVastIconConfig;
+    private boolean mIsRewardedVideo;
 
     // Custom extensions
     @Nullable private String mCustomCtaText;
@@ -80,6 +81,7 @@ public VastVideoConfig() {
         mClickTrackers = new ArrayList<VastTracker>();
         mErrorTrackers = new ArrayList<VastTracker>();
         mSocialActionsCompanionAds = new HashMap<String, VastCompanionAdConfig>();
+        mIsRewardedVideo = false;
     }
 
     /**
@@ -232,6 +234,10 @@ public void setVideoViewabilityTracker(@Nullable final VideoViewabilityTracker v
         }
     }
 
+    public void setIsRewardedVideo(final boolean isRewardedVideo) {
+        mIsRewardedVideo = isRewardedVideo;
+    }
+
     /**
      * Getters
      */
@@ -382,6 +388,15 @@ public String getSkipOffsetString() {
         return mSkipOffset;
     }
 
+    /**
+     * Returns whether or not this is an unskippable rewarded video.
+     *
+     * @return True if this is a rewarded video, false otherwise.
+     */
+    public boolean isRewardedVideo() {
+        return mIsRewardedVideo;
+    }
+
     /**
      * Called when the video starts playing.
      *
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index cef0ca51..1efde370 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -345,6 +345,12 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
     private void adjustSkipOffset() {
         int videoDuration = getDuration();
 
+        // If this is a rewarded video, never allow it to be skippable.
+        if (mVastVideoConfig.isRewardedVideo()) {
+            mShowCloseButtonDelay = videoDuration;
+            return;
+        }
+
         // Default behavior: video is non-skippable if duration < 16 seconds
         if (videoDuration < MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON) {
             mShowCloseButtonDelay = videoDuration;
@@ -393,6 +399,9 @@ public void onCompletion(MediaPlayer mp) {
 
                 videoCompleted(false);
                 mIsVideoFinishedPlaying = true;
+                if (mVastVideoConfig.isRewardedVideo()) {
+                    broadcastAction(RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+                }
 
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
                 // fire the completion event even if the whole video isn't watched.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
index 2b55c149..876e2c30 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -19,6 +19,7 @@
 import com.google.android.exoplayer.ExoPlaybackException;
 import com.google.android.exoplayer.ExoPlayer;
 import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
+import com.google.android.exoplayer.MediaCodecSelector;
 import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
 import com.google.android.exoplayer.extractor.Extractor;
 import com.google.android.exoplayer.extractor.ExtractorSampleSource;
@@ -417,10 +418,12 @@ private void preparePlayer() {
 
             final ExtractorSampleSource sampleSource = new ExtractorSampleSource(Uri.parse(videoUrl),
                     httpSource, allocator, BUFFER_SEGMENT_SIZE * BUFFER_SEGMENT_COUNT, extractor);
-            mVideoTrackRenderer = new MediaCodecVideoTrackRenderer(
-                    sampleSource, MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING,
-                    0, mHandler, null, 10);
-            mAudioTrackRenderer = new MediaCodecAudioTrackRenderer(sampleSource);
+            mVideoTrackRenderer = new MediaCodecVideoTrackRenderer(mContext, sampleSource,
+                    MediaCodecSelector.DEFAULT,
+                    MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING, 0, mHandler, null,
+                    10);
+            mAudioTrackRenderer = new MediaCodecAudioTrackRenderer(sampleSource,
+                    MediaCodecSelector.DEFAULT);
             mExoPlayer.prepare(mAudioTrackRenderer, mVideoTrackRenderer);
             mNativeVideoProgressRunnable.startRepeating(50);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
index 0970f483..0b82ba35 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
@@ -11,6 +11,7 @@
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
+import com.mopub.common.FullAdType;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
@@ -267,6 +268,15 @@ public Listener getListener() {
         }
         builder.setServerExtras(serverExtras);
 
+        if (AdType.REWARDED_VIDEO.equals(adTypeString) || AdType.CUSTOM.equals(adTypeString)) {
+            final String rewardedVideoCurrencyName = extractHeader(headers,
+                    ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME);
+            final String rewardedVideoCurrencyAmount = extractHeader(headers,
+                    ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT);
+            builder.setRewardedVideoCurrencyName(rewardedVideoCurrencyName);
+            builder.setRewardedVideoCurrencyAmount(rewardedVideoCurrencyAmount);
+        }
+
         AdResponse adResponse = builder.build();
         logScribeEvent(adResponse, networkResponse, location);
 
@@ -276,8 +286,9 @@ public Listener getListener() {
 
     private boolean eventDataIsInResponseBody(@Nullable String adType,
             @Nullable String fullAdType) {
-        return "mraid".equals(adType) || "html".equals(adType) ||
-                ("interstitial".equals(adType) && "vast".equals(fullAdType));
+        return AdType.MRAID.equals(adType) || AdType.HTML.equals(adType) ||
+                (AdType.INTERSTITIAL.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
+                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType));
     }
 
     // Based on Volley's StringResponse class.
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
index 6a955e86..cb2ba147 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
@@ -26,6 +26,11 @@
     @Nullable
     private final String mNetworkType;
 
+    @Nullable
+    private final String mRewardedVideoCurrencyName;
+    @Nullable
+    private final String mRewardedVideoCurrencyAmount;
+
     @Nullable
     private final String mRedirectUrl;
     @Nullable
@@ -71,6 +76,10 @@ private AdResponse(@NonNull Builder builder) {
         mAdUnitId = builder.adUnitId;
         mFullAdType = builder.fullAdType;
         mNetworkType = builder.networkType;
+
+        mRewardedVideoCurrencyName = builder.rewardedVideoCurrencyName;
+        mRewardedVideoCurrencyAmount = builder.rewardedVideoCurrencyAmount;
+
         mRedirectUrl = builder.redirectUrl;
         mClickTrackingUrl = builder.clickTrackingUrl;
         mImpressionTrackingUrl = builder.impressionTrackingUrl;
@@ -129,6 +138,16 @@ public String getNetworkType() {
         return mNetworkType;
     }
 
+    @Nullable
+    public String getRewardedVideoCurrencyName() {
+        return mRewardedVideoCurrencyName;
+    }
+
+    @Nullable
+    public String getRewardedVideoCurrencyAmount() {
+        return mRewardedVideoCurrencyAmount;
+    }
+
     @Nullable
     public String getRedirectUrl() {
         return mRedirectUrl;
@@ -224,6 +243,9 @@ public Builder toBuilder() {
         private String fullAdType;
         private String networkType;
 
+        private String rewardedVideoCurrencyName;
+        private String rewardedVideoCurrencyAmount;
+
         private String redirectUrl;
         private String clickTrackingUrl;
         private String impressionTrackingUrl;
@@ -266,6 +288,18 @@ public Builder setNetworkType(@Nullable final String networkType) {
             return this;
         }
 
+        public Builder setRewardedVideoCurrencyName(
+                @Nullable final String rewardedVideoCurrencyName) {
+            this.rewardedVideoCurrencyName = rewardedVideoCurrencyName;
+            return this;
+        }
+
+        public Builder setRewardedVideoCurrencyAmount(
+                @Nullable final String rewardedVideoCurrencyAmount) {
+            this.rewardedVideoCurrencyAmount = rewardedVideoCurrencyAmount;
+            return this;
+        }
+
         public Builder setRedirectUrl(@Nullable final String redirectUrl) {
             this.redirectUrl = redirectUrl;
             return this;
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index a4813525..ccca0c68 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.4.1+kit
+fabric-version=4.6.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 5123a7f2..64071c25 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -131,4 +131,12 @@ public void getCustomEventName_whenInvalidAdTypeAndInvalidFullAdType_shouldRetur
                 headers);
         assertThat(customEventName).isNull();
     }
+
+    @Test
+    public void getCustomEventName_withRewardedVideoFormat_shouldBeMoPubRewardedVideo() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.REWARDED_VIDEO,
+                AdType.REWARDED_VIDEO, null, headers);
+
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MoPubRewardedVideo");
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index b4944b80..d5bb4ec5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -27,7 +27,6 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -99,7 +98,7 @@ public void constructor_shouldSetIntentFilter() throws Exception {
                 ACTION_INTERSTITIAL_CLICK
         );
 
-        final IntentFilter intentFilter = EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter();
+        final IntentFilter intentFilter = subject.getIntentFilter();
         final Iterator<String> actionIterator = intentFilter.actionsIterator();
 
         assertThat(intentFilter.countActions()).isEqualTo(4);
@@ -174,7 +173,7 @@ public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp
 
     @Test
     public void register_shouldEnableReceivingBroadcasts() throws Exception {
-        subject.register(context);
+        subject.register(subject, context);
         Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
@@ -183,9 +182,9 @@ public void register_shouldEnableReceivingBroadcasts() throws Exception {
 
     @Test
     public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
-        subject.register(context);
+        subject.register(subject, context);
 
-        subject.unregister();
+        subject.unregister(subject);
         Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
@@ -194,18 +193,18 @@ public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
 
     @Test
     public void unregister_whenNotRegistered_shouldNotBlowUp() throws Exception {
-        subject.unregister();
+        subject.unregister(subject);
 
         // pass
     }
 
     @Test
     public void unregister_shouldNotLeakTheContext() throws Exception {
-        subject.register(context);
-        subject.unregister();
+        subject.register(subject, context);
+        subject.unregister(subject);
 
-        LocalBroadcastManager.getInstance(context).registerReceiver(subject, getHtmlInterstitialIntentFilter());
-        subject.unregister();
+        LocalBroadcastManager.getInstance(context).registerReceiver(subject, subject.getIntentFilter());
+        subject.unregister(subject);
 
         // Unregister shouldn't know the context any more and so should not have worked
         Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index b7f3fe81..2164d891 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -38,7 +38,6 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -81,7 +80,9 @@ public void setUp() throws Exception {
 
         final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent);
         subject = subjectController.get();
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
         subjectController.create();
 
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
@@ -212,7 +213,9 @@ public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throw
     public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
         subject.getAdView();
         BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialClicked();
 
@@ -226,7 +229,9 @@ public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
     public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
         subject.getAdView();
         BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialFailed(UNSPECIFIED);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index fcb1f600..3bdc8cf9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -35,6 +35,8 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -114,7 +116,8 @@ public void callbackMethods_withNullListener_shouldNotError() {
         MoPubRewardedVideoManager.onRewardedVideoClicked(TestCustomEvent.class, "id!");
         MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
         MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, "id!", MoPubReward.success("test", 111));
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, "id!",
+                MoPubReward.success("test", 111));
 
         // The test passed because none of the above calls thew an exception even though the listener is null.
     }
@@ -150,7 +153,8 @@ public void onAdSuccess_noCEFound_shouldCallFailCallback() throws Exception {
 
         requestListener.onSuccess(testResponse);
 
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+                eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
         verifyNoMoreInteractions(mockVideoListener);
     }
 
@@ -174,7 +178,8 @@ public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
     @Test
     public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
         AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
                 .build();
 
@@ -192,6 +197,75 @@ public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
         verifyNoMoreInteractions(mockVideoListener);
     }
 
+    @Test
+    public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEvent() throws Exception {
+        final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
+        MoPubRewardedVideoManager.getRewardedVideoData().updateAdUnitCustomEventMapping(
+                "testAdUnit", mockCustomEvent, null, "id!");
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        // Load the first custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the first custom event
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+        reset(mockVideoListener);
+
+        ShadowLooper.pauseMainLooper();
+
+        // Load the second custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the second custom event was loaded
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+
+        // Verify that the first custom event was invalidated
+        verify(mockCustomEvent).onInvalidate();
+        verifyNoMoreInteractions(mockCustomEvent);
+    }
+
+    @Test
+    public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedVideoCurrencyName("currency_name")
+                .setRewardedVideoCurrencyAmount("123")
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        MoPubReward moPubReward =
+                MoPubRewardedVideoManager.getRewardedVideoData().getMoPubReward("testAdUnit");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+    }
+
     @Test
     public void playVideo_shouldSetHasVideoFalse() {
         AdResponse testResponse = new AdResponse.Builder()
@@ -238,6 +312,33 @@ public void playVideo_whenNotHasVideo_shouldFail() {
         verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.VIDEO_NOT_AVAILABLE));
     }
 
+    @Test
+    public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedVideoCurrencyName("currency_name")
+                .setRewardedVideoCurrencyAmount("123")
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+
+        MoPubReward moPubReward =
+                MoPubRewardedVideoManager.getRewardedVideoData().getLastShownMoPubReward(TestCustomEvent.class);
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+    }
+
     @Test
     public void onAdFailure_shouldCallFailCallback() {
         VolleyError e = new VolleyError("testError!");
@@ -250,6 +351,26 @@ public void onAdFailure_shouldCallFailCallback() {
         verifyNoMoreInteractions(mockVideoListener);
     }
 
+    @Test
+    public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Exception {
+        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward networkReward = MoPubReward.success("network_reward", 456);
+
+        MoPubReward chosenReward =
+                MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
+        assertThat(chosenReward).isEqualTo(moPubReward);
+    }
+
+    @Test
+    public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkReward() throws Exception {
+        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward networkReward = MoPubReward.failure();
+
+        MoPubReward chosenReward =
+                MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
+        assertThat(chosenReward).isEqualTo(networkReward);
+    }
+
     public static class TestCustomEvent extends CustomEventRewardedVideo {
         protected boolean mPlayable = false;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
new file mode 100644
index 00000000..5d64984d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -0,0 +1,205 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.TreeMap;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubRewardedVideoTest {
+
+    private Activity activity;
+    private MoPubRewardedVideo subject;
+
+    @Mock private RewardedVastVideoInterstitial mockRewardedVastVideoInterstitial;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        MoPubRewardedVideoManager.init(activity);
+
+        subject = new MoPubRewardedVideo();
+    }
+
+    @Test
+    public void onInvalidate_withVastVideoInterstitial_shouldInvalidateVastVideoInterstitial() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+
+        subject.onInvalidate();
+
+        verify(mockRewardedVastVideoInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+    }
+
+    @Test
+    public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVideoInterstitial() {
+        subject.onInvalidate();
+
+        verifyZeroInteractions(mockRewardedVastVideoInterstitial);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideoInterstitial() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.loadWithSdkInitialized(activity, new TreeMap<String, Object>(),
+                new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(new TreeMap<String, Object>()),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyNameToEmptyString() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, new Object());
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "10");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(10);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, new Object());
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "foo");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "-42");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, String> serverExtras = new HashMap<String, String>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "10");
+
+        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity),
+                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
+                eq(serverExtras));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(10);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmount_shouldLoadVastVideoInterstitial_shouldNotChangeCurrencyName_shouldSetCurrencyAmountToZero() throws Exception {
+        // We pass whatever was sent to this custom event to the app as long as it exists, but
+        // if the currency value is negative, set it to 0
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, String> serverExtras = new HashMap<String, String>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "-10");
+
+        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity),
+                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
+                eq(serverExtras));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.setIsLoaded(true);
+
+        subject.showVideo();
+
+        verify(mockRewardedVastVideoInterstitial).showInterstitial();
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+    }
+
+    @Test
+    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.setIsLoaded(false);
+
+        subject.showVideo();
+
+        verifyZeroInteractions(mockRewardedVastVideoInterstitial);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index 2d2e16f3..e27325f1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -35,7 +35,6 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -208,7 +207,8 @@ public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exce
     public void onDestroy_DestroyMraidView() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.getBroadcastIdentifier());
         ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                getHtmlInterstitialIntentFilter());
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         subject.onDestroy();
 
@@ -268,7 +268,8 @@ public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throw
     public void baseMraidListenerOnOpen_shouldBroadcastClickEvent() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                getHtmlInterstitialIntentFilter());
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         reset(mraidWebView);
 
@@ -330,7 +331,9 @@ private Intent createMraidActivityIntent(String expectedSource) {
     @Test
     public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
@@ -339,7 +342,9 @@ public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
     @Test
     public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         subject.onDestroy();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
new file mode 100644
index 00000000..9e840b27
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
@@ -0,0 +1,77 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVastVideoInterstitialTest {
+
+    private Context context;
+    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener customEventRewardedVideoInterstitialListener;
+    private Map<String, Object> localExtras;
+    private Map<String, String> serverExtras;
+    private RewardedVastVideoInterstitial subject;
+
+    @Mock AdReport mockAdReport;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new RewardedVastVideoInterstitial();
+
+        final String expectedResponse = "<VAST>hello</VAST>";
+
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        customEventRewardedVideoInterstitialListener = mock(
+                RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener.class);
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
+
+        final long broadcastIdentifier = 2222;
+        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        when(mockAdReport.getDspCreativeId()).thenReturn("dsp_creative_id");
+        localExtras.put(AD_REPORT_KEY, mockAdReport);
+    }
+
+    @Test
+    public void loadInterstitial_withCustomEventRewardedVideoInterstitialListener_shouldRegisterRewardedVideoBroadcastReceiver() {
+        subject.loadInterstitial(context, customEventRewardedVideoInterstitialListener, localExtras,
+                serverExtras);
+
+        assertThat(subject.getRewardedVideoBroadcastReceiver()).isNotNull();
+    }
+
+    @Test
+    public void onVastVideoConfigurationPrepared_withProperVastConfig_shouldSetRewardedVideoFlag() {
+        subject.loadInterstitial(context, customEventRewardedVideoInterstitialListener, localExtras,
+                serverExtras);
+        final VastVideoConfig mockVastVideoConfig = mock(VastVideoConfig.class);
+
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+
+        verify(mockVastVideoConfig).setIsRewardedVideo(true);
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
new file mode 100644
index 00000000..64b328a4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
@@ -0,0 +1,67 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.IntentFilter;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.fest.util.Sets;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.Iterator;
+import java.util.Set;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVideoBroadcastReceiverTest {
+
+    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener customEventRewardedVideoInterstitialListener;
+    private RewardedVideoBroadcastReceiver subject;
+    private Activity context;
+    private long broadcastIdentifier;
+
+    @Before
+    public void setUp() throws Exception {
+        customEventRewardedVideoInterstitialListener = mock(
+                RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener.class);
+        broadcastIdentifier = 123456L;
+        subject = new RewardedVideoBroadcastReceiver(customEventRewardedVideoInterstitialListener,
+                broadcastIdentifier);
+        context = new Activity();
+    }
+
+    @Test
+    public void constructor_shouldSetIntentFilter() throws Exception {
+        Set<String> expectedActions = Sets.newLinkedHashSet(
+                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE
+        );
+
+        final IntentFilter intentFilter = subject.getIntentFilter();
+        final Iterator<String> actionIterator = intentFilter.actionsIterator();
+
+        assertThat(intentFilter.countActions()).isEqualTo(1);
+        while (actionIterator.hasNext()) {
+            assertThat(expectedActions.contains(actionIterator.next()));
+        }
+    }
+
+    @Test
+    public void onReceive_withActionRewardedVideoComplete_shouldNotifyListener() {
+        final Intent rewardedVideoCompleteIntent = new Intent();
+        rewardedVideoCompleteIntent.setAction(
+                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+        rewardedVideoCompleteIntent.putExtra("broadcastIdentifier", broadcastIdentifier);
+
+        subject.onReceive(context, rewardedVideoCompleteIntent);
+
+        verify(customEventRewardedVideoInterstitialListener).onVideoComplete();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
new file mode 100644
index 00000000..512ac0e7
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
@@ -0,0 +1,73 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.MoPubReward;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVideoDataTest {
+
+    private RewardedVideoData subject;
+
+    @Before
+    public void setup() {
+        subject = new RewardedVideoData();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_shouldMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldRemoveExistingAdUnitMapping_shouldNotMapAdUnitIdToReward() throws Exception {
+        // Insert initial value to be removed with next call
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+
+        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldNotMapAdUnitIdToReward() throws Exception {
+        // Insert initial value to be removed with next call
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+
+        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", null);
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNonNumberCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "abc");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withCurrencyAmountLessThanZero_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "-1");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 2fef21ab..30c32d09 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -95,7 +95,8 @@ public void preRenderHtml_whenCreatingVideoCache_butItHasInitializationErrors_sh
 
     @Test
     public void loadInterstitial_shouldParseHtmlResponseBodyServerExtra() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
 
         assertThat(((VastVideoInterstitial) subject).getVastResponse()).isEqualTo(expectedResponse);
     }
@@ -169,6 +170,7 @@ public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers(
                 vastVideoConfig,
                 broadcastIdentifier
                 );
+        assertThat(vastVideoConfig.isRewardedVideo()).isFalse();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index aaac5fd4..f7cfbc63 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -68,7 +68,6 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
 import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
@@ -236,7 +235,9 @@ public boolean matches(HttpRequest request) {
             }
         }, new TestHttpResponse(200, "body"));
 
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(null,
+                testBroadcastIdentifier).getIntentFilter());
 
         expectedUserAgent = new WebView(context).getSettings().getUserAgentString();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index 69146604..b46389de 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -27,7 +27,6 @@
 import static android.view.View.VISIBLE;
 import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -60,7 +59,8 @@ public boolean matches(HttpRequest request) {
             }
         }, new TestHttpResponse(200, "body"));
 
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(null, 0).getIntentFilter());
     }
 
     @After
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 2aa2a963..47364714 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -342,6 +342,21 @@ public void parseNetworkResponse_withBadJSON_shouldReturnError() {
         assertThat(response.error.getCause()).isExactlyInstanceOf(JSONException.class);
     }
 
+    @Test
+    public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
+        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currencyName");
+        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), "25");
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
+        assertThat(response.result.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(response.result.getRewardedVideoCurrencyAmount()).isEqualTo("25");
+    }
+
     @Test
     public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
         subject.deliverResponse(mockAdResponse);
