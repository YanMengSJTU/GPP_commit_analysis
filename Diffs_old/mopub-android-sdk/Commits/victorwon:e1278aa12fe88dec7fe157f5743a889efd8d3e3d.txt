diff --git a/extras/src/com/mopub/mobileads/AppLovinBanner.java b/extras/src/com/mopub/mobileads/AppLovinBanner.java
new file mode 100644
index 00000000..7a581cf2
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/AppLovinBanner.java
@@ -0,0 +1,97 @@
+package com.mopub.mobileads;
+
+import java.util.Map;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+
+import com.applovin.adview.AppLovinAdView;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinSdk;
+
+public class AppLovinBanner extends CustomEventBanner implements AppLovinAdLoadListener, AppLovinAdDisplayListener
+{
+
+    private CustomEventBanner.CustomEventBannerListener mBannerListener;
+    private AppLovinAdView ALAdView;
+
+    /*
+     * Abstract methods from CustomEventBanner
+     */
+	@Override
+	protected void loadBanner(Context context,
+			CustomEventBannerListener bannerListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras)
+    {
+        mBannerListener = bannerListener;
+
+        Activity activity = null;
+        if (context instanceof Activity)
+        {
+            activity = (Activity) context;
+        }
+        else
+        {
+            mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+            return;
+        }
+
+        Log.d("AppLovinAdapter", "Reqeust received for new BANNER.");
+
+        ALAdView = new AppLovinAdView(AppLovinSdk.getInstance(context), AppLovinAdSize.BANNER, activity);
+        ALAdView.setAdLoadListener(this);
+        ALAdView.setAdDisplayListener(this);
+        ALAdView.loadNextAd();
+    }
+
+    @Override
+    public void onInvalidate()
+    {
+        ALAdView.setAdLoadListener(null);
+    }
+
+    @Override
+    public void adReceived(AppLovinAd ad)
+    {
+        mBannerListener.onBannerLoaded(ALAdView);
+        Log.d("AppLovinAdapter", "AdView was passed to MoPub.");
+    }
+
+    @Override
+    public void failedToReceiveAd(int errorCode)
+    {
+        if (errorCode == 202)
+        {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
+        }
+        else if (errorCode >= 500)
+        {
+            mBannerListener.onBannerFailed(MoPubErrorCode.SERVER_ERROR);
+        }
+        else if (errorCode < 0)
+        {
+            mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
+        else
+        {
+            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+	@Override
+	public void adDisplayed(AppLovinAd arg0) {
+		
+	}
+
+	@Override
+	public void adHidden(AppLovinAd arg0) {
+		
+	}
+
+
+}
+	
\ No newline at end of file
diff --git a/extras/src/com/mopub/mobileads/AppLovinInterstitial.java b/extras/src/com/mopub/mobileads/AppLovinInterstitial.java
new file mode 100644
index 00000000..2f482471
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/AppLovinInterstitial.java
@@ -0,0 +1,116 @@
+package com.mopub.mobileads;
+
+import java.util.Map;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+
+import com.applovin.adview.AppLovinAdView;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdService;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinSdk;
+
+public class AppLovinInterstitial extends CustomEventInterstitial implements
+		AppLovinAdLoadListener, AppLovinAdDisplayListener {
+	public static final String LOCATION_KEY = "location";
+
+	private CustomEventInterstitial.CustomEventInterstitialListener mInterstitialListener;
+	private Activity parentActivity;
+	private AppLovinAdService adService;
+	private AppLovinAd lastReceived;
+
+	/*
+	 * Abstract methods from CustomEventInterstitial
+	 */
+	@Override
+	public void loadInterstitial(
+			Context context,
+			CustomEventInterstitial.CustomEventInterstitialListener interstitialListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		mInterstitialListener = interstitialListener;
+
+		if (context instanceof Activity) {
+			parentActivity = (Activity) context;
+		} else {
+			mInterstitialListener
+					.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+			return;
+		}
+
+		adService = AppLovinSdk.getInstance(context).getAdService();
+		adService.loadNextAd(AppLovinAdSize.INTERSTITIAL, this);
+
+		Log.d("AppLovinAdapter", "Interstitial loaded.");
+	}
+
+	@Override
+	public void showInterstitial() {
+		final AppLovinAd adToRender = lastReceived;
+
+		if (adToRender != null) {
+			Log.d("MoPub", "Showing AppLovin interstitial ad...");
+
+			parentActivity.runOnUiThread(new Runnable() {
+				public void run() {
+					AppLovinAdView adView = new AppLovinAdView(
+							AppLovinAdSize.BANNER, parentActivity);
+					adView.renderAd(adToRender);
+
+					mInterstitialListener.onInterstitialShown();
+				}
+			});
+		}
+	}
+
+	@Override
+	public void onInvalidate() {
+
+	}
+
+	@Override
+	public void adReceived(AppLovinAd ad) {
+		Log.d("MoPub", "AppLovin interstitial loaded successfully.");
+
+		lastReceived = ad;
+
+		parentActivity.runOnUiThread(new Runnable() {
+			public void run() {
+				mInterstitialListener.onInterstitialLoaded();
+
+			}
+		});
+	}
+
+	@Override
+	public void failedToReceiveAd(int errorCode) {
+		if (errorCode == 202) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+		} else if (errorCode >= 500) {
+			mInterstitialListener
+					.onInterstitialFailed(MoPubErrorCode.SERVER_ERROR);
+		} else if (errorCode < 0) {
+			mInterstitialListener
+					.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+		} else {
+			mInterstitialListener
+					.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+		}
+	}
+
+	@Override
+	public void adDisplayed(AppLovinAd arg0) {
+		mInterstitialListener.onInterstitialShown();
+
+	}
+
+	@Override
+	public void adHidden(AppLovinAd arg0) {
+		mInterstitialListener.onInterstitialDismissed();
+
+	}
+
+}
\ No newline at end of file
diff --git a/extras/src/com/mopub/mobileads/InMobiBanner.java b/extras/src/com/mopub/mobileads/InMobiBanner.java
index c773e94a..6d635551 100644
--- a/extras/src/com/mopub/mobileads/InMobiBanner.java
+++ b/extras/src/com/mopub/mobileads/InMobiBanner.java
@@ -79,6 +79,7 @@ public void onAdRequestFailed(IMAdView adView, ErrorCode errorCode) {
     @Override
     public void onDismissAdScreen(IMAdView adView) {
         Log.d("MoPub", "InMobi banner ad modal dismissed.");
+ 
     }
 
     @Override
diff --git a/extras/src/com/mopub/mobileads/RevMobInterstitial.java b/extras/src/com/mopub/mobileads/RevMobInterstitial.java
index 20304638..bef24561 100644
--- a/extras/src/com/mopub/mobileads/RevMobInterstitial.java
+++ b/extras/src/com/mopub/mobileads/RevMobInterstitial.java
@@ -4,6 +4,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.location.Location;
 import android.util.Log;
 
 import com.revmob.RevMob;
@@ -16,6 +17,7 @@
 class RevMobInterstitial extends CustomEventInterstitial implements
 		RevMobAdsListener {
 	public static final String APP_ID_KEY = "appId";
+	public static final String LOCATION_KEY = "location";
 
 	private CustomEventInterstitialListener mInterstitialListener;
 	private RevMobFullscreen fullscreenAd;
@@ -48,11 +50,18 @@ protected void loadInterstitial(Context context,
 		 * specifying Custom Event Data in MoPub's web interface.
 		 */
 		String appId = serverExtras.get(APP_ID_KEY);
-		if (appId != null && appId.length()>0) {
-			RevMob.start(activity, appId); // if appId is null, we assume it's already init'ed in the app code.
+		if (appId != null && appId.length() > 0) {
+			RevMob.start(activity, appId); // if appId is null, we assume it's
+											// already init'ed in the app code.
 		}
-		
-//		RevMob.session().setTestingMode(RevMobTestingMode.WITH_ADS);
+
+		Location location = extractLocation(localExtras);
+		if (location != null) {
+			RevMob.session().setUserLocation(location.getLatitude(), location.getLongitude(),
+					location.getAccuracy());
+		}
+
+		// RevMob.session().setTestingMode(RevMobTestingMode.WITH_ADS);
 		fullscreenAd = RevMob.session().createFullscreen(activity, this);
 		fullscreenAd.load();
 	}
@@ -68,6 +77,13 @@ protected void onInvalidate() {
 		fullscreenAd = null;
 	}
 
+	private Location extractLocation(Map<String, Object> localExtras) {
+		Object location = localExtras.get(LOCATION_KEY);
+		if (location instanceof Location) {
+			return (Location) location;
+		}
+		return null;
+	}
 
 	// --
 	@Override
@@ -75,9 +91,9 @@ public void onRevMobAdClicked() {
 		Log.d("MoPub", "RevMob interstitial ad clicked.");
 		mInterstitialListener.onInterstitialClicked();
 
-		this.onRevMobAdDismiss(); // must call this as Revmob doesn't trigger it after clicking
-		
-		mInterstitialListener.onLeaveApplication();
+		this.onRevMobAdDismiss(); // must call this as Revmob doesn't trigger it
+									// after clicking
+
 	}
 
 	@Override
diff --git a/mopub-sdk/.classpath b/mopub-sdk/.classpath
index ec977dc6..2ec543f4 100644
--- a/mopub-sdk/.classpath
+++ b/mopub-sdk/.classpath
@@ -12,5 +12,6 @@
 	<classpathentry exported="true" kind="lib" path="libs/InMobiCommons-3.7.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="libs/libadapterinmobi.jar"/>
 	<classpathentry exported="true" kind="lib" path="libs/revmob-6.2.6.jar"/>
+	<classpathentry exported="true" kind="lib" path="libs/applovin-sdk-5.0.3.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
