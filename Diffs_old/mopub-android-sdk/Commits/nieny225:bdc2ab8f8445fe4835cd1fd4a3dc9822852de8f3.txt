diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 3608f60f..b3b7c8a9 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -17,6 +17,9 @@
         android:networkSecurityConfig="@xml/network_security_config"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
+        <meta-data
+            android:name="com.google.android.gms.ads.APPLICATION_ID"
+            android:value="ca-app-pub-2687325649049316~2265136787"/>
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
                 android:theme="@style/AppTheme.NoActionBar"
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 7adac5b9..634bae7b 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,10 +9,13 @@ repositories {
         dirs '../libs'
     }
 //    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
-    maven { url 'https://jitpack.io' }
+    maven { url 'https://adcolony.bintray.com/AdColony' }
+    maven { url 'https://tapjoy.bintray.com/maven' }
     maven { url 'https://dl.bintray.com/ironsource-mobile/android-sdk'}
+    maven { url 'https://jitpack.io' }
 }
 
+
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
@@ -33,6 +36,7 @@ android {
         versionName version
         minSdkVersion 16
         targetSdkVersion 28
+        multiDexEnabled true
 
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -76,30 +80,52 @@ dependencies {
     implementation 'com.google.android.gms:play-services-base:16.0.1'
     implementation project(':mopub-sdk')
 
+// AdColony
+    implementation 'com.adcolony:sdk:3.3.8'
+    implementation 'com.mopub.mediation:adcolony:3.3.8.1'
+
+// Facebook Audience Network
+    implementation 'com.facebook.android:audience-network-sdk:5.2.0'
+    implementation 'com.mopub.mediation:facebookaudiencenetwork:5.2.0.1'
+
+// Tapjoy
+    implementation 'com.tapjoy:tapjoy-android-sdk:12.2.0@aar'
+    implementation 'com.mopub.mediation:tapjoy:12.2.0.3'
+
+// Yahoo! Flurry
+//    implementation 'com.flurry.android:ads:11.6.0@aar'
+//    implementation 'com.flurry.android:analytics:11.5.0@aar'
+//    implementation 'com.mopub.mediation:flurry:11.6.0.0'
+
+// ironSource
+    implementation 'com.ironsource.sdk:mediationsdk:6.8.2@jar'
+    implementation 'com.mopub.mediation:ironsource:6.8.2.2'
+
+// Unity Ads
+    implementation 'com.unity3d.ads:unity-ads:3.0.1'
+    implementation 'com.mopub.mediation:unityads:3.0.1.2'
+
+// Google (AdMob)
+    implementation 'com.google.android.gms:play-services-ads:17.1.2'
+    implementation 'com.mopub.mediation:admob:17.1.2.4'
 
-    // AppLovin
-    implementation 'com.applovin:applovin-sdk:8.0.1'
-    implementation 'com.mopub.mediation:applovin:8.0.1.0'
+// AppLovin
+    implementation 'com.applovin:applovin-sdk:9.4.0'
+    implementation 'com.mopub.mediation:applovin:9.4.0.0'
 
-    // Google (AdMob)
-    implementation 'com.google.android.gms:play-services-ads:15.0.0'
-    implementation 'com.mopub.mediation:admob:15.0.0.11'
+// Chartboost
+// This mediated network SDK is not available on JCenter. Ensure you have downloaded and imported it manually into your app project.
+//    implementation 'com.mopub.mediation:chartboost:7.3.1.3'
 
-    // Facebook Audience Network
-    implementation 'com.facebook.android:audience-network-sdk:5.1.0'
-//    implementation 'com.mopub.mediation:facebookaudiencenetwork:5.1.0.2'
+// One by AOL
+// This mediated network SDK is not available on JCenter. Ensure you have downloaded and imported it manually into your app project.
+//    implementation 'com.mopub.mediation:onebyaol:6.8.3.1'
 
-    // Unity Ads
-    // This mediated network SDK is not available on JCenter. Ensure you have downloaded and imported it manually into your app project.
-    implementation 'com.mopub.mediation:unityads:2.2.1.2'
+// Vungle
+    implementation 'com.github.vungle:vungle-android-sdk:6.3.24'
+    implementation 'com.mopub.mediation:vungle:6.3.24.2'
 
-    // Vungle
-    implementation 'com.github.vungle:vungle-android-sdk:6.2.5'
-    implementation 'com.mopub.mediation:vungle:6.2.5.1'
 
-    // ironSource
-    implementation 'com.ironsource.sdk:mediationsdk:6.7.9.1@jar'
-    implementation 'com.mopub.mediation:ironsource:6.7.9.1.0'
 
     // Instrumentation testing-only dependencies
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
diff --git a/mopub-sample/res/layout/fb_native_ad_list_item.xml b/mopub-sample/res/layout/fb_native_ad_list_item.xml
new file mode 100644
index 00000000..6d3f49b5
--- /dev/null
+++ b/mopub-sample/res/layout/fb_native_ad_list_item.xml
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/native_outer_view"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@android:color/white"
+    android:textDirection="locale">
+
+    <com.facebook.ads.AdIconView
+        android:id="@+id/native_icon_image"
+        android:layout_width="64dp"
+        android:layout_height="64dp"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginLeft="10dp"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:background="@null"
+        android:contentDescription="@null" />
+
+    <TextView
+        android:id="@+id/native_title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginLeft="84dp"
+        android:layout_marginStart="84dp"
+        android:layout_marginTop="32dp"
+        android:textColor="@android:color/darker_gray"
+        android:textStyle="bold" />
+
+    <TextView
+        android:id="@+id/native_text"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/native_icon_image"
+        android:layout_marginLeft="10dp"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:textColor="@android:color/darker_gray" />
+
+
+    <com.facebook.ads.MediaView
+        android:id="@+id/native_media_layout"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_below="@+id/native_text"
+        android:layout_centerHorizontal="true"
+        android:layout_marginBottom="10dp"
+        android:layout_marginEnd="10dp"
+        android:layout_marginLeft="10dp"
+        android:layout_marginRight="10dp"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:background="#000000" />
+
+    <Button
+        android:id="@+id/native_cta"
+        android:layout_width="wrap_content"
+        android:layout_height="35dp"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_below="@+id/native_media_layout"
+        android:layout_marginEnd="10dp"
+        android:layout_marginRight="10dp"
+        android:layout_marginTop="10dp"
+        android:clickable="true"
+        android:focusable="true"
+        android:paddingBottom="10dp"
+        android:text="@string/learn_more"
+        android:textColor="@android:color/black"
+        android:textSize="12sp"
+        android:textStyle="bold" />
+
+    <RelativeLayout
+        android:id="@+id/native_privacy_information_icon_image"
+        android:layout_width="40dp"
+        android:layout_height="40dp"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentTop="true"
+        android:contentDescription="@string/native_privacy_information_icon_image"
+        android:padding="10dp" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/mopub-sample/res/layout/video_ad_list_item.xml b/mopub-sample/res/layout/video_ad_list_item.xml
index 47912f25..6255f7bd 100644
--- a/mopub-sample/res/layout/video_ad_list_item.xml
+++ b/mopub-sample/res/layout/video_ad_list_item.xml
@@ -77,14 +77,19 @@
         android:textSize="12sp"
         android:textStyle="bold" />
 
-    <ImageView
-        android:id="@+id/native_privacy_information_icon_image"
+    <FrameLayout android:id="@+id/native_ad_choices_icon_container"
         android:layout_width="40dp"
         android:layout_height="40dp"
-        android:layout_alignParentEnd="true"
-        android:layout_alignParentRight="true"
-        android:layout_alignParentTop="true"
-        android:contentDescription="@string/native_privacy_information_icon_image"
-        android:padding="10dp" />
+        android:padding="10dp" >
+        <ImageView
+            android:id="@+id/native_privacy_information_icon_image"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:layout_alignParentEnd="true"
+            android:layout_alignParentRight="true"
+            android:layout_alignParentTop="true"
+            android:contentDescription="@string/native_privacy_information_icon_image"
+            android:padding="10dp" />
+    </FrameLayout>
 
 </RelativeLayout>
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookAdapterConfiguration.java b/mopub-sample/src/main/java/com/mopub/mobileads/FacebookAdapterConfiguration.java
deleted file mode 100644
index 5bd30221..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookAdapterConfiguration.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.facebook.ads.AudienceNetworkAds;
-import com.facebook.ads.BidderTokenProvider;
-import com.mopub.common.BaseAdapterConfiguration;
-import com.mopub.common.OnNetworkInitializationFinishedListener;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicReference;
-
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM_WITH_THROWABLE;
-
-public class FacebookAdapterConfiguration extends BaseAdapterConfiguration {
-
-    private static final String ADAPTER_VERSION = "5.1.0.2";
-    private static final String MOPUB_NETWORK_NAME = "facebook";
-    private AtomicBoolean networkInitializationSucceeded = new AtomicBoolean(false);
-    private AtomicReference<String> tokenReference = new AtomicReference<>(null);
-    private AtomicBoolean isComputingToken = new AtomicBoolean(false);
-
-    @NonNull
-    @Override
-    public String getAdapterVersion() {
-        return ADAPTER_VERSION;
-    }
-
-    @Nullable
-    @Override
-    public String getBiddingToken(@NonNull final Context context) {
-        Preconditions.checkNotNull(context);
-
-        refreshBidderToken(context);
-        return networkInitializationSucceeded.get() ? tokenReference.get() : null;
-    }
-
-    @NonNull
-    @Override
-    public String getMoPubNetworkName() {
-        return MOPUB_NETWORK_NAME;
-    }
-
-    @NonNull
-    @Override
-    public String getNetworkSdkVersion() {
-        final String adapterVersion = getAdapterVersion();
-        return adapterVersion.substring(0, adapterVersion.lastIndexOf('.'));
-    }
-
-    @Override
-    public void initializeNetwork(@NonNull final Context context,
-                                  @Nullable final Map<String, String> configuration,
-                                  @NonNull final OnNetworkInitializationFinishedListener listener) {
-
-        Preconditions.checkNotNull(context);
-        Preconditions.checkNotNull(listener);
-
-
-        synchronized (FacebookAdapterConfiguration.class) {
-            try {
-                AudienceNetworkAds.initialize(context);
-                refreshBidderToken(context);
-                networkInitializationSucceeded.set(true);
-            } catch (Exception e) {
-                MoPubLog.log(CUSTOM_WITH_THROWABLE, "Initializing Facebook Audience Network" +
-                        " has encountered an exception.", e);
-            }
-        }
-
-        if (networkInitializationSucceeded.get()) {
-            listener.onNetworkInitializationFinished(this.getClass(),
-                    MoPubErrorCode.ADAPTER_INITIALIZATION_SUCCESS);
-        } else {
-            listener.onNetworkInitializationFinished(this.getClass(),
-                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-        }
-    }
-
-    private void refreshBidderToken(final Context context) {
-        if (isComputingToken.compareAndSet(false, true)) {
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    tokenReference.set(BidderTokenProvider.getBidderToken(context));
-                    isComputingToken.set(false);
-                }
-            }).start();
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookBanner.java b/mopub-sample/src/main/java/com/mopub/mobileads/FacebookBanner.java
deleted file mode 100755
index 5f7e065f..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookBanner.java
+++ /dev/null
@@ -1,193 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdListener;
-import com.facebook.ads.AdSettings;
-import com.facebook.ads.AdSize;
-import com.facebook.ads.AdView;
-import com.facebook.ads.AudienceNetworkAds;
-import com.mopub.common.DataKeys;
-import com.mopub.common.MoPub;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Views;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CLICKED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_SUCCESS;
-
-public class FacebookBanner extends CustomEventBanner implements AdListener {
-    private static final String PLACEMENT_ID_KEY = "placement_id";
-    private static final String ADAPTER_NAME = FacebookBanner.class.getSimpleName();
-    private static AtomicBoolean sIsInitialized = new AtomicBoolean(false);
-
-    private AdView mFacebookBanner;
-    private CustomEventBannerListener mBannerListener;
-    @NonNull
-    private FacebookAdapterConfiguration mFacebookAdapterConfiguration;
-
-    /**
-     * CustomEventBanner implementation
-     */
-
-    public FacebookBanner() {
-        mFacebookAdapterConfiguration = new FacebookAdapterConfiguration();
-    }
-
-    @Override
-    protected void loadBanner(final Context context,
-                              final CustomEventBannerListener customEventBannerListener,
-                              final Map<String, Object> localExtras,
-                              final Map<String, String> serverExtras) {
-        if (!sIsInitialized.getAndSet(true)) {
-            AudienceNetworkAds.initialize(context);
-        }
-
-        setAutomaticImpressionAndClickTracking(false);
-
-        mBannerListener = customEventBannerListener;
-
-        final String placementId;
-        if (serverExtrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-            mFacebookAdapterConfiguration.setCachedInitializationParameters(context, serverExtras);
-        } else {
-            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-            if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-            }
-            return;
-        }
-
-        int width;
-        int height;
-        if (localExtrasAreValid(localExtras)) {
-            width = (Integer) localExtras.get(DataKeys.AD_WIDTH);
-            height = (Integer) localExtras.get(DataKeys.AD_HEIGHT);
-        } else {
-            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-            if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-            }
-            return;
-        }
-
-        AdSize adSize = calculateAdSize(width, height);
-        if (adSize == null) {
-
-            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-            if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-            }
-            return;
-        }
-        AdSettings.setMediationService("MOPUB_" + MoPub.SDK_VERSION);
-
-        mFacebookBanner = new AdView(context, placementId, adSize);
-        mFacebookBanner.setAdListener(this);
-
-        final String adm = serverExtras.get(DataKeys.ADM_KEY);
-        if (!TextUtils.isEmpty(adm)) {
-            mFacebookBanner.loadAdFromBid(adm);
-            MoPubLog.log(placementId, LOAD_ATTEMPTED, ADAPTER_NAME);
-        } else {
-            mFacebookBanner.loadAd();
-            MoPubLog.log(placementId, LOAD_ATTEMPTED, ADAPTER_NAME);
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mFacebookBanner != null) {
-            Views.removeFromParent(mFacebookBanner);
-            mFacebookBanner.destroy();
-            mFacebookBanner = null;
-        }
-    }
-
-    /**
-     * AdListener implementation
-     */
-
-    @Override
-    public void onAdLoaded(Ad ad) {
-        MoPubLog.log(CUSTOM, ADAPTER_NAME, "Facebook banner ad loaded successfully. Showing ad...");
-
-        if (mBannerListener != null) {
-            mBannerListener.onBannerLoaded(mFacebookBanner);
-            MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
-            MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
-            MoPubLog.log(SHOW_SUCCESS, ADAPTER_NAME);
-        }
-    }
-
-    @Override
-    public void onError(final Ad ad, final AdError error) {
-        MoPubLog.log(CUSTOM, ADAPTER_NAME, "Facebook banner ad failed to load.");
-
-        if (mBannerListener != null) {
-            if (error == AdError.NO_FILL) {
-                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-            } else if (error == AdError.INTERNAL_ERROR) {
-                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_INVALID_STATE.getIntCode(), MoPubErrorCode.NETWORK_INVALID_STATE);
-            } else {
-                mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.UNSPECIFIED.getIntCode(), MoPubErrorCode.UNSPECIFIED);
-            }
-        }
-    }
-
-    @Override
-    public void onAdClicked(Ad ad) {
-        if (mBannerListener != null) {
-            mBannerListener.onBannerClicked();
-            MoPubLog.log(CLICKED, ADAPTER_NAME);
-        }
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        MoPubLog.log(CUSTOM, ADAPTER_NAME, "Facebook banner ad logged impression.");
-        if (mBannerListener != null) {
-            mBannerListener.onBannerImpression();
-        }
-    }
-
-    private boolean serverExtrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    private boolean localExtrasAreValid(@NonNull final Map<String, Object> localExtras) {
-        return localExtras.get(DataKeys.AD_WIDTH) instanceof Integer
-                && localExtras.get(DataKeys.AD_HEIGHT) instanceof Integer;
-    }
-
-    @Nullable
-    private AdSize calculateAdSize(int width, int height) {
-        // Use the smallest AdSize that will properly contain the adView
-        if (height <= AdSize.BANNER_HEIGHT_50.getHeight()) {
-            return AdSize.BANNER_HEIGHT_50;
-        } else if (height <= AdSize.BANNER_HEIGHT_90.getHeight()) {
-            return AdSize.BANNER_HEIGHT_90;
-        } else if (height <= AdSize.RECTANGLE_HEIGHT_250.getHeight()) {
-            return AdSize.RECTANGLE_HEIGHT_250;
-        } else {
-            return null;
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookInterstitial.java b/mopub-sample/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
deleted file mode 100755
index b99589e6..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
+++ /dev/null
@@ -1,206 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdSettings;
-import com.facebook.ads.AudienceNetworkAds;
-import com.facebook.ads.InterstitialAd;
-import com.facebook.ads.InterstitialAdListener;
-import com.mopub.common.DataKeys;
-import com.mopub.common.MoPub;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CLICKED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_FAILED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_SUCCESS;
-import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
-
-public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
-    private static final int ONE_HOURS_MILLIS = 60 * 60 * 1000;
-    private static final String PLACEMENT_ID_KEY = "placement_id";
-    private InterstitialAd mFacebookInterstitial;
-    private CustomEventInterstitialListener mInterstitialListener;
-    private static final String ADAPTER_NAME = FacebookInterstitial.class.getSimpleName();
-    private static AtomicBoolean sIsInitialized = new AtomicBoolean(false);
-    @NonNull
-    private Handler mHandler;
-    private Runnable mAdExpiration;
-    @NonNull
-    private FacebookAdapterConfiguration mFacebookAdapterConfiguration;
-
-    public FacebookInterstitial() {
-        mHandler = new Handler();
-        mFacebookAdapterConfiguration = new FacebookAdapterConfiguration();
-
-        mAdExpiration = new Runnable() {
-            @Override
-            public void run() {
-                if (mInterstitialListener != null) {
-                    MoPubLog.log(CUSTOM, ADAPTER_NAME, "Expiring unused Facebook Interstitial ad due to Facebook's 60-minute expiration policy.");
-                    mInterstitialListener.onInterstitialFailed(EXPIRED);
-                    MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.EXPIRED.getIntCode(), MoPubErrorCode.EXPIRED);
-
-                    /* Can't get a direct handle to adFailed() to set the interstitial's state to IDLE: https://github.com/mopub/mopub-android-sdk/blob/4199080a1efd755641369715a4de5031d6072fbc/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java#L91.
-                    So, invalidating the interstitial (destroying & nulling) instead. */
-                    onInvalidate();
-                }
-            }
-        };
-    }
-
-    /**
-     * CustomEventInterstitial implementation
-     */
-
-    @Override
-    protected void loadInterstitial(final Context context,
-                                    final CustomEventInterstitialListener customEventInterstitialListener,
-                                    final Map<String, Object> localExtras,
-                                    final Map<String, String> serverExtras) {
-        if (!sIsInitialized.getAndSet(true)) {
-            AudienceNetworkAds.initialize(context);
-        }
-
-        setAutomaticImpressionAndClickTracking(false);
-
-        mInterstitialListener = customEventInterstitialListener;
-
-        final String placementId;
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-            mFacebookAdapterConfiguration.setCachedInitializationParameters(context, serverExtras);
-        } else {
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-            }
-            return;
-        }
-
-        AdSettings.setMediationService("MOPUB_" + MoPub.SDK_VERSION);
-
-        mFacebookInterstitial = new InterstitialAd(context, placementId);
-        mFacebookInterstitial.setAdListener(this);
-
-        final String adm = serverExtras.get(DataKeys.ADM_KEY);
-        if (!TextUtils.isEmpty(adm)) {
-            mFacebookInterstitial.loadAdFromBid(adm);
-            MoPubLog.log(placementId, LOAD_ATTEMPTED, ADAPTER_NAME);
-        } else {
-            mFacebookInterstitial.loadAd();
-            MoPubLog.log(placementId, LOAD_ATTEMPTED, ADAPTER_NAME);
-        }
-    }
-
-    @Override
-    protected void showInterstitial() {
-        MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
-        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
-            mFacebookInterstitial.show();
-            cancelExpirationTimer();
-        } else {
-            MoPubLog.log(SHOW_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-            MoPubLog.log(CUSTOM, ADAPTER_NAME, "Tried to show a Facebook interstitial ad when it's not ready. Please try again.");
-            if (mInterstitialListener != null) {
-                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
-            } else {
-                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Interstitial listener not instantiated. Please load interstitial again.");
-            }
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        cancelExpirationTimer();
-        if (mFacebookInterstitial != null) {
-            mFacebookInterstitial.destroy();
-            mFacebookInterstitial = null;
-            mInterstitialListener = null;
-        }
-    }
-
-    /**
-     * InterstitialAdListener implementation
-     */
-
-    @Override
-    public void onAdLoaded(final Ad ad) {
-        cancelExpirationTimer();
-        if (mInterstitialListener != null) {
-            mInterstitialListener.onInterstitialLoaded();
-            MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
-        }
-        mHandler.postDelayed(mAdExpiration, ONE_HOURS_MILLIS);
-    }
-
-    @Override
-    public void onError(final Ad ad, final AdError error) {
-        cancelExpirationTimer();
-        if (mInterstitialListener != null) {
-            if (error == AdError.NO_FILL) {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-            } else if (error == AdError.INTERNAL_ERROR) {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_INVALID_STATE.getIntCode(), MoPubErrorCode.NETWORK_INVALID_STATE);
-            } else {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.UNSPECIFIED.getIntCode(), MoPubErrorCode.UNSPECIFIED);
-            }
-        }
-    }
-
-    @Override
-    public void onInterstitialDisplayed(final Ad ad) {
-        cancelExpirationTimer();
-        MoPubLog.log(SHOW_SUCCESS, ADAPTER_NAME);
-        if (mInterstitialListener != null) {
-            mInterstitialListener.onInterstitialShown();
-        }
-    }
-
-    @Override
-    public void onAdClicked(final Ad ad) {
-        MoPubLog.log(CLICKED, ADAPTER_NAME);
-        if (mInterstitialListener != null) {
-            mInterstitialListener.onInterstitialClicked();
-        }
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        MoPubLog.log(CUSTOM, ADAPTER_NAME, "Facebook interstitial ad logged impression.");
-        if (mInterstitialListener != null) {
-            mInterstitialListener.onInterstitialImpression();
-        }
-    }
-
-    @Override
-    public void onInterstitialDismissed(final Ad ad) {
-        if (mInterstitialListener != null) {
-            mInterstitialListener.onInterstitialDismissed();
-        }
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    private void cancelExpirationTimer() {
-        mHandler.removeCallbacks(mAdExpiration);
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookRewardedVideo.java b/mopub-sample/src/main/java/com/mopub/mobileads/FacebookRewardedVideo.java
deleted file mode 100755
index f187f6eb..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookRewardedVideo.java
+++ /dev/null
@@ -1,219 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdSettings;
-import com.facebook.ads.AudienceNetworkAds;
-import com.facebook.ads.RewardedVideoAd;
-import com.facebook.ads.RewardedVideoAdListener;
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPub;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CLICKED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOULD_REWARD;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_FAILED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_SUCCESS;
-import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
-
-public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
-
-    private static final int ONE_HOURS_MILLIS = 60 * 60 * 1000;
-    private static final String ADAPTER_NAME = FacebookRewardedVideo.class.getSimpleName();
-    private static AtomicBoolean sIsInitialized = new AtomicBoolean(false);
-    @Nullable
-    private RewardedVideoAd mRewardedVideoAd;
-    @NonNull
-    private String mPlacementId = "";
-    @NonNull
-    private Handler mHandler;
-    private Runnable mAdExpiration;
-    @NonNull
-    private FacebookAdapterConfiguration mFacebookAdapterConfiguration;
-
-    public FacebookRewardedVideo() {
-        mHandler = new Handler();
-        mFacebookAdapterConfiguration = new FacebookAdapterConfiguration();
-
-        mAdExpiration = new Runnable() {
-            @Override
-            public void run() {
-                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Expiring unused Facebook Rewarded Video ad due to Facebook's 60-minute expiration policy.");
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, EXPIRED);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.EXPIRED.getIntCode(), MoPubErrorCode.EXPIRED);
-
-                onInvalidate();
-            }
-        };
-    }
-
-    /**
-     * CustomEventRewardedVideo implementation
-     */
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        return null;
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        boolean requiresInitialization = !sIsInitialized.getAndSet(true);
-        if (requiresInitialization) {
-            AudienceNetworkAds.initialize(launcherActivity);
-        }
-        return requiresInitialization;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        if (!serverExtras.isEmpty()) {
-            mPlacementId = serverExtras.get("placement_id");
-            AdSettings.addTestDevice("b4ee80ba-4691-40dc-b379-abad4caf9ff1");
-            mFacebookAdapterConfiguration.setCachedInitializationParameters(activity.getApplicationContext(), serverExtras);
-
-            if (!TextUtils.isEmpty(mPlacementId)) {
-                if (mRewardedVideoAd != null) {
-                    mRewardedVideoAd.destroy();
-                    mRewardedVideoAd = null;
-                }
-                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Creating a Facebook Rewarded Video instance, and registering callbacks.");
-                mRewardedVideoAd = new RewardedVideoAd(activity, mPlacementId);
-                mRewardedVideoAd.setAdListener(this);
-            } else {
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, getAdNetworkId(), MoPubErrorCode.NETWORK_NO_FILL);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Placement ID is null or empty.");
-                return;
-            }
-        }
-
-        if (mRewardedVideoAd != null) {
-            if (mRewardedVideoAd.isAdLoaded()) {
-                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
-                MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
-                return;
-            }
-
-            AdSettings.setMediationService("MOPUB_" + MoPub.SDK_VERSION);
-
-            final String adm = serverExtras.get(DataKeys.ADM_KEY);
-            if (!TextUtils.isEmpty(adm)) {
-                mRewardedVideoAd.loadAdFromBid(adm);
-                MoPubLog.log(mPlacementId, LOAD_ATTEMPTED, ADAPTER_NAME);
-            } else {
-                mRewardedVideoAd.loadAd();
-                MoPubLog.log(mPlacementId, LOAD_ATTEMPTED, ADAPTER_NAME);
-            }
-        }
-    }
-
-    @NonNull
-    @Override
-    protected String getAdNetworkId() {
-        return mPlacementId;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        cancelExpirationTimer();
-        if (mRewardedVideoAd != null) {
-            MoPubLog.log(CUSTOM, ADAPTER_NAME, "Performing cleanup tasks...");
-            mRewardedVideoAd.setAdListener(null);
-            mRewardedVideoAd.destroy();
-            mRewardedVideoAd = null;
-        }
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return mRewardedVideoAd != null && mRewardedVideoAd.isAdLoaded();
-    }
-
-    @Override
-    protected void showVideo() {
-        MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
-        if (mRewardedVideoAd != null && hasVideoAvailable()) {
-            mRewardedVideoAd.show();
-        } else {
-            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(FacebookRewardedVideo.class, mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
-            MoPubLog.log(SHOW_FAILED, ADAPTER_NAME, MoPubErrorCode.NETWORK_NO_FILL.getIntCode(), MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    public void onRewardedVideoCompleted() {
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(FacebookRewardedVideo.class, mPlacementId, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
-        MoPubLog.log(SHOULD_REWARD, ADAPTER_NAME, MoPubReward.DEFAULT_REWARD_AMOUNT, MoPubReward.NO_REWARD_LABEL);
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        cancelExpirationTimer();
-        MoPubRewardedVideoManager.onRewardedVideoStarted(FacebookRewardedVideo.class, mPlacementId);
-        MoPubLog.log(SHOW_SUCCESS, ADAPTER_NAME);
-    }
-
-    @Override
-    public void onRewardedVideoClosed() {
-        MoPubRewardedVideoManager.onRewardedVideoClosed(FacebookRewardedVideo.class, mPlacementId);
-    }
-
-    @Override
-    public void onAdLoaded(Ad ad) {
-        cancelExpirationTimer();
-        mHandler.postDelayed(mAdExpiration, ONE_HOURS_MILLIS);
-
-        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
-        MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
-    }
-
-    @Override
-    public void onAdClicked(Ad ad) {
-        MoPubRewardedVideoManager.onRewardedVideoClicked(FacebookRewardedVideo.class, mPlacementId);
-        MoPubLog.log(CLICKED, ADAPTER_NAME);
-    }
-
-    @Override
-    public void onError(Ad ad, AdError adError) {
-        cancelExpirationTimer();
-        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, mapErrorCode(adError.getErrorCode()));
-        MoPubLog.log(CUSTOM, ADAPTER_NAME, "Loading/Playing Facebook Rewarded Video creative encountered an error: " + mapErrorCode(adError.getErrorCode()).toString());
-        MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, mapErrorCode(adError.getErrorCode()), mapErrorCode(adError.getErrorCode()).toString());
-    }
-
-    @NonNull
-    private static MoPubErrorCode mapErrorCode(int error) {
-        switch (error) {
-            case AdError.NO_FILL_ERROR_CODE:
-                return MoPubErrorCode.NETWORK_NO_FILL;
-            case AdError.INTERNAL_ERROR_CODE:
-                return MoPubErrorCode.INTERNAL_ERROR;
-            case AdError.NETWORK_ERROR_CODE:
-                return MoPubErrorCode.NO_CONNECTION;
-            default:
-                return MoPubErrorCode.UNSPECIFIED;
-        }
-    }
-
-    private void cancelExpirationTimer() {
-        mHandler.removeCallbacks(mAdExpiration);
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookAdRenderer.java b/mopub-sample/src/main/java/com/mopub/nativeads/FacebookAdRenderer.java
deleted file mode 100644
index bc9be1e9..00000000
--- a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookAdRenderer.java
+++ /dev/null
@@ -1,290 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.facebook.ads.AdChoicesView;
-import com.facebook.ads.AdIconView;
-import com.facebook.ads.MediaView;
-import com.mopub.common.Preconditions;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-/**
- * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
- * static and video native ads. This will automatically replace the main image view with the
- * Facebook MediaView that handles showing the main asset.
- */
-public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
-    private final FacebookViewBinder mViewBinder;
-
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    @NonNull
-    final WeakHashMap<View, FacebookNativeViewHolder> mViewHolderMap;
-
-    /**
-     * Constructs a native ad renderer with a view binder.
-     *
-     * @param viewBinder The view binder to use when inflating and rendering an ad.
-     */
-    public FacebookAdRenderer(final FacebookViewBinder viewBinder) {
-        mViewBinder = viewBinder;
-        mViewHolderMap = new WeakHashMap<View, FacebookNativeViewHolder>();
-    }
-
-    @Override
-    public View createAdView(final Context context, final ViewGroup parent) {
-        return LayoutInflater
-                .from(context)
-                .inflate(mViewBinder.layoutId, parent, false);
-    }
-
-    @Override
-    public void renderAdView(final View view,
-                             final FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
-        FacebookNativeViewHolder facebookNativeViewHolder = mViewHolderMap.get(view);
-        if (facebookNativeViewHolder == null) {
-            facebookNativeViewHolder = FacebookNativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, facebookNativeViewHolder);
-        }
-
-        update(facebookNativeViewHolder, facebookVideoEnabledNativeAd);
-        NativeRendererHelper.updateExtras(facebookNativeViewHolder.getMainView(),
-                mViewBinder.extras,
-                facebookVideoEnabledNativeAd.getExtras());
-    }
-
-    @Override
-    public boolean supports(final BaseNativeAd nativeAd) {
-        Preconditions.checkNotNull(nativeAd);
-        return nativeAd instanceof FacebookNative.FacebookVideoEnabledNativeAd;
-    }
-
-    private void update(final FacebookNativeViewHolder facebookNativeViewHolder,
-                        final FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTitleView(),
-                nativeAd.getTitle());
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTextView(), nativeAd.getText());
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getCallToActionView(),
-                nativeAd.getCallToAction());
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getAdvertiserNameView(),
-                nativeAd.getAdvertiserName());
-
-        final RelativeLayout adChoicesContainer =
-                facebookNativeViewHolder.getAdChoicesContainer();
-        nativeAd.registerChildViewsForInteraction(facebookNativeViewHolder.getMainView(),
-                facebookNativeViewHolder.getMediaView(), facebookNativeViewHolder.getAdIconView());
-        if (adChoicesContainer != null) {
-            adChoicesContainer.removeAllViews();
-            final AdChoicesView adChoicesView = new AdChoicesView(adChoicesContainer.getContext(),
-                    nativeAd.getFacebookNativeAd(), true);
-            ViewGroup.LayoutParams layoutParams = adChoicesView.getLayoutParams();
-            if (layoutParams instanceof RelativeLayout.LayoutParams) {
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                    ((RelativeLayout.LayoutParams) layoutParams).addRule(RelativeLayout.ALIGN_PARENT_END);
-                } else {
-                    ((RelativeLayout.LayoutParams) layoutParams).addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
-                }
-            }
-            adChoicesContainer.addView(adChoicesView);
-        }
-    }
-
-    static class FacebookNativeViewHolder {
-        @Nullable
-        private View mainView;
-        @Nullable
-        private TextView titleView;
-        @Nullable
-        private TextView textView;
-        @Nullable
-        private TextView callToActionView;
-        @Nullable
-        private RelativeLayout adChoicesContainer;
-        @Nullable
-        private MediaView mediaView;
-        @Nullable
-        private AdIconView adIconView;
-        @Nullable
-        private TextView advertiserNameView;
-
-        // Use fromViewBinder instead of a constructor
-        private FacebookNativeViewHolder() {
-        }
-
-        static FacebookNativeViewHolder fromViewBinder(@Nullable final View view,
-                                                       @Nullable final FacebookViewBinder facebookViewBinder) {
-            if (view == null || facebookViewBinder == null) {
-                return new FacebookNativeViewHolder();
-            }
-
-            final FacebookNativeViewHolder viewHolder = new FacebookNativeViewHolder();
-            viewHolder.mainView = view;
-            viewHolder.titleView = view.findViewById(facebookViewBinder.titleId);
-            viewHolder.textView = view.findViewById(facebookViewBinder.textId);
-            viewHolder.callToActionView =
-                    view.findViewById(facebookViewBinder.callToActionId);
-            viewHolder.adChoicesContainer =
-                    view.findViewById(facebookViewBinder.adChoicesRelativeLayoutId);
-            viewHolder.mediaView = view.findViewById(facebookViewBinder.mediaViewId);
-            viewHolder.adIconView = view.findViewById(facebookViewBinder.adIconViewId);
-            viewHolder.advertiserNameView = view.findViewById(facebookViewBinder.advertiserNameId);
-            return viewHolder;
-        }
-
-        @Nullable
-        public View getMainView() {
-            return mainView;
-        }
-
-        @Nullable
-        public TextView getTitleView() {
-            return titleView;
-        }
-
-        @Nullable
-        public TextView getTextView() {
-            return textView;
-        }
-
-        @Nullable
-        public TextView getCallToActionView() {
-            return callToActionView;
-        }
-
-        @Nullable
-        public RelativeLayout getAdChoicesContainer() {
-            return adChoicesContainer;
-        }
-
-        @Nullable
-        public AdIconView getAdIconView() {
-            return adIconView;
-        }
-
-        @Nullable
-        public MediaView getMediaView() {
-            return mediaView;
-        }
-
-        @Nullable
-        public TextView getAdvertiserNameView() {
-            return advertiserNameView;
-        }
-    }
-
-    public static class FacebookViewBinder {
-
-        final int layoutId;
-        final int titleId;
-        final int textId;
-        final int callToActionId;
-        final int adChoicesRelativeLayoutId;
-        @NonNull
-        final Map<String, Integer> extras;
-        final int mediaViewId;
-        final int adIconViewId;
-        final int advertiserNameId;
-
-        private FacebookViewBinder(@NonNull final Builder builder) {
-            this.layoutId = builder.layoutId;
-            this.titleId = builder.titleId;
-            this.textId = builder.textId;
-            this.callToActionId = builder.callToActionId;
-            this.adChoicesRelativeLayoutId = builder.adChoicesRelativeLayoutId;
-            this.extras = builder.extras;
-            this.mediaViewId = builder.mediaViewId;
-            this.adIconViewId = builder.adIconViewId;
-            this.advertiserNameId = builder.advertiserNameId;
-        }
-
-        public static class Builder {
-
-            private final int layoutId;
-            private int titleId;
-            private int textId;
-            private int callToActionId;
-            private int adChoicesRelativeLayoutId;
-            @NonNull
-            private Map<String, Integer> extras = Collections.emptyMap();
-            private int mediaViewId;
-            private int adIconViewId;
-            private int advertiserNameId;
-
-            public Builder(final int layoutId) {
-                this.layoutId = layoutId;
-                this.extras = new HashMap<>();
-            }
-
-            @NonNull
-            public final Builder titleId(final int titleId) {
-                this.titleId = titleId;
-                return this;
-            }
-
-            @NonNull
-            public final Builder textId(final int textId) {
-                this.textId = textId;
-                return this;
-            }
-
-            @NonNull
-            public final Builder callToActionId(final int callToActionId) {
-                this.callToActionId = callToActionId;
-                return this;
-            }
-
-            @NonNull
-            public final Builder adChoicesRelativeLayoutId(final int adChoicesRelativeLayoutId) {
-                this.adChoicesRelativeLayoutId = adChoicesRelativeLayoutId;
-                return this;
-            }
-
-            @NonNull
-            public final Builder extras(final Map<String, Integer> resourceIds) {
-                this.extras = new HashMap<String, Integer>(resourceIds);
-                return this;
-            }
-
-            @NonNull
-            public final Builder addExtra(final String key, final int resourceId) {
-                this.extras.put(key, resourceId);
-                return this;
-            }
-
-            @NonNull
-            public Builder mediaViewId(final int mediaViewId) {
-                this.mediaViewId = mediaViewId;
-                return this;
-            }
-
-            @NonNull
-            public Builder adIconViewId(final int adIconViewId) {
-                this.adIconViewId = adIconViewId;
-                return this;
-            }
-
-            @NonNull
-            public Builder advertiserNameId(final int advertiserNameId) {
-                this.advertiserNameId = advertiserNameId;
-                return this;
-            }
-
-            @NonNull
-            public FacebookViewBinder build() {
-                return new FacebookViewBinder(this);
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookNative.java b/mopub-sample/src/main/java/com/mopub/nativeads/FacebookNative.java
deleted file mode 100644
index bc834ef8..00000000
--- a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookNative.java
+++ /dev/null
@@ -1,296 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdIconView;
-import com.facebook.ads.AudienceNetworkAds;
-import com.facebook.ads.MediaView;
-import com.facebook.ads.NativeAd;
-import com.facebook.ads.NativeAdListener;
-import com.mopub.common.DataKeys;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.FacebookAdapterConfiguration;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CLICKED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
-import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_SUCCESS;
-
-/**
- * FacebookAdRenderer is also necessary in order to show video ads.
- * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
- * "video_enabled" flag is set to true. The server configuration will override the local
- * configuration.
- */
-public class FacebookNative extends CustomEventNative {
-    private static final String PLACEMENT_ID_KEY = "placement_id";
-    private static final String ADAPTER_NAME = FacebookNative.class.getSimpleName();
-    private static AtomicBoolean sIsInitialized = new AtomicBoolean(false);
-    @NonNull
-    private FacebookAdapterConfiguration mFacebookAdapterConfiguration;
-
-    // CustomEventNative implementation
-    public FacebookNative() {
-        mFacebookAdapterConfiguration = new FacebookAdapterConfiguration();
-    }
-
-    @Override
-    protected void loadNativeAd(final Context context,
-                                final CustomEventNativeListener customEventNativeListener,
-                                final Map<String, Object> localExtras,
-                                final Map<String, String> serverExtras) {
-
-        if (!sIsInitialized.getAndSet(true)) {
-            AudienceNetworkAds.initialize(context);
-        }
-        final String placementId;
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-            mFacebookAdapterConfiguration.setCachedInitializationParameters(context, serverExtras);
-        } else {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, NativeErrorCode.NETWORK_NO_FILL.getIntCode(), NativeErrorCode.NETWORK_NO_FILL);
-            return;
-        }
-
-        final String bid = serverExtras.get(DataKeys.ADM_KEY);
-
-        final FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd =
-                new FacebookVideoEnabledNativeAd(context,
-                        new NativeAd(context, placementId), customEventNativeListener, bid);
-        facebookVideoEnabledNativeAd.loadAd();
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    private static void registerChildViewsForInteraction(final View view, final NativeAd nativeAd,
-                                                         final MediaView mediaView, final AdIconView adIconView) {
-        if (nativeAd == null) {
-            return;
-        }
-
-        final List<View> clickableViews = new ArrayList<>();
-        assembleChildViewsWithLimit(view, clickableViews, 10);
-
-        if (clickableViews.size() == 1) {
-            nativeAd.registerViewForInteraction(view, mediaView, adIconView);
-        } else {
-            nativeAd.registerViewForInteraction(view, mediaView, adIconView, clickableViews);
-        }
-    }
-
-    private static void assembleChildViewsWithLimit(final View view,
-                                                    final List<View> clickableViews, final int limit) {
-        if (view == null) {
-            MoPubLog.log(CUSTOM, "View given is null. Ignoring");
-            return;
-        }
-
-        if (limit <= 0) {
-            MoPubLog.log(CUSTOM, "Depth limit reached; adding this view regardless of its type.");
-            clickableViews.add(view);
-            return;
-        }
-
-        if (view instanceof ViewGroup && ((ViewGroup) view).getChildCount() > 0) {
-            final ViewGroup vg = (ViewGroup) view;
-            for (int i = 0; i < vg.getChildCount(); i++) {
-                assembleChildViewsWithLimit(vg.getChildAt(i), clickableViews, limit - 1);
-            }
-            return;
-        }
-
-        clickableViews.add(view);
-    }
-
-    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements NativeAdListener {
-        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
-
-        private final Context mContext;
-        private final NativeAd mNativeAd;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-
-        private final Map<String, Object> mExtras;
-
-        private final String mBid;
-
-        FacebookVideoEnabledNativeAd(final Context context,
-                                     final NativeAd nativeAd,
-                                     final CustomEventNativeListener customEventNativeListener,
-                                     final String bid) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mCustomEventNativeListener = customEventNativeListener;
-            mExtras = new HashMap<String, Object>();
-            mBid = bid;
-        }
-
-        void loadAd() {
-            mNativeAd.setAdListener(this);
-            if (!TextUtils.isEmpty(mBid)) {
-                mNativeAd.loadAdFromBid(mBid);
-                MoPubLog.log(mBid, LOAD_ATTEMPTED, ADAPTER_NAME);
-            } else {
-                mNativeAd.loadAd();
-                MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
-            }
-        }
-
-        /**
-         * Returns the String corresponding to the advertiser name
-         */
-        final public String getAdvertiserName() {
-            return mNativeAd.getAdvertiserName();
-        }
-
-        /**
-         * Returns the String corresponding to the ad's title.
-         */
-        final public String getTitle() {
-            return mNativeAd.getAdHeadline();
-        }
-
-        /**
-         * Returns the String corresponding to the ad's body text. May be null.
-         */
-        final public String getText() {
-            return mNativeAd.getAdBodyText();
-        }
-
-        /**
-         * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
-         */
-        final public String getCallToAction() {
-            return mNativeAd.getAdCallToAction();
-        }
-
-        /**
-         * Returns the Privacy Information click through url.
-         *
-         * @return String representing the Privacy Information Icon click through url, or {@code null}
-         * if not set.
-         */
-        final public String getPrivacyInformationIconClickThroughUrl() {
-            return mNativeAd.getAdChoicesLinkUrl();
-        }
-
-        // AdListener
-        @Override
-        public void onAdLoaded(final Ad ad) {
-            // This identity check is from Facebook's Native API sample code:
-            // https://developers.facebook.com/docs/audience-network/android/native-api
-            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, NativeErrorCode.NETWORK_NO_FILL.getIntCode(), NativeErrorCode.NETWORK_NO_FILL);
-                return;
-            }
-
-            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
-            mCustomEventNativeListener.onNativeAdLoaded(FacebookVideoEnabledNativeAd.this);
-            MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
-        }
-
-        @Override
-        public void onError(final Ad ad, final AdError adError) {
-            if (adError == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, NativeErrorCode.UNSPECIFIED.getIntCode(), NativeErrorCode.UNSPECIFIED);
-            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, NativeErrorCode.NETWORK_NO_FILL.getIntCode(), NativeErrorCode.NETWORK_NO_FILL);
-            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, NativeErrorCode.NETWORK_INVALID_STATE.getIntCode(), NativeErrorCode.NETWORK_INVALID_STATE);
-            } else {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME, NativeErrorCode.UNSPECIFIED.getIntCode(), NativeErrorCode.UNSPECIFIED);
-            }
-        }
-
-        @Override
-        public void onAdClicked(final Ad ad) {
-            notifyAdClicked();
-            MoPubLog.log(CLICKED, ADAPTER_NAME);
-        }
-
-        @Override
-        public void onLoggingImpression(final Ad ad) {
-            notifyAdImpressed();
-            MoPubLog.log(SHOW_SUCCESS, ADAPTER_NAME);
-        }
-
-        // BaseForwardingNativeAd
-        @Override
-        public void prepare(final View view) {
-        }
-
-        @Override
-        public void clear(final View view) {
-            mNativeAd.unregisterView();
-        }
-
-        @Override
-        public void destroy() {
-            mNativeAd.destroy();
-        }
-
-        /**
-         * Given a particular String key, return the associated Object value from the ad's extras map.
-         * See {@link StaticNativeAd#getExtras()} for more information.
-         */
-        final public Object getExtra(final String key) {
-            if (!Preconditions.NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
-                return null;
-            }
-            return mExtras.get(key);
-        }
-
-        /**
-         * Returns a copy of the extras map, reflecting additional ad content not reflected in any
-         * of the above hardcoded setters. This is particularly useful for passing down custom fields
-         * with MoPub's direct-sold native ads or from mediated networks that pass back additional
-         * fields.
-         */
-        final public Map<String, Object> getExtras() {
-            return new HashMap<String, Object>(mExtras);
-        }
-
-        final public void addExtra(final String key, final Object value) {
-            if (!Preconditions.NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
-                return;
-            }
-            mExtras.put(key, value);
-        }
-
-        void registerChildViewsForInteraction(final View view, final MediaView mediaView,
-                                              final AdIconView adIconView) {
-            FacebookNative.registerChildViewsForInteraction(view, mNativeAd, mediaView, adIconView);
-        }
-
-        @Override
-        public void onMediaDownloaded(final Ad ad) {
-        }
-
-        NativeAd getFacebookNativeAd() {
-            return mNativeAd;
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index 7ea476e4..c19770e0 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -18,6 +18,7 @@
 import android.support.v7.app.ActionBarDrawerToggle;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.webkit.WebView;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeDetailFragment.java
index 824a7739..f2770a89 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeDetailFragment.java
@@ -14,10 +14,13 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+import com.google.android.gms.ads.formats.NativeAdOptions;
 import com.mopub.common.MoPub;
 import com.mopub.common.SdkConfiguration;
 import com.mopub.nativeads.AdapterHelper;
+import com.mopub.nativeads.FacebookAdRenderer;
 import com.mopub.nativeads.GooglePlayServicesAdRenderer;
+import com.mopub.nativeads.GooglePlayServicesNative;
 import com.mopub.nativeads.MediaViewBinder;
 import com.mopub.nativeads.MoPubAdRenderer;
 import com.mopub.nativeads.MoPubNative;
@@ -31,6 +34,7 @@
 import com.mopub.nativeads.ViewBinder;
 
 import java.util.EnumSet;
+import java.util.HashMap;
 
 import static com.mopub.nativeads.RequestParameters.NativeAdAsset;
 
@@ -45,7 +49,7 @@
 
     @Override
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
-            final Bundle savedInstanceState) {
+                             final Bundle savedInstanceState) {
 
         if (!sNativeInitialized) {
             MoPub.initializeSdk(getActivity(), new SdkConfiguration.Builder(
@@ -138,22 +142,37 @@ public void onNativeFail(NativeErrorCode errorCode) {
                 .iconImageId(R.id.native_icon_image)
                 .callToActionId(R.id.native_cta)
                 .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                .addExtra("ad_choices_container",
+                        R.id.native_ad_choices_icon_container)
                 .build();
 
-        // Set up a renderer for a static native ad.
-        final MoPubStaticNativeAdRenderer moPubStaticNativeAdRenderer = new MoPubStaticNativeAdRenderer(staticViewBinder);
 
-        // Set up a renderer for a video native ad.
-        final MoPubVideoNativeAdRenderer moPubVideoNativeAdRenderer = new MoPubVideoNativeAdRenderer(videoViewBinder);
+        FacebookAdRenderer.FacebookViewBinder fbViewBinder = new FacebookAdRenderer.FacebookViewBinder.Builder(R.layout.fb_native_ad_list_item)
+                .titleId(R.id.native_title)
+                .textId(R.id.native_text)
+                .mediaViewId(R.id.native_media_layout)
+                .adIconViewId(R.id.native_icon_image)
+                .callToActionId(R.id.native_cta)
+                .adChoicesRelativeLayoutId(R.id.native_privacy_information_icon_image)
+                .build();
 
-        final GooglePlayServicesAdRenderer googlePlayServicesAdRenderer = new GooglePlayServicesAdRenderer(staticViewBinder);
+        // Set up a renderer for a admob and facebook native ad.
+        final GooglePlayServicesAdRenderer googlePlayServicesAdRenderer = new GooglePlayServicesAdRenderer(videoViewBinder);
+        final FacebookAdRenderer facebookAdRenderer = new FacebookAdRenderer(fbViewBinder);
+        // Set up a renderer for a mopub static native ad.
+        final MoPubStaticNativeAdRenderer moPubStaticNativeAdRenderer = new MoPubStaticNativeAdRenderer(staticViewBinder);
+        // Set up a renderer for a mopub video native ad.
+        final MoPubVideoNativeAdRenderer moPubVideoNativeAdRenderer = new MoPubVideoNativeAdRenderer(videoViewBinder);
 
-//        final FacebookAdRenderer facebookAdRenderer = new FacebookAdRenderer(staticViewBinder);
+        HashMap<String, Object> extras = new HashMap<>();
+        extras.put("ad_choices_placement", NativeAdOptions.ADCHOICES_BOTTOM_RIGHT);
+        moPubNative.setLocalExtras(extras);
 
+        //Register networks renders first before registering mopub's
+        moPubNative.registerAdRenderer(googlePlayServicesAdRenderer);
+        moPubNative.registerAdRenderer(facebookAdRenderer);
         moPubNative.registerAdRenderer(moPubStaticNativeAdRenderer);
         moPubNative.registerAdRenderer(moPubVideoNativeAdRenderer);
-        moPubNative.registerAdRenderer(googlePlayServicesAdRenderer);
-//        moPubNative.registerAdRenderer(facebookAdRenderer);
 
         adapterHelper = new AdapterHelper(getActivity(), 0, 3); // When standalone, any range will be fine.
 
@@ -173,4 +192,4 @@ public void onResume() {
         super.onResume();
     }
 
-}
+}
\ No newline at end of file
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index 10d8730b..07c2c128 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -13,6 +13,7 @@
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 
+import com.mopub.nativeads.FacebookAdRenderer;
 import com.mopub.nativeads.GooglePlayServicesAdRenderer;
 import com.mopub.nativeads.MediaViewBinder;
 import com.mopub.nativeads.MoPubAdAdapter;
@@ -106,11 +107,41 @@ public void onClick(View view) {
                         .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
                         .build());
 
-        final GooglePlayServicesAdRenderer googlePlayServicesAdRenderer = new GooglePlayServicesAdRenderer(staticViewBinder);
-        // Register the renderers with the MoPubAdAdapter and then set the adapter on the ListView.
-        mAdAdapter.registerAdRenderer(videoAdRenderer);
-        mAdAdapter.registerAdRenderer(staticAdRender);
+        MediaViewBinder videoViewBinder = new MediaViewBinder.Builder(R.layout.video_ad_list_item)
+                .titleId(R.id.native_title)
+                .textId(R.id.native_text)
+                .mediaLayoutId(R.id.native_media_layout)
+                .iconImageId(R.id.native_icon_image)
+                .callToActionId(R.id.native_cta)
+                .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                .addExtra("ad_choices_container",
+                        R.id.native_ad_choices_icon_container)
+                .build();
+
+
+        FacebookAdRenderer.FacebookViewBinder fbViewBinder = new FacebookAdRenderer.FacebookViewBinder.Builder(R.layout.fb_native_ad_list_item)
+                .titleId(R.id.native_title)
+                .textId(R.id.native_text)
+                .mediaViewId(R.id.native_media_layout)
+                .adIconViewId(R.id.native_icon_image)
+                .callToActionId(R.id.native_cta)
+                .adChoicesRelativeLayoutId(R.id.native_privacy_information_icon_image)
+                .build();
+
+        // Set up a renderer for a admob and facebook native ad.
+        final GooglePlayServicesAdRenderer googlePlayServicesAdRenderer = new GooglePlayServicesAdRenderer(videoViewBinder);
+        final FacebookAdRenderer facebookAdRenderer = new FacebookAdRenderer(fbViewBinder);
+
+        // Set up a renderer for a mopub static native ad.
+        final MoPubStaticNativeAdRenderer moPubStaticNativeAdRenderer = new MoPubStaticNativeAdRenderer(staticViewBinder);
+        // Set up a renderer for a mopub video native ad.
+        final MoPubVideoNativeAdRenderer moPubVideoNativeAdRenderer = new MoPubVideoNativeAdRenderer(videoViewBinder);
+
+        //Register networks renders first before registering mopub's
         mAdAdapter.registerAdRenderer(googlePlayServicesAdRenderer);
+        mAdAdapter.registerAdRenderer(facebookAdRenderer);
+        mAdAdapter.registerAdRenderer(moPubStaticNativeAdRenderer);
+        mAdAdapter.registerAdRenderer(moPubVideoNativeAdRenderer);
         listView.setAdapter(mAdAdapter);
 
         mAdAdapter.loadAds(mAdConfiguration.getAdUnitId(), mRequestParameters);
