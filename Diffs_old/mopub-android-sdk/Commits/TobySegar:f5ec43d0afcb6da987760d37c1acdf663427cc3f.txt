diff --git a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
new file mode 100644
index 00000000..196d3d8e
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
@@ -0,0 +1,158 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.facebook.ads.AdError;
+import com.facebook.ads.RewardedVideoAd;
+import com.facebook.ads.RewardedVideoAdListener;
+import com.mopub.common.LifecycleListener;
+import com.facebook.ads.Ad;
+import com.mopub.common.MoPubReward;
+
+import java.util.Map;
+
+/**
+ * Certified with Facebook Audience Network 4.23.0
+ */
+public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
+
+    @Nullable
+    private RewardedVideoAd mRewardedVideoAd;
+    @Nullable
+    private String mPlacementId;
+    private String TAG = "mopub";
+
+    /**
+     * CustomEventRewardedVideo implementation
+     */
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        return null;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+        // Facebook doesn't have a dedicated initialization call, so we return false and do nothing.
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+        if (!serverExtras.isEmpty()) {
+            mPlacementId = serverExtras.get("placement_id");
+
+            if (!TextUtils.isEmpty(mPlacementId)) {
+                if (mRewardedVideoAd != null) {
+                    mRewardedVideoAd.destroy();
+                    mRewardedVideoAd = null;
+                }
+                Log.d(TAG, "Creating a Facebook Rewarded Video instance, and registering callbacks.");
+                mRewardedVideoAd = new RewardedVideoAd(activity, mPlacementId);
+                mRewardedVideoAd.setAdListener(this);
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, getAdNetworkId(), MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                Log.d(TAG, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR.toString());
+                Log.d(TAG, "Placement ID is null or empty.");
+                return;
+            }
+        }
+
+        if (mRewardedVideoAd.isAdLoaded()) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
+            return;
+        }
+
+        if (mRewardedVideoAd != null) {
+            Log.d(TAG, "Sending Facebook an ad request.");
+            mRewardedVideoAd.loadAd();
+        }
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return (mRewardedVideoAd != null) ? (mRewardedVideoAd.getPlacementId()) : ("");
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mRewardedVideoAd != null) {
+            Log.d(TAG, "Performing cleanup tasks...");
+            mRewardedVideoAd.setAdListener(null);
+            mRewardedVideoAd.destroy();
+            mRewardedVideoAd = null;
+        }
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return mRewardedVideoAd != null && mRewardedVideoAd.isAdLoaded();
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            Log.d(TAG, "Facebook Rewarded Video creative is available. Showing...");
+            mRewardedVideoAd.show();
+        } else {
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+            Log.d(TAG, "Facebook Rewarded Video creative is not available. Try re-requesting.");
+        }
+    }
+
+    @Override
+    public void onRewardedVideoCompleted() {
+        Log.d(TAG, "Facebook Rewarded Video creative is completed. Awarding the user.");
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(FacebookRewardedVideo.class, mPlacementId, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
+    }
+
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        MoPubRewardedVideoManager.onRewardedVideoStarted(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative started playing.");
+    }
+
+    @Override
+    public void onRewardedVideoClosed() {
+        MoPubRewardedVideoManager.onRewardedVideoClosed(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative closed.");
+    }
+
+    @Override
+    public void onAdLoaded(Ad ad) {
+        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative cached.");
+    }
+
+    @Override
+    public void onAdClicked(Ad ad) {
+        MoPubRewardedVideoManager.onRewardedVideoClicked(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative clicked.");
+    }
+
+    @Override
+    public void onError(Ad ad, AdError adError) {
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, mapErrorCode(adError.getErrorCode()));
+        Log.d(TAG, "Loading/Playing Facebook Rewarded Video creative encountered an error: " + mapErrorCode(adError.getErrorCode()).toString());
+    }
+
+    @NonNull
+    private static MoPubErrorCode mapErrorCode(int error) {
+        switch (error) {
+            case AdError.NO_FILL_ERROR_CODE:
+                return MoPubErrorCode.NETWORK_NO_FILL;
+            case AdError.INTERNAL_ERROR_CODE:
+                return MoPubErrorCode.INTERNAL_ERROR;
+            case AdError.NETWORK_ERROR_CODE:
+                return MoPubErrorCode.NO_CONNECTION;
+            default:
+                return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
index dabecdf1..3854d3a5 100644
--- a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -11,7 +11,7 @@
 import com.flurry.android.FlurryAgentListener;
 
 /**
- * Certified with Flurry 7.0.0
+ * Certified with Flurry 7.2.0
  */
 public final class FlurryAgentWrapper {
     public static final String PARAM_API_KEY = "apiKey";
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
index 56646085..d8ce8a8c 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -18,7 +18,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Certified with Flurry 7.0.0
+ * Certified with Flurry 7.2.0
  */
 class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
     private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
index 51f7d54d..0e27c27a 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -17,7 +17,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Certified with Flurry 7.0.0
+ * Certified with Flurry 7.2.0
  */
 class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
     private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index 679b7d7d..2a52a6eb 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 9.4.0 of the Google Play Services SDK.
+ * Compatible with version 11.0.2 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
@@ -126,7 +126,7 @@ public void onAdClosed() {
         public void onAdFailedToLoad(int errorCode) {
             Log.d("MoPub", "Google Play Services banner ad failed to load.");
             if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                mBannerListener.onBannerFailed(getMoPubErrorCode(errorCode));
             }
         }
 
@@ -150,6 +150,34 @@ public void onAdOpened() {
                 mBannerListener.onBannerClicked();
             }
         }
+
+        /**
+         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+         *
+         * @param error Google Mobile Ads SDK error code.
+         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+         * code.
+         */
+        private MoPubErrorCode getMoPubErrorCode(int error) {
+            MoPubErrorCode errorCode;
+            switch (error) {
+                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                    errorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case AdRequest.ERROR_CODE_NO_FILL:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+            }
+            return errorCode;
+        }
     }
 
     @Deprecated // for testing
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index ac672cbe..fb7c3b23 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 9.4.0 of the Google Play Services SDK.
+ * Compatible with version 11.0.2 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
@@ -93,7 +93,7 @@ public void onAdClosed() {
         public void onAdFailedToLoad(int errorCode) {
             Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
             if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                mInterstitialListener.onInterstitialFailed(getMoPubErrorCode(errorCode));
             }
         }
 
@@ -120,6 +120,34 @@ public void onAdOpened() {
                 mInterstitialListener.onInterstitialShown();
             }
         }
+
+        /**
+         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+         *
+         * @param error Google Mobile Ads SDK error code.
+         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+         * code.
+         */
+        private MoPubErrorCode getMoPubErrorCode(int error) {
+            MoPubErrorCode errorCode;
+            switch (error) {
+                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                    errorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case AdRequest.ERROR_CODE_NO_FILL:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+            }
+            return errorCode;
+        }
     }
 
     @Deprecated // for testing
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
index 0f678d67..d401ea2f 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
@@ -20,6 +20,8 @@
 
 /**
  * A {@link CustomEventRewardedVideo} used to load rewarded video Google rewarded video ads.
+ *
+ * Compatible with version 11.0.2 of the Google Play Services SDK.
  */
 public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
         RewardedVideoAdListener {
@@ -105,8 +107,8 @@ protected void onInvalidate() {
 
     @Override
     protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-                                            @NonNull Map<String, Object> localExtras,
-                                            @NonNull Map<String, String> serverExtras)
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
             throws Exception {
         if (!sIsInitialized.getAndSet(true)) {
             Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
@@ -139,8 +141,8 @@ protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
 
     @Override
     protected void loadWithSdkInitialized(@NonNull Activity activity,
-                                          @NonNull Map<String, Object> localExtras,
-                                          @NonNull Map<String, String> serverExtras)
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
             throws Exception {
         if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
             // Using class name as the network ID for this callback since the ad unit ID is
@@ -253,6 +255,8 @@ private MoPubErrorCode getMoPubErrorCode(int error) {
                 errorCode = MoPubErrorCode.NO_CONNECTION;
                 break;
             case AdRequest.ERROR_CODE_NO_FILL:
+                errorCode = MoPubErrorCode.NO_FILL;
+                break;
             default:
                 errorCode = MoPubErrorCode.UNSPECIFIED;
         }
diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
index 4e2c9ece..d9361a30 100644
--- a/extras/src/com/mopub/mobileads/UnityInterstitial.java
+++ b/extras/src/com/mopub/mobileads/UnityInterstitial.java
@@ -3,95 +3,93 @@
 import android.app.Activity;
 import android.content.Context;
 
+import com.mopub.common.logging.MoPubLog;
 import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
 import com.unity3d.ads.UnityAds;
 
 import java.util.Map;
 
+/**
+ * Certified with Unity Ads 2.1.0
+ */
 public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
 
-    private static boolean sInitialized = false;
-    private static boolean sAdCached = false;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private Activity mLauncherActivity;
+    private Context mContext;
     private String mPlacementId = "video";
+    private boolean loadRequested = false;
 
     @Override
     protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
 
         mPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, mPlacementId);
         mCustomEventInterstitialListener = customEventInterstitialListener;
+        mContext = context;
+        loadRequested = true;
 
-        if (!sInitialized) {
-            if (context == null || !(context instanceof Activity)) {
-                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            mLauncherActivity = (Activity) context;
-
-            if (!UnityRouter.initUnityAds(serverExtras, mLauncherActivity, this, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                }
-            })) {
-                return;
+        try {
+            UnityRouter.addListener(mPlacementId, this);
+            initializeUnityAdsSdk(serverExtras);
+            if (UnityAds.isReady()) {
+                mCustomEventInterstitialListener.onInterstitialLoaded();
+                loadRequested = false;
             }
+        } catch (UnityRouter.UnityAdsException e) {
+            mCustomEventInterstitialListener.onInterstitialFailed(UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
+        }
+    }
 
-            UnityAds.setListener(this);
-
-            UnityRouter.initPlacement(mPlacementId, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                }
-            }, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialLoaded();
-                }
-            });
-
-            sInitialized = true;
-        } else {
-            UnityAds.setListener(this);
-            if (UnityAds.isReady(mPlacementId)) {
-                mCustomEventInterstitialListener.onInterstitialLoaded();
-            } else {
-                sAdCached = false;
+    private void initializeUnityAdsSdk(Map<String, String> serverExtras) {
+        if (!UnityAds.isInitialized()) {
+            if (!(mContext instanceof Activity)) {
+                throw new UnityRouter.UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Context is null or is not an instanceof Activity.");
             }
+            UnityRouter.initUnityAds(serverExtras, (Activity) mContext);
         }
     }
 
+
     @Override
     protected void showInterstitial() {
-        if (UnityAds.isReady(mPlacementId) && mLauncherActivity != null) {
-            UnityAds.show(mLauncherActivity, mPlacementId);
+        if (UnityAds.isReady(mPlacementId) && mContext != null) {
+            UnityAds.show((Activity) mContext, mPlacementId);
+        } else {
+            MoPubLog.d("Attempted to show Unity interstitial video before it was available.");
         }
     }
 
     @Override
     protected void onInvalidate() {
-        UnityAds.setListener(null);
+        UnityRouter.removeListener(mPlacementId);
     }
 
     @Override
     public void onUnityAdsReady(String placementId) {
-        if (!sAdCached && placementId.equals(mPlacementId)) {
-            sAdCached = true;
+        if (loadRequested) {
             mCustomEventInterstitialListener.onInterstitialLoaded();
+            loadRequested = false;
         }
     }
 
     @Override
-    public void onUnityAdsStart(String s) {
+    public void onUnityAdsStart(String placementId) {
         mCustomEventInterstitialListener.onInterstitialShown();
     }
 
     @Override
-    public void onUnityAdsFinish(String s, UnityAds.FinishState finishState) {
-        mCustomEventInterstitialListener.onInterstitialDismissed();
+    public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+        if (finishState == UnityAds.FinishState.ERROR) {
+            MoPubLog.d("Unity interstitial video encountered a playback error for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+        } else {
+            MoPubLog.d("Unity interstitial video completed for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialDismissed();
+        }
+
+        UnityRouter.removeListener(placementId);
     }
 
     @Override
@@ -99,20 +97,16 @@ public void onUnityAdsClick(String placementId) {
         mCustomEventInterstitialListener.onInterstitialClicked();
     }
 
+
+    // @Override
+    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+    }
+
     @Override
-    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String s) {
-        MoPubErrorCode errorCode;
-        switch (unityAdsError) {
-            case VIDEO_PLAYER_ERROR:
-                errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
-                break;
-            case INTERNAL_ERROR:
-                errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                break;
-            default:
-                errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
-                break;
-        }
+    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+        MoPubLog.d("Unity interstitial video cache failed for placement " + mPlacementId + ".");
+        MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
         mCustomEventInterstitialListener.onInterstitialFailed(errorCode);
     }
-}
\ No newline at end of file
+}
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
index ecc76e2b..02ab0e70 100644
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
@@ -17,16 +17,12 @@
 /**
  * A custom event for showing Unity rewarded videos.
  *
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Unity Ads 2.1.0
  */
 public class UnityRewardedVideo extends CustomEventRewardedVideo {
     private static final String GAME_ID_KEY = "gameId";
     private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
     private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-
-    private static boolean sInitialized = false;
-    private static boolean sAdCached = false;
     private static String sPlacementId = "rewardedVideo";
 
     @Nullable
@@ -52,54 +48,42 @@ public String getAdNetworkId() {
 
     @Override
     public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                                         @NonNull final Map<String, Object> localExtras,
-                                         @NonNull final Map<String, String> serverExtras) throws Exception {
-        if (sInitialized) {
-            return false;
-        }
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        synchronized (UnityRewardedVideo.class) {
+            if (UnityAds.isInitialized()) {
+                return false;
+            }
 
-        UnityRouter.initUnityAds(serverExtras, launcherActivity, sUnityAdsListener, new Runnable() {
-            @Override
-            public void run() {
-                throw new IllegalStateException("Unity rewarded video initialization failed due " +
-                        "to empty or missing " + GAME_ID_KEY);
+            try {
+                UnityRouter.initUnityAds(serverExtras, launcherActivity);
+                UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+            } catch (UnityRouter.UnityAdsException e) {
+                MoPubLog.e("Failed to initialize Unity Ads.", e);
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
             }
-        });
-        sInitialized = true;
 
-        return true;
+            return true;
+        }
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull Activity activity,
-                                          @NonNull Map<String, Object> localExtras,
-                                          @NonNull Map<String, String> serverExtras)
-            throws Exception {
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) throws Exception {
 
         sPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, sPlacementId);
         mLauncherActivity = activity;
-        UnityAds.setListener(sUnityAdsListener);
 
-        UnityRouter.initPlacement(sPlacementId, new Runnable() {
-            @Override
-            public void run() {
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            }
-        }, new Runnable() {
-            @Override
-            public void run() {
-                if (UnityAds.isReady(sPlacementId)) {
-                    MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
-                } else {
-                    sAdCached = false;
-                }
-            }
-        });
+        UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+        if (UnityAds.isReady()) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
+        }
     }
 
     @Override
     public boolean hasVideoAvailable() {
-        return UnityRouter.hasVideoAvailable(sPlacementId);
+        return UnityAds.isReady(sPlacementId);
     }
 
     @Override
@@ -113,7 +97,7 @@ public void showVideo() {
 
     @Override
     protected void onInvalidate() {
-        UnityAds.setListener(null);
+        UnityRouter.removeListener(sPlacementId);
     }
 
     private static final class UnityLifecycleListener extends BaseLifecycleListener {
@@ -133,8 +117,7 @@ public void onResume(@NonNull final Activity activity) {
             CustomEventRewardedVideoListener {
         @Override
         public void onUnityAdsReady(String placementId) {
-            if (!sAdCached && placementId.equals(sPlacementId)) {
-                sAdCached = true;
+            if (placementId.equals(sPlacementId)) {
                 MoPubLog.d("Unity rewarded video cached for placement " + placementId + ".");
                 MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, placementId);
             }
@@ -148,7 +131,7 @@ public void onUnityAdsStart(String placementId) {
 
         @Override
         public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
-            MoPubLog.d("Unity rewarded video finished with finish state " + finishState);
+            MoPubLog.d("Unity Ad finished with finish state = " + finishState);
             if (finishState == UnityAds.FinishState.ERROR) {
                 MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
                         UnityRewardedVideo.class,
@@ -162,10 +145,10 @@ public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishStat
                         MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
                 MoPubLog.d("Unity rewarded video completed for placement " + placementId);
             } else if (finishState == UnityAds.FinishState.SKIPPED) {
-                MoPubLog.d("Unity rewarded video was skipped; no reward will be given");
+                MoPubLog.d("Unity ad was skipped, no reward will be given.");
             }
             MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, sPlacementId);
-            UnityAds.setListener(null);
+            UnityRouter.removeListener(placementId);
         }
 
         @Override
@@ -174,17 +157,21 @@ public void onUnityAdsClick(String placementId) {
             MoPubLog.d("Unity rewarded video clicked for placement " + placementId + ".");
         }
 
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+        }
+
         @Override
         public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
             MoPubLog.d("Unity rewarded video cache failed for placement " + sPlacementId + ".");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class,
-                    sPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+            MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, errorCode);
         }
     }
 
     @VisibleForTesting
     void reset() {
-        sInitialized = false;
         sPlacementId = "";
     }
 }
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
index a86ed26b..951a91c5 100644
--- a/extras/src/com/mopub/mobileads/UnityRouter.java
+++ b/extras/src/com/mopub/mobileads/UnityRouter.java
@@ -4,28 +4,28 @@
 import android.text.TextUtils;
 
 import com.mopub.common.MoPub;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
 import com.unity3d.ads.UnityAds;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
 import com.unity3d.ads.metadata.MediationMetaData;
 
+import java.util.HashMap;
 import java.util.Map;
 
+/**
+ * Certified with Unity Ads 2.1.0
+ */
 public class UnityRouter {
+    private static String sCurrentPlacementId;
     private static final String GAME_ID_KEY = "gameId";
     private static final String ZONE_ID_KEY = "zoneId";
     private static final String PLACEMENT_ID_KEY = "placementId";
+    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
+    private static Map<String, IUnityAdsExtendedListener> mUnityAdsListeners = new HashMap<>();
 
-    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity, IUnityAdsExtendedListener unityAdsListener, Runnable onInitFailed) {
-        String gameId;
-        if (serverExtras.containsKey(GAME_ID_KEY)) {
-            gameId = serverExtras.get(GAME_ID_KEY);
-            if (TextUtils.isEmpty(gameId)) {
-                onInitFailed.run();
-                return false;
-            }
-        } else {
-            onInitFailed.run();
-            return false;
+    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity) {
+        String gameId = serverExtras.get(GAME_ID_KEY);
+        if (gameId == null || gameId.isEmpty()) {
+            throw new UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Sever extras is missing \"%s\" or is empty.", GAME_ID_KEY);
         }
 
         MediationMetaData mediationMetaData = new MediationMetaData(launcherActivity);
@@ -33,7 +33,7 @@ static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherA
         mediationMetaData.setVersion(MoPub.SDK_VERSION);
         mediationMetaData.commit();
 
-        UnityAds.initialize(launcherActivity, gameId, unityAdsListener);
+        UnityAds.initialize(launcherActivity, gameId, sUnityAdsListener);
         return true;
     }
 
@@ -47,16 +47,101 @@ static String placementIdForServerExtras(Map<String, String> serverExtras, Strin
         return TextUtils.isEmpty(placementId) ? defaultPlacementId : placementId;
     }
 
-    static void initPlacement(String placementId, Runnable onInitFailure, Runnable onInitSuccess) {
-        if (TextUtils.isEmpty(placementId)) {
-            onInitFailure.run();
-        } else if (hasVideoAvailable(placementId)) {
-            onInitSuccess.run();
+    static void showAd(Activity activity, String placementId) {
+        sCurrentPlacementId = placementId;
+        UnityAds.show(activity, placementId);
+    }
+
+    static void addListener(String placementId, IUnityAdsExtendedListener unityListener) {
+        mUnityAdsListeners.put(placementId, unityListener);
+    }
+
+    static void removeListener(String placementId) {
+        mUnityAdsListeners.remove(placementId);
+    }
+
+    private static class UnityAdsListener implements IUnityAdsExtendedListener {
+        @Override
+        public void onUnityAdsReady(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsReady(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsStart(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsStart(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsFinish(placementId, finishState);
+            }
+        }
+
+        @Override
+        public void onUnityAdsClick(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsClick(placementId);
+            }
+        }
+
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+        }
+
+        @Override
+        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(sCurrentPlacementId);
+            if (listener != null) {
+                listener.onUnityAdsError(unityAdsError, message);
+            }
         }
     }
 
-    static boolean hasVideoAvailable(String placementId) {
-        return UnityAds.isReady(placementId);
+    static final class UnityAdsUtils {
+        static MoPubErrorCode getMoPubErrorCode(UnityAds.UnityAdsError unityAdsError) {
+            MoPubErrorCode errorCode;
+            switch (unityAdsError) {
+                case VIDEO_PLAYER_ERROR:
+                    errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
+                    break;
+                case INVALID_ARGUMENT:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.NETWORK_NO_FILL;
+                    break;
+            }
+            return errorCode;
+        }
     }
 
-}
\ No newline at end of file
+    static class UnityAdsException extends RuntimeException {
+        private final UnityAds.UnityAdsError errorCode;
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailFormat, Object... args) {
+            this(errorCode, String.format(detailFormat, args));
+        }
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailMessage) {
+            super(detailMessage);
+            this.errorCode = errorCode;
+        }
+
+        public UnityAds.UnityAdsError getErrorCode() {
+            return errorCode;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index f8d86c73..f0f283ce 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -83,6 +83,8 @@ protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity
         synchronized (VungleRewardedVideo.class) {
             if (!sInitialized) {
                 sVunglePub = VunglePub.getInstance();
+                String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
+                sVunglePub.init(launcherActivity, appId);
                 sInitialized = true;
                 return true;
             }
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
index 371042d1..70e47cde 100644
--- a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -7,7 +7,7 @@
 import java.util.Map;
 
 /**
- * Certified with Flurry 7.0.0
+ * Certified with Flurry 7.2.0
  */
 public interface FlurryBaseNativeAd {
 
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
index 20ad9646..5d70107f 100644
--- a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * Certified with Flurry 7.0.0
+ * Certified with Flurry 7.2.0
  */
 public final class FlurryCustomEventNative extends CustomEventNative {
 
@@ -72,6 +72,9 @@
 
     private FlurryAgentListener mFlurryAgentListener;
 
+    /* Static reference of the ads to ensure they don't get garbage collected */
+    private final static List<FlurryAdNative> sFlurryNativeAds = new ArrayList<>();
+
     @Override
     protected void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
@@ -208,6 +211,10 @@ private void fetchFlurryAd(@NonNull Context context, String flurryAdSpace,
             flurryNativeAd = new FlurryStaticNativeAd(context, flurryAdNative,
                     customEventNativeListener);
         }
+
+        // Add to requested ad list
+        sFlurryNativeAds.add(flurryAdNative);
+
         flurryNativeAd.fetchAd();
     }
 
@@ -579,6 +586,7 @@ void loadVideoIntoView(@NonNull ViewGroup videoView) {
         public void onFetched(final FlurryAdNative flurryAdNative) {
             Log.d(LOG_TAG, "onFetched: Flurry native ad fetched successfully!");
             mapNativeAd(mBaseNativeAd, flurryAdNative);
+            sFlurryNativeAds.remove(flurryAdNative);
         }
 
         @Override
@@ -622,6 +630,7 @@ public void onError(final FlurryAdNative flurryAdNative,
                 final int errorCode) {
             Log.d(LOG_TAG, String.format("onError: Flurry native ad not available. " +
                     "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+            sFlurryNativeAds.remove(flurryAdNative);
         }
     }
 }
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
index 149725f9..d461aaf8 100644
--- a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -14,7 +14,7 @@
  * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
  * this will still use the mainImageView.
  *
- * Certified with Flurry 7.0.0
+ * Certified with Flurry 7.2.0
  */
 public class FlurryNativeAdRenderer implements
         MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
index c86082cf..0564b026 100644
--- a/extras/src/com/mopub/nativeads/FlurryViewBinder.java
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 
 /**
- * Certified with Flurry 7.0.0
+ * Certified with Flurry 7.2.0
  */
 public class FlurryViewBinder {
     ViewBinder staticViewBinder;
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
index 9798ec95..4d5df2dd 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
@@ -26,6 +26,8 @@
 /**
  * The {@link GooglePlayServicesAdRenderer} class is used to render
  * GooglePlayServicesStaticNativeAds.
+ *
+ * Compatible with version 11.0.2 of the Google Play Services SDK.
  */
 public class GooglePlayServicesAdRenderer implements MoPubAdRenderer<GooglePlayServicesNativeAd> {
 
@@ -96,7 +98,7 @@ public View createAdView(@NonNull Context context, @Nullable ViewGroup parent) {
 
     @Override
     public void renderAdView(@NonNull View view,
-                             @NonNull GooglePlayServicesNativeAd nativeAd) {
+            @NonNull GooglePlayServicesNativeAd nativeAd) {
         GoogleStaticNativeViewHolder viewHolder = mViewHolderMap.get(view);
         if (viewHolder == null) {
             viewHolder = GoogleStaticNativeViewHolder.fromViewBinder(view, mViewBinder);
@@ -133,8 +135,8 @@ public void renderAdView(@NonNull View view,
      *                           otherwise.
      */
     private static void insertGoogleNativeAdView(NativeAdView googleNativeAdView,
-                                                 View moPubNativeAdView,
-                                                 boolean swapMargins) {
+            View moPubNativeAdView,
+            boolean swapMargins) {
         if (moPubNativeAdView instanceof FrameLayout
                 && moPubNativeAdView.getId() == ID_WRAPPING_FRAME) {
             googleNativeAdView.setId(ID_GOOGLE_NATIVE_VIEW);
@@ -201,6 +203,10 @@ protected static void removeGoogleNativeAdView(@NonNull View view, boolean swapM
                     ((ViewGroup) adView).removeView(actualNativeView);
                     outerView.addView(actualNativeView, index);
                 }
+
+                if (adView instanceof NativeAdView) {
+                    ((NativeAdView) adView).destroy();
+                }
             }
         }
     }
@@ -216,8 +222,8 @@ protected static void removeGoogleNativeAdView(@NonNull View view, boolean swapM
      * @param contentAdView          the Google native content ad view in the view hierarchy.
      */
     private void updateContentAdView(GooglePlayServicesNativeAd staticNativeAd,
-                                     GoogleStaticNativeViewHolder staticNativeViewHolder,
-                                     NativeContentAdView contentAdView) {
+            GoogleStaticNativeViewHolder staticNativeViewHolder,
+            NativeContentAdView contentAdView) {
         NativeRendererHelper.addTextView(
                 staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
         contentAdView.setHeadlineView(staticNativeViewHolder.mTitleView);
@@ -266,8 +272,8 @@ private void updateContentAdView(GooglePlayServicesNativeAd staticNativeAd,
      * @param appInstallAdView       the Google native app install ad view in the view hierarchy.
      */
     private void updateAppInstallAdView(GooglePlayServicesNativeAd staticNativeAd,
-                                        GoogleStaticNativeViewHolder staticNativeViewHolder,
-                                        NativeAppInstallAdView appInstallAdView) {
+            GoogleStaticNativeViewHolder staticNativeViewHolder,
+            NativeAppInstallAdView appInstallAdView) {
 
         NativeRendererHelper.addTextView(
                 staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
@@ -353,7 +359,7 @@ public boolean supports(@NonNull BaseNativeAd nativeAd) {
 
         @NonNull
         public static GoogleStaticNativeViewHolder fromViewBinder(@NonNull View view,
-                                                                  @NonNull ViewBinder viewBinder) {
+                @NonNull ViewBinder viewBinder) {
             final GoogleStaticNativeViewHolder viewHolder = new GoogleStaticNativeViewHolder();
             viewHolder.mMainView = view;
             try {
@@ -399,4 +405,4 @@ public static GoogleStaticNativeViewHolder fromViewBinder(@NonNull View view,
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
index 15932aa8..81d34885 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
@@ -21,6 +21,8 @@
 
 /**
  * The {@link GooglePlayServicesNative} class is used to load native Google mobile ads.
+ *
+ * Compatible with version 11.0.2 of the Google Play Services SDK.
  */
 public class GooglePlayServicesNative extends CustomEventNative {
     protected static final String TAG = "MoPubToAdMobNative";
@@ -62,9 +64,9 @@
 
     @Override
     protected void loadNativeAd(@NonNull final Context context,
-                                @NonNull final CustomEventNativeListener customEventNativeListener,
-                                @NonNull Map<String, Object> localExtras,
-                                @NonNull Map<String, String> serverExtras) {
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) {
         if (!sIsInitialized.getAndSet(true)) {
             Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
             if (serverExtras.containsKey(KEY_EXTRA_APPLICATION_ID)
@@ -296,7 +298,7 @@ public NativeAppInstallAd getAppInstallAd() {
          * @param adUnitId Google's AdMob Ad Unit ID.
          */
         public void loadAd(final Context context, String adUnitId,
-                           Map<String, Object> localExtras) {
+                Map<String, Object> localExtras) {
             AdLoader.Builder builder = new AdLoader.Builder(context, adUnitId);
 
             // Get the experimental swap margins extra.
@@ -390,6 +392,18 @@ public void onAppInstallAdLoaded(
                             preCacheImages(context, imageUrls);
                         }
                     }).withAdListener(new AdListener() {
+                        @Override
+                        public void onAdClicked() {
+                            super.onAdClicked();
+                            GooglePlayServicesNativeAd.this.notifyAdClicked();
+                        }
+
+                        @Override
+                        public void onAdImpression() {
+                            super.onAdImpression();
+                            GooglePlayServicesNativeAd.this.notifyAdImpressed();
+                        }
+
                         @Override
                         public void onAdFailedToLoad(int errorCode) {
                             super.onAdFailedToLoad(errorCode);
@@ -467,8 +481,9 @@ private boolean isValidAdChoicesPlacementExtra(Object extra) {
          */
         private boolean isValidContentAd(NativeContentAd contentAd) {
             return (contentAd.getHeadline() != null && contentAd.getBody() != null
-                    && contentAd.getImages() != null && contentAd.getImages().get(0) != null
-                    && contentAd.getLogo() != null && contentAd.getCallToAction() != null);
+                    && contentAd.getImages() != null && contentAd.getImages().size() > 0
+                    && contentAd.getImages().get(0) != null && contentAd.getLogo() != null
+                    && contentAd.getCallToAction() != null);
         }
 
         /**
@@ -482,8 +497,9 @@ private boolean isValidContentAd(NativeContentAd contentAd) {
          */
         private boolean isValidAppInstallAd(NativeAppInstallAd appInstallAd) {
             return (appInstallAd.getHeadline() != null && appInstallAd.getBody() != null
-                    && appInstallAd.getImages() != null && appInstallAd.getImages().get(0) != null
-                    && appInstallAd.getIcon() != null && appInstallAd.getCallToAction() != null);
+                    && appInstallAd.getImages() != null && appInstallAd.getImages().size() > 0
+                    && appInstallAd.getImages().get(0) != null && appInstallAd.getIcon() != null
+                    && appInstallAd.getCallToAction() != null);
         }
 
         @Override
