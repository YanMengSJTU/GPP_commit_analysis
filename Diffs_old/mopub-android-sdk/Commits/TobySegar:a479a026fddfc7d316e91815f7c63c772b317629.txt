diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 00000000..a1adcc65
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "mopub-android-mediation"]
+	path = mopub-android-mediation
+	url = ../mopub-android-mediation.git
diff --git a/mopub-android-mediation b/mopub-android-mediation
new file mode 160000
index 00000000..94e6d9ea
--- /dev/null
+++ b/mopub-android-mediation
@@ -0,0 +1 @@
+Subproject commit 94e6d9ea3d37ef0275acb1efab2473babf20ad35
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml
index 5bf5c16c..90a79a17 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml
@@ -1,4 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.mopub.mobileads.banner">
+    <uses-permission android:name="android.permission.INTERNET"/>
     <application/>
 </manifest>
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/AppLovinBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/AppLovinBanner.java
new file mode 100644
index 00000000..809aa99f
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/AppLovinBanner.java
@@ -0,0 +1,260 @@
+package com.mopub.mobileads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.text.TextUtils;
+
+import com.applovin.adview.AppLovinAdView;
+import com.applovin.adview.AppLovinAdViewDisplayErrorCode;
+import com.applovin.adview.AppLovinAdViewEventListener;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdClickListener;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinErrorCodes;
+import com.applovin.sdk.AppLovinPrivacySettings;
+import com.applovin.sdk.AppLovinSdk;
+import com.applovin.sdk.AppLovinSdkSettings;
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+public class AppLovinBanner extends CustomEventBanner {
+
+    private static final Handler UI_HANDLER = new Handler(Looper.getMainLooper());
+
+    private static final int BANNER_STANDARD_HEIGHT = 50;
+    private static final int BANNER_HEIGHT_OFFSET_TOLERANCE = 10;
+    private static final int LEADER_STANDARD_HEIGHT = 90;
+    private static final int LEADER_HEIGHT_OFFSET_TOLERANCE = 16;
+
+    private static final String AD_WIDTH_KEY = "com_mopub_ad_width";
+    private static final String AD_HEIGHT_KEY = "com_mopub_ad_height";
+
+    private AppLovinSdk sdk;
+
+    //
+    // MoPub Custom Event Methods
+    //
+
+    @Override
+    protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener, final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+
+        // Pass the user consent from the MoPub SDK to AppLovin as per GDPR
+        boolean canCollectPersonalInfo = MoPub.canCollectPersonalInformation();
+        AppLovinPrivacySettings.setHasUserConsent(canCollectPersonalInfo, context);
+
+        // SDK versions BELOW 7.1.0 require a instance of an Activity to be passed in as the context
+        if (AppLovinSdk.VERSION_CODE < 710 && !(context instanceof Activity)) {
+            MoPubLog.d("Unable to request AppLovin banner. Invalid context provided.");
+            customEventBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
+        MoPubLog.d("Requesting AppLovin banner with serverExtras: " + serverExtras + " and localExtras: " + localExtras);
+
+        final AppLovinAdSize adSize = appLovinAdSizeFromLocalExtras(localExtras);
+        if (adSize != null) {
+            sdk = retrieveSdk(serverExtras, context);
+            sdk.setPluginVersion("MoPub-Certified-3.0.0");
+
+            final AppLovinAdView adView = new AppLovinAdView(sdk, adSize, context);
+            adView.setAdDisplayListener(new AppLovinAdDisplayListener() {
+                @Override
+                public void adDisplayed(final AppLovinAd ad) {
+                    MoPubLog.d("Banner displayed");
+                }
+
+                @Override
+                public void adHidden(final AppLovinAd ad) {
+                    MoPubLog.d("Banner dismissed");
+                }
+            });
+            adView.setAdClickListener(new AppLovinAdClickListener() {
+                @Override
+                public void adClicked(final AppLovinAd ad) {
+                    MoPubLog.d("Banner clicked");
+                    customEventBannerListener.onBannerClicked();
+                }
+            });
+
+
+            adView.setAdViewEventListener(new AppLovinAdViewEventListener() {
+                @Override
+                public void adOpenedFullscreen(final AppLovinAd appLovinAd, final AppLovinAdView appLovinAdView) {
+                    MoPubLog.d("Banner opened fullscreen");
+                    customEventBannerListener.onBannerExpanded();
+                }
+
+                @Override
+                public void adClosedFullscreen(final AppLovinAd appLovinAd, final AppLovinAdView appLovinAdView) {
+                    MoPubLog.d("Banner closed fullscreen");
+                    customEventBannerListener.onBannerCollapsed();
+                }
+
+                @Override
+                public void adLeftApplication(final AppLovinAd appLovinAd, final AppLovinAdView appLovinAdView) {
+                    MoPubLog.d("Banner left application");
+                }
+
+                @Override
+                public void adFailedToDisplay(final AppLovinAd appLovinAd, final AppLovinAdView appLovinAdView, final AppLovinAdViewDisplayErrorCode appLovinAdViewDisplayErrorCode) {
+                }
+            });
+
+            final AppLovinAdLoadListener adLoadListener = new AppLovinAdLoadListener() {
+                @Override
+                public void adReceived(final AppLovinAd ad) {
+                    // Ensure logic is ran on main queue
+                    runOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            adView.renderAd(ad);
+
+                            MoPubLog.d("Successfully loaded banner ad");
+
+                            try {
+                                customEventBannerListener.onBannerLoaded(adView);
+                            } catch (Throwable th) {
+                                MoPubLog.e("Unable to notify listener of successful ad load.", th);
+                            }
+                        }
+                    });
+                }
+
+                @Override
+                public void failedToReceiveAd(final int errorCode) {
+                    // Ensure logic is ran on main queue
+                    runOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            MoPubLog.d("Failed to load banner ad with code: " + errorCode);
+
+                            try {
+                                customEventBannerListener.onBannerFailed(toMoPubErrorCode(errorCode));
+                            } catch (Throwable th) {
+                                MoPubLog.e("Unable to notify listener of failure to receive ad.", th);
+                            }
+                        }
+                    });
+                }
+            };
+
+            // Zones support is available on AppLovin SDK 7.5.0 and higher
+            final String zoneId;
+            if (AppLovinSdk.VERSION_CODE >= 750 && serverExtras != null && serverExtras.containsKey("zone_id")) {
+                zoneId = serverExtras.get("zone_id");
+            } else {
+                zoneId = null;
+            }
+
+            if (!TextUtils.isEmpty(zoneId)) {
+                sdk.getAdService().loadNextAdForZoneId(zoneId, adLoadListener);
+            } else {
+                sdk.getAdService().loadNextAd(adSize, adLoadListener);
+            }
+        } else {
+            MoPubLog.d("Unable to request AppLovin banner");
+
+            customEventBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private AppLovinAdSize appLovinAdSizeFromLocalExtras(final Map<String, Object> localExtras) {
+        // Handle trivial case
+        if (localExtras == null || localExtras.isEmpty()) {
+            MoPubLog.d("No serverExtras provided");
+            return null;
+        }
+
+        try {
+            final int width = (Integer) localExtras.get(AD_WIDTH_KEY);
+            final int height = (Integer) localExtras.get(AD_HEIGHT_KEY);
+
+            // We have valid dimensions
+            if (width > 0 && height > 0) {
+                MoPubLog.d("Valid width (" + width + ") and height (" + height + ") provided");
+
+                // Assume fluid width, and check for height with offset tolerance
+                final int bannerOffset = Math.abs(BANNER_STANDARD_HEIGHT - height);
+                final int leaderOffset = Math.abs(LEADER_STANDARD_HEIGHT - height);
+
+                if (bannerOffset <= BANNER_HEIGHT_OFFSET_TOLERANCE) {
+                    return AppLovinAdSize.BANNER;
+                } else if (leaderOffset <= LEADER_HEIGHT_OFFSET_TOLERANCE) {
+                    return AppLovinAdSize.LEADER;
+                } else if (height <= AppLovinAdSize.MREC.getHeight()) {
+                    return AppLovinAdSize.MREC;
+                } else {
+                    MoPubLog.d("Provided dimensions does not meet the dimensions required of banner or mrec ads");
+                }
+            } else {
+                MoPubLog.d("Invalid width (" + width + ") and height (" + height + ") provided");
+            }
+        } catch (Throwable th) {
+            MoPubLog.d("Encountered error while parsing width and height from serverExtras", th);
+        }
+
+        return null;
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private static MoPubErrorCode toMoPubErrorCode(final int applovinErrorCode) {
+        if (applovinErrorCode == AppLovinErrorCodes.NO_FILL) {
+            return MoPubErrorCode.NETWORK_NO_FILL;
+        } else if (applovinErrorCode == AppLovinErrorCodes.UNSPECIFIED_ERROR) {
+            return MoPubErrorCode.UNSPECIFIED;
+        } else if (applovinErrorCode == AppLovinErrorCodes.NO_NETWORK) {
+            return MoPubErrorCode.NO_CONNECTION;
+        } else if (applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT) {
+            return MoPubErrorCode.NETWORK_TIMEOUT;
+        } else {
+            return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+
+    /**
+     * Retrieves the appropriate instance of AppLovin's SDK from the SDK key given in the server parameters, or Android Manifest.
+     */
+    private static AppLovinSdk retrieveSdk(final Map<String, String> serverExtras, final Context context) {
+        final String sdkKey = serverExtras != null ? serverExtras.get("sdk_key") : null;
+        final AppLovinSdk sdk;
+
+        if (!TextUtils.isEmpty(sdkKey)) {
+            sdk = AppLovinSdk.getInstance(sdkKey, new AppLovinSdkSettings(), context);
+        } else {
+            sdk = AppLovinSdk.getInstance(context);
+        }
+        return sdk;
+    }
+
+    /**
+     * Performs the given runnable on the main thread.
+     */
+    private static void runOnUiThread(final Runnable runnable) {
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            runnable.run();
+        } else {
+            UI_HANDLER.post(runnable);
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/FacebookBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/FacebookBanner.java
new file mode 100644
index 00000000..0114ef1e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/FacebookBanner.java
@@ -0,0 +1,147 @@
+package com.mopub.mobileads.adapters;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdListener;
+import com.facebook.ads.AdSettings;
+import com.facebook.ads.AdSize;
+import com.facebook.ads.AdView;
+import com.mopub.common.DataKeys;
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Views;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+public class FacebookBanner extends CustomEventBanner implements AdListener {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+    private AdView mFacebookBanner;
+    private CustomEventBanner.CustomEventBannerListener mBannerListener;
+
+    /**
+     * CustomEventBanner implementation
+     */
+
+    @Override
+    protected void loadBanner(final Context context,
+                              final CustomEventBannerListener customEventBannerListener,
+                              final Map<String, Object> localExtras,
+                              final Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        final String placementId;
+        if (serverExtrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        int width;
+        int height;
+        if (localExtrasAreValid(localExtras)) {
+            width = (Integer) localExtras.get(DataKeys.AD_WIDTH);
+            height = (Integer) localExtras.get(DataKeys.AD_HEIGHT);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        AdSize adSize = calculateAdSize(width, height);
+        if (adSize == null) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        AdSettings.setMediationService("MOPUB_" + MoPub.SDK_VERSION);
+
+        mFacebookBanner = new AdView(context, placementId, adSize);
+        mFacebookBanner.setAdListener(this);
+        mFacebookBanner.disableAutoRefresh();
+
+        final String adm = serverExtras.get(DataKeys.ADM_KEY);
+        if (!TextUtils.isEmpty(adm)) {
+            mFacebookBanner.loadAdFromBid(adm);
+        } else {
+            mFacebookBanner.loadAd();
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mFacebookBanner != null) {
+            Views.removeFromParent(mFacebookBanner);
+            mFacebookBanner.destroy();
+            mFacebookBanner = null;
+        }
+    }
+
+    /**
+     * AdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(Ad ad) {
+        MoPubLog.d("Facebook banner ad loaded successfully. Showing ad...");
+        mBannerListener.onBannerLoaded(mFacebookBanner);
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        MoPubLog.d("Facebook banner ad failed to load.");
+        if (error == AdError.NO_FILL) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onAdClicked(Ad ad) {
+        MoPubLog.d("Facebook banner ad clicked.");
+        mBannerListener.onBannerClicked();
+    }
+
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        MoPubLog.d("Facebook banner ad logged impression.");
+    }
+
+    private boolean serverExtrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    private boolean localExtrasAreValid(@NonNull final Map<String, Object> localExtras) {
+        return localExtras.get(DataKeys.AD_WIDTH) instanceof Integer
+                && localExtras.get(DataKeys.AD_HEIGHT) instanceof Integer;
+    }
+
+    @Nullable
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdSize that will properly contain the adView
+        if (height <= AdSize.BANNER_HEIGHT_50.getHeight()) {
+            return AdSize.BANNER_HEIGHT_50;
+        } else if (height <= AdSize.BANNER_HEIGHT_90.getHeight()) {
+            return AdSize.BANNER_HEIGHT_90;
+        } else if (height <= AdSize.RECTANGLE_HEIGHT_250.getHeight()) {
+            return AdSize.RECTANGLE_HEIGHT_250;
+        } else {
+            return null;
+        }
+    }
+
+    @Deprecated
+        // for testing
+    AdView getAdView() {
+        return mFacebookBanner;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/GooglePlayServicesBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/GooglePlayServicesBanner.java
new file mode 100644
index 00000000..3f01a320
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/adapters/GooglePlayServicesBanner.java
@@ -0,0 +1,223 @@
+package com.mopub.mobileads.adapters;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.google.ads.mediation.admob.AdMobAdapter;
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.AdSize;
+import com.google.android.gms.ads.AdView;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.util.Views;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+import static com.google.android.gms.ads.AdSize.BANNER;
+import static com.google.android.gms.ads.AdSize.FULL_BANNER;
+import static com.google.android.gms.ads.AdSize.LEADERBOARD;
+import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
+
+public class GooglePlayServicesBanner extends CustomEventBanner {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    public static final String AD_UNIT_ID_KEY = "adUnitID";
+    public static final String AD_WIDTH_KEY = "adWidth";
+    public static final String AD_HEIGHT_KEY = "adHeight";
+
+    private CustomEventBannerListener mBannerListener;
+    private AdView mGoogleAdView;
+
+    @Override
+    protected void loadBanner(
+            final Context context,
+            final CustomEventBannerListener customEventBannerListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+        final String adUnitId;
+        final int adWidth;
+        final int adHeight;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView = new AdView(context);
+        mGoogleAdView.setAdListener(new AdViewListener());
+        mGoogleAdView.setAdUnitId(adUnitId);
+
+        final AdSize adSize = calculateAdSize(adWidth, adHeight);
+        if (adSize == null) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView.setAdSize(adSize);
+
+        AdRequest.Builder builder = new AdRequest.Builder();
+        builder.setRequestAgent("MoPub");
+
+        // Consent collected from the MoPub’s consent dialogue should not be used to set up
+        // Google's personalization preference. Publishers should work with Google to be GDPR-compliant.
+        forwardNpaIfSet(builder);
+
+        AdRequest adRequest = builder.build();
+
+        try {
+            mGoogleAdView.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        Views.removeFromParent(mGoogleAdView);
+        if (mGoogleAdView != null) {
+            mGoogleAdView.setAdListener(null);
+            mGoogleAdView.destroy();
+        }
+    }
+
+    private void forwardNpaIfSet(AdRequest.Builder builder) {
+
+        // Only forward the "npa" bundle if it is explicitly set. Otherwise, don't attach it with the ad request.
+        if (GooglePlayServicesMediationSettings.getNpaBundle() != null &&
+                !GooglePlayServicesMediationSettings.getNpaBundle().isEmpty()) {
+            builder.addNetworkExtrasBundle(AdMobAdapter.class, GooglePlayServicesMediationSettings.getNpaBundle());
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdSize that will properly contain the adView
+        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
+            return BANNER;
+        } else if (width <= MEDIUM_RECTANGLE.getWidth() && height <= MEDIUM_RECTANGLE.getHeight()) {
+            return MEDIUM_RECTANGLE;
+        } else if (width <= FULL_BANNER.getWidth() && height <= FULL_BANNER.getHeight()) {
+            return FULL_BANNER;
+        } else if (width <= LEADERBOARD.getWidth() && height <= LEADERBOARD.getHeight()) {
+            return LEADERBOARD;
+        } else {
+            return null;
+        }
+    }
+
+    private class AdViewListener extends AdListener {
+        /*
+         * Google Play Services AdListener implementation
+         */
+        @Override
+        public void onAdClosed() {
+
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services banner ad failed to load.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerFailed(getMoPubErrorCode(errorCode));
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services banner ad loaded successfully. Showing ad...");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerLoaded(mGoogleAdView);
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Google Play Services banner ad clicked.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerClicked();
+            }
+        }
+
+        /**
+         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+         *
+         * @param error Google Mobile Ads SDK error code.
+         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+         * code.
+         */
+        private MoPubErrorCode getMoPubErrorCode(int error) {
+            MoPubErrorCode errorCode;
+            switch (error) {
+                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                    errorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case AdRequest.ERROR_CODE_NO_FILL:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+            }
+            return errorCode;
+        }
+    }
+
+    public static final class GooglePlayServicesMediationSettings implements MediationSettings {
+        private static Bundle npaBundle;
+
+        public GooglePlayServicesMediationSettings() {
+        }
+
+        public GooglePlayServicesMediationSettings(Bundle bundle) {
+            npaBundle = bundle;
+        }
+
+        public void setNpaBundle(Bundle bundle) {
+            npaBundle = bundle;
+        }
+
+        /* The MoPub Android SDK queries MediationSettings from the rewarded video code
+        (MoPubRewardedVideoManager.getGlobalMediationSettings). That API might not always be
+        available to publishers importing the modularized SDK(s) based on select ad formats.
+        This is a workaround to statically get the "npa" Bundle passed to us via the constructor. */
+        private static Bundle getNpaBundle() {
+            return npaBundle;
+        }
+    }
+
+    @Deprecated
+        // for testing
+    AdView getGoogleAdView() {
+        return mGoogleAdView;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index d9a974c9..1dc7586a 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -22,9 +22,10 @@ dependencies {
     }
     compile 'com.mopub.volley:mopub-volley:2.0.0'
     compile project(':base')
-    //compile 'com.google.android.gms:play-services-ads:10.0.0'
+    compile 'com.google.android.gms:play-services-ads:15.0.1'
     compile project(':unity-ads')
-    //compile project(':audience-network-sdk-4.26.1')
+    compile 'com.facebook.android:audience-network-sdk:4.+'
+    compile 'com.flurry.android:ads:11.1.1@aar'
 }
 
 project.description = 'MoPub Android SDK - Base'
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index d99d27a5..5794c431 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -230,13 +230,6 @@ void onAdLoadError(final VolleyError error) {
 
         final MoPubErrorCode errorCode = getErrorCodeFromVolleyError(error, mContext);
 
-        //todo failover uz nepouzivame lebo applovin sucks dick
-//        if (errorCode == MoPubErrorCode.SERVER_ERROR || errorCode == MoPubErrorCode.NO_FILL) {
-//            mBackoffPower++;
-//            onAdLoadSuccess(getFailoverResponse());
-//            return;
-//        }
-
         setNotLoading();
         adDidFail(errorCode);
     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml
index 643b97ff..e9a82dd9 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml
@@ -1,4 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.mopub.mobileads.interstitial">
+    <uses-permission android:name="android.permission.INTERNET"/>
     <application/>
 </manifest>
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
index 404c88d8..75357723 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
@@ -6,23 +6,22 @@
 import android.support.annotation.NonNull;
 import android.widget.Toast;
 
+import com.google.android.gms.ads.MobileAds;
 import com.mojang.base.*;
 import com.mojang.base.events.AppEvent;
 import com.mojang.base.events.GameEvent;
 
+import com.mojang.base.json.Data;
 import com.mopub.common.MoPub;
-import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.SdkConfiguration;
+import com.mopub.common.SdkInitializationListener;
 import com.mopub.common.privacy.ConsentDialogListener;
-import com.mopub.common.privacy.ConsentStatus;
-import com.mopub.common.privacy.ConsentStatusChangeListener;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.mobileads.MoPubErrorCode;
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
 import org.greenrobot.eventbus.ThreadMode;
 
-import java.io.File;
-
 import static com.mojang.base.events.AppEvent.Destroy;
 import static com.mojang.base.events.AppEvent.OfflineAccepted;
 import static com.mojang.base.events.AppEvent.OnlineAccepted;
@@ -42,31 +41,60 @@
  * Controlls how ads are showed
  */
 public class Ads {
+    private Banner banner;
+    private RewardedVideo rewardedVideo;
+    private Activity activity;
     private Interstitial interstitial;
     private int numOfPlayers;
     private int timesBlockChanged;
     private static Ads instance;
 
 
-    public Ads(Interstitial interstitial) {
-        this.interstitial = interstitial;
-        this.numOfPlayers = 0;
+    public Ads(Activity activity, Interstitial interstitial,RewardedVideo rewardedVideo,Banner banner) {
         if (Ads.instance == null) {
-            Ads.instance = this;
+            instance = this;
+
+            this.interstitial = interstitial;
+            this.rewardedVideo = rewardedVideo;
+            this.banner = banner;
+            this.activity = activity;
+
+            EventBus.getDefault().register(this);
         }
 
         if (InternetObserver.isInternetAvaible()) {
             Logger.Log("::start");
-            interstitial.init(false);
+            interstitial.init(false,4000);
         } else {
             Logger.Log("::start: No Internet Avaible for ads");
         }
+    }
 
-        EventBus.getDefault().register(this);
+    public static void earlyInitialization(Activity activity, final Runnable onInitialized){
+        Logger.Log("::Ads", "::Early Ads Initialization");
+        initializeMoPub(activity,onInitialized);
+        MobileAds.initialize(activity, Data.Ads.Interstitial.admobAppId);
+    }
 
+    private static void initializeMoPub(Activity activity, final Runnable runAfter) {
+        if (!MoPub.isSdkInitialized() && Data.Ads.enabled) {
+            Logger.Log("::Ads", "::Initializing MoPub");
+            MoPub.initializeSdk(
+                    activity,
+                    new SdkConfiguration.Builder(Data.Ads.Interstitial.id).build(),
+                    new SdkInitializationListener() {
+                        @Override
+                        public void onInitializationFinished() {
+                            Ads.showMoPubConsentDialog(runAfter);
+                        }
+                    });
+        } else {
+            Logger.Log("::Ads", "::Failed MoPub Initialization");
+            runAfter.run();
+        }
     }
 
-    public static void showMopubConsentDialog(final Runnable doAfterDialog) {
+    private static void showMoPubConsentDialog(final Runnable doAfterDialog) {
         if (MoPub.isSdkInitialized()) {
             // CONSENT DIALOG FOR MOPUB
             final PersonalInfoManager mPersonalInfoManager = MoPub.getPersonalInformationManager();
@@ -125,7 +153,7 @@ public void onAppEvent(AppEvent appEvent) {
             case OnlineAccepted:
                 if (InternetObserver.isInternetAvaible()) {
                     interstitial.lock.internetUnlock();
-                    interstitial.init(true);
+                    interstitial.init(true,4000);
                 }
                 break;
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Banner.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Banner.java
new file mode 100644
index 00000000..4984984e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Banner.java
@@ -0,0 +1,4 @@
+package com.mopub.ads;
+
+public class Banner {
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index eb1279b3..da989df2 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -251,10 +251,7 @@ public void onInterstitialClicked(MoPubInterstitial interstitial) {
         Logger.Log("::onInterstitialClicked");
 
         MoPubInterstitial.AdType adType = interstitial.getAdType();
-        //todo we disable admob black screen
-//        if (adType == MoPubInterstitial.AdType.ADMOB) {
-//            showBlackScreen(minecraftActivity, Data.Ads.Interstitial.disableTouchChance);
-//        }
+
 
     }
 
@@ -315,34 +312,10 @@ public void destroy() {
     }
 
 
-    public void init(final boolean fromOnlineAccepted) {
-        //If we played online and just accepted to play online just init slowly ads
-        if (fromOnlineAccepted || Data.hasMinecraft) {
-            _initDelayed(4000);
-        } else {
-            //We have victim app we dont use fast ad here so just normal slow init
-            //Also we don use game lock
-            lock.game = false;
-            _initDelayed(4000);
-        }
-    }
-
-
     public void showUnityAdsVideo() {
         if (!lock.isOnlineMultiplayerLocked() && !lock.isHardLocked()) {
-            //todo we dont show unity we show interstitial from mopub
             show(false);
         }
-//            if (!UnityAds.isReady()) {
-//                Logger.Log(TAG, "::showUnityAdsVideo: show false");
-//                show(false);
-//            } else {
-//                gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
-//                UnityAds.show(minecraftActivity);
-//            }
-//        } else {
-//            Logger.Log(TAG, "::showUnityAdsVideo: show false multiplayer locked or hard locked");
-//        }
     }
 
 
@@ -366,8 +339,10 @@ public void unschedulePeriodicShows() {
     }
 
 
-    public void _initDelayed(int delay) {
-        Logger.Log("::Initing Mopub in 4 sec...");
+    public void init(boolean fromOnlineAccepted, int delay) {
+        Logger.Log("::Initing Mopub in "+delay+" sec...");
+        lock.game = Data.hasMinecraft;
+
         Helper.runOnWorkerThread(new Runnable() {
             @Override
             public void run() {
@@ -380,12 +355,6 @@ public void run() {
                     Logger.Log("::Mopub Forcing Refresh");
                     mopubInterstitial.forceRefresh();
                 }
-                //todo we are not initializing unity ads anymore we dont know about the doe
-//                if (UnityAds.isSupported() && !UnityAds.isInitialized()) {
-//                    Logger.Log("::Initing Unity ads");
-//                    //final String _69633 = Helper.convertString("4E6A6B324D7A4D3D");
-//                    UnityAds.initialize(minecraftActivity, null, null, Helper.USE_UNITY_TEST_ADS);
-//                }
             }
         }, delay);
     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/RewardedVideo.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/RewardedVideo.java
new file mode 100644
index 00000000..fc96a4a5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/RewardedVideo.java
@@ -0,0 +1,4 @@
+package com.mopub.ads;
+
+public class RewardedVideo {
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
index fd7c716d..5704eeb3 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
@@ -1,16 +1,11 @@
-/**
- * AppLovin Interstitial SDK Mediation for MoPub
- *
- * @author Matt Szaro
- * @version 1.2
- **/
-
 package com.mopub.ads.adapters;
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.text.TextUtils;
 
-import com.applovin.adview.AppLovinInterstitialActivity;
 import com.applovin.adview.AppLovinInterstitialAd;
 import com.applovin.adview.AppLovinInterstitialAdDialog;
 import com.applovin.sdk.AppLovinAd;
@@ -18,101 +13,101 @@
 import com.applovin.sdk.AppLovinAdDisplayListener;
 import com.applovin.sdk.AppLovinAdLoadListener;
 import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinAdVideoPlaybackListener;
+import com.applovin.sdk.AppLovinErrorCodes;
+import com.applovin.sdk.AppLovinPrivacySettings;
 import com.applovin.sdk.AppLovinSdk;
 import com.applovin.sdk.AppLovinSdkSettings;
-import com.mojang.base.Helper;
-import com.mojang.base.Logger;
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.util.HashMap;
+import java.util.LinkedList;
 import java.util.Map;
+import java.util.Queue;
+
+public class AppLovinInterstitial extends CustomEventInterstitial implements AppLovinAdLoadListener, AppLovinAdDisplayListener, AppLovinAdClickListener, AppLovinAdVideoPlaybackListener {
+
+    private static final Handler UI_HANDLER = new Handler(Looper.getMainLooper());
+    private static final String DEFAULT_ZONE = "";
 
-public class ApplovinInterstitial extends CustomEventInterstitial implements AppLovinAdLoadListener {
-    private static final String EXTRAS_KEY = "appKey";
-    private CustomEventInterstitial.CustomEventInterstitialListener mInterstitialListener;
-    private Activity parentActivity;
     private AppLovinSdk sdk;
-    private AppLovinAd lastReceived;
-    private String key;
+    private CustomEventInterstitialListener listener;
+    private Context context;
 
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-    @Override
-    public void loadInterstitial(Context context, CustomEventInterstitial.CustomEventInterstitialListener interstitialListener, Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        Logger.Log("::Applovin Load");
+    // A map of Zone -> Queue of `AppLovinAd`s to be shared by instances of the custom event.
+    // This prevents skipping of ads as this adapter will be re-created and preloaded
+    // on every ad load regardless if ad was actually displayed or not.
+    private static final Map<String, Queue<AppLovinAd>> GLOBAL_INTERSTITIAL_ADS = new HashMap<String, Queue<AppLovinAd>>();
+    private static final Object GLOBAL_INTERSTITIAL_ADS_LOCK = new Object();
 
-        mInterstitialListener = interstitialListener;
+    private String zoneId; // The zone identifier this instance of the custom event is loading for
 
-        if (context instanceof Activity) {
-            parentActivity = (Activity) context;
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-            return;
-        }
+    //
+    // MoPub Custom Event Methods
+    //
+
+    @Override
+    public void loadInterstitial(final Context context, final CustomEventInterstitialListener listener, final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
 
-        Logger.Log("::Applovin: Request received for new interstitial.");
+        // Pass the user consent from the MoPub SDK to AppLovin as per GDPR
+        boolean canCollectPersonalInfo = MoPub.canCollectPersonalInformation();
+        AppLovinPrivacySettings.setHasUserConsent(canCollectPersonalInfo, context);
 
-        AppLovinSdkSettings setting = new AppLovinSdkSettings();
-        setting.setVerboseLogging(Helper.canLog);
-        setting.setAutoPreloadSizes("NONE");
-        setting.setMuted(true);
+        MoPubLog.d("Requesting AppLovin interstitial with serverExtras: " + serverExtras + " and localExtras: " + localExtras);
 
-        if (key == null) {
-            key = getKeyFromExtras(serverExtras);
+        // SDK versions BELOW 7.2.0 require a instance of an Activity to be passed in as the context
+        if (AppLovinSdk.VERSION_CODE < 720 && !(context instanceof Activity)) {
+            MoPubLog.d("Unable to request AppLovin banner. Invalid context provided.");
+            listener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
         }
 
-        sdk = AppLovinSdk.getInstance(key, setting, context);
-        sdk.getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, this);
+        // Store parent objects
+        this.listener = listener;
+        this.context = context;
 
-    }
+        sdk = retrieveSdk(serverExtras, context);
+        sdk.setPluginVersion("MoPub-Certified-3.0.0");
 
-    private String getKeyFromExtras(Map<String, String> serverExtras) {
-        if (serverExtras.containsKey(EXTRAS_KEY)) {
-            return serverExtras.get(EXTRAS_KEY);
-        } else if (mInterstitialListener != null) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+        // Zones support is available on AppLovin SDK 7.5.0 and higher
+        final String serverExtrasZoneId = serverExtras != null ? serverExtras.get("zone_id") : null;
+        zoneId = (!TextUtils.isEmpty(serverExtrasZoneId) && AppLovinSdk.VERSION_CODE >= 750) ? serverExtrasZoneId : DEFAULT_ZONE;
+
+        // Check if we already have a preloaded ad for the given zone
+        final AppLovinAd preloadedAd = dequeueAd(zoneId);
+        if (preloadedAd != null) {
+            MoPubLog.d("Found preloaded ad for zone: {" + zoneId + "}");
+            adReceived(preloadedAd);
+        } else {
+            // If this is a default Zone, create the incentivized ad normally
+            if (DEFAULT_ZONE.equals(zoneId)) {
+                sdk.getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, this);
+            }
+            // Otherwise, use the Zones API
+            else {
+                // Dynamically load an ad for a given zone without breaking backwards compatibility for publishers on older SDKs
+                sdk.getAdService().loadNextAdForZoneId(zoneId, this);
+            }
         }
-        return null;
     }
 
     @Override
     public void showInterstitial() {
-        final AppLovinAd adToRender = lastReceived;
-
-        if (adToRender != null) {
-            Logger.Log("::Showing AppLovin interstitial ad...");
-
-
-            parentActivity.runOnUiThread(new Runnable() {
-                public void run() {
-                    AppLovinInterstitialAdDialog inter = AppLovinInterstitialAd.create(sdk, parentActivity);
-
-                    inter.setAdClickListener(new AppLovinAdClickListener() {
-                        @Override
-                        public void adClicked(AppLovinAd appLovinAd) {
-                            mInterstitialListener.onLeaveApplication();
-                        }
-                    });
-
-                    inter.setAdDisplayListener(new AppLovinAdDisplayListener() {
-
-                        @Override
-                        public void adDisplayed(AppLovinAd appLovinAd) {
-                            mInterstitialListener.onInterstitialShown();
-                        }
-
-                        @Override
-                        public void adHidden(AppLovinAd appLovinAd) {
-                            mInterstitialListener.onInterstitialDismissed();
-                        }
-                    });
-
-                    inter.showAndRender(adToRender);
-                }
-            });
+        final AppLovinAd preloadedAd = dequeueAd(zoneId);
+        if (preloadedAd != null) {
+            final AppLovinInterstitialAdDialog interstitialAd = AppLovinInterstitialAd.create(sdk, context);
+            interstitialAd.setAdDisplayListener(this);
+            interstitialAd.setAdClickListener(this);
+            interstitialAd.setAdVideoPlaybackListener(this);
+            interstitialAd.showAndRender(preloadedAd);
         } else {
-            Logger.Log("::Showing AppLovin failed adToRender null");
+            MoPubLog.d("Failed to show an AppLovin interstitial before one was loaded");
+            listener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
         }
     }
 
@@ -121,33 +116,152 @@ protected boolean usesProxy() {
         return false;
     }
 
-
     @Override
     public void onInvalidate() {
-        parentActivity = null;
-        AppLovinInterstitialActivity.lastKnownWrapper = null;
     }
 
+    //
+    // Ad Load Listener
+    //
+
     @Override
-    public void adReceived(AppLovinAd ad) {
-        Logger.Log("::AppLovin interstitial loaded successfully.");
+    public void adReceived(final AppLovinAd ad) {
+        MoPubLog.d("Interstitial did load ad: " + ad.getAdIdNumber());
 
-        lastReceived = ad;
+        enqueueAd(ad, zoneId);
 
-        parentActivity.runOnUiThread(new Runnable() {
+        runOnUiThread(new Runnable() {
+            @Override
             public void run() {
-                mInterstitialListener.onInterstitialLoaded();
+                try {
+                    listener.onInterstitialLoaded();
+                } catch (Throwable th) {
+                    MoPubLog.e("Unable to notify listener of successful ad load.", th);
+                }
             }
         });
     }
 
     @Override
     public void failedToReceiveAd(final int errorCode) {
-        parentActivity.runOnUiThread(new Runnable() {
+        MoPubLog.d("Interstitial failed to load with error: " + errorCode);
+
+        runOnUiThread(new Runnable() {
+            @Override
             public void run() {
-                Logger.Log("::Applovin Fail");
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                try {
+                    listener.onInterstitialFailed(toMoPubErrorCode(errorCode));
+                } catch (Throwable th) {
+                    MoPubLog.e("Unable to notify listener of failure to receive ad.", th);
+                }
             }
         });
     }
+
+    //
+    // Ad Display Listener
+    //
+
+    @Override
+    public void adDisplayed(final AppLovinAd appLovinAd) {
+        MoPubLog.d("Interstitial displayed");
+        listener.onInterstitialShown();
+    }
+
+    @Override
+    public void adHidden(final AppLovinAd appLovinAd) {
+        MoPubLog.d("Interstitial dismissed");
+        listener.onInterstitialDismissed();
+    }
+
+    //
+    // Ad Click Listener
+    //
+
+    @Override
+    public void adClicked(final AppLovinAd appLovinAd) {
+        MoPubLog.d("Interstitial clicked");
+        listener.onLeaveApplication();
+    }
+
+    //
+    // Video Playback Listener
+    //
+
+    @Override
+    public void videoPlaybackBegan(final AppLovinAd ad) {
+        MoPubLog.d("Interstitial video playback began");
+    }
+
+    @Override
+    public void videoPlaybackEnded(final AppLovinAd ad, final double percentViewed, final boolean fullyWatched) {
+        MoPubLog.d("Interstitial video playback ended at playback percent: " + percentViewed);
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private static AppLovinAd dequeueAd(final String zoneId) {
+        synchronized (GLOBAL_INTERSTITIAL_ADS_LOCK) {
+            AppLovinAd preloadedAd = null;
+
+            final Queue<AppLovinAd> preloadedAds = GLOBAL_INTERSTITIAL_ADS.get(zoneId);
+            if (preloadedAds != null && !preloadedAds.isEmpty()) {
+                preloadedAd = preloadedAds.poll();
+            }
+            return preloadedAd;
+        }
+    }
+
+    private static void enqueueAd(final AppLovinAd ad, final String zoneId) {
+        synchronized (GLOBAL_INTERSTITIAL_ADS_LOCK) {
+            Queue<AppLovinAd> preloadedAds = GLOBAL_INTERSTITIAL_ADS.get(zoneId);
+            if (preloadedAds == null) {
+                preloadedAds = new LinkedList<AppLovinAd>();
+                GLOBAL_INTERSTITIAL_ADS.put(zoneId, preloadedAds);
+            }
+            preloadedAds.offer(ad);
+        }
+    }
+
+    private static MoPubErrorCode toMoPubErrorCode(final int applovinErrorCode) {
+        if (applovinErrorCode == AppLovinErrorCodes.NO_FILL) {
+            return MoPubErrorCode.NETWORK_NO_FILL;
+        } else if (applovinErrorCode == AppLovinErrorCodes.UNSPECIFIED_ERROR) {
+            return MoPubErrorCode.UNSPECIFIED;
+        } else if (applovinErrorCode == AppLovinErrorCodes.NO_NETWORK) {
+            return MoPubErrorCode.NO_CONNECTION;
+        } else if (applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT) {
+            return MoPubErrorCode.NETWORK_TIMEOUT;
+        } else {
+            return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+
+    /**
+     * Retrieves the appropriate instance of AppLovin's SDK from the SDK key given in the server parameters, or Android Manifest.
+     */
+    private static AppLovinSdk retrieveSdk(final Map<String, String> serverExtras, final Context context) {
+        final String sdkKey = serverExtras != null ? serverExtras.get("sdk_key") : null;
+        final AppLovinSdk sdk;
+
+        if (!TextUtils.isEmpty(sdkKey)) {
+            sdk = AppLovinSdk.getInstance(sdkKey, new AppLovinSdkSettings(), context);
+        } else {
+            sdk = AppLovinSdk.getInstance(context);
+        }
+        return sdk;
+    }
+
+    /**
+     * Performs the given runnable on the main thread.
+     */
+    private static void runOnUiThread(final Runnable runnable) {
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            runnable.run();
+        } else {
+            UI_HANDLER.post(runnable);
+        }
+    }
 }
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
deleted file mode 100644
index 5aa7b67a..00000000
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
+++ /dev/null
@@ -1,98 +0,0 @@
-//package com.mopub.ads.adapters;
-//
-//import android.app.Activity;
-//import android.content.Context;
-//import android.support.annotation.NonNull;
-//import android.text.TextUtils;
-//import android.util.Log;
-//
-//import com.chartboost.sdk.Chartboost;
-//import com.mopub.common.Preconditions;
-//import com.mopub.mobileads.CustomEventInterstitial;
-//import com.mopub.mobileads.MoPubErrorCode;
-//
-//import java.util.Map;
-//
-///**
-// * A custom event for showing Chartboost interstitial ads.
-// *
-// * Certified with Chartboost 6.6.3
-// */
-//class ChartboostInterstitial extends CustomEventInterstitial {
-//
-//    @NonNull
-//    private String mLocation = ChartboostShared.LOCATION_DEFAULT;
-//
-//    /*
-//     * Note: Chartboost recommends implementing their specific Activity lifecycle callbacks in your
-//     * Activity's onStart(), onStop(), onBackPressed() methods for proper results. Please see their
-//     * documentation for more information.
-//     */
-//
-//    /*
-//     * Abstract methods from CustomEventInterstitial
-//     */
-//    @Override
-//    protected void loadInterstitial(@NonNull Context context,
-//            @NonNull CustomEventInterstitialListener interstitialListener,
-//            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) {
-//        Preconditions.checkNotNull(context);
-//        Preconditions.checkNotNull(interstitialListener);
-//        Preconditions.checkNotNull(localExtras);
-//        Preconditions.checkNotNull(serverExtras);
-//
-//        if (!(context instanceof Activity)) {
-//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-//            return;
-//        }
-//
-//        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
-//            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
-//            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
-//        }
-//
-//        // If there's already a listener for this location, then another instance of
-//        // CustomEventInterstitial is still active and we should fail.
-//        if (ChartboostShared.getDelegate().hasInterstitialLocation(mLocation) &&
-//                ChartboostShared.getDelegate().getInterstitialListener(mLocation) != interstitialListener) {
-//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-//            return;
-//        }
-//
-//        Activity activity = (Activity) context;
-//        try {
-//            ChartboostShared.initializeSdk(activity, serverExtras);
-//            ChartboostShared.getDelegate().registerInterstitialListener(mLocation, interstitialListener);
-//        } catch (NullPointerException e) {
-//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-//            return;
-//        } catch (IllegalStateException e) {
-//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-//            return;
-//        }
-//
-//        Chartboost.onCreate(activity);
-//        Chartboost.onStart(activity);
-//        if (Chartboost.hasInterstitial(mLocation)) {
-//            ChartboostShared.getDelegate().didCacheInterstitial(mLocation);
-//        } else {
-//            Chartboost.cacheInterstitial(mLocation);
-//        }
-//    }
-//
-//    @Override
-//    public void showInterstitial() {
-//        Log.d("MoPub", "Showing Chartboost interstitial ad.");
-//        Chartboost.showInterstitial(mLocation);
-//    }
-//
-//    @Override
-//    protected boolean usesProxy() {
-//        return false;
-//    }
-//
-//    @Override
-//    protected void onInvalidate() {
-//        ChartboostShared.getDelegate().unregisterInterstitialListener(mLocation);
-//    }
-//}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
deleted file mode 100644
index e3e3a9d8..00000000
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
+++ /dev/null
@@ -1,225 +0,0 @@
-//package com.mopub.ads.adapters;
-//
-//import android.app.Activity;
-//import android.support.annotation.NonNull;
-//import android.support.annotation.Nullable;
-//import android.util.Log;
-//
-//import com.chartboost.sdk.Chartboost;
-//import com.chartboost.sdk.ChartboostDelegate;
-//import com.chartboost.sdk.Model.CBError;
-//import com.mopub.common.MoPub;
-//import com.mopub.common.Preconditions;
-//import com.mopub.common.VisibleForTesting;
-//import com.mopub.common.logging.MoPubLog;
-//import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-//import com.mopub.mobileads.MoPubErrorCode;
-//
-//import java.util.Collections;
-//import java.util.Map;
-//import java.util.Set;
-//import java.util.TreeMap;
-//import java.util.TreeSet;
-//
-///**
-// * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
-// *
-// * Certified with Chartboost 6.6.3
-// */
-//public class ChartboostShared {
-//    private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
-//
-//    /*
-//     * These keys are intended for MoPub internal use. Do not modify.
-//     */
-//    public static final String APP_ID_KEY = "appId";
-//    public static final String APP_SIGNATURE_KEY = "appSignature";
-//    public static final String LOCATION_KEY = "location";
-//    public static final String LOCATION_DEFAULT = "Default";
-//
-//    @Nullable private static String mAppId;
-//    @Nullable private static String mAppSignature;
-//
-//    /**
-//     * Initialize the Chartboost SDK for the provided application id and app signature.
-//     */
-//    public static synchronized boolean initializeSdk(@NonNull Activity launcherActivity,
-//            @NonNull Map<String, String> serverExtras) {
-//        Preconditions.checkNotNull(launcherActivity);
-//        Preconditions.checkNotNull(serverExtras);
-//
-//        // Validate Chartboost args
-//        if (!serverExtras.containsKey(APP_ID_KEY)) {
-//            throw new IllegalStateException("Chartboost rewarded video initialization" +
-//                    " failed due to missing application ID.");
-//        }
-//
-//        if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
-//            throw new IllegalStateException("Chartboost rewarded video initialization" +
-//                    " failed due to missing application signature.");
-//        }
-//
-//        final String appId = serverExtras.get(APP_ID_KEY);
-//        final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
-//
-//        if (appId.equals(mAppId) && appSignature.equals(mAppSignature)) {
-//            // We don't need to reinitialize.
-//            return false;
-//        }
-//
-//        mAppId = appId;
-//        mAppSignature = appSignature;
-//
-//        // Perform all the common SDK initialization steps including startAppWithId
-//        Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
-//        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
-//        Chartboost.setDelegate(sDelegate);
-//        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
-//        Chartboost.setAutoCacheAds(false);
-//        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
-//
-//        // Callers of this method need to call onCreate & onStart themselves.
-//        return true;
-//    }
-//
-//    @NonNull
-//    public static ChartboostSingletonDelegate getDelegate() {
-//        return sDelegate;
-//    }
-//
-//    /**
-//     * A {@link ChartboostDelegate} that can forward events for Chartboost interstitials
-//     * and rewarded videos to the appropriate listener based on the Chartboost location used.
-//     */
-//    public static class ChartboostSingletonDelegate extends ChartboostDelegate
-//    {
-//        private static final CustomEventInterstitialListener NULL_LISTENER =
-//                new CustomEventInterstitialListener() {
-//                    @Override
-//                    public void onInterstitialLoaded() { }
-//
-//                    @Override
-//                    public void onInterstitialFailed(MoPubErrorCode errorCode) { }
-//
-//                    @Override
-//                    public void onInterstitialShown() { }
-//
-//                    @Override
-//                    public void onInterstitialClicked() { }
-//
-//                    @Override
-//                    public void onLeaveApplication() { }
-//
-//                    @Override
-//                    public void onInterstitialDismissed() { }
-//                };
-//
-//        //***************
-//        // Chartboost Location Management for interstitials and rewarded videos
-//        //***************
-//
-//        private Map<String, CustomEventInterstitialListener> mInterstitialListenersForLocation
-//                = Collections.synchronizedMap(new TreeMap<String, CustomEventInterstitialListener>());
-//
-//        private Set<String> mRewardedVideoLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
-//
-//        public void registerInterstitialListener(@NonNull String location,
-//                @NonNull CustomEventInterstitialListener interstitialListener) {
-//            Preconditions.checkNotNull(location);
-//            Preconditions.checkNotNull(interstitialListener);
-//            mInterstitialListenersForLocation.put(location, interstitialListener);
-//        }
-//
-//        public void unregisterInterstitialListener(@NonNull String location) {
-//            Preconditions.checkNotNull(location);
-//            mInterstitialListenersForLocation.remove(location);
-//        }
-//
-//        public void registerRewardedVideoLocation(@NonNull String location) {
-//            Preconditions.checkNotNull(location);
-//            mRewardedVideoLocationsToLoad.add(location);
-//        }
-//
-//        public void unregisterRewardedVideoLocation(@NonNull String location) {
-//            Preconditions.checkNotNull(location);
-//            mRewardedVideoLocationsToLoad.remove(location);
-//        }
-//
-//        @NonNull
-//        public CustomEventInterstitialListener getInterstitialListener(@NonNull String location) {
-//            final CustomEventInterstitialListener listener = mInterstitialListenersForLocation.get(location);
-//            return listener != null ? listener : NULL_LISTENER;
-//        }
-//
-//        public boolean hasInterstitialLocation(@NonNull String location) {
-//            return mInterstitialListenersForLocation.containsKey(location);
-//        }
-//
-//        //******************
-//        // Chartboost Delegate methods.
-//        //******************
-//
-//        //******************
-//        // Interstitials
-//        //******************
-//        @Override
-//        public void didCacheInterstitial(String location) {
-//            MoPubLog.d("Chartboost interstitial loaded successfully.");
-//            getInterstitialListener(location).onInterstitialLoaded();
-//        }
-//
-//        @Override
-//        public void didFailToLoadInterstitial(String location, CBError.CBImpressionError error) {
-//            String suffix = error != null ? "Error: " + error.name() : "";
-//            Log.d("MoPub", "Chartboost interstitial ad failed to load." + suffix);
-//            getInterstitialListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-//        }
-//
-//        @Override
-//        public void didDismissInterstitial(String location) {
-//            // Note that this method is fired before didCloseInterstitial and didClickInterstitial.
-//            MoPubLog.d("Chartboost interstitial ad dismissed.");
-//            getInterstitialListener(location).onInterstitialDismissed();
-//        }
-//
-//        @Override
-//        public void didCloseInterstitial(String location) {
-//            MoPubLog.d("Chartboost interstitial ad closed.");
-//        }
-//
-//        @Override
-//        public void didClickInterstitial(String location) {
-//            MoPubLog.d("Chartboost interstitial ad clicked.");
-//            getInterstitialListener(location).onInterstitialClicked();
-//        }
-//
-//        @Override
-//        public void didDisplayInterstitial(String location) {
-//            MoPubLog.d("Chartboost interstitial ad shown.");
-//            getInterstitialListener(location).onInterstitialShown();
-//        }
-//
-//        //******************
-//        // More Apps
-//        //******************
-//        @Override
-//        public boolean shouldRequestMoreApps(String location) {
-//            return false;
-//        }
-//
-//        @Override
-//        public boolean shouldDisplayMoreApps(final String location) {
-//            return false;
-//        }
-//    }
-//
-//
-//    @VisibleForTesting
-//    @Deprecated
-//    static void reset() {
-//        // Clears all the locations to load and other state.
-//        sDelegate = new ChartboostSingletonDelegate();
-//        mAppId = null;
-//        mAppSignature = null;
-//    }
-//}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookAdvancedBidder.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookAdvancedBidder.java
new file mode 100644
index 00000000..b6b395cb
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookAdvancedBidder.java
@@ -0,0 +1,22 @@
+package com.mopub.ads.adapters;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.facebook.ads.BidderTokenProvider;
+import com.mopub.common.MoPubAdvancedBidder;
+
+/**
+ * Include this class to use advanced bidding from Facebook.
+ */
+public class FacebookAdvancedBidder implements MoPubAdvancedBidder {
+    @Override
+    public String getToken(@NonNull final Context context) {
+        return BidderTokenProvider.getBidderToken(context);
+    }
+
+    @Override
+    public String getCreativeNetworkName() {
+        return "facebook";
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
index 32c6699c..c356071a 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
@@ -1,129 +1,187 @@
-//package com.mopub.ads.adapters;
-//
-//import android.content.Context;
-//import android.util.Log;
-//
-//import com.facebook.ads.Ad;
-//import com.facebook.ads.AdError;
-//import com.facebook.ads.InterstitialAd;
-//import com.facebook.ads.InterstitialAdListener;
-//import com.mopub.mobileads.CustomEventInterstitial;
-//import com.mopub.mobileads.MoPubErrorCode;
-//
-//import java.util.Map;
-//
-///**
-// * Certified with Facebook Audience Network 4.26.0
-// */
-//public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
-//    public static final String PLACEMENT_ID_KEY = "placement_id";
-//
-//    private InterstitialAd mFacebookInterstitial;
-//    private CustomEventInterstitialListener mInterstitialListener;
-//
-//    /**
-//     * CustomEventInterstitial implementation
-//     */
-//
-//    @Override
-//    protected void loadInterstitial(final Context context,
-//                                    final CustomEventInterstitialListener customEventInterstitialListener,
-//                                    final Map<String, Object> localExtras,
-//                                    final Map<String, String> serverExtras) {
-//        mInterstitialListener = customEventInterstitialListener;
-//
-//        final String placementId;
-//        if (extrasAreValid(serverExtras)) {
-//            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-//        } else {
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-//            return;
-//        }
-//
-//        mFacebookInterstitial = new InterstitialAd(context, placementId);
-//        mFacebookInterstitial.setAdListener(this);
-//        mFacebookInterstitial.loadAd();
-//    }
-//
-//    @Override
-//    public void showInterstitial() {
-//        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
-//            mFacebookInterstitial.show();
-//        } else {
-//            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
-//            if (mInterstitialListener != null) {
-//                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
-//            } else {
-//                Log.d("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
-//            }
-//        }
-//    }
-//
-//    @Override
-//    protected boolean usesProxy() {
-//        return false;
-//    }
-//
-//    @Override
-//    protected void onInvalidate() {
-//        if (mFacebookInterstitial != null) {
-//            mFacebookInterstitial.destroy();
-//            mFacebookInterstitial = null;
-//        }
-//    }
-//
-//    /**
-//     * InterstitialAdListener implementation
-//     */
-//
-//    @Override
-//    public void onAdLoaded(final Ad ad) {
-//        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
-//        mInterstitialListener.onInterstitialLoaded();
-//    }
-//
-//    @Override
-//    public void onError(final Ad ad, final AdError error) {
-//        Log.d("MoPub", "Facebook interstitial ad failed to load.");
-//        if (error == AdError.NO_FILL) {
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-//        } else if (error == AdError.INTERNAL_ERROR) {
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-//        } else {
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-//        }
-//    }
-//
-//    @Override
-//    public void onInterstitialDisplayed(final Ad ad) {
-//        Log.d("MoPub", "Showing Facebook interstitial ad.");
-//        mInterstitialListener.onInterstitialShown();
-//    }
-//
-//    @Override
-//    public void onAdClicked(final Ad ad) {
-//        Log.d("MoPub", "Facebook interstitial ad clicked.");
-//        mInterstitialListener.onInterstitialClicked();
-//    }
-//
-//    @Override
-//    public void onLoggingImpression(Ad ad) {
-//        Log.d("MoPub", "Facebook interstitial ad logged impression.");
-//    }
-//
-//    @Override
-//    public void onInterstitialDismissed(final Ad ad) {
-//        Log.d("MoPub", "Facebook interstitial ad dismissed.");
-//        mInterstitialListener.onInterstitialDismissed();
-//    }
-//
-//    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-//        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-//        return (placementId != null && placementId.length() > 0);
-//    }
-//
-//    @Deprecated // for testing
-//    InterstitialAd getInterstitialAd() {
-//        return mFacebookInterstitial;
-//    }
-//}
+package com.mopub.ads.adapters;
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdSettings;
+import com.facebook.ads.InterstitialAd;
+import com.facebook.ads.InterstitialAdListener;
+import com.mopub.common.DataKeys;
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
+public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
+    private static final int ONE_HOURS_MILLIS = 60 * 60 * 1000;
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+    private InterstitialAd mFacebookInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+    @NonNull
+    private Handler mHandler;
+    private Runnable mAdExpiration;
+
+    public FacebookInterstitial() {
+        mHandler = new Handler();
+        mAdExpiration = new Runnable() {
+            @Override
+            public void run() {
+                if (mInterstitialListener != null) {
+                    MoPubLog.d("Expiring unused Facebook Interstitial ad due to Facebook's 60-minute expiration policy.");
+                    mInterstitialListener.onInterstitialFailed(EXPIRED);
+
+                    /* Can't get a direct handle to adFailed() to set the interstitial's state to IDLE: https://github.com/mopub/mopub-android-sdk/blob/4199080a1efd755641369715a4de5031d6072fbc/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java#L91.
+                    So, invalidating the interstitial (destroying & nulling) instead. */
+                    onInvalidate();
+                }
+            }
+        };
+    }
+
+    /**
+     * CustomEventInterstitial implementation
+     */
+
+    @Override
+    protected void loadInterstitial(final Context context,
+                                    final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras,
+                                    final Map<String, String> serverExtras) {
+        MoPubLog.d("Loading Facebook interstitial");
+        mInterstitialListener = customEventInterstitialListener;
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            }
+            return;
+        }
+
+        AdSettings.setMediationService("MOPUB_" + MoPub.SDK_VERSION);
+
+        mFacebookInterstitial = new InterstitialAd(context, placementId);
+        mFacebookInterstitial.setAdListener(this);
+
+        final String adm = serverExtras.get(DataKeys.ADM_KEY);
+        if (!TextUtils.isEmpty(adm)) {
+            mFacebookInterstitial.loadAdFromBid(adm);
+        } else {
+            mFacebookInterstitial.loadAd();
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
+            mFacebookInterstitial.show();
+            cancelExpirationTimer();
+        } else {
+            MoPubLog.d("Tried to show a Facebook interstitial ad when it's not ready. Please try again.");
+            if (mInterstitialListener != null) {
+                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
+            } else {
+                MoPubLog.d("Interstitial listener not instantiated. Please load interstitial again.");
+            }
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        cancelExpirationTimer();
+        if (mFacebookInterstitial != null) {
+            mFacebookInterstitial.destroy();
+            mFacebookInterstitial = null;
+            mInterstitialListener = null;
+        }
+    }
+
+    /**
+     * InterstitialAdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(final Ad ad) {
+        cancelExpirationTimer();
+        MoPubLog.d("Facebook interstitial ad loaded successfully.");
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialLoaded();
+        }
+        mHandler.postDelayed(mAdExpiration, ONE_HOURS_MILLIS);
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        cancelExpirationTimer();
+        MoPubLog.d("Facebook interstitial ad failed to load.");
+        if (mInterstitialListener != null) {
+            if (error == AdError.NO_FILL) {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            } else if (error == AdError.INTERNAL_ERROR) {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            } else {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+            }
+        }
+    }
+
+    @Override
+    public void onInterstitialDisplayed(final Ad ad) {
+        cancelExpirationTimer();
+        MoPubLog.d("Showing Facebook interstitial ad.");
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialShown();
+        }
+    }
+
+    @Override
+    public void onAdClicked(final Ad ad) {
+        MoPubLog.d("Facebook interstitial ad clicked.");
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialClicked();
+        }
+    }
+
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        MoPubLog.d("Facebook interstitial ad logged impression.");
+    }
+
+    @Override
+    public void onInterstitialDismissed(final Ad ad) {
+        MoPubLog.d("Facebook interstitial ad dismissed.");
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialDismissed();
+        }
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    private void cancelExpirationTimer() {
+        mHandler.removeCallbacks(mAdExpiration);
+    }
+
+    @Deprecated
+        // for testing
+    InterstitialAd getInterstitialAd() {
+        return mFacebookInterstitial;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryAgentWrapper.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryAgentWrapper.java
new file mode 100644
index 00000000..49e070b4
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryAgentWrapper.java
@@ -0,0 +1,79 @@
+package com.mopub.ads.adapters;
+
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.FlurryAgent;
+import com.flurry.android.FlurryAgentListener;
+
+public final class FlurryAgentWrapper {
+    public static final String PARAM_API_KEY = "apiKey";
+    public static final String PARAM_AD_SPACE_NAME = "adSpaceName";
+
+    private static final String ORIGIN_IDENTIFIER = "Flurry_Mopub_Android";
+    private static final String ORIGIN_VERSION = "6.5.0";
+
+    private FlurryAgent.Builder mAgentBuilder;
+
+    public static FlurryAgentWrapper getInstance() {
+        return FlurryAgentLoader.INSTANCE;
+    }
+
+    private FlurryAgentWrapper() {
+        mAgentBuilder = new FlurryAgent.Builder()
+                .withLogEnabled(false)
+                .withLogLevel(Log.INFO);
+
+        FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
+    }
+
+    public synchronized void startSession(@NonNull final Context context,
+                                          final String apiKey,
+                                          @Nullable FlurryAgentListener flurryAgentListener) {
+        // validate parameters
+        if (TextUtils.isEmpty(apiKey)) {
+            return;
+        }
+
+        // init
+        if (!FlurryAgent.isSessionActive()) {
+            mAgentBuilder.withListener(flurryAgentListener) // withListener allows nulls
+                    .build(context, apiKey);
+
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onStartSession(context);
+        }
+    }
+
+    public synchronized void endSession(final Context context) {
+        // validate parameters
+        if (context == null) {
+            return;
+        }
+
+        if (FlurryAgent.isSessionActive()) {
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onEndSession(context);
+        }
+    }
+
+    public synchronized boolean isSessionActive() {
+        return FlurryAgent.isSessionActive();
+    }
+
+    private static class FlurryAgentLoader {
+        private static final FlurryAgentWrapper INSTANCE = new FlurryAgentWrapper();
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryCustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryCustomEventInterstitial.java
new file mode 100644
index 00000000..9cb73ae8
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FlurryCustomEventInterstitial.java
@@ -0,0 +1,201 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdInterstitial;
+import com.flurry.android.ads.FlurryAdInterstitialListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
+    private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventInterstitialListener mListener;
+
+    private String mAdSpaceName;
+
+    private FlurryAdInterstitial mInterstitial;
+
+    // CustomEventInterstitial
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener listener,
+                                    Map<String, Object> localExtras,
+                                    Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventInterstitialListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!validateExtras(serverExtras)) {
+            Log.e(LOG_TAG, "Failed interstitial ad fetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
+
+        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
+        mInterstitial = new FlurryAdInterstitial(mContext, mAdSpaceName);
+        mInterstitial.setListener(new FlurryMopubInterstitialListener());
+        mInterstitial.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.destroy();
+            mInterstitial = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+    }
+
+    @Override
+    public void showInterstitial() {
+        Log.d(LOG_TAG, "MoPub issued showInterstitial (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.displayAd();
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        if (serverExtras == null) {
+            return false;
+        }
+
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubInterstitialListener implements FlurryAdInterstitialListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onFetched: Flurry interstitial ad fetched successfully!");
+
+            if (mListener != null) {
+                mListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onRendered: Flurry interstitial ad rendered");
+
+            if (mListener != null) {
+                mListener.onInterstitialShown();
+            }
+        }
+
+        @Override
+        public void onDisplay(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onDisplay: Flurry interstitial ad displayed");
+
+            // no-op
+        }
+
+        @Override
+        public void onClose(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClose: Flurry interstitial ad closed");
+
+            if (mListener != null) {
+                mListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onAppExit: Flurry interstitial ad exited app");
+        }
+
+        @Override
+        public void onClicked(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClicked: Flurry interstitial ad clicked");
+
+            if (mListener != null) {
+                mListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onVideoCompleted: Flurry interstitial ad video completed");
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdInterstitial adInterstitial, FlurryAdErrorType adErrorType,
+                            int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry interstitial ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+
+            if (mListener != null) {
+                switch (adErrorType) {
+                    case FETCH:
+                        mListener.onInterstitialFailed(NETWORK_NO_FILL);
+                        return;
+                    case RENDER:
+                        mListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+                        return;
+                    case CLICK:
+                        // Don't call onInterstitialFailed in this case.
+                        return;
+                    default:
+                        mListener.onInterstitialFailed(UNSPECIFIED);
+                }
+            }
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
index e3070c61..8b1249b0 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
@@ -1,196 +1,199 @@
-//package com.mopub.ads.adapters;
-//
-//import android.annotation.SuppressLint;
-//import android.content.Context;
-//import android.content.SharedPreferences;
-//
-//import com.google.android.gms.ads.AdListener;
-//import com.google.android.gms.ads.AdRequest;
-//import com.google.android.gms.ads.InterstitialAd;
-//import com.mojang.base.Analytics;
-//import com.mojang.base.Helper;
-//import com.mojang.base.json.Data;
-//import com.mopub.ads.Interstitial;
-//import com.mopub.mobileads.CustomEventInterstitial;
-//import com.mopub.mobileads.MoPubErrorCode;
-//
-//import java.util.Calendar;
-//import java.util.Map;
-//
-///*
-// * Compatible with version 7.8.0 of the Google Play Services SDK.
-// */
-//
-//// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
-//
-//public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
-//    /*
-//     * These keys are intended for MoPub internal use. Do not modify.
-//     */
-//    public static final String AD_UNIT_ID_KEY = "adUnitID";
-//    public static final String LOCATION_KEY = "location";
-//    public static final String CLICKS_SP = "clicks";
-//    private static SharedPreferences sharedPreferences;
-//
-//    private CustomEventInterstitialListener mInterstitialListener;
-//    private InterstitialAd mGoogleInterstitialAd;
-//    private final String debugIntID = Helper.convertString("59324574595842774C5842315969307A4F5451774D6A55324D446B354F5451794E5451304C7A45774D7A4D784E7A4D334D54493D");
-//    private static Integer currentDayNumber = null;
-//    private static final String DISABLED_DAY_KEY = "DisabledDay";
-//    private Context mContext;
-//
-//    @Override
-//    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
-//                                    final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-//        mInterstitialListener = customEventInterstitialListener;
-//        final String adUnitId;
-//
-//        Logger.Log("Admob Load");
-//        setSharedPreferences(context);
-//        mContext = context;
-//
-//        if(isDisabled(context)){
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-//            return;
-//        }
-//
-//        if (extrasAreValid(serverExtras)) {
-//            adUnitId = Helper.DEBUG ? debugIntID : serverExtras.get(AD_UNIT_ID_KEY);
-//        } else {
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-//            return;
-//        }
-//
-//        mGoogleInterstitialAd = new InterstitialAd(context);
-//        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
-//        mGoogleInterstitialAd.setAdUnitId(adUnitId);
-//
-//        final AdRequest adRequest = new AdRequest.Builder()
-//                .setRequestAgent("MoPub")
-//                .addTestDevice("E883C2BB7DE538BAADA96556402DA41F")
-//                .build();
-//
-//        try {
-//            mGoogleInterstitialAd.loadAd(adRequest);
-//        } catch (NoClassDefFoundError e) {
-//            // This can be thrown by Play Services on Honeycomb.
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-//        }
-//    }
-//
-//    private static void setSharedPreferences(Context context) {
-//        if(sharedPreferences == null){
-//            sharedPreferences = context.getSharedPreferences(CLICKS_SP,Context.MODE_PRIVATE);
-//        }
-//    }
-//
-//    @SuppressLint("CommitPrefEdits")
-//    public static void registerAdmobClick(Context context) {
-//        setSharedPreferences(context);
-//        int numOfClickToday = sharedPreferences.getInt(String.valueOf(currentDayNumber),0);
-//
-//        sharedPreferences.edit().putInt(String.valueOf(currentDayNumber),numOfClickToday+1).apply();
-//
-//        if((numOfClickToday+1) >= Data.Ads.Interstitial.maximumClicksPerDay){
-//            sharedPreferences.edit().putInt(DISABLED_DAY_KEY,currentDayNumber).apply();
-//            Logger.Log("DISABLING ADMOB");
-//            Analytics.i().sendOther("Admob","Disabled");
-//        }
-//    }
-//
-//    public static boolean isDisabled(Context context) {
-//        setSharedPreferences(context);
-//
-//        if(currentDayNumber == null){
-//            Calendar calendar = Calendar.getInstance();
-//            currentDayNumber = calendar.get(Calendar.DAY_OF_YEAR);
-//        }
-//        int disabledDay = sharedPreferences.getInt(DISABLED_DAY_KEY, -1);
-//        boolean isDisabled = disabledDay == currentDayNumber;
-//        if(isDisabled){
-//            Logger.Log("ADMOB DISABLED",true);
-//        }
-//        return isDisabled;
-//    }
-//
-//    @Override
-//    public void showInterstitial() {
-//        if (mGoogleInterstitialAd.isLoaded()) {
-//            Logger.Log("Showing Admob",true);
-//            Interstitial.FAST_BACK_PRESS = true;
-//            mGoogleInterstitialAd.show();
-//        } else {
-//            Logger.Log("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
-//        }
-//    }
-//
-//    @Override
-//    protected boolean usesProxy() {
-//        return true;
-//    }
-//
-//    @Override
-//    protected void onInvalidate() {
-//        if (mGoogleInterstitialAd != null) {
-//            mGoogleInterstitialAd.setAdListener(null);
-//        }
-//    }
-//
-//    private boolean extrasAreValid(Map<String, String> serverExtras) {
-//        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-//    }
-//
-//    private class InterstitialAdListener extends AdListener {
-//        /*
-//    	 * Google Play Services AdListener implementation
-//    	 */
-//        @Override
-//        public void onAdClosed() {
-//            Logger.Log("MoPub", "Google Play Services interstitial ad dismissed.");
-//            if (mInterstitialListener != null) {
-//                mInterstitialListener.onInterstitialDismissed();
-//            }
-//        }
-//
-//        @Override
-//        public void onAdFailedToLoad(int errorCode) {
-//            Logger.Log("MoPub", "Google Play Services interstitial ad failed to load.");
-//            Logger.Log("Admob Failed");
-//            if (mInterstitialListener != null) {
-//                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-//            }
-//        }
-//
-//        @Override
-//        public void onAdLeftApplication() {
-//            Logger.Log("MoPub", "Google Play Services interstitial ad clicked.");
-//            if (mInterstitialListener != null) {
-//                mInterstitialListener.onInterstitialClicked();
-//            }
-//            registerAdmobClick(mContext);
-//        }
-//
-//        @Override
-//        public void onAdLoaded() {
-//            Logger.Log("MoPub", "Google Play Services interstitial ad loaded successfully.");
-//            if (mInterstitialListener != null) {
-//                mInterstitialListener.onInterstitialLoaded();
-//            }
-//        }
-//
-//        @Override
-//        public void onAdOpened() {
-//            Logger.Log("MoPub", "Showing Google Play Services interstitial ad.");
-//            if (mInterstitialListener != null) {
-//                mInterstitialListener.onInterstitialShown();
-//            }
-//        }
-//    }
-//
-//
-//
-//    @Deprecated // for testing
-//    InterstitialAd getGoogleInterstitialAd() {
-//        return mGoogleInterstitialAd;
-//    }
-//}
+package com.mopub.ads.adapters;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.google.ads.mediation.admob.AdMobAdapter;
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.InterstitialAd;
+import com.mopub.common.MediationSettings;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    public static final String AD_UNIT_ID_KEY = "adUnitID";
+    public static final String LOCATION_KEY = "location";
+
+    private CustomEventInterstitialListener mInterstitialListener;
+    private InterstitialAd mGoogleInterstitialAd;
+
+    @Override
+    protected void loadInterstitial(
+            final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+        final String adUnitId;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleInterstitialAd = new InterstitialAd(context);
+        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
+        mGoogleInterstitialAd.setAdUnitId(adUnitId);
+
+        AdRequest.Builder builder = new AdRequest.Builder();
+        builder.setRequestAgent("MoPub");
+
+        // Consent collected from the MoPub’s consent dialogue should not be used to set up
+        // Google's personalization preference. Publishers should work with Google to be GDPR-compliant.
+        forwardNpaIfSet(builder);
+
+        AdRequest adRequest = builder.build();
+
+        try {
+            mGoogleInterstitialAd.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    private void forwardNpaIfSet(AdRequest.Builder builder) {
+
+        // Only forward the "npa" bundle if it is explicitly set. Otherwise, don't attach it with the ad request.
+        if (GooglePlayServicesMediationSettings.getNpaBundle() != null &&
+                !GooglePlayServicesMediationSettings.getNpaBundle().isEmpty()) {
+            builder.addNetworkExtrasBundle(AdMobAdapter.class, GooglePlayServicesMediationSettings.getNpaBundle());
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        if (mGoogleInterstitialAd.isLoaded()) {
+            mGoogleInterstitialAd.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mGoogleInterstitialAd != null) {
+            mGoogleInterstitialAd.setAdListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private class InterstitialAdListener extends AdListener {
+        /*
+         * Google Play Services AdListener implementation
+         */
+        @Override
+        public void onAdClosed() {
+            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(getMoPubErrorCode(errorCode));
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialShown();
+            }
+        }
+
+        /**
+         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+         *
+         * @param error Google Mobile Ads SDK error code.
+         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+         * code.
+         */
+        private MoPubErrorCode getMoPubErrorCode(int error) {
+            MoPubErrorCode errorCode;
+            switch (error) {
+                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                    errorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case AdRequest.ERROR_CODE_NO_FILL:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+            }
+            return errorCode;
+        }
+    }
+
+    public static final class GooglePlayServicesMediationSettings implements MediationSettings {
+        private static Bundle npaBundle;
+
+        public GooglePlayServicesMediationSettings() {
+        }
+
+        public GooglePlayServicesMediationSettings(Bundle bundle) {
+            npaBundle = bundle;
+        }
+
+        public void setNpaBundle(Bundle bundle) {
+            npaBundle = bundle;
+        }
+
+        /* The MoPub Android SDK queries MediationSettings from the rewarded video code
+        (MoPubRewardedVideoManager.getGlobalMediationSettings). That API might not always be
+        available to publishers importing the modularized SDK(s) based on select ad formats.
+        This is a workaround to statically get the "npa" Bundle passed to us via the constructor. */
+        private static Bundle getNpaBundle() {
+            return npaBundle;
+        }
+    }
+
+    @Deprecated
+        // for testing
+    InterstitialAd getGoogleInterstitialAd() {
+        return mGoogleInterstitialAd;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/HeyzapInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/HeyzapInterstitial.java
deleted file mode 100644
index 568cc86d..00000000
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/HeyzapInterstitial.java
+++ /dev/null
@@ -1,128 +0,0 @@
-//package com.mopub.ads.adapters;
-//
-//
-//import android.app.Activity;
-//import android.content.Context;
-//
-//import com.heyzap.sdk.ads.HeyzapAds;
-//import com.heyzap.sdk.ads.InterstitialAd;
-//import com.mojang.base.Helper;
-//import com.mopub.mobileads.CustomEventInterstitial;
-//import com.mopub.mobileads.MoPubErrorCode;
-//
-//import java.util.Map;
-//
-//public class HeyzapInterstitial extends CustomEventInterstitial implements HeyzapAds.NetworkCallbackListener, HeyzapAds.OnStatusListener {
-//    private static final String KEY_ID = "key";
-//    private String id;
-//    private Activity activity;
-//    private CustomEventInterstitialListener mInterstitialListener;
-//
-//    @Override
-//    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String, Object> localExtras, Map<String, String> serverExtras) {
-//        mInterstitialListener = customEventInterstitialListener;
-//
-//        if (context instanceof Activity) {
-//            activity = (Activity) context;
-//        } else {
-//            Logger.Log("Cound not load heyzap because context is not instance of activity");
-//            if (mInterstitialListener != null) {
-//                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
-//            }
-//            return;
-//        }
-//
-//        if (id == null) {
-//            id = extractIdFromExtras(serverExtras);
-//            HeyzapAds.start(id, activity,HeyzapAds.DISABLE_AUTOMATIC_FETCH,this);
-//        }
-//
-//        InterstitialAd.fetch();
-//    }
-//
-//    private String extractIdFromExtras(Map<String, String> serverExtras) {
-//        if (serverExtras.containsKey(KEY_ID)) {
-//            return serverExtras.get(KEY_ID);
-//        } else {
-//            Logger.Log("Failed to extract key from heyzap server extrass");
-//            return null;
-//        }
-//    }
-//
-//    @Override
-//    public void showInterstitial() {
-//        if (InterstitialAd.isAvailable()) {
-//            Logger.Log("Showing Heyzap");
-//            InterstitialAd.display(activity);
-//        } else {
-//            Logger.Log("Wanted to show heyzap but wasnt avaible");
-//        }
-//    }
-//
-//    @Override
-//    protected boolean usesProxy() {
-//        return false;
-//    }
-//
-//    @Override
-//    protected void onInvalidate() {
-//
-//    }
-//
-//    @Override
-//    public void onNetworkCallback(String s, String s1) {
-//        Logger.Log("Heyzap network callback " + s + " : " + s1);
-//    }
-//
-//    @Override
-//    public void onShow(String s) {
-//        if (mInterstitialListener != null) {
-//            mInterstitialListener.onInterstitialShown();
-//        }
-//    }
-//
-//    @Override
-//    public void onClick(String s) {
-//        if (mInterstitialListener != null) {
-//            mInterstitialListener.onInterstitialClicked();
-//        }
-//    }
-//
-//    @Override
-//    public void onHide(String s) {
-//        if (mInterstitialListener != null) {
-//            mInterstitialListener.onInterstitialDismissed();
-//        }
-//    }
-//
-//    @Override
-//    public void onFailedToShow(String s) {
-//        if (mInterstitialListener != null) {
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
-//        }
-//    }
-//
-//    @Override
-//    public void onAvailable(String s) {
-//        if (mInterstitialListener != null) {
-//            mInterstitialListener.onInterstitialLoaded();
-//        }
-//    }
-//
-//    @Override
-//    public void onFailedToFetch(String s) {
-//        if (mInterstitialListener != null) {
-//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
-//        }
-//    }
-//
-//    @Override
-//    public void onAudioStarted() {
-//
-//    }
-//
-//    @Override
-//    public void onAudioFinished() {
-//
-//    }
-//}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
deleted file mode 100644
index 4179fe3f..00000000
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
+++ /dev/null
@@ -1,131 +0,0 @@
-package com.mopub.ads.adapters;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mojang.base.Helper;
-import com.mojang.base.Logger;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.unity3d.ads.UnityAds;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-
-import java.util.Map;
-
-
-public class UnityAdsMopubEvents extends CustomEventInterstitial implements IUnityAdsExtendedListener {
-
-    private CustomEventInterstitialListener mopubListener;
-    private static boolean sInitialized = false;
-    private Activity mLauncherActivity;
-    private boolean sAdCached;
-
-
-    @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
-
-        Logger.Log("::Loading Unity Ads");
-        final String mGameId = serverExtras.get("gameId");
-
-        if(mGameId == null || mGameId.isEmpty()){
-            Logger.Log("::No game id bailing out");
-            mopubListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (context == null || !(context instanceof Activity)) {
-            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-            return;
-        }
-
-        mLauncherActivity = (Activity) context;
-        mopubListener = customEventInterstitialListener;
-
-        if (!sInitialized || !UnityAds.isInitialized()) {
-            Logger.Log("::Unity Debug");
-            Helper.runOnWorkerThread(new Runnable() {
-                @Override
-                public void run() {
-                    UnityAds.setDebugMode(true);
-                    UnityAds.initialize(mLauncherActivity, mGameId, UnityAdsMopubEvents.this, Helper.USE_UNITY_TEST_ADS);
-                }
-            });
-            UnityAds.setListener(this);
-
-            sInitialized = true;
-        } else {
-            UnityAds.setListener(this);
-
-            if (UnityAds.isReady()) {
-                mopubListener.onInterstitialLoaded();
-            } else {
-                sAdCached = false;
-            }
-        }
-    }
-
-
-    @Override
-    public void showInterstitial() {
-        if (UnityAds.isReady() && mLauncherActivity != null) {
-            Logger.Log("::Showing Unity Ads");
-            UnityAds.show(mLauncherActivity);
-        } else {
-            Logger.Log("::Failed to show unity ads isReady = " + UnityAds.isReady() + "::activity null = " + mLauncherActivity);
-            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    protected boolean usesProxy() {
-        return false;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        UnityAds.setListener(null);
-    }
-
-
-    @Override
-    public void onUnityAdsReady(String placementId) {
-        Logger.Log("::onUnityAdsReady");
-        if (!sAdCached) {
-            sAdCached = true;
-            mopubListener.onInterstitialLoaded();
-        }
-    }
-
-    @Override
-    public void onUnityAdsStart(String placementId) {
-        Logger.Log("::onUnityAdsStart");
-        mopubListener.onInterstitialShown();
-    }
-
-    @Override
-    public void onUnityAdsFinish(String placementId, UnityAds.FinishState result) {
-        Logger.Log("::onUnityAdsFinish");
-        mopubListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onUnityAdsError(UnityAds.UnityAdsError error, String message) {
-        Logger.Log("::onUnityAdsError + "+ error +":: message:"+ message);
-        mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onUnityAdsClick(String placementId) {
-        Logger.Log("::onUnityAdsClick + " + placementId);
-        mopubListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
-
-    }
-
-}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityInterstitial.java
new file mode 100644
index 00000000..1416c62e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityInterstitial.java
@@ -0,0 +1,114 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+import com.unity3d.ads.UnityAds;
+
+import java.util.Map;
+
+public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
+
+    private CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private Context mContext;
+    private String mPlacementId = "video";
+    private boolean loadRequested = false;
+
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener customEventInterstitialListener,
+                                    Map<String, Object> localExtras,
+                                    Map<String, String> serverExtras) {
+
+        mPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, mPlacementId);
+        mCustomEventInterstitialListener = customEventInterstitialListener;
+        mContext = context;
+        loadRequested = true;
+
+        try {
+            UnityRouter.addListener(mPlacementId, this);
+            initializeUnityAdsSdk(serverExtras);
+            if (UnityAds.isReady(mPlacementId)) {
+                mCustomEventInterstitialListener.onInterstitialLoaded();
+                loadRequested = false;
+            }
+        } catch (UnityRouter.UnityAdsException e) {
+            mCustomEventInterstitialListener.onInterstitialFailed(UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
+        }
+    }
+
+    private void initializeUnityAdsSdk(Map<String, String> serverExtras) {
+        if (!UnityAds.isInitialized()) {
+            if (!(mContext instanceof Activity)) {
+                MoPubLog.e("Context is null or is not an instanceof Activity.");
+                return;
+            }
+            UnityRouter.initUnityAds(serverExtras, (Activity) mContext);
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        if (UnityAds.isReady(mPlacementId) && mContext != null) {
+            UnityAds.show((Activity) mContext, mPlacementId);
+        } else {
+            MoPubLog.d("Attempted to show Unity interstitial video before it was available.");
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        UnityRouter.removeListener(mPlacementId);
+    }
+
+    @Override
+    public void onUnityAdsReady(String placementId) {
+        if (loadRequested) {
+            mCustomEventInterstitialListener.onInterstitialLoaded();
+            loadRequested = false;
+        }
+    }
+
+    @Override
+    public void onUnityAdsStart(String placementId) {
+        mCustomEventInterstitialListener.onInterstitialShown();
+    }
+
+    @Override
+    public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+        if (finishState == UnityAds.FinishState.ERROR) {
+            MoPubLog.d("Unity interstitial video encountered a playback error for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+        } else {
+            MoPubLog.d("Unity interstitial video completed for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialDismissed();
+        }
+        UnityRouter.removeListener(placementId);
+    }
+
+    @Override
+    public void onUnityAdsClick(String placementId) {
+        mCustomEventInterstitialListener.onInterstitialClicked();
+    }
+
+
+    // @Override
+    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+    }
+
+    @Override
+    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+        MoPubLog.d("Unity interstitial video cache failed for placement " + mPlacementId + ".");
+        MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
+        mCustomEventInterstitialListener.onInterstitialFailed(errorCode);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityRouter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityRouter.java
new file mode 100644
index 00000000..aa3ea90b
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityRouter.java
@@ -0,0 +1,171 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.unity3d.ads.UnityAds;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+import com.unity3d.ads.metadata.MediationMetaData;
+import com.unity3d.ads.metadata.MetaData;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class UnityRouter {
+    private static String sCurrentPlacementId;
+    private static final String GAME_ID_KEY = "gameId";
+    private static final String ZONE_ID_KEY = "zoneId";
+    private static final String PLACEMENT_ID_KEY = "placementId";
+    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
+    private static Map<String, IUnityAdsExtendedListener> mUnityAdsListeners = new HashMap<>();
+
+    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity) {
+
+        // Pass the user consent from the MoPub SDK to Unity Ads as per GDPR
+        PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
+
+        if (personalInfoManager != null) {
+            ConsentStatus consentStatus = personalInfoManager.getPersonalInfoConsentStatus();
+
+            if(consentStatus == ConsentStatus.EXPLICIT_YES || consentStatus == ConsentStatus.EXPLICIT_NO) {
+                MetaData gdprMetaData = new MetaData(launcherActivity.getApplicationContext());
+
+                // Set if the user has explicitly said yes or no
+                if(consentStatus == ConsentStatus.EXPLICIT_YES) {
+                    gdprMetaData.set("gdpr.consent", true);
+                }
+                else {
+                    gdprMetaData.set("gdpr.consent", false);
+                }
+                
+                gdprMetaData.commit();
+            }
+        }
+
+        String gameId = serverExtras.get(GAME_ID_KEY);
+        if (gameId == null || gameId.isEmpty()) {
+            MoPubLog.e("gameId is missing or entered incorrectly in the MoPub UI");
+            return false;
+        }
+
+        MediationMetaData mediationMetaData = new MediationMetaData(launcherActivity);
+        mediationMetaData.setName("MoPub");
+        mediationMetaData.setVersion(MoPub.SDK_VERSION);
+        mediationMetaData.commit();
+
+        UnityAds.initialize(launcherActivity, gameId, sUnityAdsListener);
+        return true;
+    }
+
+    static String placementIdForServerExtras(Map<String, String> serverExtras, String defaultPlacementId) {
+        String placementId = null;
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else if (serverExtras.containsKey(ZONE_ID_KEY)) {
+            placementId = serverExtras.get(ZONE_ID_KEY);
+        }
+        return TextUtils.isEmpty(placementId) ? defaultPlacementId : placementId;
+    }
+
+    static void showAd(Activity activity, String placementId) {
+        sCurrentPlacementId = placementId;
+        UnityAds.show(activity, placementId);
+    }
+
+    static void addListener(String placementId, IUnityAdsExtendedListener unityListener) {
+        mUnityAdsListeners.put(placementId, unityListener);
+    }
+
+    static void removeListener(String placementId) {
+        mUnityAdsListeners.remove(placementId);
+    }
+
+    private static class UnityAdsListener implements IUnityAdsExtendedListener {
+        @Override
+        public void onUnityAdsReady(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsReady(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsStart(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsStart(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsFinish(placementId, finishState);
+            }
+        }
+
+        @Override
+        public void onUnityAdsClick(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsClick(placementId);
+            }
+        }
+
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+        }
+
+        @Override
+        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(sCurrentPlacementId);
+            if (listener != null) {
+                listener.onUnityAdsError(unityAdsError, message);
+            }
+        }
+    }
+
+    static final class UnityAdsUtils {
+        static MoPubErrorCode getMoPubErrorCode(UnityAds.UnityAdsError unityAdsError) {
+            MoPubErrorCode errorCode;
+            switch (unityAdsError) {
+                case VIDEO_PLAYER_ERROR:
+                    errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
+                    break;
+                case INVALID_ARGUMENT:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.NETWORK_NO_FILL;
+                    break;
+            }
+            return errorCode;
+        }
+    }
+
+    static class UnityAdsException extends RuntimeException {
+        private final UnityAds.UnityAdsError errorCode;
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailFormat, Object... args) {
+            this(errorCode, String.format(detailFormat, args));
+        }
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailMessage) {
+            super(detailMessage);
+            this.errorCode = errorCode;
+        }
+
+        public UnityAds.UnityAdsError getErrorCode() {
+            return errorCode;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml
index 0e4559c9..d608bc04 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml
@@ -1,4 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.mopub.mobileads.rewarded_video">
+    <uses-permission android:name="android.permission.INTERNET"/>
     <application/>
 </manifest>
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/AppLovinRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/AppLovinRewardedVideo.java
new file mode 100644
index 00000000..01cc9443
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/AppLovinRewardedVideo.java
@@ -0,0 +1,294 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.applovin.adview.AppLovinIncentivizedInterstitial;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdClickListener;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdRewardListener;
+import com.applovin.sdk.AppLovinAdVideoPlaybackListener;
+import com.applovin.sdk.AppLovinErrorCodes;
+import com.applovin.sdk.AppLovinPrivacySettings;
+import com.applovin.sdk.AppLovinSdk;
+import com.applovin.sdk.AppLovinSdkSettings;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.mobileads.CustomEventRewardedVideo;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class AppLovinRewardedVideo extends CustomEventRewardedVideo implements AppLovinAdLoadListener, AppLovinAdDisplayListener, AppLovinAdClickListener, AppLovinAdVideoPlaybackListener, AppLovinAdRewardListener {
+    private static final String DEFAULT_ZONE = "";
+
+    // A map of Zone -> `AppLovinIncentivizedInterstitial` to be shared by instances of the custom event.
+    // This prevents skipping of ads as this adapter will be re-created and preloaded (along with underlying `AppLovinIncentivizedInterstitial`)
+    // on every ad load regardless if ad was actually displayed or not.
+    private static final Map<String, AppLovinIncentivizedInterstitial> GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS = new HashMap<String, AppLovinIncentivizedInterstitial>();
+
+    private boolean initialized;
+    private String zoneId;
+
+    private AppLovinSdk sdk;
+    private AppLovinIncentivizedInterstitial incentivizedInterstitial;
+    private Activity parentActivity;
+
+    private boolean fullyWatched;
+    private MoPubReward reward;
+
+
+    //
+    // MoPub Custom Event Methods
+    //
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
+
+        // Pass the user consent from the MoPub SDK to AppLovin as per GDPR
+        boolean canCollectPersonalInfo = MoPub.canCollectPersonalInformation();
+        AppLovinPrivacySettings.setHasUserConsent(canCollectPersonalInfo, activity.getApplicationContext());
+
+        MoPubLog.d("Initializing AppLovin rewarded video...");
+
+        if (!initialized) {
+
+            sdk = retrieveSdk(serverExtras, activity);
+            sdk.setPluginVersion("MoPub-Certified-3.0.0");
+
+            initialized = true;
+
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
+        MoPubLog.d("Requesting AppLovin banner with serverExtras: " + serverExtras + " and localExtras: " + localExtras);
+
+        parentActivity = activity;
+
+        // Zones support is available on AppLovin SDK 7.5.0 and higher
+        if (AppLovinSdk.VERSION_CODE >= 750 && serverExtras != null && serverExtras.containsKey("zone_id")) {
+            zoneId = serverExtras.get("zone_id");
+        } else {
+            zoneId = DEFAULT_ZONE;
+        }
+
+
+        // Check if incentivized ad for zone already exists
+        if (GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS.containsKey(zoneId)) {
+            incentivizedInterstitial = GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS.get(zoneId);
+        } else {
+            // If this is a default Zone, create the incentivized ad normally
+            if (DEFAULT_ZONE.equals(zoneId)) {
+                incentivizedInterstitial = AppLovinIncentivizedInterstitial.create(activity);
+            }
+            // Otherwise, use the Zones API
+            else {
+                incentivizedInterstitial = AppLovinIncentivizedInterstitial.create(zoneId, sdk);
+            }
+
+            GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS.put(zoneId, incentivizedInterstitial);
+        }
+
+        incentivizedInterstitial.preload(this);
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            fullyWatched = false;
+            reward = null;
+
+            incentivizedInterstitial.show(parentActivity, null, this, this, this, this);
+        } else {
+            MoPubLog.d("Failed to show an AppLovin rewarded video before one was loaded");
+            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(getClass(), getAdNetworkId(), MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+        }
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return incentivizedInterstitial.isAdReadyToDisplay();
+    }
+
+    @Override
+    @Nullable
+    protected LifecycleListener getLifecycleListener() {
+        return null;
+    }
+
+    @Override
+    @NonNull
+    protected String getAdNetworkId() {
+        return zoneId;
+    }
+
+    @Override
+    protected void onInvalidate() {
+    }
+
+    //
+    // Ad Load Listener
+    //
+
+    @Override
+    public void adReceived(final AppLovinAd ad) {
+        MoPubLog.d("Rewarded video did load ad: " + ad.getAdIdNumber());
+
+        parentActivity.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(AppLovinRewardedVideo.this.getClass(), getAdNetworkId());
+                } catch (Throwable th) {
+                    MoPubLog.e("Unable to notify listener of successful ad load.", th);
+                }
+            }
+        });
+    }
+
+    @Override
+    public void failedToReceiveAd(final int errorCode) {
+        MoPubLog.d("Rewarded video failed to load with error: " + errorCode);
+
+        parentActivity.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    MoPubRewardedVideoManager.onRewardedVideoLoadFailure(AppLovinRewardedVideo.this.getClass(), getAdNetworkId(), toMoPubErrorCode(errorCode));
+                } catch (Throwable th) {
+                    MoPubLog.e("Unable to notify listener of failure to receive ad.", th);
+                }
+            }
+        });
+    }
+
+    //
+    // Ad Display Listener
+    //
+
+    @Override
+    public void adDisplayed(final AppLovinAd ad) {
+        MoPubLog.d("Rewarded video displayed");
+        MoPubRewardedVideoManager.onRewardedVideoStarted(getClass(), getAdNetworkId());
+    }
+
+    @Override
+    public void adHidden(final AppLovinAd ad) {
+        MoPubLog.d("Rewarded video dismissed");
+
+        if (fullyWatched && reward != null) {
+            MoPubLog.d("Rewarded" + reward.getAmount() + " " + reward.getLabel());
+            MoPubRewardedVideoManager.onRewardedVideoCompleted(getClass(), getAdNetworkId(), reward);
+        }
+
+        MoPubRewardedVideoManager.onRewardedVideoClosed(getClass(), getAdNetworkId());
+    }
+
+    //
+    // Ad Click Listener
+    //
+
+    @Override
+    public void adClicked(final AppLovinAd ad) {
+        MoPubLog.d("Rewarded video clicked");
+        MoPubRewardedVideoManager.onRewardedVideoClicked(getClass(), getAdNetworkId());
+    }
+
+    //
+    // Video Playback Listener
+    //
+
+    @Override
+    public void videoPlaybackBegan(final AppLovinAd ad) {
+        MoPubLog.d("Rewarded video playback began");
+    }
+
+    @Override
+    public void videoPlaybackEnded(final AppLovinAd ad, final double percentViewed, final boolean fullyWatched) {
+        MoPubLog.d("Rewarded video playback ended at playback percent: " + percentViewed);
+
+        this.fullyWatched = fullyWatched;
+    }
+
+    //
+    // Reward Listener
+    //
+
+    @Override
+    public void userOverQuota(final AppLovinAd appLovinAd, final Map map) {
+        MoPubLog.d("Rewarded video validation request for ad did exceed quota with response: " + map);
+    }
+
+    @Override
+    public void validationRequestFailed(final AppLovinAd appLovinAd, final int errorCode) {
+        MoPubLog.d("Rewarded video validation request for ad failed with error code: " + errorCode);
+    }
+
+    @Override
+    public void userRewardRejected(final AppLovinAd appLovinAd, final Map map) {
+        MoPubLog.d("Rewarded video validation request was rejected with response: " + map);
+    }
+
+    @Override
+    public void userDeclinedToViewAd(final AppLovinAd appLovinAd) {
+        MoPubLog.d("User declined to view rewarded video");
+        MoPubRewardedVideoManager.onRewardedVideoClosed(getClass(), getAdNetworkId());
+    }
+
+    @Override
+    public void userRewardVerified(final AppLovinAd appLovinAd, final Map map) {
+        final String currency = (String) map.get("currency");
+        final int amount = (int) Double.parseDouble((String) map.get("amount")); // AppLovin returns amount as double
+
+        MoPubLog.d("Verified " + amount + " " + currency);
+
+        reward = MoPubReward.success(currency, amount);
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private static MoPubErrorCode toMoPubErrorCode(final int applovinErrorCode) {
+        if (applovinErrorCode == AppLovinErrorCodes.NO_FILL) {
+            return MoPubErrorCode.NETWORK_NO_FILL;
+        } else if (applovinErrorCode == AppLovinErrorCodes.UNSPECIFIED_ERROR) {
+            return MoPubErrorCode.UNSPECIFIED;
+        } else if (applovinErrorCode == AppLovinErrorCodes.NO_NETWORK) {
+            return MoPubErrorCode.NO_CONNECTION;
+        } else if (applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT) {
+            return MoPubErrorCode.NETWORK_TIMEOUT;
+        } else {
+            return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+
+    /**
+     * Retrieves the appropriate instance of AppLovin's SDK from the SDK key given in the server parameters, or Android Manifest.
+     */
+    private static AppLovinSdk retrieveSdk(final Map<String, String> serverExtras, final Context context) {
+        final String sdkKey = serverExtras != null ? serverExtras.get("sdk_key") : null;
+        final AppLovinSdk sdk;
+
+        if (!TextUtils.isEmpty(sdkKey)) {
+            sdk = AppLovinSdk.getInstance(sdkKey, new AppLovinSdkSettings(), context);
+        } else {
+            sdk = AppLovinSdk.getInstance(context);
+        }
+        return sdk;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/FacebookRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/FacebookRewardedVideo.java
new file mode 100644
index 00000000..7c6dbf50
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/FacebookRewardedVideo.java
@@ -0,0 +1,197 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdSettings;
+import com.facebook.ads.RewardedVideoAd;
+import com.facebook.ads.RewardedVideoAdListener;
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventRewardedVideo;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
+public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
+
+    private static final int ONE_HOURS_MILLIS = 60 * 60 * 1000;
+    @Nullable
+    private RewardedVideoAd mRewardedVideoAd;
+    @Nullable
+    private String mPlacementId;
+    @NonNull
+    private Handler mHandler;
+    private Runnable mAdExpiration;
+
+    public FacebookRewardedVideo() {
+        mHandler = new Handler();
+        mAdExpiration = new Runnable() {
+            @Override
+            public void run() {
+                MoPubLog.d("Expiring unused Facebook Rewarded Video ad due to Facebook's 60-minute expiration policy.");
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, EXPIRED);
+
+                onInvalidate();
+            }
+        };
+    }
+
+    /**
+     * CustomEventRewardedVideo implementation
+     */
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        return null;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+        // Facebook doesn't have a dedicated initialization call, so we return false and do nothing.
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+        if (!serverExtras.isEmpty()) {
+            mPlacementId = serverExtras.get("placement_id");
+
+            if (!TextUtils.isEmpty(mPlacementId)) {
+                if (mRewardedVideoAd != null) {
+                    mRewardedVideoAd.destroy();
+                    mRewardedVideoAd = null;
+                }
+                MoPubLog.d("Creating a Facebook Rewarded Video instance, and registering callbacks.");
+                mRewardedVideoAd = new RewardedVideoAd(activity, mPlacementId);
+                mRewardedVideoAd.setAdListener(this);
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, getAdNetworkId(), MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                MoPubLog.d(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR.toString());
+                MoPubLog.d("Placement ID is null or empty.");
+                return;
+            }
+        }
+
+        if (mRewardedVideoAd.isAdLoaded()) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
+            return;
+        }
+
+        if (mRewardedVideoAd != null) {
+            MoPubLog.d("Sending Facebook an ad request.");
+            AdSettings.setMediationService("MOPUB_" + MoPub.SDK_VERSION);
+
+            final String adm = serverExtras.get(DataKeys.ADM_KEY);
+            if (!TextUtils.isEmpty(adm)) {
+                mRewardedVideoAd.loadAdFromBid(adm);
+            } else {
+                mRewardedVideoAd.loadAd();
+            }
+        }
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return (mRewardedVideoAd != null) ? (mRewardedVideoAd.getPlacementId()) : ("");
+    }
+
+    @Override
+    protected void onInvalidate() {
+        cancelExpirationTimer();
+        if (mRewardedVideoAd != null) {
+            MoPubLog.d("Performing cleanup tasks...");
+            mRewardedVideoAd.setAdListener(null);
+            mRewardedVideoAd.destroy();
+            mRewardedVideoAd = null;
+        }
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return mRewardedVideoAd != null && mRewardedVideoAd.isAdLoaded();
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            MoPubLog.d("Facebook Rewarded Video creative is available. Showing...");
+            mRewardedVideoAd.show();
+        } else {
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+            MoPubLog.d("Facebook Rewarded Video creative is not available. Try re-requesting.");
+        }
+    }
+
+    @Override
+    public void onRewardedVideoCompleted() {
+        MoPubLog.d("Facebook Rewarded Video creative is completed. Awarding the user.");
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(FacebookRewardedVideo.class, mPlacementId, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
+    }
+
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        cancelExpirationTimer();
+        MoPubRewardedVideoManager.onRewardedVideoStarted(FacebookRewardedVideo.class, mPlacementId);
+        MoPubLog.d("Facebook Rewarded Video creative started playing.");
+    }
+
+    @Override
+    public void onRewardedVideoClosed() {
+        MoPubRewardedVideoManager.onRewardedVideoClosed(FacebookRewardedVideo.class, mPlacementId);
+        MoPubLog.d("Facebook Rewarded Video creative closed.");
+    }
+
+    @Override
+    public void onAdLoaded(Ad ad) {
+        cancelExpirationTimer();
+        mHandler.postDelayed(mAdExpiration, ONE_HOURS_MILLIS);
+
+        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
+        MoPubLog.d("Facebook Rewarded Video creative cached.");
+    }
+
+    @Override
+    public void onAdClicked(Ad ad) {
+        MoPubRewardedVideoManager.onRewardedVideoClicked(FacebookRewardedVideo.class, mPlacementId);
+        MoPubLog.d("Facebook Rewarded Video creative clicked.");
+    }
+
+    @Override
+    public void onError(Ad ad, AdError adError) {
+        cancelExpirationTimer();
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, mapErrorCode(adError.getErrorCode()));
+        MoPubLog.d("Loading/Playing Facebook Rewarded Video creative encountered an error: " + mapErrorCode(adError.getErrorCode()).toString());
+    }
+
+    @NonNull
+    private static MoPubErrorCode mapErrorCode(int error) {
+        switch (error) {
+            case AdError.NO_FILL_ERROR_CODE:
+                return MoPubErrorCode.NETWORK_NO_FILL;
+            case AdError.INTERNAL_ERROR_CODE:
+                return MoPubErrorCode.INTERNAL_ERROR;
+            case AdError.NETWORK_ERROR_CODE:
+                return MoPubErrorCode.NO_CONNECTION;
+            default:
+                return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+
+    private void cancelExpirationTimer() {
+        mHandler.removeCallbacks(mAdExpiration);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/GooglePlayServicesRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/GooglePlayServicesRewardedVideo.java
new file mode 100644
index 00000000..919054e1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/GooglePlayServicesRewardedVideo.java
@@ -0,0 +1,329 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.google.ads.mediation.admob.AdMobAdapter;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.MobileAds;
+import com.google.android.gms.ads.reward.RewardItem;
+import com.google.android.gms.ads.reward.RewardedVideoAd;
+import com.google.android.gms.ads.reward.RewardedVideoAdListener;
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
+import com.mopub.mobileads.CustomEventRewardedVideo;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
+        RewardedVideoAdListener {
+    private static final String TAG = "MoPubToAdMobRewarded";
+
+    /**
+     * The current version of the adapter.
+     */
+    private static final String ADAPTER_VERSION = "0.1.0";
+
+    /**
+     * Key to obtain AdMob application ID from the server extras provided by MoPub.
+     */
+    private static final String KEY_EXTRA_APPLICATION_ID = "appid";
+
+    /**
+     * Key to obtain AdMob ad unit ID from the extras provided by MoPub.
+     */
+    private static final String KEY_EXTRA_AD_UNIT_ID = "adunit";
+
+    /**
+     * Flag to determine whether or not the adapter has been initialized.
+     */
+    private static AtomicBoolean sIsInitialized;
+
+    /**
+     * Google Mobile Ads rewarded video ad unit ID.
+     */
+    private String mAdUnitId;
+
+    /**
+     * The Google Rewarded Video Ad instance.
+     */
+    private RewardedVideoAd mRewardedVideoAd;
+
+    /**
+     * Flag to indicate whether the rewarded video has cached. AdMob's isLoaded() call crashes the
+     * app when called from a thread other than the main UI thread. Since this is unavoidable with
+     * some platforms, e.g. Unity, we implement this workaround.
+     */
+    private boolean isAdLoaded;
+
+    /**
+     * A {@link LifecycleListener} used to forward the activity lifecycle events from MoPub SDK to
+     * Google Mobile Ads SDK.
+     */
+    private LifecycleListener mLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull Activity activity) {
+            super.onPause(activity);
+            if (mRewardedVideoAd != null) {
+                mRewardedVideoAd.pause(activity);
+            }
+        }
+
+        @Override
+        public void onResume(@NonNull Activity activity) {
+            super.onResume(activity);
+            if (mRewardedVideoAd != null) {
+                mRewardedVideoAd.resume(activity);
+            }
+        }
+    };
+
+    public GooglePlayServicesRewardedVideo() {
+        sIsInitialized = new AtomicBoolean(false);
+    }
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        return mLifecycleListener;
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        // Google rewarded videos do not have a unique identifier for each ad; using ad unit ID as
+        // an identifier for all ads.
+        return mAdUnitId;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mRewardedVideoAd != null) {
+            mRewardedVideoAd.setRewardedVideoAdListener(null);
+            mRewardedVideoAd = null;
+        }
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+                                            @NonNull Map<String, Object> localExtras,
+                                            @NonNull Map<String, String> serverExtras)
+            throws Exception {
+        if (!sIsInitialized.getAndSet(true)) {
+            Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
+
+            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_APPLICATION_ID))) {
+                MobileAds.initialize(launcherActivity);
+            } else {
+                MobileAds.initialize(launcherActivity, serverExtras.get(KEY_EXTRA_APPLICATION_ID));
+            }
+
+            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
+                // Using class name as the network ID for this callback since the ad unit ID is
+                // invalid.
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                        GooglePlayServicesRewardedVideo.class,
+                        GooglePlayServicesRewardedVideo.class.getSimpleName(),
+                        MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                return false;
+            }
+
+            mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
+
+            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(launcherActivity);
+            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
+            return true;
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity,
+                                          @NonNull Map<String, Object> localExtras,
+                                          @NonNull Map<String, String> serverExtras)
+            throws Exception {
+        isAdLoaded = false;
+
+        if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
+            // Using class name as the network ID for this callback since the ad unit ID is
+            // invalid.
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                    GooglePlayServicesRewardedVideo.class,
+                    GooglePlayServicesRewardedVideo.class.getSimpleName(),
+                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
+
+        if (mRewardedVideoAd == null) {
+            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(activity);
+            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
+        }
+
+        /* AdMob's isLoaded() has to be called on the main thread to avoid multithreading crashes
+        when mediating on Unity */
+        new Handler(Looper.getMainLooper()).post(new Runnable() {
+            @Override
+            public void run() {
+                if (mRewardedVideoAd.isLoaded()) {
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadSuccess(GooglePlayServicesRewardedVideo.class, mAdUnitId);
+                } else {
+                    AdRequest.Builder builder = new AdRequest.Builder();
+                    builder.setRequestAgent("MoPub");
+
+                    // Consent collected from the MoPub’s consent dialogue should not be used to set up
+                    // Google's personalization preference. Publishers should work with Google to be GDPR-compliant.
+                    forwardNpaIfSet(builder);
+
+                    AdRequest adRequest = builder.build();
+                    mRewardedVideoAd.loadAd(mAdUnitId, adRequest);
+                }
+            }
+        });
+    }
+
+    private void forwardNpaIfSet(AdRequest.Builder builder) {
+
+        // Only forward the "npa" bundle if it is explicitly set. Otherwise, don't attach it with the ad request.
+        if (GooglePlayServicesMediationSettings.getNpaBundle() != null &&
+                !GooglePlayServicesMediationSettings.getNpaBundle().isEmpty()) {
+            builder.addNetworkExtrasBundle(AdMobAdapter.class, GooglePlayServicesMediationSettings.getNpaBundle());
+        }
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return mRewardedVideoAd != null && isAdLoaded;
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            mRewardedVideoAd.show();
+        } else {
+            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
+                    GooglePlayServicesRewardedVideo.class,
+                    mAdUnitId,
+                    getMoPubErrorCode(AdRequest.ERROR_CODE_INTERNAL_ERROR));
+        }
+    }
+
+    @Override
+    public void onRewardedVideoAdLoaded() {
+        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+        isAdLoaded = true;
+    }
+
+    @Override
+    public void onRewardedVideoAdOpened() {
+        // MoPub SDK does not have an equivalent callback for an ad opened event. Do nothing.
+    }
+
+    @Override
+    public void onRewardedVideoStarted() {
+        MoPubRewardedVideoManager.onRewardedVideoStarted(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+    }
+
+    @Override
+    public void onRewardedVideoAdClosed() {
+        MoPubRewardedVideoManager.onRewardedVideoClosed(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+    }
+
+    @Override
+    public void onRewardedVideoCompleted() {
+        // Already notifying MoPub of playback completion in onRewarded(). Do nothing.
+    }
+
+    @Override
+    public void onRewarded(RewardItem rewardItem) {
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId,
+                MoPubReward.success(rewardItem.getType(), rewardItem.getAmount()));
+    }
+
+    @Override
+    public void onRewardedVideoAdLeftApplication() {
+        MoPubRewardedVideoManager.onRewardedVideoClicked(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+    }
+
+    @Override
+    public void onRewardedVideoAdFailedToLoad(int error) {
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId,
+                getMoPubErrorCode(error));
+    }
+
+    /**
+     * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+     *
+     * @param error Google Mobile Ads SDK error code.
+     * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+     * code.
+     */
+    private MoPubErrorCode getMoPubErrorCode(int error) {
+        MoPubErrorCode errorCode;
+        switch (error) {
+            case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                break;
+            case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                break;
+            case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                errorCode = MoPubErrorCode.NO_CONNECTION;
+                break;
+            case AdRequest.ERROR_CODE_NO_FILL:
+                errorCode = MoPubErrorCode.NO_FILL;
+                break;
+            default:
+                errorCode = MoPubErrorCode.UNSPECIFIED;
+        }
+        return errorCode;
+    }
+
+    public static final class GooglePlayServicesMediationSettings implements MediationSettings {
+        private static Bundle npaBundle;
+
+        public GooglePlayServicesMediationSettings() {
+        }
+
+        public GooglePlayServicesMediationSettings(Bundle bundle) {
+            npaBundle = bundle;
+        }
+
+        public void setNpaBundle(Bundle bundle) {
+            npaBundle = bundle;
+        }
+
+        /* The MoPub Android SDK queries MediationSettings from the rewarded video code
+        (MoPubRewardedVideoManager.getGlobalMediationSettings). That API might not always be
+        available to publishers importing the modularized SDK(s) based on select ad formats.
+        This is a workaround to statically get the "npa" Bundle passed to us via the constructor. */
+        private static Bundle getNpaBundle() {
+            return npaBundle;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/UnityRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/UnityRewardedVideo.java
new file mode 100644
index 00000000..521999af
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/ads/adapters/UnityRewardedVideo.java
@@ -0,0 +1,173 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventRewardedVideo;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+import com.unity3d.ads.UnityAds;
+
+import java.util.Map;
+
+public class UnityRewardedVideo extends CustomEventRewardedVideo {
+    private static final String GAME_ID_KEY = "gameId";
+    private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
+    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
+    private static String sPlacementId = "";
+
+    @Nullable
+    private Activity mLauncherActivity;
+
+    @Override
+    @NonNull
+    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return sUnityAdsListener;
+    }
+
+    @Override
+    @NonNull
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+    @Override
+    @NonNull
+    public String getAdNetworkId() {
+        return sPlacementId;
+    }
+
+    @Override
+    public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+                                         @NonNull final Map<String, Object> localExtras,
+                                         @NonNull final Map<String, String> serverExtras) throws Exception {
+        synchronized (UnityRewardedVideo.class) {
+            if (UnityAds.isInitialized()) {
+                return false;
+            }
+
+            try {
+                UnityRouter.initUnityAds(serverExtras, launcherActivity);
+                UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+            } catch (UnityRouter.UnityAdsException e) {
+                MoPubLog.e("Failed to initialize Unity Ads.");
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
+            }
+
+            return true;
+        }
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity,
+                                          @NonNull Map<String, Object> localExtras,
+                                          @NonNull Map<String, String> serverExtras) throws Exception {
+
+        sPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, sPlacementId);
+        mLauncherActivity = activity;
+
+        UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+        if (hasVideoAvailable()) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
+        }
+    }
+
+    @Override
+    public boolean hasVideoAvailable() {
+        return UnityAds.isReady(sPlacementId);
+    }
+
+    @Override
+    public void showVideo() {
+        if (hasVideoAvailable()) {
+            UnityAds.show(mLauncherActivity, sPlacementId);
+        } else {
+            MoPubLog.d("Attempted to show Unity rewarded video before it was available.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        UnityRouter.removeListener(sPlacementId);
+    }
+
+    private static final class UnityLifecycleListener extends BaseLifecycleListener {
+        @Override
+        public void onCreate(@NonNull final Activity activity) {
+            super.onCreate(activity);
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+        }
+    }
+
+    private static class UnityAdsListener implements IUnityAdsExtendedListener,
+            CustomEventRewardedVideoListener {
+        @Override
+        public void onUnityAdsReady(String placementId) {
+            if (placementId.equals(sPlacementId)) {
+                MoPubLog.d("Unity rewarded video cached for placement " + placementId + ".");
+                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsStart(String placementId) {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(UnityRewardedVideo.class, placementId);
+            MoPubLog.d("Unity rewarded video started for placement " + placementId + ".");
+        }
+
+        @Override
+        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+            MoPubLog.d("Unity Ad finished with finish state = " + finishState);
+            if (finishState == UnityAds.FinishState.ERROR) {
+                MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
+                        UnityRewardedVideo.class,
+                        sPlacementId,
+                        MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+                MoPubLog.d("Unity rewarded video encountered a playback error for placement " + placementId);
+            } else if (finishState == UnityAds.FinishState.COMPLETED) {
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                        UnityRewardedVideo.class,
+                        sPlacementId,
+                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
+                MoPubLog.d("Unity rewarded video completed for placement " + placementId);
+            } else if (finishState == UnityAds.FinishState.SKIPPED) {
+                MoPubLog.d("Unity ad was skipped, no reward will be given.");
+            }
+            MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, sPlacementId);
+            UnityRouter.removeListener(placementId);
+        }
+
+        @Override
+        public void onUnityAdsClick(String placementId) {
+            MoPubRewardedVideoManager.onRewardedVideoClicked(UnityRewardedVideo.class, placementId);
+            MoPubLog.d("Unity rewarded video clicked for placement " + placementId + ".");
+        }
+
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+        }
+
+        @Override
+        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+            MoPubLog.d("Unity rewarded video cache failed for placement " + sPlacementId + ".");
+            MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, errorCode);
+        }
+    }
+
+    @VisibleForTesting
+    void reset() {
+        sPlacementId = "";
+    }
+}
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index f0bf49f6..ace26ed9 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -77,6 +77,9 @@ android {
 }
 
 dependencies {
-    api 'com.android.support:support-v4:26.1.0'
-    api 'com.android.support:support-annotations:26.1.0'
+    /**
+     *  moved to base module update when this updates
+     */
+    //api 'com.android.support:support-v4:26.1.0'
+    //api 'com.android.support:support-annotations:26.1.0'
 }
